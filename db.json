{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/baidu_verify_SsYi6TvIxL.html","path":"baidu_verify_SsYi6TvIxL.html","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay1.jpg","path":"images/alipay1.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay1.jpg","path":"images/wechatpay1.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/README.md","hash":"0819bc02d0e10791ca9a5f780356a1c66680efb6","modified":1522601597089},{"_id":"source/CNAME","hash":"d113af01bc4c817249c7fe1118c6cf46dc06649a","modified":1522601597089},{"_id":"source/.DS_Store","hash":"c59429c680b2da529457185e1394de507c2f2655","modified":1522601597089},{"_id":"source/baidu_verify_SsYi6TvIxL.html","hash":"9eaad171e9bdfeb7507fe488d42edf886071a4a8","modified":1522601597089},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1522601597141},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1522601597142},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1522601597142},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1522601597143},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1522601597144},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1522601597144},{"_id":"themes/next/.DS_Store","hash":"41eccc006d4b7e45416cf21332bc5c64f2197821","modified":1522601597322},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1522601597144},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1522601597144},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1522601597145},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1522601597145},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1522601597145},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1522601597145},{"_id":"themes/next/_config.yml","hash":"9b957e82bfd46395302a98032080c5bfefcd9c7e","modified":1522601597146},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1522601597146},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1522601597146},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1522601597193},{"_id":"source/about/index.md","hash":"9d74b4d87ca2754d1ecf1e859df91662ba963aba","modified":1522601597088},{"_id":"source/_posts/2013-11-reading-notes.md","hash":"b70f660f3905e02cd9edf278fd0365355432f7fa","modified":1522601597055},{"_id":"source/_posts/2013-12-reading-notes.md","hash":"2a39904f43cad1a51501586f946f7d093f352802","modified":1522601597054},{"_id":"source/_posts/2014-01-reading-notes.md","hash":"a3aa611cfcea7b60ed4a2f39158ef6d8ae503ac9","modified":1522601597074},{"_id":"source/_posts/2014-02-reading-notes.md","hash":"85248717a79ffead693e413491cf186a5f7f0678","modified":1522601597075},{"_id":"source/_posts/2014-03-reading-notes.md","hash":"e9f22a995a5b2bc30c49d1c717457960516ea1f8","modified":1522601597075},{"_id":"source/_posts/2014-04-reading-notes.md","hash":"56741090cda93d83ddd893c7311d6b31b781af61","modified":1522601597074},{"_id":"source/_posts/2014-05-reading-notes.md","hash":"8132a5a7fbf42c7c346f910996bc955cc1d2ecb0","modified":1522601597076},{"_id":"source/_posts/2014-06-reading-notes.md","hash":"b83a314bdba1630335f26fb55d5c9d80516fe33d","modified":1522601597076},{"_id":"source/_posts/2014-08-reading-notes.md","hash":"fea9c1d26eff714de16b5b1b1efb65f405ff8ff8","modified":1522601597073},{"_id":"source/_posts/2014-09-reading-notes.md","hash":"4d029c00319f54e18a57bf3b6517b2e8ba0799bd","modified":1522601597078},{"_id":"source/_posts/2014-10-reading-notes.md","hash":"67cb23044b5d71662dff0eecbb575852174d86c4","modified":1522601597078},{"_id":"source/_posts/.DS_Store","hash":"8ec1669723951290a32f750e8722d85b08c95295","modified":1522601597059},{"_id":"source/_posts/2014-12-reading-notes.md","hash":"474fcdc9671cd5707b8a3b9c0b19b39eed07fefa","modified":1522601597079},{"_id":"source/_posts/2014-11-reading-notes.md","hash":"cac78399be3034b843c59ea9af2c80e70e5b5fc6","modified":1522601597078},{"_id":"source/_posts/2015-01-reading-notes.md","hash":"5840b63de0aecc8097e7981be5892748f8ba433c","modified":1522601597074},{"_id":"source/_posts/2015-02-reading-notes.md","hash":"42a4460b88484ec81fc91ef4449ff3640d21ec8e","modified":1522601597081},{"_id":"source/_posts/2015-03-reading-notes.md","hash":"dc31be7fe84896045fd1e97a32e84a6751a62bdc","modified":1522603232815},{"_id":"source/_posts/2015-04-reading-notes.md","hash":"ff728aa2ea8603e36feae1df0423dd16b0b3a24b","modified":1522603261434},{"_id":"source/_posts/2015-05-reading-notes.md","hash":"ff56b9a58696cf6e924fc4942933fd33f5894d53","modified":1522601597080},{"_id":"source/_posts/2015-11-reading-notes.md","hash":"d91968a839f6a77786ac66007178a49d1ff66897","modified":1522601597080},{"_id":"source/_posts/2016-04-reading-notes.md","hash":"f2ddaf1fe938962c9f41967bb0334bc826c9062b","modified":1522601597079},{"_id":"source/_posts/2016-02-reading-notes.md","hash":"c7e6e21a6f1b2c665486942e6819602d303b13c7","modified":1522601597087},{"_id":"source/_posts/2016-05-reading-notes.md","hash":"7ce3638c0ccf14a5dd6962fc7c2450cb436d79e0","modified":1522601597079},{"_id":"source/_posts/2016-06-reading-notes.md","hash":"3cc39f60d1b333d3ba0ac8fbc395008b1257ac59","modified":1522601597087},{"_id":"source/_posts/2016-08-reading-notes.md","hash":"18b0b3cba43f7f812e55b953947198d85e0d2e91","modified":1522601597087},{"_id":"source/_posts/be-happy.md","hash":"c8b9bb4d8919f0cf67598651321a84cd7ae7915d","modified":1522601597080},{"_id":"source/_posts/cxf-trans-filed-null.md","hash":"4b7767752ca49d763457cb70693b4a5e599a9646","modified":1522601597060},{"_id":"source/_posts/cxf-tuning.md","hash":"5eee0763edd8dcd9b1b4bb26085ff5534f1c8003","modified":1522601597077},{"_id":"source/_posts/cxf-unexpected-element.md","hash":"ec386a978569c0f7323c065d2bd08cb891ec8e38","modified":1522601597076},{"_id":"source/_posts/database-version.md","hash":"792e24e11fe4b7270534c46ff928077190cb093f","modified":1522601597078},{"_id":"source/_posts/dependency-management.md","hash":"cec872c1aa46345122d673715e46ab4b9a215bca","modified":1522601597075},{"_id":"source/_posts/docker.md","hash":"9b1f1095724f559db0408feb9f5a5ca35bde53c7","modified":1522601597083},{"_id":"source/_posts/dubbo-imbalance.md","hash":"d062e376f1650175f6ec68a7b6e88c6085469aad","modified":1522601597081},{"_id":"source/_posts/env-aware.md","hash":"a2fa854809cb425710a83590c37eee37946d7457","modified":1522601597075},{"_id":"source/_posts/hessian-java-serialization.md","hash":"2cf80c86a1376813776979867fa5b2c372b900ea","modified":1522601597055},{"_id":"source/_posts/google-java-style.md","hash":"675f19bd7b58841176c88da0ba6d2243b6b48c3f","modified":1522601597082},{"_id":"source/_posts/hibernate-no-session-in-dubbo.md","hash":"6f1031d9fdb314ef7d28a4f1639c0123f991f0ce","modified":1522601597077},{"_id":"source/_posts/java-serialization.md","hash":"294a60a14ac94cf252c18256fb08b09b2702e9ad","modified":1522601597054},{"_id":"source/_posts/jsr303.md","hash":"b1318d81fa87ca5475b6c1a8ee0820084ca97d5d","modified":1522601597054},{"_id":"source/_posts/jdk7-exception.md","hash":"e9e62c9869706b8a26d3d681882142a88b6cad74","modified":1522601597060},{"_id":"source/_posts/kryo-oom.md","hash":"4068fc297c6d7b002aaaa2815557bbc2cabf2121","modified":1522601597083},{"_id":"source/_posts/log-tuning.md","hash":"f1edeab81f76afc49504afff9545fc1874bd4640","modified":1522601597060},{"_id":"source/_posts/maven-transitive-dependency-exception.md","hash":"61a76e2e3653506dee734bce65bb0ec66b5a34e1","modified":1522601597076},{"_id":"source/_posts/monitor-tools.md","hash":"02c0ac2a035a011446b00fb817e893c2e82041c1","modified":1522601597074},{"_id":"source/_posts/pojo-perperty.md","hash":"2ca2ccc9a9c7f882a0e8923332ee6782941de06a","modified":1522601597080},{"_id":"source/_posts/serialization-framework.md","hash":"687ef395785428c0aea784c74ee27d22f2c303d9","modified":1522601597079},{"_id":"source/_posts/ssh-tunneling-and-JMX-for-remote-monitor.md","hash":"f92231d8da57a3a39bfc42da48791b73d3de8f83","modified":1522601597085},{"_id":"source/_posts/thinking-clearly-about-performance.md","hash":"7b056bdcd6e50a64e69c8d3a562bbc8ebb513a2e","modified":1522601597073},{"_id":"source/_posts/vagrant.md","hash":"415aeb6e18a4dcbb8daf90209157968070bab61d","modified":1522601597077},{"_id":"source/_posts/web-layer-cluster.md","hash":"67f46f065361e79dd5dd2702ca87ba78773de0ff","modified":1522601597055},{"_id":"source/_posts/why-react.md","hash":"2c40c337d42c2effb754a8dcc1c88354febe803f","modified":1522601597080},{"_id":"source/_posts/zero-copy.md","hash":"c52190875ba1d87ba7a486e082f359219c7d8b50","modified":1522601597083},{"_id":"source/_posts/zookeeper-dev-ops.md","hash":"5eb9ad28df1daa27fd83a43e29c00b84f49bb9cf","modified":1522601597054},{"_id":"source/_posts/一次技术问答.md","hash":"53c5fa4e3f894c9f7aa2b13146f9da8971d3c064","modified":1522601597087},{"_id":"source/categories/index.md","hash":"21c789faeb7e2ce106a774a1a3e1be24cceac9be","modified":1522601597088},{"_id":"source/tags/index.md","hash":"774c60c395dbbae7061e6e1015f69d6273337e34","modified":1522601597088},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1522601597142},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1522601597142},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1522601597143},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1522601597143},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1522601597147},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1522601597147},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1522601597147},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1522601597148},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1522601597148},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1522601597148},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1522601597148},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1522601597148},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1522601597149},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1522601597149},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1522601597149},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1522601597149},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1522601597150},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1522601597150},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1522601597150},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1522601597150},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1522601597151},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1522601597191},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1522601597191},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1522601597192},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1522601597192},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1522601597192},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1522601597192},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1522601597192},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1522601597193},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1522601597193},{"_id":"themes/next/source/.DS_Store","hash":"287bed08d0a64835e14d73284187e0292f65b1be","modified":1522601597321},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1522601597321},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1522601597322},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1522601597322},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522601597253},{"_id":"source/_posts/2014-03-reading-notes/volatilevsstaticinjava.png","hash":"65da4b0144777e90a125c1bf27017ed40f83e253","modified":1522601597086},{"_id":"source/_posts/2014-11-reading-notes/access_delay_bandwidth.gif","hash":"48634717de4210a5641e979b0ad1b6c326205dea","modified":1522601597086},{"_id":"source/_posts/images/.DS_Store","hash":"a16517bd54dd321d45b1a1ab381c9ff06944ddc3","modified":1522601597061},{"_id":"source/_posts/kryo-oom/1.jpg","hash":"9f0d6a65a88d126f36e787a09c10f1ac9630aa7e","modified":1522601597072},{"_id":"source/_posts/kryo-oom/4.jpg","hash":"f77391cf0d58eeaecde2585a6d82a2b13e1b95e2","modified":1522601597070},{"_id":"source/_posts/kryo-oom/5.jpg","hash":"aab46bfe933115fc42b4bd380359264f4db71a60","modified":1522601597071},{"_id":"source/_posts/ssh-tunneling-and-JMX-for-remote-monitor/network_topology.jpg","hash":"547a17c580645d1d5cd9f2c81330ff31b2952d1c","modified":1522601597084},{"_id":"source/_posts/ssh-tunneling-and-JMX-for-remote-monitor/xshell_ssh_tunneling1.jpg","hash":"803300617b5d31c6f75c9e6ee6aa5b39468277a6","modified":1522601597084},{"_id":"source/_posts/ssh-tunneling-and-JMX-for-remote-monitor/xshell_ssh_tunneling2.jpg","hash":"af517a6b5fc9420b08b069f414d782b835ce30e0","modified":1522601597084},{"_id":"source/_posts/ssh-tunneling-and-JMX-for-remote-monitor/xshell_ssh_tunneling3.jpg","hash":"abccfa6fe9891bad86fec085b4c98667748550b2","modified":1522601597085},{"_id":"source/_posts/why-react/reactjs.png","hash":"3bbc2223a3f58938ed032d4bd16f6e8a04552aa3","modified":1522601597085},{"_id":"source/_posts/zero-copy/figure4.gif","hash":"fcd8edb62c49d58f7f23f22ef5660b39c4743d21","modified":1522601597070},{"_id":"source/_posts/zero-copy/figure2.gif","hash":"417cca4f01801356976c30ff52f943d3b59a6d21","modified":1522601597068},{"_id":"source/_posts/zero-copy/figure1.gif","hash":"23a7b435ed9b35c207cfcb95be48a511a7140e82","modified":1522601597069},{"_id":"source/_posts/zero-copy/figure3.gif","hash":"b56822ea57c197db502a396ca19a3dbc99e2723b","modified":1522601597068},{"_id":"source/_posts/zero-copy/figure5.gif","hash":"0f1c4a31d191971b78fb81ac849702162161732e","modified":1522601597070},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1522601597151},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1522601597151},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1522601597152},{"_id":"themes/next/layout/_macro/post.swig","hash":"00ca04166bf1d867c0df9e87f47a29faf916eac8","modified":1522601597152},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1522601597152},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1522601597152},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1522601597153},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1522601597153},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1522601597153},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1522601597154},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1522601597154},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1522601597155},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1522601597155},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1522601597155},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1522601597155},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1522601597187},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1522601597187},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1522601597188},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1522601597188},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1522601597188},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1522601597189},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1522601597188},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1522601597179},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1522601597179},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1522601597181},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1522601597194},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1522601597194},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1522601597194},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1522601597195},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1522601597195},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1522601597195},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1522601597195},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1522601597196},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1522601597196},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1522601597252},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1522601597253},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1522601597253},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1522601597253},{"_id":"themes/next/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1522601597257},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1522601597254},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1522601597254},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1522601597254},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1522601597254},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1522601597255},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1522601597255},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1522601597255},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1522601597255},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1522601597255},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1522601597256},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1522601597256},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1522601597256},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1522601597256},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1522601597257},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1522601597257},{"_id":"source/_posts/2016-02-reading-notes/devops.jpg","hash":"384a893eaa69ca19c16c5100e69e8cfd182e7da9","modified":1522601597086},{"_id":"source/_posts/docker/devops.jpg","hash":"384a893eaa69ca19c16c5100e69e8cfd182e7da9","modified":1522601597082},{"_id":"source/_posts/kryo-oom/2.jpg","hash":"895772e290dfbb271e278dce756bccb09fed5d73","modified":1522601597071},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522601597180},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522601597180},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522601597221},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522601597221},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522601597222},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522601597252},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522601597252},{"_id":"themes/next/source/images/alipay1.jpg","hash":"5d767b6b7c841e02f1ef97dedbe1c89ec3802f43","modified":1522601597258},{"_id":"themes/next/source/images/alipay.jpg","hash":"4e3a136e33dd00d5ec32f45b4242fc86d5a56f51","modified":1522601597258},{"_id":"themes/next/source/images/wechatpay1.jpg","hash":"abd178116b797b397b58521b2aa8beb318222dbc","modified":1522601597259},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"c2b757362a9aa32f063b3f97c823fc5677afbfba","modified":1522601597258},{"_id":"source/_posts/docker/docker-command.jpg","hash":"070e2331fac7efef26b6176bfe1178c5890edd81","modified":1522601597082},{"_id":"source/_posts/images/reading_notes/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1522601597067},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1522601597154},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1522601597154},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1522601597156},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1522601597156},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1522601597178},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1522601597178},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1522601597178},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1522601597178},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1522601597179},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1522601597181},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1522601597182},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1522601597182},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1522601597182},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1522601597182},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1522601597183},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1522601597183},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1522601597183},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1522601597183},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1522601597183},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1522601597184},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1522601597184},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1522601597184},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1522601597185},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1522601597185},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1522601597185},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1522601597186},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1522601597186},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1522601597186},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1522601597186},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1522601597187},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"6590518ffcd0e6e5af247860163eca801d7a77a7","modified":1522601597187},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1522601597190},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1522601597190},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1522601597190},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1522601597191},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1522601597180},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1522601597180},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1522601597181},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1522601597221},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1522601597221},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1522601597221},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1522601597222},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1522601597251},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1522601597252},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1522601597252},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1522601597252},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1522601597259},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1522601597260},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1522601597260},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1522601597260},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1522601597260},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1522601597260},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1522601597261},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1522601597261},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1522601597262},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1522601597262},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1522601597262},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1522601597269},{"_id":"themes/next/source/images/avatar.jpg","hash":"0bd76f026119deff989dc5beccd3c1ed3a43fa44","modified":1522601597259},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1522601597270},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1522601597271},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1522601597267},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1522601597269},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1522601597277},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1522601597277},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1522601597277},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1522601597277},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1522601597279},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1522601597279},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1522601597279},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1522601597279},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1522601597280},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1522601597284},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1522601597284},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1522601597284},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1522601597285},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1522601597285},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1522601597285},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1522601597286},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1522601597286},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1522601597286},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1522601597286},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1522601597287},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1522601597287},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1522601597287},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1522601597287},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1522601597288},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1522601597288},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1522601597288},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1522601597289},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1522601597289},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1522601597289},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1522601597289},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1522601597315},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1522601597315},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1522601597316},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1522601597316},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1522601597316},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1522601597317},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1522601597318},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1522601597319},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1522601597319},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1522601597319},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1522601597320},{"_id":"source/_posts/kryo-oom/3.jpg","hash":"84c09a00693cc554cf88e96fbed7d79844e7bb71","modified":1522601597072},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1522601597284},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1522601597189},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1522601597190},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1522601597198},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1522601597198},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1522601597198},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1522601597199},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1522601597199},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1522601597206},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1522601597214},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1522601597219},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1522601597219},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1522601597219},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1522601597220},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1522601597220},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1522601597220},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1522601597220},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1522601597222},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1522601597245},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1522601597246},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1522601597246},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1522601597246},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1522601597246},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1522601597247},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1522601597247},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1522601597248},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1522601597248},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1522601597249},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1522601597249},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1522601597249},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1522601597250},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1522601597250},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1522601597250},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1522601597251},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1522601597251},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1522601597251},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1522601597261},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1522601597265},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1522601597266},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1522601597267},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1522601597271},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1522601597272},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1522601597273},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1522601597276},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1522601597276},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1522601597276},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1522601597278},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1522601597278},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1522601597280},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1522601597280},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1522601597281},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1522601597272},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1522601597272},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1522601597273},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1522601597318},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1522601597318},{"_id":"source/_posts/images/avatar.jpg","hash":"14624547c94a4de195a6fe68f861e8d6ce6bf5fd","modified":1522601597065},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1522601597266},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1522601597283},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1522601597319},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1522601597283},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1522601597200},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1522601597200},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1522601597201},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1522601597201},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1522601597201},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1522601597202},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1522601597203},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1522601597203},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1522601597204},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1522601597205},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1522601597204},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1522601597205},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1522601597205},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1522601597206},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1522601597207},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1522601597207},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1522601597207},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1522601597208},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1522601597208},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1522601597208},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1522601597208},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1522601597209},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1522601597209},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1522601597209},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1522601597210},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1522601597210},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1522601597210},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1522601597210},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1522601597211},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1522601597211},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1522601597211},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1522601597212},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1522601597212},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1522601597212},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1522601597212},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1522601597213},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1522601597213},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1522601597213},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1522601597213},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1522601597214},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1522601597214},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1522601597215},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1522601597215},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1522601597215},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1522601597215},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1522601597216},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1522601597216},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1522601597216},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1522601597216},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1522601597217},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1522601597217},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1522601597217},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1522601597217},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1522601597218},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1522601597218},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1522601597218},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1522601597218},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1522601597218},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1522601597247},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1522601597248},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1522601597250},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1522601597263},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1522601597263},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1522601597274},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1522601597274},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1522601597274},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1522601597275},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1522601597275},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1522601597275},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1522601597264},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1522601597265},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1522601597265},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1522601597282},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1522601597281},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1522601597282},{"_id":"source/_posts/images/git-api.png","hash":"6660a51d43eb7aeb5034483cc87ada67edbaee13","modified":1522601597061},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1522601597268},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1522601597317},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1522601597282}],"Category":[{"name":"java","_id":"cjfh2ksf10004p0ug2uxn1hyp"}],"Data":[],"Page":[{"title":"关于","date":"2018-02-26T15:07:57.000Z","_content":"我是一个快乐的娃娃\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2018-02-26 23:07:57\n---\n我是一个快乐的娃娃\n","updated":"2018-04-01T16:53:17.088Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjfh2ksen0000p0ugigmh8f7s","content":"<p>我是一个快乐的娃娃</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我是一个快乐的娃娃</p>\n"},{"title":"categories","date":"2018-02-26T14:54:27.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-02-26 22:54:27\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-04-01T16:53:17.088Z","path":"categories/index.html","layout":"page","_id":"cjfh2ksex0002p0ugfl05migp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-02-26T14:47:24.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-02-26 22:47:24\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-04-01T16:53:17.088Z","path":"tags/index.html","layout":"page","_id":"cjfh2ksnr007pp0ug4vkeiuo8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2013年11月读书笔记","date":"2013-11-22T13:52:17.000Z","_content":"\n\n## Netty 4 at Twitter: Reduced GC Overhead\n\n\n[https://blog.twitter.com/2013/netty-4-at-twitter-reduced-gc-overhead](https://blog.twitter.com/2013/netty-4-at-twitter-reduced-gc-overhead)\n\n主要讲了netty4在减少gc压力和内存带宽消耗上的改进：\n新消息收到或者发送消息时netty3会创建一个buffer，创建字节数组`new byte[capacity]`，并用0来填充数组，这样会造成gc压力和内存带宽消耗，nettry4中为不同的事件定义不同的处理方法，减少事件对象创建。\nnetty4中引入新接口ByteBufAllocator，它提供一个buffer池(类似于[jemalloc](https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919) )，实现buddy memory allocation and slab allocation.\n\n<!--more-->\n## Buddy memory allocation\n\n\n[https://en.wikipedia.org/wiki/Buddy_memory_allocation](https://en.wikipedia.org/wiki/Buddy_memory_allocation)\n\nbuddy memory allocation是一种内存分配算法，它把内存划分为不同的分区，尽量满足不同的内存请求。最常见的是binary buddies，每一个内存block有一个order，order从0到某个值，在不同的order的block按照2order 的大小比例 ，所以满足 orderA=orderB-1 ，block  B的大小为blockA的两倍。\n首先需要确定最小block的大小(最小的可被分配的内存块)。最小快太小，操作系统会消耗过多内存和计算资源去跟踪内存块分配和回收。最小快比较大，又造成内存浪费。最小block的大小作为order0 block大小。\n\n## Slab allocation\n\n\n[https://en.wikipedia.org/wiki/Slab_allocation](https://en.wikipedia.org/wiki/Slab_allocation)\n\nslab allocation是一种内存管理机制，用于有效的内存分配，并尽量消除分配和回收内存过程中造成的碎片。它按照预先规定的大小，将分配的内存分割成特定长度的内存块，再把尺寸相同的内存块分成组，这些内存块不会释放，可以重复利用。\n\n## Scalable memory allocation using jemalloc\n\n\n[https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919](https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919)\n\n[TCMalloc优化MySQL、Nginx、Redis内存管理](http://blog.linuxeye.com/355.html)\n\n[更好的内存管理-jemalloc](http://wangkaisino.blog.163.com/blog/static/1870444202011431112323846/)\n\n## Heartbeat In Persistent Connection\n\n\n[http://cheney-mydream.iteye.com/blog/1497152](http://cheney-mydream.iteye.com/blog/1497152)\n\n[http://bbs.csdn.net/topics/360072641](http://bbs.csdn.net/topics/360072641)\n\nTCP连接建立过后,如果没有心跳，时间长了就会产生“僵尸连接”，就是通信的双方其实连接已经断了，但由于TCP并不定时检测连接是否中断，而通信的双方又相互没有send操作，导致该连接在通信的双方的tcp上一直有效，占用操作系统资源。这时TCP连接是不可使用的，但是对于应用层并不知道，心跳包主要也就是用于长连接的保活和断线处理。\n\n在rabbitmq client中，为了保证连接可用使用HeartbeatSender来定时发送心跳包。同样的，在druid中，可以配置在连接空闲达到阀值时，执行简单的sql来检测连接是否有效。\n\n\n\n## Nashorn(Naz-horn)\n\n\n[https://oracleus.activeevents.com/2013/connect/sessiondetail.ww?session_id=7835](https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=7835)\n\n介绍了noshorn一些用法\nShell Scripting部分介绍了使用Noshorn来编写shell 脚本，以后可以摆脱bash了。其他包括Noshorn中java互操性、线程、调试等。\n\n[https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=5793](https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=5793)\n\n介绍了Noshorn是什么:\n\n1. JVM上的javascript引擎\n2. 100% java实现\n3. 终极invokedynamic用户\n4. 100%编译成字节码执行\n5. 100% 兼容ECMASCRIPT5.1\n\n没有浏览器API(HTML5 canvas、HTML5 canvas、WebWorkers WebSockets、WebGL)\n\n[https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=2585](https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=2585)\n\n介绍了JVM上的内嵌脚本语言，JSR-223 (javax.script规范)，其中提到了使用script语言结合动态代理，并实时检测脚本文件变动实现live reloading。\n","source":"_posts/2013-11-reading-notes.md","raw":"---\ntitle: 2013年11月读书笔记\ndate: 2013-11-22 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n  - netty\n  - Persistent Connection\n  - memory allocation\n  - Noshorn\n---\n\n\n## Netty 4 at Twitter: Reduced GC Overhead\n\n\n[https://blog.twitter.com/2013/netty-4-at-twitter-reduced-gc-overhead](https://blog.twitter.com/2013/netty-4-at-twitter-reduced-gc-overhead)\n\n主要讲了netty4在减少gc压力和内存带宽消耗上的改进：\n新消息收到或者发送消息时netty3会创建一个buffer，创建字节数组`new byte[capacity]`，并用0来填充数组，这样会造成gc压力和内存带宽消耗，nettry4中为不同的事件定义不同的处理方法，减少事件对象创建。\nnetty4中引入新接口ByteBufAllocator，它提供一个buffer池(类似于[jemalloc](https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919) )，实现buddy memory allocation and slab allocation.\n\n<!--more-->\n## Buddy memory allocation\n\n\n[https://en.wikipedia.org/wiki/Buddy_memory_allocation](https://en.wikipedia.org/wiki/Buddy_memory_allocation)\n\nbuddy memory allocation是一种内存分配算法，它把内存划分为不同的分区，尽量满足不同的内存请求。最常见的是binary buddies，每一个内存block有一个order，order从0到某个值，在不同的order的block按照2order 的大小比例 ，所以满足 orderA=orderB-1 ，block  B的大小为blockA的两倍。\n首先需要确定最小block的大小(最小的可被分配的内存块)。最小快太小，操作系统会消耗过多内存和计算资源去跟踪内存块分配和回收。最小快比较大，又造成内存浪费。最小block的大小作为order0 block大小。\n\n## Slab allocation\n\n\n[https://en.wikipedia.org/wiki/Slab_allocation](https://en.wikipedia.org/wiki/Slab_allocation)\n\nslab allocation是一种内存管理机制，用于有效的内存分配，并尽量消除分配和回收内存过程中造成的碎片。它按照预先规定的大小，将分配的内存分割成特定长度的内存块，再把尺寸相同的内存块分成组，这些内存块不会释放，可以重复利用。\n\n## Scalable memory allocation using jemalloc\n\n\n[https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919](https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919)\n\n[TCMalloc优化MySQL、Nginx、Redis内存管理](http://blog.linuxeye.com/355.html)\n\n[更好的内存管理-jemalloc](http://wangkaisino.blog.163.com/blog/static/1870444202011431112323846/)\n\n## Heartbeat In Persistent Connection\n\n\n[http://cheney-mydream.iteye.com/blog/1497152](http://cheney-mydream.iteye.com/blog/1497152)\n\n[http://bbs.csdn.net/topics/360072641](http://bbs.csdn.net/topics/360072641)\n\nTCP连接建立过后,如果没有心跳，时间长了就会产生“僵尸连接”，就是通信的双方其实连接已经断了，但由于TCP并不定时检测连接是否中断，而通信的双方又相互没有send操作，导致该连接在通信的双方的tcp上一直有效，占用操作系统资源。这时TCP连接是不可使用的，但是对于应用层并不知道，心跳包主要也就是用于长连接的保活和断线处理。\n\n在rabbitmq client中，为了保证连接可用使用HeartbeatSender来定时发送心跳包。同样的，在druid中，可以配置在连接空闲达到阀值时，执行简单的sql来检测连接是否有效。\n\n\n\n## Nashorn(Naz-horn)\n\n\n[https://oracleus.activeevents.com/2013/connect/sessiondetail.ww?session_id=7835](https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=7835)\n\n介绍了noshorn一些用法\nShell Scripting部分介绍了使用Noshorn来编写shell 脚本，以后可以摆脱bash了。其他包括Noshorn中java互操性、线程、调试等。\n\n[https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=5793](https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=5793)\n\n介绍了Noshorn是什么:\n\n1. JVM上的javascript引擎\n2. 100% java实现\n3. 终极invokedynamic用户\n4. 100%编译成字节码执行\n5. 100% 兼容ECMASCRIPT5.1\n\n没有浏览器API(HTML5 canvas、HTML5 canvas、WebWorkers WebSockets、WebGL)\n\n[https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=2585](https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=2585)\n\n介绍了JVM上的内嵌脚本语言，JSR-223 (javax.script规范)，其中提到了使用script语言结合动态代理，并实时检测脚本文件变动实现live reloading。\n","slug":"2013-11-reading-notes","published":1,"updated":"2018-04-01T16:53:17.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2kseq0001p0ugp0avyayp","content":"<h2 id=\"Netty-4-at-Twitter-Reduced-GC-Overhead\"><a href=\"#Netty-4-at-Twitter-Reduced-GC-Overhead\" class=\"headerlink\" title=\"Netty 4 at Twitter: Reduced GC Overhead\"></a>Netty 4 at Twitter: Reduced GC Overhead</h2><p><a href=\"https://blog.twitter.com/2013/netty-4-at-twitter-reduced-gc-overhead\" target=\"_blank\" rel=\"noopener\">https://blog.twitter.com/2013/netty-4-at-twitter-reduced-gc-overhead</a></p>\n<p>主要讲了netty4在减少gc压力和内存带宽消耗上的改进：<br>新消息收到或者发送消息时netty3会创建一个buffer，创建字节数组<code>new byte[capacity]</code>，并用0来填充数组，这样会造成gc压力和内存带宽消耗，nettry4中为不同的事件定义不同的处理方法，减少事件对象创建。<br>netty4中引入新接口ByteBufAllocator，它提供一个buffer池(类似于<a href=\"https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919\" target=\"_blank\" rel=\"noopener\">jemalloc</a> )，实现buddy memory allocation and slab allocation.</p>\n<a id=\"more\"></a>\n<h2 id=\"Buddy-memory-allocation\"><a href=\"#Buddy-memory-allocation\" class=\"headerlink\" title=\"Buddy memory allocation\"></a>Buddy memory allocation</h2><p><a href=\"https://en.wikipedia.org/wiki/Buddy_memory_allocation\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Buddy_memory_allocation</a></p>\n<p>buddy memory allocation是一种内存分配算法，它把内存划分为不同的分区，尽量满足不同的内存请求。最常见的是binary buddies，每一个内存block有一个order，order从0到某个值，在不同的order的block按照2order 的大小比例 ，所以满足 orderA=orderB-1 ，block  B的大小为blockA的两倍。<br>首先需要确定最小block的大小(最小的可被分配的内存块)。最小快太小，操作系统会消耗过多内存和计算资源去跟踪内存块分配和回收。最小快比较大，又造成内存浪费。最小block的大小作为order0 block大小。</p>\n<h2 id=\"Slab-allocation\"><a href=\"#Slab-allocation\" class=\"headerlink\" title=\"Slab allocation\"></a>Slab allocation</h2><p><a href=\"https://en.wikipedia.org/wiki/Slab_allocation\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Slab_allocation</a></p>\n<p>slab allocation是一种内存管理机制，用于有效的内存分配，并尽量消除分配和回收内存过程中造成的碎片。它按照预先规定的大小，将分配的内存分割成特定长度的内存块，再把尺寸相同的内存块分成组，这些内存块不会释放，可以重复利用。</p>\n<h2 id=\"Scalable-memory-allocation-using-jemalloc\"><a href=\"#Scalable-memory-allocation-using-jemalloc\" class=\"headerlink\" title=\"Scalable memory allocation using jemalloc\"></a>Scalable memory allocation using jemalloc</h2><p><a href=\"https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919\" target=\"_blank\" rel=\"noopener\">https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919</a></p>\n<p><a href=\"http://blog.linuxeye.com/355.html\" target=\"_blank\" rel=\"noopener\">TCMalloc优化MySQL、Nginx、Redis内存管理</a></p>\n<p><a href=\"http://wangkaisino.blog.163.com/blog/static/1870444202011431112323846/\" target=\"_blank\" rel=\"noopener\">更好的内存管理-jemalloc</a></p>\n<h2 id=\"Heartbeat-In-Persistent-Connection\"><a href=\"#Heartbeat-In-Persistent-Connection\" class=\"headerlink\" title=\"Heartbeat In Persistent Connection\"></a>Heartbeat In Persistent Connection</h2><p><a href=\"http://cheney-mydream.iteye.com/blog/1497152\" target=\"_blank\" rel=\"noopener\">http://cheney-mydream.iteye.com/blog/1497152</a></p>\n<p><a href=\"http://bbs.csdn.net/topics/360072641\" target=\"_blank\" rel=\"noopener\">http://bbs.csdn.net/topics/360072641</a></p>\n<p>TCP连接建立过后,如果没有心跳，时间长了就会产生“僵尸连接”，就是通信的双方其实连接已经断了，但由于TCP并不定时检测连接是否中断，而通信的双方又相互没有send操作，导致该连接在通信的双方的tcp上一直有效，占用操作系统资源。这时TCP连接是不可使用的，但是对于应用层并不知道，心跳包主要也就是用于长连接的保活和断线处理。</p>\n<p>在rabbitmq client中，为了保证连接可用使用HeartbeatSender来定时发送心跳包。同样的，在druid中，可以配置在连接空闲达到阀值时，执行简单的sql来检测连接是否有效。</p>\n<h2 id=\"Nashorn-Naz-horn\"><a href=\"#Nashorn-Naz-horn\" class=\"headerlink\" title=\"Nashorn(Naz-horn)\"></a>Nashorn(Naz-horn)</h2><p><a href=\"https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=7835\" target=\"_blank\" rel=\"noopener\">https://oracleus.activeevents.com/2013/connect/sessiondetail.ww?session_id=7835</a></p>\n<p>介绍了noshorn一些用法<br>Shell Scripting部分介绍了使用Noshorn来编写shell 脚本，以后可以摆脱bash了。其他包括Noshorn中java互操性、线程、调试等。</p>\n<p><a href=\"https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=5793\" target=\"_blank\" rel=\"noopener\">https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=5793</a></p>\n<p>介绍了Noshorn是什么:</p>\n<ol>\n<li>JVM上的javascript引擎</li>\n<li>100% java实现</li>\n<li>终极invokedynamic用户</li>\n<li>100%编译成字节码执行</li>\n<li>100% 兼容ECMASCRIPT5.1</li>\n</ol>\n<p>没有浏览器API(HTML5 canvas、HTML5 canvas、WebWorkers WebSockets、WebGL)</p>\n<p><a href=\"https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=2585\" target=\"_blank\" rel=\"noopener\">https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=2585</a></p>\n<p>介绍了JVM上的内嵌脚本语言，JSR-223 (javax.script规范)，其中提到了使用script语言结合动态代理，并实时检测脚本文件变动实现live reloading。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Netty-4-at-Twitter-Reduced-GC-Overhead\"><a href=\"#Netty-4-at-Twitter-Reduced-GC-Overhead\" class=\"headerlink\" title=\"Netty 4 at Twitter: Reduced GC Overhead\"></a>Netty 4 at Twitter: Reduced GC Overhead</h2><p><a href=\"https://blog.twitter.com/2013/netty-4-at-twitter-reduced-gc-overhead\" target=\"_blank\" rel=\"noopener\">https://blog.twitter.com/2013/netty-4-at-twitter-reduced-gc-overhead</a></p>\n<p>主要讲了netty4在减少gc压力和内存带宽消耗上的改进：<br>新消息收到或者发送消息时netty3会创建一个buffer，创建字节数组<code>new byte[capacity]</code>，并用0来填充数组，这样会造成gc压力和内存带宽消耗，nettry4中为不同的事件定义不同的处理方法，减少事件对象创建。<br>netty4中引入新接口ByteBufAllocator，它提供一个buffer池(类似于<a href=\"https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919\" target=\"_blank\" rel=\"noopener\">jemalloc</a> )，实现buddy memory allocation and slab allocation.</p>","more":"<h2 id=\"Buddy-memory-allocation\"><a href=\"#Buddy-memory-allocation\" class=\"headerlink\" title=\"Buddy memory allocation\"></a>Buddy memory allocation</h2><p><a href=\"https://en.wikipedia.org/wiki/Buddy_memory_allocation\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Buddy_memory_allocation</a></p>\n<p>buddy memory allocation是一种内存分配算法，它把内存划分为不同的分区，尽量满足不同的内存请求。最常见的是binary buddies，每一个内存block有一个order，order从0到某个值，在不同的order的block按照2order 的大小比例 ，所以满足 orderA=orderB-1 ，block  B的大小为blockA的两倍。<br>首先需要确定最小block的大小(最小的可被分配的内存块)。最小快太小，操作系统会消耗过多内存和计算资源去跟踪内存块分配和回收。最小快比较大，又造成内存浪费。最小block的大小作为order0 block大小。</p>\n<h2 id=\"Slab-allocation\"><a href=\"#Slab-allocation\" class=\"headerlink\" title=\"Slab allocation\"></a>Slab allocation</h2><p><a href=\"https://en.wikipedia.org/wiki/Slab_allocation\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Slab_allocation</a></p>\n<p>slab allocation是一种内存管理机制，用于有效的内存分配，并尽量消除分配和回收内存过程中造成的碎片。它按照预先规定的大小，将分配的内存分割成特定长度的内存块，再把尺寸相同的内存块分成组，这些内存块不会释放，可以重复利用。</p>\n<h2 id=\"Scalable-memory-allocation-using-jemalloc\"><a href=\"#Scalable-memory-allocation-using-jemalloc\" class=\"headerlink\" title=\"Scalable memory allocation using jemalloc\"></a>Scalable memory allocation using jemalloc</h2><p><a href=\"https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919\" target=\"_blank\" rel=\"noopener\">https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919</a></p>\n<p><a href=\"http://blog.linuxeye.com/355.html\" target=\"_blank\" rel=\"noopener\">TCMalloc优化MySQL、Nginx、Redis内存管理</a></p>\n<p><a href=\"http://wangkaisino.blog.163.com/blog/static/1870444202011431112323846/\" target=\"_blank\" rel=\"noopener\">更好的内存管理-jemalloc</a></p>\n<h2 id=\"Heartbeat-In-Persistent-Connection\"><a href=\"#Heartbeat-In-Persistent-Connection\" class=\"headerlink\" title=\"Heartbeat In Persistent Connection\"></a>Heartbeat In Persistent Connection</h2><p><a href=\"http://cheney-mydream.iteye.com/blog/1497152\" target=\"_blank\" rel=\"noopener\">http://cheney-mydream.iteye.com/blog/1497152</a></p>\n<p><a href=\"http://bbs.csdn.net/topics/360072641\" target=\"_blank\" rel=\"noopener\">http://bbs.csdn.net/topics/360072641</a></p>\n<p>TCP连接建立过后,如果没有心跳，时间长了就会产生“僵尸连接”，就是通信的双方其实连接已经断了，但由于TCP并不定时检测连接是否中断，而通信的双方又相互没有send操作，导致该连接在通信的双方的tcp上一直有效，占用操作系统资源。这时TCP连接是不可使用的，但是对于应用层并不知道，心跳包主要也就是用于长连接的保活和断线处理。</p>\n<p>在rabbitmq client中，为了保证连接可用使用HeartbeatSender来定时发送心跳包。同样的，在druid中，可以配置在连接空闲达到阀值时，执行简单的sql来检测连接是否有效。</p>\n<h2 id=\"Nashorn-Naz-horn\"><a href=\"#Nashorn-Naz-horn\" class=\"headerlink\" title=\"Nashorn(Naz-horn)\"></a>Nashorn(Naz-horn)</h2><p><a href=\"https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=7835\" target=\"_blank\" rel=\"noopener\">https://oracleus.activeevents.com/2013/connect/sessiondetail.ww?session_id=7835</a></p>\n<p>介绍了noshorn一些用法<br>Shell Scripting部分介绍了使用Noshorn来编写shell 脚本，以后可以摆脱bash了。其他包括Noshorn中java互操性、线程、调试等。</p>\n<p><a href=\"https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=5793\" target=\"_blank\" rel=\"noopener\">https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=5793</a></p>\n<p>介绍了Noshorn是什么:</p>\n<ol>\n<li>JVM上的javascript引擎</li>\n<li>100% java实现</li>\n<li>终极invokedynamic用户</li>\n<li>100%编译成字节码执行</li>\n<li>100% 兼容ECMASCRIPT5.1</li>\n</ol>\n<p>没有浏览器API(HTML5 canvas、HTML5 canvas、WebWorkers WebSockets、WebGL)</p>\n<p><a href=\"https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=2585\" target=\"_blank\" rel=\"noopener\">https://oracleus.activeevents.com/2013/connect/sessionDetail.ww?SESSION_ID=2585</a></p>\n<p>介绍了JVM上的内嵌脚本语言，JSR-223 (javax.script规范)，其中提到了使用script语言结合动态代理，并实时检测脚本文件变动实现live reloading。</p>"},{"title":"2013年12月Reading Notes","date":"2013-12-08T13:52:17.000Z","_content":"\n## 如何处理web静态文件\n\n#### spring mvc 处理静态资源文件\n在spring mvc中，通过三种方式来处理静态资源\n\n1. 激活Tomcat的defaultServlet来处理静态文件\n\n\t参考tomcat config目录下的web.xml,这种方式IDE不友好，IDE会报找不到default servlet\n2. 在spring3.0.4以后版本提供了mvc:resources\n\n\t可以读取WEB-INFO和jar包里面的资源文件，也可以控制浏览器缓存\n3. 使用`<mvc:default-servlet-handler/>`\n\n\t通过使用DefaultServletHttpRequestHandler来把静态资源文件丢给容器处理，和方式一做的事情一样，这种方式兼容多种web容器，ide友好。使用这个一般是在`DispatcherServlet`映射为`/`时，让静态资源继续交给容器处理。其实这种方式的性能不好，因为`DispatcherServlet`里执行了一大坨代码。\n\n#### 前端页面优化\n\n前端页面优化，可以用yslow(yahoo强大的web团队推出的精品)、chorme audit、[PageSpeed](https://developers.google.com/speed/pagespeed/module)来评估\n\n只用apache的童鞋可以考虑使用[modpagespeed](https://code.google.com/p/modpagespeed/)，结合apache的内存缓存，减少服务器IO开销。\n\n比较理想的方式还是在web服务器加上一个反向代理服务器(varnish、nginx)，它来缓存静态资源文件\n\n开源的公共js、css库，可以考虑各种开源cdn服务，鉴于国内的网络情况，推荐两个国内的cdn：\n\n- [百度cdn](http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs)\n- [开发静态文件CDN](http://www.staticfile.org/)\n\n## 避免Java应用中NullPointerException的技巧和最佳实践\n\n[http://www.importnew.com/7268.html](http://www.importnew.com/7268.html)\n\n1. 从已知的String对象中调用equals()和equalsIgnoreCase()方法，而非未知对象。\n2. 当valueOf()和toString()返回相同的结果时，宁愿使用前者。\n3. 使用null安全的方法和库(spring和guava都提供了相关工具)\n4. 避免从方法中返回空指针，而是返回空collection或者空数组。\n5. 使用annotation@NotNull 和 @Nullable(目前是想起了才用，得强迫自己加上了)\n6. 避免你的代码中不必要的自动包装和自动解包。\n7. 遵从Contract并定义合理的默认值。\n8. 定义数据库中的字段是否可为空。\n9. 使用空对象模式（Null Object Pattern）\n\n## 如何优雅地使用 Windows 系统？\n\n[http://daily.zhihu.com/story/395](http://daily.zhihu.com/story/395)\n\n不离不弃windows很多年了，令人恶心的超级本天天让我纠结，下次一定换MAC。不过还是先将就下。\n\n## tomcat进程关闭时收集dump信息\n\n[https://gist.github.com/bohrqiu/6518715](https://gist.github.com/bohrqiu/6518715)\n\n给gist加个超链接\n\n\n## PhantomJS\n\n[http://phantomjs.org/](http://phantomjs.org/)\n\nPhantomJS 是一个基于webkit的无界面浏览器，它提供了js api来实现dom操作、css选择器、json、canvas、svg\n\nPhantomJS适用于下列场景：\n\n- [无界面网站测试](http://phantomjs.org/headless-testing.html)\n\n\n\n- [网站屏幕截图](http://phantomjs.org/screen-capture.html)\n- [页面操纵](http://phantomjs.org/page-automation.html)\n\n\t通过标准dom api或者开源库访问和操作dom\n- [网络监控](http://phantomjs.org/network-monitoring.html)\n\n\t包括网页加载测试、结合yslow和jenkins实现自动化页面性能测试\n\n貌似速度比Selenium快，用它来抓取页面数据应该很happy。官方有很多[栗子](https://github.com/ariya/phantomjs/tree/master/examples)，可以深入挖掘下。\n\n## Advanced REST client\n\n[https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo](https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo)\n\n构造一个rest请求，有时候有点麻烦，借助Advanced REST client，可以很方便的chrome中构造一个REST请求，方便测试\n","source":"_posts/2013-12-reading-notes.md","raw":"---\ntitle: 2013年12月Reading Notes\ndate: 2013-12-08 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n  - spring mvc static resource handle\n  - web frontend tuning\n  - NullPointerException\n  - Windows\n  - PhantomJS\n\n---\n\n## 如何处理web静态文件\n\n#### spring mvc 处理静态资源文件\n在spring mvc中，通过三种方式来处理静态资源\n\n1. 激活Tomcat的defaultServlet来处理静态文件\n\n\t参考tomcat config目录下的web.xml,这种方式IDE不友好，IDE会报找不到default servlet\n2. 在spring3.0.4以后版本提供了mvc:resources\n\n\t可以读取WEB-INFO和jar包里面的资源文件，也可以控制浏览器缓存\n3. 使用`<mvc:default-servlet-handler/>`\n\n\t通过使用DefaultServletHttpRequestHandler来把静态资源文件丢给容器处理，和方式一做的事情一样，这种方式兼容多种web容器，ide友好。使用这个一般是在`DispatcherServlet`映射为`/`时，让静态资源继续交给容器处理。其实这种方式的性能不好，因为`DispatcherServlet`里执行了一大坨代码。\n\n#### 前端页面优化\n\n前端页面优化，可以用yslow(yahoo强大的web团队推出的精品)、chorme audit、[PageSpeed](https://developers.google.com/speed/pagespeed/module)来评估\n\n只用apache的童鞋可以考虑使用[modpagespeed](https://code.google.com/p/modpagespeed/)，结合apache的内存缓存，减少服务器IO开销。\n\n比较理想的方式还是在web服务器加上一个反向代理服务器(varnish、nginx)，它来缓存静态资源文件\n\n开源的公共js、css库，可以考虑各种开源cdn服务，鉴于国内的网络情况，推荐两个国内的cdn：\n\n- [百度cdn](http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs)\n- [开发静态文件CDN](http://www.staticfile.org/)\n\n## 避免Java应用中NullPointerException的技巧和最佳实践\n\n[http://www.importnew.com/7268.html](http://www.importnew.com/7268.html)\n\n1. 从已知的String对象中调用equals()和equalsIgnoreCase()方法，而非未知对象。\n2. 当valueOf()和toString()返回相同的结果时，宁愿使用前者。\n3. 使用null安全的方法和库(spring和guava都提供了相关工具)\n4. 避免从方法中返回空指针，而是返回空collection或者空数组。\n5. 使用annotation@NotNull 和 @Nullable(目前是想起了才用，得强迫自己加上了)\n6. 避免你的代码中不必要的自动包装和自动解包。\n7. 遵从Contract并定义合理的默认值。\n8. 定义数据库中的字段是否可为空。\n9. 使用空对象模式（Null Object Pattern）\n\n## 如何优雅地使用 Windows 系统？\n\n[http://daily.zhihu.com/story/395](http://daily.zhihu.com/story/395)\n\n不离不弃windows很多年了，令人恶心的超级本天天让我纠结，下次一定换MAC。不过还是先将就下。\n\n## tomcat进程关闭时收集dump信息\n\n[https://gist.github.com/bohrqiu/6518715](https://gist.github.com/bohrqiu/6518715)\n\n给gist加个超链接\n\n\n## PhantomJS\n\n[http://phantomjs.org/](http://phantomjs.org/)\n\nPhantomJS 是一个基于webkit的无界面浏览器，它提供了js api来实现dom操作、css选择器、json、canvas、svg\n\nPhantomJS适用于下列场景：\n\n- [无界面网站测试](http://phantomjs.org/headless-testing.html)\n\n\n\n- [网站屏幕截图](http://phantomjs.org/screen-capture.html)\n- [页面操纵](http://phantomjs.org/page-automation.html)\n\n\t通过标准dom api或者开源库访问和操作dom\n- [网络监控](http://phantomjs.org/network-monitoring.html)\n\n\t包括网页加载测试、结合yslow和jenkins实现自动化页面性能测试\n\n貌似速度比Selenium快，用它来抓取页面数据应该很happy。官方有很多[栗子](https://github.com/ariya/phantomjs/tree/master/examples)，可以深入挖掘下。\n\n## Advanced REST client\n\n[https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo](https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo)\n\n构造一个rest请求，有时候有点麻烦，借助Advanced REST client，可以很方便的chrome中构造一个REST请求，方便测试\n","slug":"2013-12-reading-notes","published":1,"updated":"2018-04-01T16:53:17.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksey0003p0ugv37rkk3r","content":"<h2 id=\"如何处理web静态文件\"><a href=\"#如何处理web静态文件\" class=\"headerlink\" title=\"如何处理web静态文件\"></a>如何处理web静态文件</h2><h4 id=\"spring-mvc-处理静态资源文件\"><a href=\"#spring-mvc-处理静态资源文件\" class=\"headerlink\" title=\"spring mvc 处理静态资源文件\"></a>spring mvc 处理静态资源文件</h4><p>在spring mvc中，通过三种方式来处理静态资源</p>\n<ol>\n<li><p>激活Tomcat的defaultServlet来处理静态文件</p>\n<p> 参考tomcat config目录下的web.xml,这种方式IDE不友好，IDE会报找不到default servlet</p>\n</li>\n<li><p>在spring3.0.4以后版本提供了mvc:resources</p>\n<p> 可以读取WEB-INFO和jar包里面的资源文件，也可以控制浏览器缓存</p>\n</li>\n<li><p>使用<code>&lt;mvc:default-servlet-handler/&gt;</code></p>\n<p> 通过使用DefaultServletHttpRequestHandler来把静态资源文件丢给容器处理，和方式一做的事情一样，这种方式兼容多种web容器，ide友好。使用这个一般是在<code>DispatcherServlet</code>映射为<code>/</code>时，让静态资源继续交给容器处理。其实这种方式的性能不好，因为<code>DispatcherServlet</code>里执行了一大坨代码。</p>\n</li>\n</ol>\n<h4 id=\"前端页面优化\"><a href=\"#前端页面优化\" class=\"headerlink\" title=\"前端页面优化\"></a>前端页面优化</h4><p>前端页面优化，可以用yslow(yahoo强大的web团队推出的精品)、chorme audit、<a href=\"https://developers.google.com/speed/pagespeed/module\" target=\"_blank\" rel=\"noopener\">PageSpeed</a>来评估</p>\n<p>只用apache的童鞋可以考虑使用<a href=\"https://code.google.com/p/modpagespeed/\" target=\"_blank\" rel=\"noopener\">modpagespeed</a>，结合apache的内存缓存，减少服务器IO开销。</p>\n<p>比较理想的方式还是在web服务器加上一个反向代理服务器(varnish、nginx)，它来缓存静态资源文件</p>\n<p>开源的公共js、css库，可以考虑各种开源cdn服务，鉴于国内的网络情况，推荐两个国内的cdn：</p>\n<ul>\n<li><a href=\"http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs\" target=\"_blank\" rel=\"noopener\">百度cdn</a></li>\n<li><a href=\"http://www.staticfile.org/\" target=\"_blank\" rel=\"noopener\">开发静态文件CDN</a></li>\n</ul>\n<h2 id=\"避免Java应用中NullPointerException的技巧和最佳实践\"><a href=\"#避免Java应用中NullPointerException的技巧和最佳实践\" class=\"headerlink\" title=\"避免Java应用中NullPointerException的技巧和最佳实践\"></a>避免Java应用中NullPointerException的技巧和最佳实践</h2><p><a href=\"http://www.importnew.com/7268.html\" target=\"_blank\" rel=\"noopener\">http://www.importnew.com/7268.html</a></p>\n<ol>\n<li>从已知的String对象中调用equals()和equalsIgnoreCase()方法，而非未知对象。</li>\n<li>当valueOf()和toString()返回相同的结果时，宁愿使用前者。</li>\n<li>使用null安全的方法和库(spring和guava都提供了相关工具)</li>\n<li>避免从方法中返回空指针，而是返回空collection或者空数组。</li>\n<li>使用annotation@NotNull 和 @Nullable(目前是想起了才用，得强迫自己加上了)</li>\n<li>避免你的代码中不必要的自动包装和自动解包。</li>\n<li>遵从Contract并定义合理的默认值。</li>\n<li>定义数据库中的字段是否可为空。</li>\n<li>使用空对象模式（Null Object Pattern）</li>\n</ol>\n<h2 id=\"如何优雅地使用-Windows-系统？\"><a href=\"#如何优雅地使用-Windows-系统？\" class=\"headerlink\" title=\"如何优雅地使用 Windows 系统？\"></a>如何优雅地使用 Windows 系统？</h2><p><a href=\"http://daily.zhihu.com/story/395\" target=\"_blank\" rel=\"noopener\">http://daily.zhihu.com/story/395</a></p>\n<p>不离不弃windows很多年了，令人恶心的超级本天天让我纠结，下次一定换MAC。不过还是先将就下。</p>\n<h2 id=\"tomcat进程关闭时收集dump信息\"><a href=\"#tomcat进程关闭时收集dump信息\" class=\"headerlink\" title=\"tomcat进程关闭时收集dump信息\"></a>tomcat进程关闭时收集dump信息</h2><p><a href=\"https://gist.github.com/bohrqiu/6518715\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/bohrqiu/6518715</a></p>\n<p>给gist加个超链接</p>\n<h2 id=\"PhantomJS\"><a href=\"#PhantomJS\" class=\"headerlink\" title=\"PhantomJS\"></a>PhantomJS</h2><p><a href=\"http://phantomjs.org/\" target=\"_blank\" rel=\"noopener\">http://phantomjs.org/</a></p>\n<p>PhantomJS 是一个基于webkit的无界面浏览器，它提供了js api来实现dom操作、css选择器、json、canvas、svg</p>\n<p>PhantomJS适用于下列场景：</p>\n<ul>\n<li><a href=\"http://phantomjs.org/headless-testing.html\" target=\"_blank\" rel=\"noopener\">无界面网站测试</a></li>\n</ul>\n<ul>\n<li><a href=\"http://phantomjs.org/screen-capture.html\" target=\"_blank\" rel=\"noopener\">网站屏幕截图</a></li>\n<li><p><a href=\"http://phantomjs.org/page-automation.html\" target=\"_blank\" rel=\"noopener\">页面操纵</a></p>\n<p>  通过标准dom api或者开源库访问和操作dom</p>\n</li>\n<li><p><a href=\"http://phantomjs.org/network-monitoring.html\" target=\"_blank\" rel=\"noopener\">网络监控</a></p>\n<p>  包括网页加载测试、结合yslow和jenkins实现自动化页面性能测试</p>\n</li>\n</ul>\n<p>貌似速度比Selenium快，用它来抓取页面数据应该很happy。官方有很多<a href=\"https://github.com/ariya/phantomjs/tree/master/examples\" target=\"_blank\" rel=\"noopener\">栗子</a>，可以深入挖掘下。</p>\n<h2 id=\"Advanced-REST-client\"><a href=\"#Advanced-REST-client\" class=\"headerlink\" title=\"Advanced REST client\"></a>Advanced REST client</h2><p><a href=\"https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo\" target=\"_blank\" rel=\"noopener\">https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo</a></p>\n<p>构造一个rest请求，有时候有点麻烦，借助Advanced REST client，可以很方便的chrome中构造一个REST请求，方便测试</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"如何处理web静态文件\"><a href=\"#如何处理web静态文件\" class=\"headerlink\" title=\"如何处理web静态文件\"></a>如何处理web静态文件</h2><h4 id=\"spring-mvc-处理静态资源文件\"><a href=\"#spring-mvc-处理静态资源文件\" class=\"headerlink\" title=\"spring mvc 处理静态资源文件\"></a>spring mvc 处理静态资源文件</h4><p>在spring mvc中，通过三种方式来处理静态资源</p>\n<ol>\n<li><p>激活Tomcat的defaultServlet来处理静态文件</p>\n<p> 参考tomcat config目录下的web.xml,这种方式IDE不友好，IDE会报找不到default servlet</p>\n</li>\n<li><p>在spring3.0.4以后版本提供了mvc:resources</p>\n<p> 可以读取WEB-INFO和jar包里面的资源文件，也可以控制浏览器缓存</p>\n</li>\n<li><p>使用<code>&lt;mvc:default-servlet-handler/&gt;</code></p>\n<p> 通过使用DefaultServletHttpRequestHandler来把静态资源文件丢给容器处理，和方式一做的事情一样，这种方式兼容多种web容器，ide友好。使用这个一般是在<code>DispatcherServlet</code>映射为<code>/</code>时，让静态资源继续交给容器处理。其实这种方式的性能不好，因为<code>DispatcherServlet</code>里执行了一大坨代码。</p>\n</li>\n</ol>\n<h4 id=\"前端页面优化\"><a href=\"#前端页面优化\" class=\"headerlink\" title=\"前端页面优化\"></a>前端页面优化</h4><p>前端页面优化，可以用yslow(yahoo强大的web团队推出的精品)、chorme audit、<a href=\"https://developers.google.com/speed/pagespeed/module\" target=\"_blank\" rel=\"noopener\">PageSpeed</a>来评估</p>\n<p>只用apache的童鞋可以考虑使用<a href=\"https://code.google.com/p/modpagespeed/\" target=\"_blank\" rel=\"noopener\">modpagespeed</a>，结合apache的内存缓存，减少服务器IO开销。</p>\n<p>比较理想的方式还是在web服务器加上一个反向代理服务器(varnish、nginx)，它来缓存静态资源文件</p>\n<p>开源的公共js、css库，可以考虑各种开源cdn服务，鉴于国内的网络情况，推荐两个国内的cdn：</p>\n<ul>\n<li><a href=\"http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs\" target=\"_blank\" rel=\"noopener\">百度cdn</a></li>\n<li><a href=\"http://www.staticfile.org/\" target=\"_blank\" rel=\"noopener\">开发静态文件CDN</a></li>\n</ul>\n<h2 id=\"避免Java应用中NullPointerException的技巧和最佳实践\"><a href=\"#避免Java应用中NullPointerException的技巧和最佳实践\" class=\"headerlink\" title=\"避免Java应用中NullPointerException的技巧和最佳实践\"></a>避免Java应用中NullPointerException的技巧和最佳实践</h2><p><a href=\"http://www.importnew.com/7268.html\" target=\"_blank\" rel=\"noopener\">http://www.importnew.com/7268.html</a></p>\n<ol>\n<li>从已知的String对象中调用equals()和equalsIgnoreCase()方法，而非未知对象。</li>\n<li>当valueOf()和toString()返回相同的结果时，宁愿使用前者。</li>\n<li>使用null安全的方法和库(spring和guava都提供了相关工具)</li>\n<li>避免从方法中返回空指针，而是返回空collection或者空数组。</li>\n<li>使用annotation@NotNull 和 @Nullable(目前是想起了才用，得强迫自己加上了)</li>\n<li>避免你的代码中不必要的自动包装和自动解包。</li>\n<li>遵从Contract并定义合理的默认值。</li>\n<li>定义数据库中的字段是否可为空。</li>\n<li>使用空对象模式（Null Object Pattern）</li>\n</ol>\n<h2 id=\"如何优雅地使用-Windows-系统？\"><a href=\"#如何优雅地使用-Windows-系统？\" class=\"headerlink\" title=\"如何优雅地使用 Windows 系统？\"></a>如何优雅地使用 Windows 系统？</h2><p><a href=\"http://daily.zhihu.com/story/395\" target=\"_blank\" rel=\"noopener\">http://daily.zhihu.com/story/395</a></p>\n<p>不离不弃windows很多年了，令人恶心的超级本天天让我纠结，下次一定换MAC。不过还是先将就下。</p>\n<h2 id=\"tomcat进程关闭时收集dump信息\"><a href=\"#tomcat进程关闭时收集dump信息\" class=\"headerlink\" title=\"tomcat进程关闭时收集dump信息\"></a>tomcat进程关闭时收集dump信息</h2><p><a href=\"https://gist.github.com/bohrqiu/6518715\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/bohrqiu/6518715</a></p>\n<p>给gist加个超链接</p>\n<h2 id=\"PhantomJS\"><a href=\"#PhantomJS\" class=\"headerlink\" title=\"PhantomJS\"></a>PhantomJS</h2><p><a href=\"http://phantomjs.org/\" target=\"_blank\" rel=\"noopener\">http://phantomjs.org/</a></p>\n<p>PhantomJS 是一个基于webkit的无界面浏览器，它提供了js api来实现dom操作、css选择器、json、canvas、svg</p>\n<p>PhantomJS适用于下列场景：</p>\n<ul>\n<li><a href=\"http://phantomjs.org/headless-testing.html\" target=\"_blank\" rel=\"noopener\">无界面网站测试</a></li>\n</ul>\n<ul>\n<li><a href=\"http://phantomjs.org/screen-capture.html\" target=\"_blank\" rel=\"noopener\">网站屏幕截图</a></li>\n<li><p><a href=\"http://phantomjs.org/page-automation.html\" target=\"_blank\" rel=\"noopener\">页面操纵</a></p>\n<p>  通过标准dom api或者开源库访问和操作dom</p>\n</li>\n<li><p><a href=\"http://phantomjs.org/network-monitoring.html\" target=\"_blank\" rel=\"noopener\">网络监控</a></p>\n<p>  包括网页加载测试、结合yslow和jenkins实现自动化页面性能测试</p>\n</li>\n</ul>\n<p>貌似速度比Selenium快，用它来抓取页面数据应该很happy。官方有很多<a href=\"https://github.com/ariya/phantomjs/tree/master/examples\" target=\"_blank\" rel=\"noopener\">栗子</a>，可以深入挖掘下。</p>\n<h2 id=\"Advanced-REST-client\"><a href=\"#Advanced-REST-client\" class=\"headerlink\" title=\"Advanced REST client\"></a>Advanced REST client</h2><p><a href=\"https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo\" target=\"_blank\" rel=\"noopener\">https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo</a></p>\n<p>构造一个rest请求，有时候有点麻烦，借助Advanced REST client，可以很方便的chrome中构造一个REST请求，方便测试</p>\n"},{"title":"2014年01月Reading Notes","date":"2014-01-16T13:52:17.000Z","_content":"\n## LINUX上MYSQL优化三板斧\n\n[http://www.woqutech.com/?p=1200](http://www.woqutech.com/?p=1200)\n\n讲了如何优化linux mysql服务器,主要讲了操作系统层面的优化\n\n* CPU方面\n\n    关闭电源保护模式(充分利用cpu资源)\n* 内存：\n\n    vm.swappiness = 0 (尽量少swap)\n\n    关闭numa\t (在NUMA架构下，本地内存的访问和非本地内存的访问代价是不一样的)\n* 文件系统：\n\n    用noatime(不用更新文件的access time)，nobarrier(不用文件系统强制底层设备刷新缓存,由RAID卡或者Flash卡来保证)挂载系统\n\n    IO调度策略修改为deadline。(IO调度策略采用deadline,它是非公平的调度策略,但是能兼顾一个请求不会在队列中等待太久导致饿死)\n\n## Java Multi-Threading and Concurrency Interview Questions with Answers\n\n [http://www.journaldev.com/1162/java-multi-threading-concurrency-interview-questions-with-answers](http://www.journaldev.com/1162/java-multi-threading-concurrency-interview-questions-with-answers)\n\n 虽然是面试题,但是讲了很多java线程中的基础概念\n\n## 禁用Spotlight后,Alfred找不到app\n\n 个人感觉Alfred要比spotlight好用得多,特别是装了某些workflows后,操作效率明显提高.本着不要浪费性能的原则,参考[MAC OS X 关闭 spotlight 降温的大法](http://hi.baidu.com/omyss/item/168dd67555a0d75c0d0a0717)把spotlight服务给全禁用掉了.\n\n 用了两天感觉不对,一些常用软件在Alfred中找不到,官方回答了[Can Alfred work without Spotlight enabled?](http://support.alfredapp.com/kb:spotlight),看来还得启用spotlight才行.悲剧的是降温大法里面提到的启用办法老是报错.下面的命令能解决这个问题:\n\n\tsudo mv Search2.bundle/ Search.bundle/\n\tsudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist\n\tsudo mdutil -a -i on\n\n## markdown中出现了特殊字符导致blog一直不更新\n\n前几天写了一篇博文,提交到github后,一直主页都刷不出来,以为是github出问题了.专门去twiter看了下,没有发现风吹草动,这下必须得把测试预览环境搭建起来.\n\n\tsudo gem install jekyll\n\t#安装markdwon解析插件\n\tsudo gem install rdiscount\n\t#切换到项目路径\n\tcd bohrqiu.github.com\n\t#启动jekyll服务并监听文件变动\n\tjekyll serve --watch\n启动起来后,居然看到markdown解析失败了\n\n\t| Maruku tells you:\n\t+-----\n\t| Malformed HTML starting at \"<v2,则打包失败)\"\n\t| -----\n\t| gin`来规范传递依赖,要求当前依赖的版本和传递依赖版本一样或者比传递依赖版本高(比如A->Cv1 ,A->D->Cv2,如果v1<v2,则打包失败)EOF\n没想到`<`符号还不能直接使用~~!\n\n## git api 总结\n\ngit很久没有用了,加上现在有github的客户端,基本上把命令都忘完了,偶然看到\n[@**heiniuhaha**](http://www.weibo.com/heiniuhaha) 妹纸总结的git api,太详细了,收了.\n\n<img src=\"/images/git-api.png\" width=\"500\" height=\"500\"/>\n","source":"_posts/2014-01-reading-notes.md","raw":"---\ntitle: 2014年01月Reading Notes\ndate: 2014-01-16 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n  - linux mysql tunning\n  - \n---\n\n## LINUX上MYSQL优化三板斧\n\n[http://www.woqutech.com/?p=1200](http://www.woqutech.com/?p=1200)\n\n讲了如何优化linux mysql服务器,主要讲了操作系统层面的优化\n\n* CPU方面\n\n    关闭电源保护模式(充分利用cpu资源)\n* 内存：\n\n    vm.swappiness = 0 (尽量少swap)\n\n    关闭numa\t (在NUMA架构下，本地内存的访问和非本地内存的访问代价是不一样的)\n* 文件系统：\n\n    用noatime(不用更新文件的access time)，nobarrier(不用文件系统强制底层设备刷新缓存,由RAID卡或者Flash卡来保证)挂载系统\n\n    IO调度策略修改为deadline。(IO调度策略采用deadline,它是非公平的调度策略,但是能兼顾一个请求不会在队列中等待太久导致饿死)\n\n## Java Multi-Threading and Concurrency Interview Questions with Answers\n\n [http://www.journaldev.com/1162/java-multi-threading-concurrency-interview-questions-with-answers](http://www.journaldev.com/1162/java-multi-threading-concurrency-interview-questions-with-answers)\n\n 虽然是面试题,但是讲了很多java线程中的基础概念\n\n## 禁用Spotlight后,Alfred找不到app\n\n 个人感觉Alfred要比spotlight好用得多,特别是装了某些workflows后,操作效率明显提高.本着不要浪费性能的原则,参考[MAC OS X 关闭 spotlight 降温的大法](http://hi.baidu.com/omyss/item/168dd67555a0d75c0d0a0717)把spotlight服务给全禁用掉了.\n\n 用了两天感觉不对,一些常用软件在Alfred中找不到,官方回答了[Can Alfred work without Spotlight enabled?](http://support.alfredapp.com/kb:spotlight),看来还得启用spotlight才行.悲剧的是降温大法里面提到的启用办法老是报错.下面的命令能解决这个问题:\n\n\tsudo mv Search2.bundle/ Search.bundle/\n\tsudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist\n\tsudo mdutil -a -i on\n\n## markdown中出现了特殊字符导致blog一直不更新\n\n前几天写了一篇博文,提交到github后,一直主页都刷不出来,以为是github出问题了.专门去twiter看了下,没有发现风吹草动,这下必须得把测试预览环境搭建起来.\n\n\tsudo gem install jekyll\n\t#安装markdwon解析插件\n\tsudo gem install rdiscount\n\t#切换到项目路径\n\tcd bohrqiu.github.com\n\t#启动jekyll服务并监听文件变动\n\tjekyll serve --watch\n启动起来后,居然看到markdown解析失败了\n\n\t| Maruku tells you:\n\t+-----\n\t| Malformed HTML starting at \"<v2,则打包失败)\"\n\t| -----\n\t| gin`来规范传递依赖,要求当前依赖的版本和传递依赖版本一样或者比传递依赖版本高(比如A->Cv1 ,A->D->Cv2,如果v1<v2,则打包失败)EOF\n没想到`<`符号还不能直接使用~~!\n\n## git api 总结\n\ngit很久没有用了,加上现在有github的客户端,基本上把命令都忘完了,偶然看到\n[@**heiniuhaha**](http://www.weibo.com/heiniuhaha) 妹纸总结的git api,太详细了,收了.\n\n<img src=\"/images/git-api.png\" width=\"500\" height=\"500\"/>\n","slug":"2014-01-reading-notes","published":1,"updated":"2018-04-01T16:53:17.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksf60006p0ugay9k0zzd","content":"<h2 id=\"LINUX上MYSQL优化三板斧\"><a href=\"#LINUX上MYSQL优化三板斧\" class=\"headerlink\" title=\"LINUX上MYSQL优化三板斧\"></a>LINUX上MYSQL优化三板斧</h2><p><a href=\"http://www.woqutech.com/?p=1200\" target=\"_blank\" rel=\"noopener\">http://www.woqutech.com/?p=1200</a></p>\n<p>讲了如何优化linux mysql服务器,主要讲了操作系统层面的优化</p>\n<ul>\n<li><p>CPU方面</p>\n<p>  关闭电源保护模式(充分利用cpu资源)</p>\n</li>\n<li><p>内存：</p>\n<p>  vm.swappiness = 0 (尽量少swap)</p>\n<p>  关闭numa     (在NUMA架构下，本地内存的访问和非本地内存的访问代价是不一样的)</p>\n</li>\n<li><p>文件系统：</p>\n<p>  用noatime(不用更新文件的access time)，nobarrier(不用文件系统强制底层设备刷新缓存,由RAID卡或者Flash卡来保证)挂载系统</p>\n<p>  IO调度策略修改为deadline。(IO调度策略采用deadline,它是非公平的调度策略,但是能兼顾一个请求不会在队列中等待太久导致饿死)</p>\n</li>\n</ul>\n<h2 id=\"Java-Multi-Threading-and-Concurrency-Interview-Questions-with-Answers\"><a href=\"#Java-Multi-Threading-and-Concurrency-Interview-Questions-with-Answers\" class=\"headerlink\" title=\"Java Multi-Threading and Concurrency Interview Questions with Answers\"></a>Java Multi-Threading and Concurrency Interview Questions with Answers</h2><p> <a href=\"http://www.journaldev.com/1162/java-multi-threading-concurrency-interview-questions-with-answers\" target=\"_blank\" rel=\"noopener\">http://www.journaldev.com/1162/java-multi-threading-concurrency-interview-questions-with-answers</a></p>\n<p> 虽然是面试题,但是讲了很多java线程中的基础概念</p>\n<h2 id=\"禁用Spotlight后-Alfred找不到app\"><a href=\"#禁用Spotlight后-Alfred找不到app\" class=\"headerlink\" title=\"禁用Spotlight后,Alfred找不到app\"></a>禁用Spotlight后,Alfred找不到app</h2><p> 个人感觉Alfred要比spotlight好用得多,特别是装了某些workflows后,操作效率明显提高.本着不要浪费性能的原则,参考<a href=\"http://hi.baidu.com/omyss/item/168dd67555a0d75c0d0a0717\" target=\"_blank\" rel=\"noopener\">MAC OS X 关闭 spotlight 降温的大法</a>把spotlight服务给全禁用掉了.</p>\n<p> 用了两天感觉不对,一些常用软件在Alfred中找不到,官方回答了<a href=\"http://support.alfredapp.com/kb:spotlight\" target=\"_blank\" rel=\"noopener\">Can Alfred work without Spotlight enabled?</a>,看来还得启用spotlight才行.悲剧的是降温大法里面提到的启用办法老是报错.下面的命令能解决这个问题:</p>\n<pre><code>sudo mv Search2.bundle/ Search.bundle/\nsudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist\nsudo mdutil -a -i on\n</code></pre><h2 id=\"markdown中出现了特殊字符导致blog一直不更新\"><a href=\"#markdown中出现了特殊字符导致blog一直不更新\" class=\"headerlink\" title=\"markdown中出现了特殊字符导致blog一直不更新\"></a>markdown中出现了特殊字符导致blog一直不更新</h2><p>前几天写了一篇博文,提交到github后,一直主页都刷不出来,以为是github出问题了.专门去twiter看了下,没有发现风吹草动,这下必须得把测试预览环境搭建起来.</p>\n<pre><code>sudo gem install jekyll\n#安装markdwon解析插件\nsudo gem install rdiscount\n#切换到项目路径\ncd bohrqiu.github.com\n#启动jekyll服务并监听文件变动\njekyll serve --watch\n</code></pre><p>启动起来后,居然看到markdown解析失败了</p>\n<pre><code>| Maruku tells you:\n+-----\n| Malformed HTML starting at &quot;&lt;v2,则打包失败)&quot;\n| -----\n| gin`来规范传递依赖,要求当前依赖的版本和传递依赖版本一样或者比传递依赖版本高(比如A-&gt;Cv1 ,A-&gt;D-&gt;Cv2,如果v1&lt;v2,则打包失败)EOF\n</code></pre><p>没想到<code>&lt;</code>符号还不能直接使用~~!</p>\n<h2 id=\"git-api-总结\"><a href=\"#git-api-总结\" class=\"headerlink\" title=\"git api 总结\"></a>git api 总结</h2><p>git很久没有用了,加上现在有github的客户端,基本上把命令都忘完了,偶然看到<br><a href=\"http://www.weibo.com/heiniuhaha\" target=\"_blank\" rel=\"noopener\">@<strong>heiniuhaha</strong></a> 妹纸总结的git api,太详细了,收了.</p>\n<p><img src=\"/2014-01-reading-notes/images/git-api.png\" width=\"500\" height=\"500\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"LINUX上MYSQL优化三板斧\"><a href=\"#LINUX上MYSQL优化三板斧\" class=\"headerlink\" title=\"LINUX上MYSQL优化三板斧\"></a>LINUX上MYSQL优化三板斧</h2><p><a href=\"http://www.woqutech.com/?p=1200\" target=\"_blank\" rel=\"noopener\">http://www.woqutech.com/?p=1200</a></p>\n<p>讲了如何优化linux mysql服务器,主要讲了操作系统层面的优化</p>\n<ul>\n<li><p>CPU方面</p>\n<p>  关闭电源保护模式(充分利用cpu资源)</p>\n</li>\n<li><p>内存：</p>\n<p>  vm.swappiness = 0 (尽量少swap)</p>\n<p>  关闭numa     (在NUMA架构下，本地内存的访问和非本地内存的访问代价是不一样的)</p>\n</li>\n<li><p>文件系统：</p>\n<p>  用noatime(不用更新文件的access time)，nobarrier(不用文件系统强制底层设备刷新缓存,由RAID卡或者Flash卡来保证)挂载系统</p>\n<p>  IO调度策略修改为deadline。(IO调度策略采用deadline,它是非公平的调度策略,但是能兼顾一个请求不会在队列中等待太久导致饿死)</p>\n</li>\n</ul>\n<h2 id=\"Java-Multi-Threading-and-Concurrency-Interview-Questions-with-Answers\"><a href=\"#Java-Multi-Threading-and-Concurrency-Interview-Questions-with-Answers\" class=\"headerlink\" title=\"Java Multi-Threading and Concurrency Interview Questions with Answers\"></a>Java Multi-Threading and Concurrency Interview Questions with Answers</h2><p> <a href=\"http://www.journaldev.com/1162/java-multi-threading-concurrency-interview-questions-with-answers\" target=\"_blank\" rel=\"noopener\">http://www.journaldev.com/1162/java-multi-threading-concurrency-interview-questions-with-answers</a></p>\n<p> 虽然是面试题,但是讲了很多java线程中的基础概念</p>\n<h2 id=\"禁用Spotlight后-Alfred找不到app\"><a href=\"#禁用Spotlight后-Alfred找不到app\" class=\"headerlink\" title=\"禁用Spotlight后,Alfred找不到app\"></a>禁用Spotlight后,Alfred找不到app</h2><p> 个人感觉Alfred要比spotlight好用得多,特别是装了某些workflows后,操作效率明显提高.本着不要浪费性能的原则,参考<a href=\"http://hi.baidu.com/omyss/item/168dd67555a0d75c0d0a0717\" target=\"_blank\" rel=\"noopener\">MAC OS X 关闭 spotlight 降温的大法</a>把spotlight服务给全禁用掉了.</p>\n<p> 用了两天感觉不对,一些常用软件在Alfred中找不到,官方回答了<a href=\"http://support.alfredapp.com/kb:spotlight\" target=\"_blank\" rel=\"noopener\">Can Alfred work without Spotlight enabled?</a>,看来还得启用spotlight才行.悲剧的是降温大法里面提到的启用办法老是报错.下面的命令能解决这个问题:</p>\n<pre><code>sudo mv Search2.bundle/ Search.bundle/\nsudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist\nsudo mdutil -a -i on\n</code></pre><h2 id=\"markdown中出现了特殊字符导致blog一直不更新\"><a href=\"#markdown中出现了特殊字符导致blog一直不更新\" class=\"headerlink\" title=\"markdown中出现了特殊字符导致blog一直不更新\"></a>markdown中出现了特殊字符导致blog一直不更新</h2><p>前几天写了一篇博文,提交到github后,一直主页都刷不出来,以为是github出问题了.专门去twiter看了下,没有发现风吹草动,这下必须得把测试预览环境搭建起来.</p>\n<pre><code>sudo gem install jekyll\n#安装markdwon解析插件\nsudo gem install rdiscount\n#切换到项目路径\ncd bohrqiu.github.com\n#启动jekyll服务并监听文件变动\njekyll serve --watch\n</code></pre><p>启动起来后,居然看到markdown解析失败了</p>\n<pre><code>| Maruku tells you:\n+-----\n| Malformed HTML starting at &quot;&lt;v2,则打包失败)&quot;\n| -----\n| gin`来规范传递依赖,要求当前依赖的版本和传递依赖版本一样或者比传递依赖版本高(比如A-&gt;Cv1 ,A-&gt;D-&gt;Cv2,如果v1&lt;v2,则打包失败)EOF\n</code></pre><p>没想到<code>&lt;</code>符号还不能直接使用~~!</p>\n<h2 id=\"git-api-总结\"><a href=\"#git-api-总结\" class=\"headerlink\" title=\"git api 总结\"></a>git api 总结</h2><p>git很久没有用了,加上现在有github的客户端,基本上把命令都忘完了,偶然看到<br><a href=\"http://www.weibo.com/heiniuhaha\" target=\"_blank\" rel=\"noopener\">@<strong>heiniuhaha</strong></a> 妹纸总结的git api,太详细了,收了.</p>\n<p><img src=\"/2014-01-reading-notes/images/git-api.png\" width=\"500\" height=\"500\"></p>\n"},{"title":"2014年02月Reading Notes","date":"2014-02-19T13:52:17.000Z","_content":"\n## HTTP/1.1 Upgrade header\n\n[http://en.wikipedia.org/wiki/HTTP/1.1_Upgrade_header](http://en.wikipedia.org/wiki/HTTP/1.1_Upgrade_header)\n\n通过http upgrade header来实现协议转换,比如把http协议转换为websocket协议.[wildfly](http://wildfly.org/news/2014/02/11/WildFly8-Final-Released/)走得更远,8080端口支持HTTP (Servlet, JAX-RS, JAX-WS), Web Sockets, HTTP Upgraded Remoting (EJB Invocation, Remote JNDI).[这篇文章](http://jaitechwriteups.blogspot.com/2013/07/wildfly-800alpha3-released-with-support.html)讲述了一些细节.\n\n\n## When should I not kill -9 a process?\n\n[http://unix.stackexchange.com/questions/8916/when-should-i-not-kill-9-a-process](http://unix.stackexchange.com/questions/8916/when-should-i-not-kill-9-a-process)\n\nGenerally, you should use kill -15 before kill -9 to give the target process a chance to clean up after itself. \n\n## Java里快如闪电的线程间通讯\n\n[http://www.infoq.com/cn/articles/High-Performance-Java-Inter-Thread-Communications](http://www.infoq.com/cn/articles/High-Performance-Java-Inter-Thread-Communications)\n\n多线程中,锁是一个很大的性能开销.如果采用无锁实现,会发现原来世界可以更美好.\n\n## elasticsearch中文学习文档\n\n[https://github.com/medcl/elasticsearch-rtf](https://github.com/medcl/elasticsearch-rtf)\n\n[http://tanjianna.diandian.com/post/2013-07-27/elasticsearch-study](http://tanjianna.diandian.com/post/2013-07-27/elasticsearch-study)\n\nelasticsearch中文发行版，针对中文集成了相关插件，并带有Demo，方便新手学习,或者在生产环境中直接使用\n\n## elasticsearch中文学习文档\n\n[http://webappchecklist.com/](http://webappchecklist.com/)\nWeb开发者必备：Web应用检查清单\n\n\n\n## Cache coherence\n\n[http://en.wikipedia.org/wiki/Cache_coherence](http://en.wikipedia.org/wiki/Cache_coherence)\n\nIn a shared memory multiprocessor system with a separate cache memory for each processor, it is possible to have many copies of any one instruction operand: one copy in the main memory and one in each cache memory. When one copy of an operand is changed, the other copies of the operand must be changed also.\n\n**Cache coherence** is the discipline that ensures that changes in the values of shared operands are propagated throughout the system in a timely fashion.\n\n\n## 高性能、高流量Java Web站点打造的22条建议\n\n[http://www.csdn.net/article/2013-12-20/2817861-22-recommendations-for-building-effective-high-traffic-web-application](http://www.csdn.net/article/2013-12-20/2817861-22-recommendations-for-building-effective-high-traffic-web-application)\n\n* 通过使用类似Lucene的索引器做表的索引，使用一个允许在结果集上做基于其他字段的查询.\n\n\t对于复杂的查询,在数据库中直接做是很影响性能的,通过使用搜索引擎,能减轻数据库的压力.\n\n* 考虑使用Oracle或者MySQL分片\n\n\t数据量大时,做分片能获得不错的性能提升.\n* 不要使用session stickiness\n\n\t会话粘滞会带来一系列的问题.我们的分布式session方案中,默认要求LB启用会话粘滞,这样做的目的是能让本地缓存生效.当需要failover时,才去后端memcached中取数据.能同时兼顾性能和高可用.\n\t\n* 终止反向代理商的SSL\n\t\n\t在反向代理或者LB上卸载ssl,能够减轻web应用服务器的压力.\n\n* 拥抱一切“reactor”\n\n","source":"_posts/2014-02-reading-notes.md","raw":"---\ntitle: 2014年02月Reading Notes\ndate: 2014-02-19 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n  - Upgrade header\n  - linux kill\n  - elasticsearch\n  - Cache coherence\n---\n\n## HTTP/1.1 Upgrade header\n\n[http://en.wikipedia.org/wiki/HTTP/1.1_Upgrade_header](http://en.wikipedia.org/wiki/HTTP/1.1_Upgrade_header)\n\n通过http upgrade header来实现协议转换,比如把http协议转换为websocket协议.[wildfly](http://wildfly.org/news/2014/02/11/WildFly8-Final-Released/)走得更远,8080端口支持HTTP (Servlet, JAX-RS, JAX-WS), Web Sockets, HTTP Upgraded Remoting (EJB Invocation, Remote JNDI).[这篇文章](http://jaitechwriteups.blogspot.com/2013/07/wildfly-800alpha3-released-with-support.html)讲述了一些细节.\n\n\n## When should I not kill -9 a process?\n\n[http://unix.stackexchange.com/questions/8916/when-should-i-not-kill-9-a-process](http://unix.stackexchange.com/questions/8916/when-should-i-not-kill-9-a-process)\n\nGenerally, you should use kill -15 before kill -9 to give the target process a chance to clean up after itself. \n\n## Java里快如闪电的线程间通讯\n\n[http://www.infoq.com/cn/articles/High-Performance-Java-Inter-Thread-Communications](http://www.infoq.com/cn/articles/High-Performance-Java-Inter-Thread-Communications)\n\n多线程中,锁是一个很大的性能开销.如果采用无锁实现,会发现原来世界可以更美好.\n\n## elasticsearch中文学习文档\n\n[https://github.com/medcl/elasticsearch-rtf](https://github.com/medcl/elasticsearch-rtf)\n\n[http://tanjianna.diandian.com/post/2013-07-27/elasticsearch-study](http://tanjianna.diandian.com/post/2013-07-27/elasticsearch-study)\n\nelasticsearch中文发行版，针对中文集成了相关插件，并带有Demo，方便新手学习,或者在生产环境中直接使用\n\n## elasticsearch中文学习文档\n\n[http://webappchecklist.com/](http://webappchecklist.com/)\nWeb开发者必备：Web应用检查清单\n\n\n\n## Cache coherence\n\n[http://en.wikipedia.org/wiki/Cache_coherence](http://en.wikipedia.org/wiki/Cache_coherence)\n\nIn a shared memory multiprocessor system with a separate cache memory for each processor, it is possible to have many copies of any one instruction operand: one copy in the main memory and one in each cache memory. When one copy of an operand is changed, the other copies of the operand must be changed also.\n\n**Cache coherence** is the discipline that ensures that changes in the values of shared operands are propagated throughout the system in a timely fashion.\n\n\n## 高性能、高流量Java Web站点打造的22条建议\n\n[http://www.csdn.net/article/2013-12-20/2817861-22-recommendations-for-building-effective-high-traffic-web-application](http://www.csdn.net/article/2013-12-20/2817861-22-recommendations-for-building-effective-high-traffic-web-application)\n\n* 通过使用类似Lucene的索引器做表的索引，使用一个允许在结果集上做基于其他字段的查询.\n\n\t对于复杂的查询,在数据库中直接做是很影响性能的,通过使用搜索引擎,能减轻数据库的压力.\n\n* 考虑使用Oracle或者MySQL分片\n\n\t数据量大时,做分片能获得不错的性能提升.\n* 不要使用session stickiness\n\n\t会话粘滞会带来一系列的问题.我们的分布式session方案中,默认要求LB启用会话粘滞,这样做的目的是能让本地缓存生效.当需要failover时,才去后端memcached中取数据.能同时兼顾性能和高可用.\n\t\n* 终止反向代理商的SSL\n\t\n\t在反向代理或者LB上卸载ssl,能够减轻web应用服务器的压力.\n\n* 拥抱一切“reactor”\n\n","slug":"2014-02-reading-notes","published":1,"updated":"2018-04-01T16:53:17.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksf90007p0ugh0yme2zl","content":"<h2 id=\"HTTP-1-1-Upgrade-header\"><a href=\"#HTTP-1-1-Upgrade-header\" class=\"headerlink\" title=\"HTTP/1.1 Upgrade header\"></a>HTTP/1.1 Upgrade header</h2><p><a href=\"http://en.wikipedia.org/wiki/HTTP/1.1_Upgrade_header\" target=\"_blank\" rel=\"noopener\">http://en.wikipedia.org/wiki/HTTP/1.1_Upgrade_header</a></p>\n<p>通过http upgrade header来实现协议转换,比如把http协议转换为websocket协议.<a href=\"http://wildfly.org/news/2014/02/11/WildFly8-Final-Released/\" target=\"_blank\" rel=\"noopener\">wildfly</a>走得更远,8080端口支持HTTP (Servlet, JAX-RS, JAX-WS), Web Sockets, HTTP Upgraded Remoting (EJB Invocation, Remote JNDI).<a href=\"http://jaitechwriteups.blogspot.com/2013/07/wildfly-800alpha3-released-with-support.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>讲述了一些细节.</p>\n<h2 id=\"When-should-I-not-kill-9-a-process\"><a href=\"#When-should-I-not-kill-9-a-process\" class=\"headerlink\" title=\"When should I not kill -9 a process?\"></a>When should I not kill -9 a process?</h2><p><a href=\"http://unix.stackexchange.com/questions/8916/when-should-i-not-kill-9-a-process\" target=\"_blank\" rel=\"noopener\">http://unix.stackexchange.com/questions/8916/when-should-i-not-kill-9-a-process</a></p>\n<p>Generally, you should use kill -15 before kill -9 to give the target process a chance to clean up after itself. </p>\n<h2 id=\"Java里快如闪电的线程间通讯\"><a href=\"#Java里快如闪电的线程间通讯\" class=\"headerlink\" title=\"Java里快如闪电的线程间通讯\"></a>Java里快如闪电的线程间通讯</h2><p><a href=\"http://www.infoq.com/cn/articles/High-Performance-Java-Inter-Thread-Communications\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/High-Performance-Java-Inter-Thread-Communications</a></p>\n<p>多线程中,锁是一个很大的性能开销.如果采用无锁实现,会发现原来世界可以更美好.</p>\n<h2 id=\"elasticsearch中文学习文档\"><a href=\"#elasticsearch中文学习文档\" class=\"headerlink\" title=\"elasticsearch中文学习文档\"></a>elasticsearch中文学习文档</h2><p><a href=\"https://github.com/medcl/elasticsearch-rtf\" target=\"_blank\" rel=\"noopener\">https://github.com/medcl/elasticsearch-rtf</a></p>\n<p><a href=\"http://tanjianna.diandian.com/post/2013-07-27/elasticsearch-study\" target=\"_blank\" rel=\"noopener\">http://tanjianna.diandian.com/post/2013-07-27/elasticsearch-study</a></p>\n<p>elasticsearch中文发行版，针对中文集成了相关插件，并带有Demo，方便新手学习,或者在生产环境中直接使用</p>\n<h2 id=\"elasticsearch中文学习文档-1\"><a href=\"#elasticsearch中文学习文档-1\" class=\"headerlink\" title=\"elasticsearch中文学习文档\"></a>elasticsearch中文学习文档</h2><p><a href=\"http://webappchecklist.com/\" target=\"_blank\" rel=\"noopener\">http://webappchecklist.com/</a><br>Web开发者必备：Web应用检查清单</p>\n<h2 id=\"Cache-coherence\"><a href=\"#Cache-coherence\" class=\"headerlink\" title=\"Cache coherence\"></a>Cache coherence</h2><p><a href=\"http://en.wikipedia.org/wiki/Cache_coherence\" target=\"_blank\" rel=\"noopener\">http://en.wikipedia.org/wiki/Cache_coherence</a></p>\n<p>In a shared memory multiprocessor system with a separate cache memory for each processor, it is possible to have many copies of any one instruction operand: one copy in the main memory and one in each cache memory. When one copy of an operand is changed, the other copies of the operand must be changed also.</p>\n<p><strong>Cache coherence</strong> is the discipline that ensures that changes in the values of shared operands are propagated throughout the system in a timely fashion.</p>\n<h2 id=\"高性能、高流量Java-Web站点打造的22条建议\"><a href=\"#高性能、高流量Java-Web站点打造的22条建议\" class=\"headerlink\" title=\"高性能、高流量Java Web站点打造的22条建议\"></a>高性能、高流量Java Web站点打造的22条建议</h2><p><a href=\"http://www.csdn.net/article/2013-12-20/2817861-22-recommendations-for-building-effective-high-traffic-web-application\" target=\"_blank\" rel=\"noopener\">http://www.csdn.net/article/2013-12-20/2817861-22-recommendations-for-building-effective-high-traffic-web-application</a></p>\n<ul>\n<li><p>通过使用类似Lucene的索引器做表的索引，使用一个允许在结果集上做基于其他字段的查询.</p>\n<p>  对于复杂的查询,在数据库中直接做是很影响性能的,通过使用搜索引擎,能减轻数据库的压力.</p>\n</li>\n<li><p>考虑使用Oracle或者MySQL分片</p>\n<p>  数据量大时,做分片能获得不错的性能提升.</p>\n</li>\n<li><p>不要使用session stickiness</p>\n<p>  会话粘滞会带来一系列的问题.我们的分布式session方案中,默认要求LB启用会话粘滞,这样做的目的是能让本地缓存生效.当需要failover时,才去后端memcached中取数据.能同时兼顾性能和高可用.</p>\n</li>\n<li><p>终止反向代理商的SSL</p>\n<p>  在反向代理或者LB上卸载ssl,能够减轻web应用服务器的压力.</p>\n</li>\n<li><p>拥抱一切“reactor”</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"HTTP-1-1-Upgrade-header\"><a href=\"#HTTP-1-1-Upgrade-header\" class=\"headerlink\" title=\"HTTP/1.1 Upgrade header\"></a>HTTP/1.1 Upgrade header</h2><p><a href=\"http://en.wikipedia.org/wiki/HTTP/1.1_Upgrade_header\" target=\"_blank\" rel=\"noopener\">http://en.wikipedia.org/wiki/HTTP/1.1_Upgrade_header</a></p>\n<p>通过http upgrade header来实现协议转换,比如把http协议转换为websocket协议.<a href=\"http://wildfly.org/news/2014/02/11/WildFly8-Final-Released/\" target=\"_blank\" rel=\"noopener\">wildfly</a>走得更远,8080端口支持HTTP (Servlet, JAX-RS, JAX-WS), Web Sockets, HTTP Upgraded Remoting (EJB Invocation, Remote JNDI).<a href=\"http://jaitechwriteups.blogspot.com/2013/07/wildfly-800alpha3-released-with-support.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>讲述了一些细节.</p>\n<h2 id=\"When-should-I-not-kill-9-a-process\"><a href=\"#When-should-I-not-kill-9-a-process\" class=\"headerlink\" title=\"When should I not kill -9 a process?\"></a>When should I not kill -9 a process?</h2><p><a href=\"http://unix.stackexchange.com/questions/8916/when-should-i-not-kill-9-a-process\" target=\"_blank\" rel=\"noopener\">http://unix.stackexchange.com/questions/8916/when-should-i-not-kill-9-a-process</a></p>\n<p>Generally, you should use kill -15 before kill -9 to give the target process a chance to clean up after itself. </p>\n<h2 id=\"Java里快如闪电的线程间通讯\"><a href=\"#Java里快如闪电的线程间通讯\" class=\"headerlink\" title=\"Java里快如闪电的线程间通讯\"></a>Java里快如闪电的线程间通讯</h2><p><a href=\"http://www.infoq.com/cn/articles/High-Performance-Java-Inter-Thread-Communications\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/High-Performance-Java-Inter-Thread-Communications</a></p>\n<p>多线程中,锁是一个很大的性能开销.如果采用无锁实现,会发现原来世界可以更美好.</p>\n<h2 id=\"elasticsearch中文学习文档\"><a href=\"#elasticsearch中文学习文档\" class=\"headerlink\" title=\"elasticsearch中文学习文档\"></a>elasticsearch中文学习文档</h2><p><a href=\"https://github.com/medcl/elasticsearch-rtf\" target=\"_blank\" rel=\"noopener\">https://github.com/medcl/elasticsearch-rtf</a></p>\n<p><a href=\"http://tanjianna.diandian.com/post/2013-07-27/elasticsearch-study\" target=\"_blank\" rel=\"noopener\">http://tanjianna.diandian.com/post/2013-07-27/elasticsearch-study</a></p>\n<p>elasticsearch中文发行版，针对中文集成了相关插件，并带有Demo，方便新手学习,或者在生产环境中直接使用</p>\n<h2 id=\"elasticsearch中文学习文档-1\"><a href=\"#elasticsearch中文学习文档-1\" class=\"headerlink\" title=\"elasticsearch中文学习文档\"></a>elasticsearch中文学习文档</h2><p><a href=\"http://webappchecklist.com/\" target=\"_blank\" rel=\"noopener\">http://webappchecklist.com/</a><br>Web开发者必备：Web应用检查清单</p>\n<h2 id=\"Cache-coherence\"><a href=\"#Cache-coherence\" class=\"headerlink\" title=\"Cache coherence\"></a>Cache coherence</h2><p><a href=\"http://en.wikipedia.org/wiki/Cache_coherence\" target=\"_blank\" rel=\"noopener\">http://en.wikipedia.org/wiki/Cache_coherence</a></p>\n<p>In a shared memory multiprocessor system with a separate cache memory for each processor, it is possible to have many copies of any one instruction operand: one copy in the main memory and one in each cache memory. When one copy of an operand is changed, the other copies of the operand must be changed also.</p>\n<p><strong>Cache coherence</strong> is the discipline that ensures that changes in the values of shared operands are propagated throughout the system in a timely fashion.</p>\n<h2 id=\"高性能、高流量Java-Web站点打造的22条建议\"><a href=\"#高性能、高流量Java-Web站点打造的22条建议\" class=\"headerlink\" title=\"高性能、高流量Java Web站点打造的22条建议\"></a>高性能、高流量Java Web站点打造的22条建议</h2><p><a href=\"http://www.csdn.net/article/2013-12-20/2817861-22-recommendations-for-building-effective-high-traffic-web-application\" target=\"_blank\" rel=\"noopener\">http://www.csdn.net/article/2013-12-20/2817861-22-recommendations-for-building-effective-high-traffic-web-application</a></p>\n<ul>\n<li><p>通过使用类似Lucene的索引器做表的索引，使用一个允许在结果集上做基于其他字段的查询.</p>\n<p>  对于复杂的查询,在数据库中直接做是很影响性能的,通过使用搜索引擎,能减轻数据库的压力.</p>\n</li>\n<li><p>考虑使用Oracle或者MySQL分片</p>\n<p>  数据量大时,做分片能获得不错的性能提升.</p>\n</li>\n<li><p>不要使用session stickiness</p>\n<p>  会话粘滞会带来一系列的问题.我们的分布式session方案中,默认要求LB启用会话粘滞,这样做的目的是能让本地缓存生效.当需要failover时,才去后端memcached中取数据.能同时兼顾性能和高可用.</p>\n</li>\n<li><p>终止反向代理商的SSL</p>\n<p>  在反向代理或者LB上卸载ssl,能够减轻web应用服务器的压力.</p>\n</li>\n<li><p>拥抱一切“reactor”</p>\n</li>\n</ul>\n"},{"title":"2014年03月Reading Notes","date":"2014-03-07T13:52:17.000Z","_content":"\n## Volatile Vs Static in JAVA\n\n[http://malalanayake.wordpress.com/2013/09/12/volatile-vs-static-in-java/](http://malalanayake.wordpress.com/2013/09/12/volatile-vs-static-in-java/)\n\nvolatile能保证原子性和可见性.对static field的内存模型认识不足导致有些概念模糊了.内存结构见图:\n\n![](2014-03-reading-notes/volatilevsstaticinjava.png)\n\n<!--more-->\n\n## 101 个 MySQL 的调优贴士\n\n[http://www.oschina.net/translate/101-tips-to-mysql-tuning-and-optimization?print](http://www.oschina.net/translate/101-tips-to-mysql-tuning-and-optimization?print)\n\n看数据库相关的文章看到\"双缓存\"\"问题.数据库服务把OS cache打开会导致无意义的\"预读取\"(操作系统层面的随机或者顺序读取文件)和\"后写入\"(批处理),而且会导致\"双缓冲\"和昂贵的内存拷贝.\"双缓冲\"浪费了系统内存,并且浪费了额外的资源处理时间(读:从磁盘到os cache到DBMS cache;写:从DBMS cache 到OS cache 到磁盘).\n\n搜索双缓存相关的东东,把这篇文章搜索出来了.有几点可以说说(数据库管理层面的I DONT CARE!).\n\n\t74.为了 避免在更新前SELECT，使用INSERT ON DUPLICATE KEY或者INSERT IGNORE ,不要用UPDATE去实现。 (这深有体会,以前处于二逼阶段写的存储过程由17行变成了7行,简单依赖啊,减少了查询,减少了并发时的异常处理)\n\t81.使用DROP TABLE，CREATE TABLE DELETE FROM从表中删除所有数据。 (为毛不用truncate?)\n\t95. 为了更快的进行导入，在导入时临时禁用外键约束。\n\t96. 为了更快的进行导入，在导入时临时禁用唯一性检测。\n\n\n\n## zookeeper 分布式锁的实现\n\n[http://bohr.me/zookeeper-dev-ops/](http://bohr.me/zookeeper-dev-ops/)\n\n给自己写的zookeeper相关的分析添加一个链接地址.\n\n\n## Spring Data Repositories - A Deep Dive\n\n[https://github.com/olivergierke/repositories-deepdive](https://github.com/olivergierke/repositories-deepdive)\n\n[http://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/](http://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/)\n\n\n最近在看jpa,spring对jpa的支持确实比较犀利.Querydsl结合APT可以写出类型安全,易读的查询语句.不知道性能如何?\n\n\t@Test\n\tpublic void testQuerydsl() throws Exception {\n\t\tQTask $ = QTask.task;\n\t\tBooleanExpression titleStartWith = $.title.startsWith(\"Study\");\n\t\tBooleanExpression descEndWith = $.description.endsWith(\"org/\");\n\n\t\tIterable<Task> result = taskDao.findAll(titleStartWith.and(descEndWith));\n\t\tfor (Task task : result) {\n\t\t\tSystem.out.println(task);\n\t\t}\n\t}\n上面这段代码最后生成的sql如下:\n\n\tselect\n        id,raw_add_time,raw_update_time,description,title,user_id\n    from\n        t_task  \n    where\n        (title like ? escape '!')\n        and (description like ? escape '!')\n\n## ROCA Resource-oriented Client Architecture\n\nA collection of simple recommendations for decent Web application frontends.\n可以参考下,\n\n\n## 加盐密码哈希：如何正确使用\n\n[http://blog.jobbole.com/61872/](http://blog.jobbole.com/61872/)\n\nThe Enemy Knows The System.看了这篇文章,感觉我们做的东西太少了,对于密码的重视程度还不够,简单总结下:\n\n1. 永远不要告诉用户到底是用户名错了，还是密码错了\n2. 不要使用短盐值和盐值重复(明白了某开源项目为什么用户表里有个salt字段)\n3. 盐值应该使用基于加密的伪随机数生成器来生成,java里面用`java.security.SecureRandom`\n4. 使用慢哈希函数,java里面用`PBKDF2WithHmacSHA1`(需要权衡,太慢了会把登录做成DDOS攻击)\n5. 不要使用过时的hash算法,比如MD5或SHA1\n6. 密码重置时令牌应该要有有效期,并且重置时需要生成新的盐值.\n7. 不要过于频繁地强制你的用户修改密码，最多6个月1次(呵呵,bops)\n\n这些用上基本上就够了.附带赠送一个能够破解任何8位及以下长度MD5值的[彩虹表](https://www.freerainbowtables.com/en/tables2/)\n\n## Java中的CopyOnWrite容器\n\n[http://coolshell.cn/articles/11175.html](http://coolshell.cn/articles/11175.html)\n\n以前只是把CopyOnWrite用于拦截器这些场景,看来用于黑/白名单也挺适合的.特别是`CopyOnWriteMap`,很适合读写比例很大的场景.\n\n不过原文中提到的`内存占用问题`,我不赞同此问题,map本身的数据结构是Entry,这个Entry会上百M?`Arrays.copyOf`和`java.util.HashMap#HashMap(java.util.Map<? extends K,? extends V>)`都不是深拷贝.\n\n## 5 Techniques to Improve Your Server Logging\n\n[http://www.takipiblog.com/2014/02/27/5-techniques-to-improve-your-server-logging/](http://www.takipiblog.com/2014/02/27/5-techniques-to-improve-your-server-logging/)\n\n文章提到5个处理服务器端日志的细节.值得分享下:\n\n1. Hello my (Thread) name is\n\n   给线程取一个合理的名字.在开发云消息中间件时,考虑到便于跟踪业务执行轨迹,统一用msgid来作为线程的名字.\n\n   现在想起来还是比较土,当时不知道有[MDC](http://logback.qos.ch/manual/mdc.html)这个概念(2012年看到这个概念还很[兴奋](http://www.weibo.com/1880205234/yyHbX4elU?mod=weibotime)).现在我写的系统中,基本上都引入了MDC这个东东,方便自己定位问题.\n\n2. Distributed identifiers\n\n\t每个业务请求需要一个唯一的业务标识.这个必须有,写了`ID`就是来干这事的.我很赞同作者的观点,` every inbound operation going into your system should have a unique ID which will travel with it until it’s completed. `,我们的gid改造还没有结束,哈哈.\n\n3. Dont text + drive. Don’t log + loop\n\n\t在循环里面处理日志要小心,作者举的例子是加了一个打印日志次数的限制.在`while`循环里处理东东都要小心,最近给某项目分析定时任务没有执行的问题,发现循环中插入数据库,结果悲剧了,死循环一直插,数据库表示好伤啊.\n\n4. Uncaught handlers\n\n\t给线程加上未捕获的异常处理器.\n\n\t在和peigen讨论摘要日志时,提到了要加这个东东,结果真的给忘了.哎,真的老了么?忘事太容易了.真得注意下防御性编程了.openapi使用摘要日志api有问题,导致空指针异常,我在代码中加了一行error日志`由于api使用不当导致线程本地变量DL被清空,请仔细检查您的代码.本次操作会重新生成DL对象`.但是还有个洞没有塞住.万一使用`SDL`时,没有在`final block`中调用`SDL.end()`,最终会导致OOM.在`Thread.setDefaultUncaughtExceptionHandler`时,来清除`SDL`,也算是一个不错的方式.\n\n\t摘要日志API的设计过程中主要想着能给大家提供方便使用的api.现在易用性已经达到了,但是感觉用得不当太危险了.特别是`SDL`,`ThreadLocal`中有个`ArrayDeque`,万一没有调用`SDL.end()`,迟早会有OOM.\n\n\t线程变量真可怕!!!\n\n5. Catch external calls\n\n\t外部调用都要catch异常并记录日志.最好也别把异常吞了,重新抛出一个程序内部定义的运行时异常吧.分布式应用外部调用都很多,建议还是统一来处理日志和异常转换,AOP派上用场了.\n\n评论更精彩,有童鞋建议外部调用记录处理时长,用csv来记录日志便于后期处理.摘要日志中有记录时长的,我们用的json来记录日志,更方便处理,只是业务线程需要承担序列化的开销.\n\n## The Logging Olympics – A Race Between Today’s Top 5 Java Logging Frameworks\n\n[http://www.takipiblog.com/2013/12/18/the-logging-olympics-a-race-between-todays-top-5-logging-frameworks/](http://www.takipiblog.com/2013/12/18/the-logging-olympics-a-race-between-todays-top-5-logging-frameworks/)\n\n比较了几种日志框架,以前在写[日志优化](http://bohr.me/2013/07/09/log-tuning.html)时,注意到了log4j2异常牛掰,特别是采用了[disruptor](http://logging.apache.org/log4j/2.x/manual/async.html)的异步日志,在多线程下的表现非常夸张.不过我们已经被绑架到logback了,只是看看而已.\n\n## First-class functions in Java 8\n\n[http://www.youtube.com/watch?v=Rd-sqHjmfB0](http://www.youtube.com/watch?v=Rd-sqHjmfB0)\n\n这动画做的挺有意思,只是Java8还离我们比较远啊.\n","source":"_posts/2014-03-reading-notes.md","raw":"---\ntitle: 2014年03月Reading Notes\ndate: 2014-03-07 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n  - mysql\n  - Spring Data Repositories\n  - 加盐密码哈希\n  - CopyOnWrite\n  - log\n---\n\n## Volatile Vs Static in JAVA\n\n[http://malalanayake.wordpress.com/2013/09/12/volatile-vs-static-in-java/](http://malalanayake.wordpress.com/2013/09/12/volatile-vs-static-in-java/)\n\nvolatile能保证原子性和可见性.对static field的内存模型认识不足导致有些概念模糊了.内存结构见图:\n\n![](2014-03-reading-notes/volatilevsstaticinjava.png)\n\n<!--more-->\n\n## 101 个 MySQL 的调优贴士\n\n[http://www.oschina.net/translate/101-tips-to-mysql-tuning-and-optimization?print](http://www.oschina.net/translate/101-tips-to-mysql-tuning-and-optimization?print)\n\n看数据库相关的文章看到\"双缓存\"\"问题.数据库服务把OS cache打开会导致无意义的\"预读取\"(操作系统层面的随机或者顺序读取文件)和\"后写入\"(批处理),而且会导致\"双缓冲\"和昂贵的内存拷贝.\"双缓冲\"浪费了系统内存,并且浪费了额外的资源处理时间(读:从磁盘到os cache到DBMS cache;写:从DBMS cache 到OS cache 到磁盘).\n\n搜索双缓存相关的东东,把这篇文章搜索出来了.有几点可以说说(数据库管理层面的I DONT CARE!).\n\n\t74.为了 避免在更新前SELECT，使用INSERT ON DUPLICATE KEY或者INSERT IGNORE ,不要用UPDATE去实现。 (这深有体会,以前处于二逼阶段写的存储过程由17行变成了7行,简单依赖啊,减少了查询,减少了并发时的异常处理)\n\t81.使用DROP TABLE，CREATE TABLE DELETE FROM从表中删除所有数据。 (为毛不用truncate?)\n\t95. 为了更快的进行导入，在导入时临时禁用外键约束。\n\t96. 为了更快的进行导入，在导入时临时禁用唯一性检测。\n\n\n\n## zookeeper 分布式锁的实现\n\n[http://bohr.me/zookeeper-dev-ops/](http://bohr.me/zookeeper-dev-ops/)\n\n给自己写的zookeeper相关的分析添加一个链接地址.\n\n\n## Spring Data Repositories - A Deep Dive\n\n[https://github.com/olivergierke/repositories-deepdive](https://github.com/olivergierke/repositories-deepdive)\n\n[http://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/](http://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/)\n\n\n最近在看jpa,spring对jpa的支持确实比较犀利.Querydsl结合APT可以写出类型安全,易读的查询语句.不知道性能如何?\n\n\t@Test\n\tpublic void testQuerydsl() throws Exception {\n\t\tQTask $ = QTask.task;\n\t\tBooleanExpression titleStartWith = $.title.startsWith(\"Study\");\n\t\tBooleanExpression descEndWith = $.description.endsWith(\"org/\");\n\n\t\tIterable<Task> result = taskDao.findAll(titleStartWith.and(descEndWith));\n\t\tfor (Task task : result) {\n\t\t\tSystem.out.println(task);\n\t\t}\n\t}\n上面这段代码最后生成的sql如下:\n\n\tselect\n        id,raw_add_time,raw_update_time,description,title,user_id\n    from\n        t_task  \n    where\n        (title like ? escape '!')\n        and (description like ? escape '!')\n\n## ROCA Resource-oriented Client Architecture\n\nA collection of simple recommendations for decent Web application frontends.\n可以参考下,\n\n\n## 加盐密码哈希：如何正确使用\n\n[http://blog.jobbole.com/61872/](http://blog.jobbole.com/61872/)\n\nThe Enemy Knows The System.看了这篇文章,感觉我们做的东西太少了,对于密码的重视程度还不够,简单总结下:\n\n1. 永远不要告诉用户到底是用户名错了，还是密码错了\n2. 不要使用短盐值和盐值重复(明白了某开源项目为什么用户表里有个salt字段)\n3. 盐值应该使用基于加密的伪随机数生成器来生成,java里面用`java.security.SecureRandom`\n4. 使用慢哈希函数,java里面用`PBKDF2WithHmacSHA1`(需要权衡,太慢了会把登录做成DDOS攻击)\n5. 不要使用过时的hash算法,比如MD5或SHA1\n6. 密码重置时令牌应该要有有效期,并且重置时需要生成新的盐值.\n7. 不要过于频繁地强制你的用户修改密码，最多6个月1次(呵呵,bops)\n\n这些用上基本上就够了.附带赠送一个能够破解任何8位及以下长度MD5值的[彩虹表](https://www.freerainbowtables.com/en/tables2/)\n\n## Java中的CopyOnWrite容器\n\n[http://coolshell.cn/articles/11175.html](http://coolshell.cn/articles/11175.html)\n\n以前只是把CopyOnWrite用于拦截器这些场景,看来用于黑/白名单也挺适合的.特别是`CopyOnWriteMap`,很适合读写比例很大的场景.\n\n不过原文中提到的`内存占用问题`,我不赞同此问题,map本身的数据结构是Entry,这个Entry会上百M?`Arrays.copyOf`和`java.util.HashMap#HashMap(java.util.Map<? extends K,? extends V>)`都不是深拷贝.\n\n## 5 Techniques to Improve Your Server Logging\n\n[http://www.takipiblog.com/2014/02/27/5-techniques-to-improve-your-server-logging/](http://www.takipiblog.com/2014/02/27/5-techniques-to-improve-your-server-logging/)\n\n文章提到5个处理服务器端日志的细节.值得分享下:\n\n1. Hello my (Thread) name is\n\n   给线程取一个合理的名字.在开发云消息中间件时,考虑到便于跟踪业务执行轨迹,统一用msgid来作为线程的名字.\n\n   现在想起来还是比较土,当时不知道有[MDC](http://logback.qos.ch/manual/mdc.html)这个概念(2012年看到这个概念还很[兴奋](http://www.weibo.com/1880205234/yyHbX4elU?mod=weibotime)).现在我写的系统中,基本上都引入了MDC这个东东,方便自己定位问题.\n\n2. Distributed identifiers\n\n\t每个业务请求需要一个唯一的业务标识.这个必须有,写了`ID`就是来干这事的.我很赞同作者的观点,` every inbound operation going into your system should have a unique ID which will travel with it until it’s completed. `,我们的gid改造还没有结束,哈哈.\n\n3. Dont text + drive. Don’t log + loop\n\n\t在循环里面处理日志要小心,作者举的例子是加了一个打印日志次数的限制.在`while`循环里处理东东都要小心,最近给某项目分析定时任务没有执行的问题,发现循环中插入数据库,结果悲剧了,死循环一直插,数据库表示好伤啊.\n\n4. Uncaught handlers\n\n\t给线程加上未捕获的异常处理器.\n\n\t在和peigen讨论摘要日志时,提到了要加这个东东,结果真的给忘了.哎,真的老了么?忘事太容易了.真得注意下防御性编程了.openapi使用摘要日志api有问题,导致空指针异常,我在代码中加了一行error日志`由于api使用不当导致线程本地变量DL被清空,请仔细检查您的代码.本次操作会重新生成DL对象`.但是还有个洞没有塞住.万一使用`SDL`时,没有在`final block`中调用`SDL.end()`,最终会导致OOM.在`Thread.setDefaultUncaughtExceptionHandler`时,来清除`SDL`,也算是一个不错的方式.\n\n\t摘要日志API的设计过程中主要想着能给大家提供方便使用的api.现在易用性已经达到了,但是感觉用得不当太危险了.特别是`SDL`,`ThreadLocal`中有个`ArrayDeque`,万一没有调用`SDL.end()`,迟早会有OOM.\n\n\t线程变量真可怕!!!\n\n5. Catch external calls\n\n\t外部调用都要catch异常并记录日志.最好也别把异常吞了,重新抛出一个程序内部定义的运行时异常吧.分布式应用外部调用都很多,建议还是统一来处理日志和异常转换,AOP派上用场了.\n\n评论更精彩,有童鞋建议外部调用记录处理时长,用csv来记录日志便于后期处理.摘要日志中有记录时长的,我们用的json来记录日志,更方便处理,只是业务线程需要承担序列化的开销.\n\n## The Logging Olympics – A Race Between Today’s Top 5 Java Logging Frameworks\n\n[http://www.takipiblog.com/2013/12/18/the-logging-olympics-a-race-between-todays-top-5-logging-frameworks/](http://www.takipiblog.com/2013/12/18/the-logging-olympics-a-race-between-todays-top-5-logging-frameworks/)\n\n比较了几种日志框架,以前在写[日志优化](http://bohr.me/2013/07/09/log-tuning.html)时,注意到了log4j2异常牛掰,特别是采用了[disruptor](http://logging.apache.org/log4j/2.x/manual/async.html)的异步日志,在多线程下的表现非常夸张.不过我们已经被绑架到logback了,只是看看而已.\n\n## First-class functions in Java 8\n\n[http://www.youtube.com/watch?v=Rd-sqHjmfB0](http://www.youtube.com/watch?v=Rd-sqHjmfB0)\n\n这动画做的挺有意思,只是Java8还离我们比较远啊.\n","slug":"2014-03-reading-notes","published":1,"updated":"2018-04-01T16:53:17.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksfb0008p0ugq47b1c13","content":"<h2 id=\"Volatile-Vs-Static-in-JAVA\"><a href=\"#Volatile-Vs-Static-in-JAVA\" class=\"headerlink\" title=\"Volatile Vs Static in JAVA\"></a>Volatile Vs Static in JAVA</h2><p><a href=\"http://malalanayake.wordpress.com/2013/09/12/volatile-vs-static-in-java/\" target=\"_blank\" rel=\"noopener\">http://malalanayake.wordpress.com/2013/09/12/volatile-vs-static-in-java/</a></p>\n<p>volatile能保证原子性和可见性.对static field的内存模型认识不足导致有些概念模糊了.内存结构见图:</p>\n<p><img src=\"/2014-03-reading-notes/volatilevsstaticinjava.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h2 id=\"101-个-MySQL-的调优贴士\"><a href=\"#101-个-MySQL-的调优贴士\" class=\"headerlink\" title=\"101 个 MySQL 的调优贴士\"></a>101 个 MySQL 的调优贴士</h2><p><a href=\"http://www.oschina.net/translate/101-tips-to-mysql-tuning-and-optimization?print\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/translate/101-tips-to-mysql-tuning-and-optimization?print</a></p>\n<p>看数据库相关的文章看到”双缓存””问题.数据库服务把OS cache打开会导致无意义的”预读取”(操作系统层面的随机或者顺序读取文件)和”后写入”(批处理),而且会导致”双缓冲”和昂贵的内存拷贝.”双缓冲”浪费了系统内存,并且浪费了额外的资源处理时间(读:从磁盘到os cache到DBMS cache;写:从DBMS cache 到OS cache 到磁盘).</p>\n<p>搜索双缓存相关的东东,把这篇文章搜索出来了.有几点可以说说(数据库管理层面的I DONT CARE!).</p>\n<pre><code>74.为了 避免在更新前SELECT，使用INSERT ON DUPLICATE KEY或者INSERT IGNORE ,不要用UPDATE去实现。 (这深有体会,以前处于二逼阶段写的存储过程由17行变成了7行,简单依赖啊,减少了查询,减少了并发时的异常处理)\n81.使用DROP TABLE，CREATE TABLE DELETE FROM从表中删除所有数据。 (为毛不用truncate?)\n95. 为了更快的进行导入，在导入时临时禁用外键约束。\n96. 为了更快的进行导入，在导入时临时禁用唯一性检测。\n</code></pre><h2 id=\"zookeeper-分布式锁的实现\"><a href=\"#zookeeper-分布式锁的实现\" class=\"headerlink\" title=\"zookeeper 分布式锁的实现\"></a>zookeeper 分布式锁的实现</h2><p><a href=\"http://bohr.me/zookeeper-dev-ops/\">http://bohr.me/zookeeper-dev-ops/</a></p>\n<p>给自己写的zookeeper相关的分析添加一个链接地址.</p>\n<h2 id=\"Spring-Data-Repositories-A-Deep-Dive\"><a href=\"#Spring-Data-Repositories-A-Deep-Dive\" class=\"headerlink\" title=\"Spring Data Repositories - A Deep Dive\"></a>Spring Data Repositories - A Deep Dive</h2><p><a href=\"https://github.com/olivergierke/repositories-deepdive\" target=\"_blank\" rel=\"noopener\">https://github.com/olivergierke/repositories-deepdive</a></p>\n<p><a href=\"http://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/\" target=\"_blank\" rel=\"noopener\">http://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/</a></p>\n<p>最近在看jpa,spring对jpa的支持确实比较犀利.Querydsl结合APT可以写出类型安全,易读的查询语句.不知道性能如何?</p>\n<pre><code>@Test\npublic void testQuerydsl() throws Exception {\n    QTask $ = QTask.task;\n    BooleanExpression titleStartWith = $.title.startsWith(&quot;Study&quot;);\n    BooleanExpression descEndWith = $.description.endsWith(&quot;org/&quot;);\n\n    Iterable&lt;Task&gt; result = taskDao.findAll(titleStartWith.and(descEndWith));\n    for (Task task : result) {\n        System.out.println(task);\n    }\n}\n</code></pre><p>上面这段代码最后生成的sql如下:</p>\n<pre><code>select\n    id,raw_add_time,raw_update_time,description,title,user_id\nfrom\n    t_task  \nwhere\n    (title like ? escape &apos;!&apos;)\n    and (description like ? escape &apos;!&apos;)\n</code></pre><h2 id=\"ROCA-Resource-oriented-Client-Architecture\"><a href=\"#ROCA-Resource-oriented-Client-Architecture\" class=\"headerlink\" title=\"ROCA Resource-oriented Client Architecture\"></a>ROCA Resource-oriented Client Architecture</h2><p>A collection of simple recommendations for decent Web application frontends.<br>可以参考下,</p>\n<h2 id=\"加盐密码哈希：如何正确使用\"><a href=\"#加盐密码哈希：如何正确使用\" class=\"headerlink\" title=\"加盐密码哈希：如何正确使用\"></a>加盐密码哈希：如何正确使用</h2><p><a href=\"http://blog.jobbole.com/61872/\" target=\"_blank\" rel=\"noopener\">http://blog.jobbole.com/61872/</a></p>\n<p>The Enemy Knows The System.看了这篇文章,感觉我们做的东西太少了,对于密码的重视程度还不够,简单总结下:</p>\n<ol>\n<li>永远不要告诉用户到底是用户名错了，还是密码错了</li>\n<li>不要使用短盐值和盐值重复(明白了某开源项目为什么用户表里有个salt字段)</li>\n<li>盐值应该使用基于加密的伪随机数生成器来生成,java里面用<code>java.security.SecureRandom</code></li>\n<li>使用慢哈希函数,java里面用<code>PBKDF2WithHmacSHA1</code>(需要权衡,太慢了会把登录做成DDOS攻击)</li>\n<li>不要使用过时的hash算法,比如MD5或SHA1</li>\n<li>密码重置时令牌应该要有有效期,并且重置时需要生成新的盐值.</li>\n<li>不要过于频繁地强制你的用户修改密码，最多6个月1次(呵呵,bops)</li>\n</ol>\n<p>这些用上基本上就够了.附带赠送一个能够破解任何8位及以下长度MD5值的<a href=\"https://www.freerainbowtables.com/en/tables2/\" target=\"_blank\" rel=\"noopener\">彩虹表</a></p>\n<h2 id=\"Java中的CopyOnWrite容器\"><a href=\"#Java中的CopyOnWrite容器\" class=\"headerlink\" title=\"Java中的CopyOnWrite容器\"></a>Java中的CopyOnWrite容器</h2><p><a href=\"http://coolshell.cn/articles/11175.html\" target=\"_blank\" rel=\"noopener\">http://coolshell.cn/articles/11175.html</a></p>\n<p>以前只是把CopyOnWrite用于拦截器这些场景,看来用于黑/白名单也挺适合的.特别是<code>CopyOnWriteMap</code>,很适合读写比例很大的场景.</p>\n<p>不过原文中提到的<code>内存占用问题</code>,我不赞同此问题,map本身的数据结构是Entry,这个Entry会上百M?<code>Arrays.copyOf</code>和<code>java.util.HashMap#HashMap(java.util.Map&lt;? extends K,? extends V&gt;)</code>都不是深拷贝.</p>\n<h2 id=\"5-Techniques-to-Improve-Your-Server-Logging\"><a href=\"#5-Techniques-to-Improve-Your-Server-Logging\" class=\"headerlink\" title=\"5 Techniques to Improve Your Server Logging\"></a>5 Techniques to Improve Your Server Logging</h2><p><a href=\"http://www.takipiblog.com/2014/02/27/5-techniques-to-improve-your-server-logging/\" target=\"_blank\" rel=\"noopener\">http://www.takipiblog.com/2014/02/27/5-techniques-to-improve-your-server-logging/</a></p>\n<p>文章提到5个处理服务器端日志的细节.值得分享下:</p>\n<ol>\n<li><p>Hello my (Thread) name is</p>\n<p>给线程取一个合理的名字.在开发云消息中间件时,考虑到便于跟踪业务执行轨迹,统一用msgid来作为线程的名字.</p>\n<p>现在想起来还是比较土,当时不知道有<a href=\"http://logback.qos.ch/manual/mdc.html\" target=\"_blank\" rel=\"noopener\">MDC</a>这个概念(2012年看到这个概念还很<a href=\"http://www.weibo.com/1880205234/yyHbX4elU?mod=weibotime\" target=\"_blank\" rel=\"noopener\">兴奋</a>).现在我写的系统中,基本上都引入了MDC这个东东,方便自己定位问题.</p>\n</li>\n<li><p>Distributed identifiers</p>\n<p> 每个业务请求需要一个唯一的业务标识.这个必须有,写了<code>ID</code>就是来干这事的.我很赞同作者的观点,<code>every inbound operation going into your system should have a unique ID which will travel with it until it’s completed.</code>,我们的gid改造还没有结束,哈哈.</p>\n</li>\n<li><p>Dont text + drive. Don’t log + loop</p>\n<p> 在循环里面处理日志要小心,作者举的例子是加了一个打印日志次数的限制.在<code>while</code>循环里处理东东都要小心,最近给某项目分析定时任务没有执行的问题,发现循环中插入数据库,结果悲剧了,死循环一直插,数据库表示好伤啊.</p>\n</li>\n<li><p>Uncaught handlers</p>\n<p> 给线程加上未捕获的异常处理器.</p>\n<p> 在和peigen讨论摘要日志时,提到了要加这个东东,结果真的给忘了.哎,真的老了么?忘事太容易了.真得注意下防御性编程了.openapi使用摘要日志api有问题,导致空指针异常,我在代码中加了一行error日志<code>由于api使用不当导致线程本地变量DL被清空,请仔细检查您的代码.本次操作会重新生成DL对象</code>.但是还有个洞没有塞住.万一使用<code>SDL</code>时,没有在<code>final block</code>中调用<code>SDL.end()</code>,最终会导致OOM.在<code>Thread.setDefaultUncaughtExceptionHandler</code>时,来清除<code>SDL</code>,也算是一个不错的方式.</p>\n<p> 摘要日志API的设计过程中主要想着能给大家提供方便使用的api.现在易用性已经达到了,但是感觉用得不当太危险了.特别是<code>SDL</code>,<code>ThreadLocal</code>中有个<code>ArrayDeque</code>,万一没有调用<code>SDL.end()</code>,迟早会有OOM.</p>\n<p> 线程变量真可怕!!!</p>\n</li>\n<li><p>Catch external calls</p>\n<p> 外部调用都要catch异常并记录日志.最好也别把异常吞了,重新抛出一个程序内部定义的运行时异常吧.分布式应用外部调用都很多,建议还是统一来处理日志和异常转换,AOP派上用场了.</p>\n</li>\n</ol>\n<p>评论更精彩,有童鞋建议外部调用记录处理时长,用csv来记录日志便于后期处理.摘要日志中有记录时长的,我们用的json来记录日志,更方便处理,只是业务线程需要承担序列化的开销.</p>\n<h2 id=\"The-Logging-Olympics-–-A-Race-Between-Today’s-Top-5-Java-Logging-Frameworks\"><a href=\"#The-Logging-Olympics-–-A-Race-Between-Today’s-Top-5-Java-Logging-Frameworks\" class=\"headerlink\" title=\"The Logging Olympics – A Race Between Today’s Top 5 Java Logging Frameworks\"></a>The Logging Olympics – A Race Between Today’s Top 5 Java Logging Frameworks</h2><p><a href=\"http://www.takipiblog.com/2013/12/18/the-logging-olympics-a-race-between-todays-top-5-logging-frameworks/\" target=\"_blank\" rel=\"noopener\">http://www.takipiblog.com/2013/12/18/the-logging-olympics-a-race-between-todays-top-5-logging-frameworks/</a></p>\n<p>比较了几种日志框架,以前在写<a href=\"http://bohr.me/2013/07/09/log-tuning.html\">日志优化</a>时,注意到了log4j2异常牛掰,特别是采用了<a href=\"http://logging.apache.org/log4j/2.x/manual/async.html\" target=\"_blank\" rel=\"noopener\">disruptor</a>的异步日志,在多线程下的表现非常夸张.不过我们已经被绑架到logback了,只是看看而已.</p>\n<h2 id=\"First-class-functions-in-Java-8\"><a href=\"#First-class-functions-in-Java-8\" class=\"headerlink\" title=\"First-class functions in Java 8\"></a>First-class functions in Java 8</h2><p><a href=\"http://www.youtube.com/watch?v=Rd-sqHjmfB0\" target=\"_blank\" rel=\"noopener\">http://www.youtube.com/watch?v=Rd-sqHjmfB0</a></p>\n<p>这动画做的挺有意思,只是Java8还离我们比较远啊.</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Volatile-Vs-Static-in-JAVA\"><a href=\"#Volatile-Vs-Static-in-JAVA\" class=\"headerlink\" title=\"Volatile Vs Static in JAVA\"></a>Volatile Vs Static in JAVA</h2><p><a href=\"http://malalanayake.wordpress.com/2013/09/12/volatile-vs-static-in-java/\" target=\"_blank\" rel=\"noopener\">http://malalanayake.wordpress.com/2013/09/12/volatile-vs-static-in-java/</a></p>\n<p>volatile能保证原子性和可见性.对static field的内存模型认识不足导致有些概念模糊了.内存结构见图:</p>\n<p><img src=\"/2014-03-reading-notes/volatilevsstaticinjava.png\" alt=\"\"></p>","more":"<h2 id=\"101-个-MySQL-的调优贴士\"><a href=\"#101-个-MySQL-的调优贴士\" class=\"headerlink\" title=\"101 个 MySQL 的调优贴士\"></a>101 个 MySQL 的调优贴士</h2><p><a href=\"http://www.oschina.net/translate/101-tips-to-mysql-tuning-and-optimization?print\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/translate/101-tips-to-mysql-tuning-and-optimization?print</a></p>\n<p>看数据库相关的文章看到”双缓存””问题.数据库服务把OS cache打开会导致无意义的”预读取”(操作系统层面的随机或者顺序读取文件)和”后写入”(批处理),而且会导致”双缓冲”和昂贵的内存拷贝.”双缓冲”浪费了系统内存,并且浪费了额外的资源处理时间(读:从磁盘到os cache到DBMS cache;写:从DBMS cache 到OS cache 到磁盘).</p>\n<p>搜索双缓存相关的东东,把这篇文章搜索出来了.有几点可以说说(数据库管理层面的I DONT CARE!).</p>\n<pre><code>74.为了 避免在更新前SELECT，使用INSERT ON DUPLICATE KEY或者INSERT IGNORE ,不要用UPDATE去实现。 (这深有体会,以前处于二逼阶段写的存储过程由17行变成了7行,简单依赖啊,减少了查询,减少了并发时的异常处理)\n81.使用DROP TABLE，CREATE TABLE DELETE FROM从表中删除所有数据。 (为毛不用truncate?)\n95. 为了更快的进行导入，在导入时临时禁用外键约束。\n96. 为了更快的进行导入，在导入时临时禁用唯一性检测。\n</code></pre><h2 id=\"zookeeper-分布式锁的实现\"><a href=\"#zookeeper-分布式锁的实现\" class=\"headerlink\" title=\"zookeeper 分布式锁的实现\"></a>zookeeper 分布式锁的实现</h2><p><a href=\"http://bohr.me/zookeeper-dev-ops/\">http://bohr.me/zookeeper-dev-ops/</a></p>\n<p>给自己写的zookeeper相关的分析添加一个链接地址.</p>\n<h2 id=\"Spring-Data-Repositories-A-Deep-Dive\"><a href=\"#Spring-Data-Repositories-A-Deep-Dive\" class=\"headerlink\" title=\"Spring Data Repositories - A Deep Dive\"></a>Spring Data Repositories - A Deep Dive</h2><p><a href=\"https://github.com/olivergierke/repositories-deepdive\" target=\"_blank\" rel=\"noopener\">https://github.com/olivergierke/repositories-deepdive</a></p>\n<p><a href=\"http://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/\" target=\"_blank\" rel=\"noopener\">http://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/</a></p>\n<p>最近在看jpa,spring对jpa的支持确实比较犀利.Querydsl结合APT可以写出类型安全,易读的查询语句.不知道性能如何?</p>\n<pre><code>@Test\npublic void testQuerydsl() throws Exception {\n    QTask $ = QTask.task;\n    BooleanExpression titleStartWith = $.title.startsWith(&quot;Study&quot;);\n    BooleanExpression descEndWith = $.description.endsWith(&quot;org/&quot;);\n\n    Iterable&lt;Task&gt; result = taskDao.findAll(titleStartWith.and(descEndWith));\n    for (Task task : result) {\n        System.out.println(task);\n    }\n}\n</code></pre><p>上面这段代码最后生成的sql如下:</p>\n<pre><code>select\n    id,raw_add_time,raw_update_time,description,title,user_id\nfrom\n    t_task  \nwhere\n    (title like ? escape &apos;!&apos;)\n    and (description like ? escape &apos;!&apos;)\n</code></pre><h2 id=\"ROCA-Resource-oriented-Client-Architecture\"><a href=\"#ROCA-Resource-oriented-Client-Architecture\" class=\"headerlink\" title=\"ROCA Resource-oriented Client Architecture\"></a>ROCA Resource-oriented Client Architecture</h2><p>A collection of simple recommendations for decent Web application frontends.<br>可以参考下,</p>\n<h2 id=\"加盐密码哈希：如何正确使用\"><a href=\"#加盐密码哈希：如何正确使用\" class=\"headerlink\" title=\"加盐密码哈希：如何正确使用\"></a>加盐密码哈希：如何正确使用</h2><p><a href=\"http://blog.jobbole.com/61872/\" target=\"_blank\" rel=\"noopener\">http://blog.jobbole.com/61872/</a></p>\n<p>The Enemy Knows The System.看了这篇文章,感觉我们做的东西太少了,对于密码的重视程度还不够,简单总结下:</p>\n<ol>\n<li>永远不要告诉用户到底是用户名错了，还是密码错了</li>\n<li>不要使用短盐值和盐值重复(明白了某开源项目为什么用户表里有个salt字段)</li>\n<li>盐值应该使用基于加密的伪随机数生成器来生成,java里面用<code>java.security.SecureRandom</code></li>\n<li>使用慢哈希函数,java里面用<code>PBKDF2WithHmacSHA1</code>(需要权衡,太慢了会把登录做成DDOS攻击)</li>\n<li>不要使用过时的hash算法,比如MD5或SHA1</li>\n<li>密码重置时令牌应该要有有效期,并且重置时需要生成新的盐值.</li>\n<li>不要过于频繁地强制你的用户修改密码，最多6个月1次(呵呵,bops)</li>\n</ol>\n<p>这些用上基本上就够了.附带赠送一个能够破解任何8位及以下长度MD5值的<a href=\"https://www.freerainbowtables.com/en/tables2/\" target=\"_blank\" rel=\"noopener\">彩虹表</a></p>\n<h2 id=\"Java中的CopyOnWrite容器\"><a href=\"#Java中的CopyOnWrite容器\" class=\"headerlink\" title=\"Java中的CopyOnWrite容器\"></a>Java中的CopyOnWrite容器</h2><p><a href=\"http://coolshell.cn/articles/11175.html\" target=\"_blank\" rel=\"noopener\">http://coolshell.cn/articles/11175.html</a></p>\n<p>以前只是把CopyOnWrite用于拦截器这些场景,看来用于黑/白名单也挺适合的.特别是<code>CopyOnWriteMap</code>,很适合读写比例很大的场景.</p>\n<p>不过原文中提到的<code>内存占用问题</code>,我不赞同此问题,map本身的数据结构是Entry,这个Entry会上百M?<code>Arrays.copyOf</code>和<code>java.util.HashMap#HashMap(java.util.Map&lt;? extends K,? extends V&gt;)</code>都不是深拷贝.</p>\n<h2 id=\"5-Techniques-to-Improve-Your-Server-Logging\"><a href=\"#5-Techniques-to-Improve-Your-Server-Logging\" class=\"headerlink\" title=\"5 Techniques to Improve Your Server Logging\"></a>5 Techniques to Improve Your Server Logging</h2><p><a href=\"http://www.takipiblog.com/2014/02/27/5-techniques-to-improve-your-server-logging/\" target=\"_blank\" rel=\"noopener\">http://www.takipiblog.com/2014/02/27/5-techniques-to-improve-your-server-logging/</a></p>\n<p>文章提到5个处理服务器端日志的细节.值得分享下:</p>\n<ol>\n<li><p>Hello my (Thread) name is</p>\n<p>给线程取一个合理的名字.在开发云消息中间件时,考虑到便于跟踪业务执行轨迹,统一用msgid来作为线程的名字.</p>\n<p>现在想起来还是比较土,当时不知道有<a href=\"http://logback.qos.ch/manual/mdc.html\" target=\"_blank\" rel=\"noopener\">MDC</a>这个概念(2012年看到这个概念还很<a href=\"http://www.weibo.com/1880205234/yyHbX4elU?mod=weibotime\" target=\"_blank\" rel=\"noopener\">兴奋</a>).现在我写的系统中,基本上都引入了MDC这个东东,方便自己定位问题.</p>\n</li>\n<li><p>Distributed identifiers</p>\n<p> 每个业务请求需要一个唯一的业务标识.这个必须有,写了<code>ID</code>就是来干这事的.我很赞同作者的观点,<code>every inbound operation going into your system should have a unique ID which will travel with it until it’s completed.</code>,我们的gid改造还没有结束,哈哈.</p>\n</li>\n<li><p>Dont text + drive. Don’t log + loop</p>\n<p> 在循环里面处理日志要小心,作者举的例子是加了一个打印日志次数的限制.在<code>while</code>循环里处理东东都要小心,最近给某项目分析定时任务没有执行的问题,发现循环中插入数据库,结果悲剧了,死循环一直插,数据库表示好伤啊.</p>\n</li>\n<li><p>Uncaught handlers</p>\n<p> 给线程加上未捕获的异常处理器.</p>\n<p> 在和peigen讨论摘要日志时,提到了要加这个东东,结果真的给忘了.哎,真的老了么?忘事太容易了.真得注意下防御性编程了.openapi使用摘要日志api有问题,导致空指针异常,我在代码中加了一行error日志<code>由于api使用不当导致线程本地变量DL被清空,请仔细检查您的代码.本次操作会重新生成DL对象</code>.但是还有个洞没有塞住.万一使用<code>SDL</code>时,没有在<code>final block</code>中调用<code>SDL.end()</code>,最终会导致OOM.在<code>Thread.setDefaultUncaughtExceptionHandler</code>时,来清除<code>SDL</code>,也算是一个不错的方式.</p>\n<p> 摘要日志API的设计过程中主要想着能给大家提供方便使用的api.现在易用性已经达到了,但是感觉用得不当太危险了.特别是<code>SDL</code>,<code>ThreadLocal</code>中有个<code>ArrayDeque</code>,万一没有调用<code>SDL.end()</code>,迟早会有OOM.</p>\n<p> 线程变量真可怕!!!</p>\n</li>\n<li><p>Catch external calls</p>\n<p> 外部调用都要catch异常并记录日志.最好也别把异常吞了,重新抛出一个程序内部定义的运行时异常吧.分布式应用外部调用都很多,建议还是统一来处理日志和异常转换,AOP派上用场了.</p>\n</li>\n</ol>\n<p>评论更精彩,有童鞋建议外部调用记录处理时长,用csv来记录日志便于后期处理.摘要日志中有记录时长的,我们用的json来记录日志,更方便处理,只是业务线程需要承担序列化的开销.</p>\n<h2 id=\"The-Logging-Olympics-–-A-Race-Between-Today’s-Top-5-Java-Logging-Frameworks\"><a href=\"#The-Logging-Olympics-–-A-Race-Between-Today’s-Top-5-Java-Logging-Frameworks\" class=\"headerlink\" title=\"The Logging Olympics – A Race Between Today’s Top 5 Java Logging Frameworks\"></a>The Logging Olympics – A Race Between Today’s Top 5 Java Logging Frameworks</h2><p><a href=\"http://www.takipiblog.com/2013/12/18/the-logging-olympics-a-race-between-todays-top-5-logging-frameworks/\" target=\"_blank\" rel=\"noopener\">http://www.takipiblog.com/2013/12/18/the-logging-olympics-a-race-between-todays-top-5-logging-frameworks/</a></p>\n<p>比较了几种日志框架,以前在写<a href=\"http://bohr.me/2013/07/09/log-tuning.html\">日志优化</a>时,注意到了log4j2异常牛掰,特别是采用了<a href=\"http://logging.apache.org/log4j/2.x/manual/async.html\" target=\"_blank\" rel=\"noopener\">disruptor</a>的异步日志,在多线程下的表现非常夸张.不过我们已经被绑架到logback了,只是看看而已.</p>\n<h2 id=\"First-class-functions-in-Java-8\"><a href=\"#First-class-functions-in-Java-8\" class=\"headerlink\" title=\"First-class functions in Java 8\"></a>First-class functions in Java 8</h2><p><a href=\"http://www.youtube.com/watch?v=Rd-sqHjmfB0\" target=\"_blank\" rel=\"noopener\">http://www.youtube.com/watch?v=Rd-sqHjmfB0</a></p>\n<p>这动画做的挺有意思,只是Java8还离我们比较远啊.</p>"},{"title":"2014年04月Reading Notes","date":"2014-04-01T13:52:17.000Z","_content":"\n## <a id=\"zsh\">oh-my-zsh</a>\n\n[https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview)\n\n[https://github.com/robbyrussell/oh-my-zsh/wiki/Themes](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)\n\nzsh才是王道啊,各种插件,很爽.\n\n我用`colored-man colorize sublime mvn terminalapp`插件.theme用`avit`,再装上[Solarized Dark](http://ethanschoonover.com/solarized),prefect!!!\n\n<!--more-->\n\n## Portia, the open source visual web scraper!\n\n[http://blog.scrapinghub.com/2014/04/01/announcing-portia/](http://blog.scrapinghub.com/2014/04/01/announcing-portia/)\n\n[https://github.com/scrapinghub/portia](https://github.com/scrapinghub/portia)\n\n可视化的网页抓取工具,多么牛掰啊.\n\n## java8,javadoc对格式要求更严格了.\n\n[http://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/whatsnew-8.html](http://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/whatsnew-8.html)\n\nThe javadoc tool now has support for checking the content of javadoc comments for issues that could lead to various problems, such as invalid HTML or accessibility issues, in the files that are generated by javadoc. The feature is enabled by default, and can also be controlled by the new -Xdoclint option. For more details, see the output from running \"javadoc -X\". This feature is also available in javac, although it is not enabled by default there.\n\n所以以前能成功生成文档的现在变为:\n\n\t/Users/bohr/code/yjf/maven-plugin/target/generated-sources/plugin/com/yiji/maven/HelpMojo.java:26: warning: no description for @author\n \t* @author\n   \t^\n\t/Users/bohr/code/yjf/maven-plugin/target/generated-sources/plugin/com/yiji/maven/\tHelpMojo.java:27: warning: no description for @version\n \t* @version\n \t  ^\n\n修改maven doc插件如下,忽略异常先:\n\n \t\t\t<plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>2.9.1</version>\n                <configuration>\n                    <failOnError>false</failOnError>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>attach-javadocs</id>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            \n## Performance Considerations in Distributed Applications\n\n[http://apmblog.compuware.com/2009/09/28/performance-considerations-in-distributed-applications/](http://apmblog.compuware.com/2009/09/28/performance-considerations-in-distributed-applications/)\n\n一篇老文,主要谈到了分布式应用中一些性能关注点.文章部分内容加上自己总结如下:\n\n### The devil in disguise\n\n1. 序列化\n\n\t序列化的重要性体现在,序列化本身需要消耗的cpu时间,而且序列化后的内容的大小也会影响传输时间.一般来说用二进制协议效率更高.soap协议最好还是不要在内部使用了:第一,序列化和反序列化效率不高([FI](https://fi.java.net/)应该会快,没亲测);第二,里面无意义的信息太多了.\n\t\n\t除了性能,还要考虑易用性,也就是说序列化后数据的兼容性问题.这个处理不好就会引起非常严重的事故.so,我们现在的dubbo序列化选hessian,分布式缓存/消息中间件中用到序列化的地方用的是兼容性的kryo(带有字段信息).等以后性能问题凸显的时候,会考虑用dubbo自带的序列化或者kryo.在数据量较大的交互时,还需要考虑提供阀值压缩数据.\n\t\n\t虽然分布式服务框架一般会提供多版本功能,理论上是不要考虑兼容性的.每次升级接口时,升级版本就搞定.但是在服务器不是足够多的情况下,还是不考虑了,增加了运维成本.\n\t\n2. CONNECTIONS\n\n\t这个不多说,长连接+连接池.这里需要注意的是,长连接一定要有心跳机制来保活.\n\t\n3. 线程模型\n\n\t原文只是谈到了同步和异步处理,现在比较好的做法是有专门的io线程来io请求.不过最好不要在io线程上做序列化和反序列的操作.让io线程单纯点,io处理能力更强.\n\n4. 网络\n\n\t这点确实容易忽掉,而且很多开发人员对网络都不是很熟悉(include me!),万兆(40G?)交换机+千兆网卡应该是必须的吧.\n\t\n### The beauty of remoting technologies is …\n\n   这部分作者说了不少,我的观点是:java自带的序列化比较慢,最好不要用;distributed garbage collector 最好不要碰;内部系统不要玩`WS-*`;消息中间件是个好东东,一般企业到后期还是会需要到消息总线,不过神马都往总线里面丢,最终ESB implementor自己就是瓶颈,合理的规划业务很重要.\n\n### What can go wrong\n\n\n1. Anti Pattern: Wrong Protocol\n\n\t选择合适的协议,内部通信就不要用webservice了.涉及到互操性的场景,可以考虑hessian提供的二进制协议.\n\n2. Anti Pattern: Chatty Application\n\n\t总的来说就是,`分布式对象设计第一定律:不要分布式使用对象`,尽量减少远程调用+粗粒度的接口+读缓存.\n\n3. Anti Pattern: Big Messages\n\n\t接口不要携带多余的,不相关的信息.这条和上条需要仔细权衡了.\n\n4. Anti Pattern: Distributed Deployment\n\n\t还是分布式对象设计第一定律.\n\n## <a id=\"Exceptions\">Don‘t Trust Your Log Files: How and Why to Monitor ALL Exceptions</a>\n\n[http://apmblog.compuware.com/2014/04/01/dont-trust-your-log-files-how-and-why-to-monitor-all-exceptions/](http://apmblog.compuware.com/2014/04/01/dont-trust-your-log-files-how-and-why-to-monitor-all-exceptions/)\n\n异常开销比较大,所以,业务异常尽量不要去收集栈信息,还要去属性第三方api,减少异常被吞掉的情况.可以参考下这篇[blog](http://bohr.me/jdk7-exception/).\n\n## Heartbleed test\n\n[http://filippo.io/Heartbleed/](http://filippo.io/Heartbleed/)\n\nc语言没处理好是多么的恐怖啊.\n\n\n## <a id=\"tomcat_NoClassDefFoundError\">tomcat关闭时出现NoClassDefFoundError</a>\n\n\n某dubbo应用,在tomcat在关闭时,报了下面的异常,\n\n\tjava.lang.NoClassDefFoundError: org/jboss/netty/util/internal/ExecutorUtil\n\nso,顺便分析下tomcat容器关闭时的内存泄漏检测机制.\n\n首先有个三个东东:\n\n1. `org.apache.catalina.core.JreMemoryLeakPreventionListener`\n\t\n\t普通的java程序的类加载顺序是由父到子(先在父classloader中找,找不到在到子classloader中加载),这样做是为了安全和节省内存.web容器类加载器为了做到隔离,一般先是在子classloader中找,找不到在委托给父classloader.\n\t\n\t此listener主要是通过使用java classloader或者tomcat 系统classloader来加载类,避免`WebappClassLoader`加载类后reload释放不了,同时也避免了内存浪费.还对一些东东进行了调整.\n\t\n\t源代码中段话说的很形象:` Use the system classloader as the victim for all this ClassLoader pinning we're about to do.`\n\n2. `org.apache.catalina.loader.WebappClassLoader`\n\n\t相关逻辑主要在`stop`方法中:\n\t\n\t* 调用`org.apache.catalina.loader.JdbcLeakPrevention` 来deregister Driver\n\t* 找出所有应用线程,如果线程还在执行,则打印警告信息.如果启用了`clearReferencesStopThreads`,使用反射来关闭线程池或者线程.\n\t* 清理ThreadLocal\n\t* 清理各种cache...\n\t* 清理资源路径\n\n\t\n\t<a id=\"load_class_step\" class=\"anchor\">加载类步骤</a>:\n\t\n\t1. 判断WebappClassLoader是否关闭,如果已关闭,报异常,打印日志\n\t2. 检查resourceEntries缓存\n\t3. 使用当前类加载器加载\n\t4. 使用SystemClassLoader加载\n\t5. 如果启用delegate,从父加载器加载\n\t6. 从`WEB-INFO/classes`和`WEB-INFO/lib`目录加载\n\t7. 用父类加载器来加载\n\t8. 加载不到抛出`ClassNotFoundException`\n\n\t\n3. `org.apache.catalina.core.ThreadLocalLeakPreventionListener`\n\n\t清理线程池.\n\t\n再分析下dubbo怎么关闭的:\n\n1. dubbo中的每个provide都是`ServiceBean`对象,此对象实现`DisposableBean`.在容器关闭时,`ServiceBean`取消注册.\n2. `com.alibaba.dubbo.config.AbstractConfig`中注册了一个`ShutdownHook`,调用`ProtocolConfig.destroyAll()`,清理资源(比如关闭和注册中心的连接和关闭netty)\n\n这里需要注意下,调用`org.apache.catalina.loader.WebappClassLoader#stop`和调用`ProtocolConfig.destroyAll()`的不是同一个线程.而且`org.apache.catalina.loader.WebappClassLoader#started`字段并不是`volatile`的,有可能出现并发状态下的的不一致.这个时候,`WebappClassLoader`已经`started=true`了,然而`ShutdownHook`线程读到的值为false,继续去加载类,由于各种缓存也清空了,最终会抛出`ClassNotFoundException`(参考[加载步骤](#load_class_step))\n\n参考:\n\n\thttp://wiki.apache.org/tomcat/MemoryLeakProtection\n\t\n\n## 实战 Groovy: 使用闭包、ExpandoMetaClass 和类别进行元编程\n[http://www.ibm.com/developerworks/cn/java/j-pg06239.html](http://www.ibm.com/developerworks/cn/java/j-pg06239.html)\n\n`println \"ifconfig en0\".execute().text`,这行代码使用fluent api+元编程,执行linux命令,打印结果.\n\n这个特性对于测试同学来说就非常重要,就这么直接mock原类的行为,很方便.\n\n\n## Venkat Subramaniam 讨论多语言编程、JVM 和多核处理\n\n这篇文章很精彩,看了这篇文章有学习scala和groovy的冲动.摘录一些原文比较精彩的内容:\n\n### 1.关于多语言编程\n\nOla Bini 曾在他的语言金字塔中很好地阐述关于语言。在语言金字塔中,Scala 或 Java 可以非常有效地编写基础架构代码。在此基础之上，他谈到了一个更具动态性的分层。在这一层中，利用元编程功能。可以说，元编程带来的最大优势就是能够减少您需要编写的代码量。最直观的体验就是代码数量的减少，您可以在代码中编写非常灵活的内容。在此基础之上，金字塔的塔尖是更为特定于领域的语言层，即 DSL 层。\n\n使用动态语言编程时，最重要的是设定更出色的准则，以便指导单元测试的编写，确保代码不会偏离原意，准确执行您希望的操作\n\n### 2.关于多核并行:\n\n一种方法是推行不可变性，也就是说：我不会更改任何东西。您处理的所有数据都是不可变，由于不可变，因此也不需\n要同步。这解决了冲突问题，但我要如何在线程间通信？如何交换数据？为此，我们可以使用 Erlang 和 Scala 奉行的基于 Actor 的模型。使用 Actor，然后通过来回传递数据在 Actor 之间通信，但数据仍然保持不可变，整个过程极为安全。\n\n软件事务处理内存模型所做的是将您的数据访问绑定到事务边界内，就像数据库为您提供 ACID（原子性、一致性、隔离和持久性）时一样。它为您提供了这种功能，但您无法在内存中实现数据持久性，因此它会处理原子性、一致性和隔离。\n您可以通过三种方法处理并行性。***在解决并行性时,最糟糕的方法就是共享的可变性，这就是同步模型。更好的方法是采用基于 Actor 的模型，在线程间传输不可变数据。如果存在不频繁的写入操作和极其频繁的读取操作，那么第三个选择就是事务软件内存。***\n\n\n## Baby's First Garbage Collector\n[http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/](http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/)\n\n[https://github.com/munificent/mark-sweep/blob/master/main.c]()\n\n用c实现的一个简单的gc,采用Marking and sweeping的方式,大致能明白gc如何工作了.","source":"_posts/2014-04-reading-notes.md","raw":"---\ntitle: 2014年04月Reading Notes\ndate: 2014-04-01 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n  - zsh\n  - javadoc\n  - NoClassDefFoundError\n---\n\n## <a id=\"zsh\">oh-my-zsh</a>\n\n[https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview)\n\n[https://github.com/robbyrussell/oh-my-zsh/wiki/Themes](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)\n\nzsh才是王道啊,各种插件,很爽.\n\n我用`colored-man colorize sublime mvn terminalapp`插件.theme用`avit`,再装上[Solarized Dark](http://ethanschoonover.com/solarized),prefect!!!\n\n<!--more-->\n\n## Portia, the open source visual web scraper!\n\n[http://blog.scrapinghub.com/2014/04/01/announcing-portia/](http://blog.scrapinghub.com/2014/04/01/announcing-portia/)\n\n[https://github.com/scrapinghub/portia](https://github.com/scrapinghub/portia)\n\n可视化的网页抓取工具,多么牛掰啊.\n\n## java8,javadoc对格式要求更严格了.\n\n[http://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/whatsnew-8.html](http://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/whatsnew-8.html)\n\nThe javadoc tool now has support for checking the content of javadoc comments for issues that could lead to various problems, such as invalid HTML or accessibility issues, in the files that are generated by javadoc. The feature is enabled by default, and can also be controlled by the new -Xdoclint option. For more details, see the output from running \"javadoc -X\". This feature is also available in javac, although it is not enabled by default there.\n\n所以以前能成功生成文档的现在变为:\n\n\t/Users/bohr/code/yjf/maven-plugin/target/generated-sources/plugin/com/yiji/maven/HelpMojo.java:26: warning: no description for @author\n \t* @author\n   \t^\n\t/Users/bohr/code/yjf/maven-plugin/target/generated-sources/plugin/com/yiji/maven/\tHelpMojo.java:27: warning: no description for @version\n \t* @version\n \t  ^\n\n修改maven doc插件如下,忽略异常先:\n\n \t\t\t<plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>2.9.1</version>\n                <configuration>\n                    <failOnError>false</failOnError>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>attach-javadocs</id>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            \n## Performance Considerations in Distributed Applications\n\n[http://apmblog.compuware.com/2009/09/28/performance-considerations-in-distributed-applications/](http://apmblog.compuware.com/2009/09/28/performance-considerations-in-distributed-applications/)\n\n一篇老文,主要谈到了分布式应用中一些性能关注点.文章部分内容加上自己总结如下:\n\n### The devil in disguise\n\n1. 序列化\n\n\t序列化的重要性体现在,序列化本身需要消耗的cpu时间,而且序列化后的内容的大小也会影响传输时间.一般来说用二进制协议效率更高.soap协议最好还是不要在内部使用了:第一,序列化和反序列化效率不高([FI](https://fi.java.net/)应该会快,没亲测);第二,里面无意义的信息太多了.\n\t\n\t除了性能,还要考虑易用性,也就是说序列化后数据的兼容性问题.这个处理不好就会引起非常严重的事故.so,我们现在的dubbo序列化选hessian,分布式缓存/消息中间件中用到序列化的地方用的是兼容性的kryo(带有字段信息).等以后性能问题凸显的时候,会考虑用dubbo自带的序列化或者kryo.在数据量较大的交互时,还需要考虑提供阀值压缩数据.\n\t\n\t虽然分布式服务框架一般会提供多版本功能,理论上是不要考虑兼容性的.每次升级接口时,升级版本就搞定.但是在服务器不是足够多的情况下,还是不考虑了,增加了运维成本.\n\t\n2. CONNECTIONS\n\n\t这个不多说,长连接+连接池.这里需要注意的是,长连接一定要有心跳机制来保活.\n\t\n3. 线程模型\n\n\t原文只是谈到了同步和异步处理,现在比较好的做法是有专门的io线程来io请求.不过最好不要在io线程上做序列化和反序列的操作.让io线程单纯点,io处理能力更强.\n\n4. 网络\n\n\t这点确实容易忽掉,而且很多开发人员对网络都不是很熟悉(include me!),万兆(40G?)交换机+千兆网卡应该是必须的吧.\n\t\n### The beauty of remoting technologies is …\n\n   这部分作者说了不少,我的观点是:java自带的序列化比较慢,最好不要用;distributed garbage collector 最好不要碰;内部系统不要玩`WS-*`;消息中间件是个好东东,一般企业到后期还是会需要到消息总线,不过神马都往总线里面丢,最终ESB implementor自己就是瓶颈,合理的规划业务很重要.\n\n### What can go wrong\n\n\n1. Anti Pattern: Wrong Protocol\n\n\t选择合适的协议,内部通信就不要用webservice了.涉及到互操性的场景,可以考虑hessian提供的二进制协议.\n\n2. Anti Pattern: Chatty Application\n\n\t总的来说就是,`分布式对象设计第一定律:不要分布式使用对象`,尽量减少远程调用+粗粒度的接口+读缓存.\n\n3. Anti Pattern: Big Messages\n\n\t接口不要携带多余的,不相关的信息.这条和上条需要仔细权衡了.\n\n4. Anti Pattern: Distributed Deployment\n\n\t还是分布式对象设计第一定律.\n\n## <a id=\"Exceptions\">Don‘t Trust Your Log Files: How and Why to Monitor ALL Exceptions</a>\n\n[http://apmblog.compuware.com/2014/04/01/dont-trust-your-log-files-how-and-why-to-monitor-all-exceptions/](http://apmblog.compuware.com/2014/04/01/dont-trust-your-log-files-how-and-why-to-monitor-all-exceptions/)\n\n异常开销比较大,所以,业务异常尽量不要去收集栈信息,还要去属性第三方api,减少异常被吞掉的情况.可以参考下这篇[blog](http://bohr.me/jdk7-exception/).\n\n## Heartbleed test\n\n[http://filippo.io/Heartbleed/](http://filippo.io/Heartbleed/)\n\nc语言没处理好是多么的恐怖啊.\n\n\n## <a id=\"tomcat_NoClassDefFoundError\">tomcat关闭时出现NoClassDefFoundError</a>\n\n\n某dubbo应用,在tomcat在关闭时,报了下面的异常,\n\n\tjava.lang.NoClassDefFoundError: org/jboss/netty/util/internal/ExecutorUtil\n\nso,顺便分析下tomcat容器关闭时的内存泄漏检测机制.\n\n首先有个三个东东:\n\n1. `org.apache.catalina.core.JreMemoryLeakPreventionListener`\n\t\n\t普通的java程序的类加载顺序是由父到子(先在父classloader中找,找不到在到子classloader中加载),这样做是为了安全和节省内存.web容器类加载器为了做到隔离,一般先是在子classloader中找,找不到在委托给父classloader.\n\t\n\t此listener主要是通过使用java classloader或者tomcat 系统classloader来加载类,避免`WebappClassLoader`加载类后reload释放不了,同时也避免了内存浪费.还对一些东东进行了调整.\n\t\n\t源代码中段话说的很形象:` Use the system classloader as the victim for all this ClassLoader pinning we're about to do.`\n\n2. `org.apache.catalina.loader.WebappClassLoader`\n\n\t相关逻辑主要在`stop`方法中:\n\t\n\t* 调用`org.apache.catalina.loader.JdbcLeakPrevention` 来deregister Driver\n\t* 找出所有应用线程,如果线程还在执行,则打印警告信息.如果启用了`clearReferencesStopThreads`,使用反射来关闭线程池或者线程.\n\t* 清理ThreadLocal\n\t* 清理各种cache...\n\t* 清理资源路径\n\n\t\n\t<a id=\"load_class_step\" class=\"anchor\">加载类步骤</a>:\n\t\n\t1. 判断WebappClassLoader是否关闭,如果已关闭,报异常,打印日志\n\t2. 检查resourceEntries缓存\n\t3. 使用当前类加载器加载\n\t4. 使用SystemClassLoader加载\n\t5. 如果启用delegate,从父加载器加载\n\t6. 从`WEB-INFO/classes`和`WEB-INFO/lib`目录加载\n\t7. 用父类加载器来加载\n\t8. 加载不到抛出`ClassNotFoundException`\n\n\t\n3. `org.apache.catalina.core.ThreadLocalLeakPreventionListener`\n\n\t清理线程池.\n\t\n再分析下dubbo怎么关闭的:\n\n1. dubbo中的每个provide都是`ServiceBean`对象,此对象实现`DisposableBean`.在容器关闭时,`ServiceBean`取消注册.\n2. `com.alibaba.dubbo.config.AbstractConfig`中注册了一个`ShutdownHook`,调用`ProtocolConfig.destroyAll()`,清理资源(比如关闭和注册中心的连接和关闭netty)\n\n这里需要注意下,调用`org.apache.catalina.loader.WebappClassLoader#stop`和调用`ProtocolConfig.destroyAll()`的不是同一个线程.而且`org.apache.catalina.loader.WebappClassLoader#started`字段并不是`volatile`的,有可能出现并发状态下的的不一致.这个时候,`WebappClassLoader`已经`started=true`了,然而`ShutdownHook`线程读到的值为false,继续去加载类,由于各种缓存也清空了,最终会抛出`ClassNotFoundException`(参考[加载步骤](#load_class_step))\n\n参考:\n\n\thttp://wiki.apache.org/tomcat/MemoryLeakProtection\n\t\n\n## 实战 Groovy: 使用闭包、ExpandoMetaClass 和类别进行元编程\n[http://www.ibm.com/developerworks/cn/java/j-pg06239.html](http://www.ibm.com/developerworks/cn/java/j-pg06239.html)\n\n`println \"ifconfig en0\".execute().text`,这行代码使用fluent api+元编程,执行linux命令,打印结果.\n\n这个特性对于测试同学来说就非常重要,就这么直接mock原类的行为,很方便.\n\n\n## Venkat Subramaniam 讨论多语言编程、JVM 和多核处理\n\n这篇文章很精彩,看了这篇文章有学习scala和groovy的冲动.摘录一些原文比较精彩的内容:\n\n### 1.关于多语言编程\n\nOla Bini 曾在他的语言金字塔中很好地阐述关于语言。在语言金字塔中,Scala 或 Java 可以非常有效地编写基础架构代码。在此基础之上，他谈到了一个更具动态性的分层。在这一层中，利用元编程功能。可以说，元编程带来的最大优势就是能够减少您需要编写的代码量。最直观的体验就是代码数量的减少，您可以在代码中编写非常灵活的内容。在此基础之上，金字塔的塔尖是更为特定于领域的语言层，即 DSL 层。\n\n使用动态语言编程时，最重要的是设定更出色的准则，以便指导单元测试的编写，确保代码不会偏离原意，准确执行您希望的操作\n\n### 2.关于多核并行:\n\n一种方法是推行不可变性，也就是说：我不会更改任何东西。您处理的所有数据都是不可变，由于不可变，因此也不需\n要同步。这解决了冲突问题，但我要如何在线程间通信？如何交换数据？为此，我们可以使用 Erlang 和 Scala 奉行的基于 Actor 的模型。使用 Actor，然后通过来回传递数据在 Actor 之间通信，但数据仍然保持不可变，整个过程极为安全。\n\n软件事务处理内存模型所做的是将您的数据访问绑定到事务边界内，就像数据库为您提供 ACID（原子性、一致性、隔离和持久性）时一样。它为您提供了这种功能，但您无法在内存中实现数据持久性，因此它会处理原子性、一致性和隔离。\n您可以通过三种方法处理并行性。***在解决并行性时,最糟糕的方法就是共享的可变性，这就是同步模型。更好的方法是采用基于 Actor 的模型，在线程间传输不可变数据。如果存在不频繁的写入操作和极其频繁的读取操作，那么第三个选择就是事务软件内存。***\n\n\n## Baby's First Garbage Collector\n[http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/](http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/)\n\n[https://github.com/munificent/mark-sweep/blob/master/main.c]()\n\n用c实现的一个简单的gc,采用Marking and sweeping的方式,大致能明白gc如何工作了.","slug":"2014-04-reading-notes","published":1,"updated":"2018-04-01T16:53:17.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksff000bp0ugl5rckud5","content":"<h2 id=\"oh-my-zsh\"><a href=\"#oh-my-zsh\" class=\"headerlink\" title=\"oh-my-zsh\"></a><a id=\"zsh\">oh-my-zsh</a></h2><p><a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview\" target=\"_blank\" rel=\"noopener\">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview</a></p>\n<p><a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\" target=\"_blank\" rel=\"noopener\">https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</a></p>\n<p>zsh才是王道啊,各种插件,很爽.</p>\n<p>我用<code>colored-man colorize sublime mvn terminalapp</code>插件.theme用<code>avit</code>,再装上<a href=\"http://ethanschoonover.com/solarized\" target=\"_blank\" rel=\"noopener\">Solarized Dark</a>,prefect!!!</p>\n<a id=\"more\"></a>\n<h2 id=\"Portia-the-open-source-visual-web-scraper\"><a href=\"#Portia-the-open-source-visual-web-scraper\" class=\"headerlink\" title=\"Portia, the open source visual web scraper!\"></a>Portia, the open source visual web scraper!</h2><p><a href=\"http://blog.scrapinghub.com/2014/04/01/announcing-portia/\" target=\"_blank\" rel=\"noopener\">http://blog.scrapinghub.com/2014/04/01/announcing-portia/</a></p>\n<p><a href=\"https://github.com/scrapinghub/portia\" target=\"_blank\" rel=\"noopener\">https://github.com/scrapinghub/portia</a></p>\n<p>可视化的网页抓取工具,多么牛掰啊.</p>\n<h2 id=\"java8-javadoc对格式要求更严格了\"><a href=\"#java8-javadoc对格式要求更严格了\" class=\"headerlink\" title=\"java8,javadoc对格式要求更严格了.\"></a>java8,javadoc对格式要求更严格了.</h2><p><a href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/whatsnew-8.html\" target=\"_blank\" rel=\"noopener\">http://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/whatsnew-8.html</a></p>\n<p>The javadoc tool now has support for checking the content of javadoc comments for issues that could lead to various problems, such as invalid HTML or accessibility issues, in the files that are generated by javadoc. The feature is enabled by default, and can also be controlled by the new -Xdoclint option. For more details, see the output from running “javadoc -X”. This feature is also available in javac, although it is not enabled by default there.</p>\n<p>所以以前能成功生成文档的现在变为:</p>\n<pre><code>/Users/bohr/code/yjf/maven-plugin/target/generated-sources/plugin/com/yiji/maven/HelpMojo.java:26: warning: no description for @author\n * @author\n   ^\n/Users/bohr/code/yjf/maven-plugin/target/generated-sources/plugin/com/yiji/maven/    HelpMojo.java:27: warning: no description for @version\n * @version\n   ^\n</code></pre><p>修改maven doc插件如下,忽略异常先:</p>\n<pre><code> &lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n    &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;\n    &lt;version&gt;2.9.1&lt;/version&gt;\n    &lt;configuration&gt;\n        &lt;failOnError&gt;false&lt;/failOnError&gt;\n    &lt;/configuration&gt;\n    &lt;executions&gt;\n        &lt;execution&gt;\n            &lt;id&gt;attach-javadocs&lt;/id&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;jar&lt;/goal&gt;\n            &lt;/goals&gt;\n        &lt;/execution&gt;\n    &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre><h2 id=\"Performance-Considerations-in-Distributed-Applications\"><a href=\"#Performance-Considerations-in-Distributed-Applications\" class=\"headerlink\" title=\"Performance Considerations in Distributed Applications\"></a>Performance Considerations in Distributed Applications</h2><p><a href=\"http://apmblog.compuware.com/2009/09/28/performance-considerations-in-distributed-applications/\" target=\"_blank\" rel=\"noopener\">http://apmblog.compuware.com/2009/09/28/performance-considerations-in-distributed-applications/</a></p>\n<p>一篇老文,主要谈到了分布式应用中一些性能关注点.文章部分内容加上自己总结如下:</p>\n<h3 id=\"The-devil-in-disguise\"><a href=\"#The-devil-in-disguise\" class=\"headerlink\" title=\"The devil in disguise\"></a>The devil in disguise</h3><ol>\n<li><p>序列化</p>\n<p> 序列化的重要性体现在,序列化本身需要消耗的cpu时间,而且序列化后的内容的大小也会影响传输时间.一般来说用二进制协议效率更高.soap协议最好还是不要在内部使用了:第一,序列化和反序列化效率不高(<a href=\"https://fi.java.net/\" target=\"_blank\" rel=\"noopener\">FI</a>应该会快,没亲测);第二,里面无意义的信息太多了.</p>\n<p> 除了性能,还要考虑易用性,也就是说序列化后数据的兼容性问题.这个处理不好就会引起非常严重的事故.so,我们现在的dubbo序列化选hessian,分布式缓存/消息中间件中用到序列化的地方用的是兼容性的kryo(带有字段信息).等以后性能问题凸显的时候,会考虑用dubbo自带的序列化或者kryo.在数据量较大的交互时,还需要考虑提供阀值压缩数据.</p>\n<p> 虽然分布式服务框架一般会提供多版本功能,理论上是不要考虑兼容性的.每次升级接口时,升级版本就搞定.但是在服务器不是足够多的情况下,还是不考虑了,增加了运维成本.</p>\n</li>\n<li><p>CONNECTIONS</p>\n<p> 这个不多说,长连接+连接池.这里需要注意的是,长连接一定要有心跳机制来保活.</p>\n</li>\n<li><p>线程模型</p>\n<p> 原文只是谈到了同步和异步处理,现在比较好的做法是有专门的io线程来io请求.不过最好不要在io线程上做序列化和反序列的操作.让io线程单纯点,io处理能力更强.</p>\n</li>\n<li><p>网络</p>\n<p> 这点确实容易忽掉,而且很多开发人员对网络都不是很熟悉(include me!),万兆(40G?)交换机+千兆网卡应该是必须的吧.</p>\n</li>\n</ol>\n<h3 id=\"The-beauty-of-remoting-technologies-is-…\"><a href=\"#The-beauty-of-remoting-technologies-is-…\" class=\"headerlink\" title=\"The beauty of remoting technologies is …\"></a>The beauty of remoting technologies is …</h3><p>   这部分作者说了不少,我的观点是:java自带的序列化比较慢,最好不要用;distributed garbage collector 最好不要碰;内部系统不要玩<code>WS-*</code>;消息中间件是个好东东,一般企业到后期还是会需要到消息总线,不过神马都往总线里面丢,最终ESB implementor自己就是瓶颈,合理的规划业务很重要.</p>\n<h3 id=\"What-can-go-wrong\"><a href=\"#What-can-go-wrong\" class=\"headerlink\" title=\"What can go wrong\"></a>What can go wrong</h3><ol>\n<li><p>Anti Pattern: Wrong Protocol</p>\n<p> 选择合适的协议,内部通信就不要用webservice了.涉及到互操性的场景,可以考虑hessian提供的二进制协议.</p>\n</li>\n<li><p>Anti Pattern: Chatty Application</p>\n<p> 总的来说就是,<code>分布式对象设计第一定律:不要分布式使用对象</code>,尽量减少远程调用+粗粒度的接口+读缓存.</p>\n</li>\n<li><p>Anti Pattern: Big Messages</p>\n<p> 接口不要携带多余的,不相关的信息.这条和上条需要仔细权衡了.</p>\n</li>\n<li><p>Anti Pattern: Distributed Deployment</p>\n<p> 还是分布式对象设计第一定律.</p>\n</li>\n</ol>\n<h2 id=\"Don‘t-Trust-Your-Log-Files-How-and-Why-to-Monitor-ALL-Exceptions\"><a href=\"#Don‘t-Trust-Your-Log-Files-How-and-Why-to-Monitor-ALL-Exceptions\" class=\"headerlink\" title=\"Don‘t Trust Your Log Files: How and Why to Monitor ALL Exceptions\"></a><a id=\"Exceptions\">Don‘t Trust Your Log Files: How and Why to Monitor ALL Exceptions</a></h2><p><a href=\"http://apmblog.compuware.com/2014/04/01/dont-trust-your-log-files-how-and-why-to-monitor-all-exceptions/\" target=\"_blank\" rel=\"noopener\">http://apmblog.compuware.com/2014/04/01/dont-trust-your-log-files-how-and-why-to-monitor-all-exceptions/</a></p>\n<p>异常开销比较大,所以,业务异常尽量不要去收集栈信息,还要去属性第三方api,减少异常被吞掉的情况.可以参考下这篇<a href=\"http://bohr.me/jdk7-exception/\">blog</a>.</p>\n<h2 id=\"Heartbleed-test\"><a href=\"#Heartbleed-test\" class=\"headerlink\" title=\"Heartbleed test\"></a>Heartbleed test</h2><p><a href=\"http://filippo.io/Heartbleed/\" target=\"_blank\" rel=\"noopener\">http://filippo.io/Heartbleed/</a></p>\n<p>c语言没处理好是多么的恐怖啊.</p>\n<h2 id=\"tomcat关闭时出现NoClassDefFoundError\"><a href=\"#tomcat关闭时出现NoClassDefFoundError\" class=\"headerlink\" title=\"tomcat关闭时出现NoClassDefFoundError\"></a><a id=\"tomcat_NoClassDefFoundError\">tomcat关闭时出现NoClassDefFoundError</a></h2><p>某dubbo应用,在tomcat在关闭时,报了下面的异常,</p>\n<pre><code>java.lang.NoClassDefFoundError: org/jboss/netty/util/internal/ExecutorUtil\n</code></pre><p>so,顺便分析下tomcat容器关闭时的内存泄漏检测机制.</p>\n<p>首先有个三个东东:</p>\n<ol>\n<li><p><code>org.apache.catalina.core.JreMemoryLeakPreventionListener</code></p>\n<p> 普通的java程序的类加载顺序是由父到子(先在父classloader中找,找不到在到子classloader中加载),这样做是为了安全和节省内存.web容器类加载器为了做到隔离,一般先是在子classloader中找,找不到在委托给父classloader.</p>\n<p> 此listener主要是通过使用java classloader或者tomcat 系统classloader来加载类,避免<code>WebappClassLoader</code>加载类后reload释放不了,同时也避免了内存浪费.还对一些东东进行了调整.</p>\n<p> 源代码中段话说的很形象:<code>Use the system classloader as the victim for all this ClassLoader pinning we&#39;re about to do.</code></p>\n</li>\n<li><p><code>org.apache.catalina.loader.WebappClassLoader</code></p>\n<p> 相关逻辑主要在<code>stop</code>方法中:</p>\n<ul>\n<li>调用<code>org.apache.catalina.loader.JdbcLeakPrevention</code> 来deregister Driver</li>\n<li>找出所有应用线程,如果线程还在执行,则打印警告信息.如果启用了<code>clearReferencesStopThreads</code>,使用反射来关闭线程池或者线程.</li>\n<li>清理ThreadLocal</li>\n<li>清理各种cache…</li>\n<li>清理资源路径</li>\n</ul>\n</li>\n</ol>\n<pre><code>&lt;a id=&quot;load_class_step&quot; class=&quot;anchor&quot;&gt;加载类步骤&lt;/a&gt;:\n\n1. 判断WebappClassLoader是否关闭,如果已关闭,报异常,打印日志\n2. 检查resourceEntries缓存\n3. 使用当前类加载器加载\n4. 使用SystemClassLoader加载\n5. 如果启用delegate,从父加载器加载\n6. 从`WEB-INFO/classes`和`WEB-INFO/lib`目录加载\n7. 用父类加载器来加载\n8. 加载不到抛出`ClassNotFoundException`\n</code></pre><ol>\n<li><p><code>org.apache.catalina.core.ThreadLocalLeakPreventionListener</code></p>\n<p> 清理线程池.</p>\n</li>\n</ol>\n<p>再分析下dubbo怎么关闭的:</p>\n<ol>\n<li>dubbo中的每个provide都是<code>ServiceBean</code>对象,此对象实现<code>DisposableBean</code>.在容器关闭时,<code>ServiceBean</code>取消注册.</li>\n<li><code>com.alibaba.dubbo.config.AbstractConfig</code>中注册了一个<code>ShutdownHook</code>,调用<code>ProtocolConfig.destroyAll()</code>,清理资源(比如关闭和注册中心的连接和关闭netty)</li>\n</ol>\n<p>这里需要注意下,调用<code>org.apache.catalina.loader.WebappClassLoader#stop</code>和调用<code>ProtocolConfig.destroyAll()</code>的不是同一个线程.而且<code>org.apache.catalina.loader.WebappClassLoader#started</code>字段并不是<code>volatile</code>的,有可能出现并发状态下的的不一致.这个时候,<code>WebappClassLoader</code>已经<code>started=true</code>了,然而<code>ShutdownHook</code>线程读到的值为false,继续去加载类,由于各种缓存也清空了,最终会抛出<code>ClassNotFoundException</code>(参考<a href=\"#load_class_step\">加载步骤</a>)</p>\n<p>参考:</p>\n<pre><code>http://wiki.apache.org/tomcat/MemoryLeakProtection\n</code></pre><h2 id=\"实战-Groovy-使用闭包、ExpandoMetaClass-和类别进行元编程\"><a href=\"#实战-Groovy-使用闭包、ExpandoMetaClass-和类别进行元编程\" class=\"headerlink\" title=\"实战 Groovy: 使用闭包、ExpandoMetaClass 和类别进行元编程\"></a>实战 Groovy: 使用闭包、ExpandoMetaClass 和类别进行元编程</h2><p><a href=\"http://www.ibm.com/developerworks/cn/java/j-pg06239.html\" target=\"_blank\" rel=\"noopener\">http://www.ibm.com/developerworks/cn/java/j-pg06239.html</a></p>\n<p><code>println &quot;ifconfig en0&quot;.execute().text</code>,这行代码使用fluent api+元编程,执行linux命令,打印结果.</p>\n<p>这个特性对于测试同学来说就非常重要,就这么直接mock原类的行为,很方便.</p>\n<h2 id=\"Venkat-Subramaniam-讨论多语言编程、JVM-和多核处理\"><a href=\"#Venkat-Subramaniam-讨论多语言编程、JVM-和多核处理\" class=\"headerlink\" title=\"Venkat Subramaniam 讨论多语言编程、JVM 和多核处理\"></a>Venkat Subramaniam 讨论多语言编程、JVM 和多核处理</h2><p>这篇文章很精彩,看了这篇文章有学习scala和groovy的冲动.摘录一些原文比较精彩的内容:</p>\n<h3 id=\"1-关于多语言编程\"><a href=\"#1-关于多语言编程\" class=\"headerlink\" title=\"1.关于多语言编程\"></a>1.关于多语言编程</h3><p>Ola Bini 曾在他的语言金字塔中很好地阐述关于语言。在语言金字塔中,Scala 或 Java 可以非常有效地编写基础架构代码。在此基础之上，他谈到了一个更具动态性的分层。在这一层中，利用元编程功能。可以说，元编程带来的最大优势就是能够减少您需要编写的代码量。最直观的体验就是代码数量的减少，您可以在代码中编写非常灵活的内容。在此基础之上，金字塔的塔尖是更为特定于领域的语言层，即 DSL 层。</p>\n<p>使用动态语言编程时，最重要的是设定更出色的准则，以便指导单元测试的编写，确保代码不会偏离原意，准确执行您希望的操作</p>\n<h3 id=\"2-关于多核并行\"><a href=\"#2-关于多核并行\" class=\"headerlink\" title=\"2.关于多核并行:\"></a>2.关于多核并行:</h3><p>一种方法是推行不可变性，也就是说：我不会更改任何东西。您处理的所有数据都是不可变，由于不可变，因此也不需<br>要同步。这解决了冲突问题，但我要如何在线程间通信？如何交换数据？为此，我们可以使用 Erlang 和 Scala 奉行的基于 Actor 的模型。使用 Actor，然后通过来回传递数据在 Actor 之间通信，但数据仍然保持不可变，整个过程极为安全。</p>\n<p>软件事务处理内存模型所做的是将您的数据访问绑定到事务边界内，就像数据库为您提供 ACID（原子性、一致性、隔离和持久性）时一样。它为您提供了这种功能，但您无法在内存中实现数据持久性，因此它会处理原子性、一致性和隔离。<br>您可以通过三种方法处理并行性。<strong><em>在解决并行性时,最糟糕的方法就是共享的可变性，这就是同步模型。更好的方法是采用基于 Actor 的模型，在线程间传输不可变数据。如果存在不频繁的写入操作和极其频繁的读取操作，那么第三个选择就是事务软件内存。</em></strong></p>\n<h2 id=\"Baby’s-First-Garbage-Collector\"><a href=\"#Baby’s-First-Garbage-Collector\" class=\"headerlink\" title=\"Baby’s First Garbage Collector\"></a>Baby’s First Garbage Collector</h2><p><a href=\"http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/\" target=\"_blank\" rel=\"noopener\">http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/</a></p>\n<p><a href=\"\">https://github.com/munificent/mark-sweep/blob/master/main.c</a></p>\n<p>用c实现的一个简单的gc,采用Marking and sweeping的方式,大致能明白gc如何工作了.</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"oh-my-zsh\"><a href=\"#oh-my-zsh\" class=\"headerlink\" title=\"oh-my-zsh\"></a><a id=\"zsh\">oh-my-zsh</a></h2><p><a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview\" target=\"_blank\" rel=\"noopener\">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview</a></p>\n<p><a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\" target=\"_blank\" rel=\"noopener\">https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</a></p>\n<p>zsh才是王道啊,各种插件,很爽.</p>\n<p>我用<code>colored-man colorize sublime mvn terminalapp</code>插件.theme用<code>avit</code>,再装上<a href=\"http://ethanschoonover.com/solarized\" target=\"_blank\" rel=\"noopener\">Solarized Dark</a>,prefect!!!</p>","more":"<h2 id=\"Portia-the-open-source-visual-web-scraper\"><a href=\"#Portia-the-open-source-visual-web-scraper\" class=\"headerlink\" title=\"Portia, the open source visual web scraper!\"></a>Portia, the open source visual web scraper!</h2><p><a href=\"http://blog.scrapinghub.com/2014/04/01/announcing-portia/\" target=\"_blank\" rel=\"noopener\">http://blog.scrapinghub.com/2014/04/01/announcing-portia/</a></p>\n<p><a href=\"https://github.com/scrapinghub/portia\" target=\"_blank\" rel=\"noopener\">https://github.com/scrapinghub/portia</a></p>\n<p>可视化的网页抓取工具,多么牛掰啊.</p>\n<h2 id=\"java8-javadoc对格式要求更严格了\"><a href=\"#java8-javadoc对格式要求更严格了\" class=\"headerlink\" title=\"java8,javadoc对格式要求更严格了.\"></a>java8,javadoc对格式要求更严格了.</h2><p><a href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/whatsnew-8.html\" target=\"_blank\" rel=\"noopener\">http://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/whatsnew-8.html</a></p>\n<p>The javadoc tool now has support for checking the content of javadoc comments for issues that could lead to various problems, such as invalid HTML or accessibility issues, in the files that are generated by javadoc. The feature is enabled by default, and can also be controlled by the new -Xdoclint option. For more details, see the output from running “javadoc -X”. This feature is also available in javac, although it is not enabled by default there.</p>\n<p>所以以前能成功生成文档的现在变为:</p>\n<pre><code>/Users/bohr/code/yjf/maven-plugin/target/generated-sources/plugin/com/yiji/maven/HelpMojo.java:26: warning: no description for @author\n * @author\n   ^\n/Users/bohr/code/yjf/maven-plugin/target/generated-sources/plugin/com/yiji/maven/    HelpMojo.java:27: warning: no description for @version\n * @version\n   ^\n</code></pre><p>修改maven doc插件如下,忽略异常先:</p>\n<pre><code> &lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n    &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;\n    &lt;version&gt;2.9.1&lt;/version&gt;\n    &lt;configuration&gt;\n        &lt;failOnError&gt;false&lt;/failOnError&gt;\n    &lt;/configuration&gt;\n    &lt;executions&gt;\n        &lt;execution&gt;\n            &lt;id&gt;attach-javadocs&lt;/id&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;jar&lt;/goal&gt;\n            &lt;/goals&gt;\n        &lt;/execution&gt;\n    &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre><h2 id=\"Performance-Considerations-in-Distributed-Applications\"><a href=\"#Performance-Considerations-in-Distributed-Applications\" class=\"headerlink\" title=\"Performance Considerations in Distributed Applications\"></a>Performance Considerations in Distributed Applications</h2><p><a href=\"http://apmblog.compuware.com/2009/09/28/performance-considerations-in-distributed-applications/\" target=\"_blank\" rel=\"noopener\">http://apmblog.compuware.com/2009/09/28/performance-considerations-in-distributed-applications/</a></p>\n<p>一篇老文,主要谈到了分布式应用中一些性能关注点.文章部分内容加上自己总结如下:</p>\n<h3 id=\"The-devil-in-disguise\"><a href=\"#The-devil-in-disguise\" class=\"headerlink\" title=\"The devil in disguise\"></a>The devil in disguise</h3><ol>\n<li><p>序列化</p>\n<p> 序列化的重要性体现在,序列化本身需要消耗的cpu时间,而且序列化后的内容的大小也会影响传输时间.一般来说用二进制协议效率更高.soap协议最好还是不要在内部使用了:第一,序列化和反序列化效率不高(<a href=\"https://fi.java.net/\" target=\"_blank\" rel=\"noopener\">FI</a>应该会快,没亲测);第二,里面无意义的信息太多了.</p>\n<p> 除了性能,还要考虑易用性,也就是说序列化后数据的兼容性问题.这个处理不好就会引起非常严重的事故.so,我们现在的dubbo序列化选hessian,分布式缓存/消息中间件中用到序列化的地方用的是兼容性的kryo(带有字段信息).等以后性能问题凸显的时候,会考虑用dubbo自带的序列化或者kryo.在数据量较大的交互时,还需要考虑提供阀值压缩数据.</p>\n<p> 虽然分布式服务框架一般会提供多版本功能,理论上是不要考虑兼容性的.每次升级接口时,升级版本就搞定.但是在服务器不是足够多的情况下,还是不考虑了,增加了运维成本.</p>\n</li>\n<li><p>CONNECTIONS</p>\n<p> 这个不多说,长连接+连接池.这里需要注意的是,长连接一定要有心跳机制来保活.</p>\n</li>\n<li><p>线程模型</p>\n<p> 原文只是谈到了同步和异步处理,现在比较好的做法是有专门的io线程来io请求.不过最好不要在io线程上做序列化和反序列的操作.让io线程单纯点,io处理能力更强.</p>\n</li>\n<li><p>网络</p>\n<p> 这点确实容易忽掉,而且很多开发人员对网络都不是很熟悉(include me!),万兆(40G?)交换机+千兆网卡应该是必须的吧.</p>\n</li>\n</ol>\n<h3 id=\"The-beauty-of-remoting-technologies-is-…\"><a href=\"#The-beauty-of-remoting-technologies-is-…\" class=\"headerlink\" title=\"The beauty of remoting technologies is …\"></a>The beauty of remoting technologies is …</h3><p>   这部分作者说了不少,我的观点是:java自带的序列化比较慢,最好不要用;distributed garbage collector 最好不要碰;内部系统不要玩<code>WS-*</code>;消息中间件是个好东东,一般企业到后期还是会需要到消息总线,不过神马都往总线里面丢,最终ESB implementor自己就是瓶颈,合理的规划业务很重要.</p>\n<h3 id=\"What-can-go-wrong\"><a href=\"#What-can-go-wrong\" class=\"headerlink\" title=\"What can go wrong\"></a>What can go wrong</h3><ol>\n<li><p>Anti Pattern: Wrong Protocol</p>\n<p> 选择合适的协议,内部通信就不要用webservice了.涉及到互操性的场景,可以考虑hessian提供的二进制协议.</p>\n</li>\n<li><p>Anti Pattern: Chatty Application</p>\n<p> 总的来说就是,<code>分布式对象设计第一定律:不要分布式使用对象</code>,尽量减少远程调用+粗粒度的接口+读缓存.</p>\n</li>\n<li><p>Anti Pattern: Big Messages</p>\n<p> 接口不要携带多余的,不相关的信息.这条和上条需要仔细权衡了.</p>\n</li>\n<li><p>Anti Pattern: Distributed Deployment</p>\n<p> 还是分布式对象设计第一定律.</p>\n</li>\n</ol>\n<h2 id=\"Don‘t-Trust-Your-Log-Files-How-and-Why-to-Monitor-ALL-Exceptions\"><a href=\"#Don‘t-Trust-Your-Log-Files-How-and-Why-to-Monitor-ALL-Exceptions\" class=\"headerlink\" title=\"Don‘t Trust Your Log Files: How and Why to Monitor ALL Exceptions\"></a><a id=\"Exceptions\">Don‘t Trust Your Log Files: How and Why to Monitor ALL Exceptions</a></h2><p><a href=\"http://apmblog.compuware.com/2014/04/01/dont-trust-your-log-files-how-and-why-to-monitor-all-exceptions/\" target=\"_blank\" rel=\"noopener\">http://apmblog.compuware.com/2014/04/01/dont-trust-your-log-files-how-and-why-to-monitor-all-exceptions/</a></p>\n<p>异常开销比较大,所以,业务异常尽量不要去收集栈信息,还要去属性第三方api,减少异常被吞掉的情况.可以参考下这篇<a href=\"http://bohr.me/jdk7-exception/\">blog</a>.</p>\n<h2 id=\"Heartbleed-test\"><a href=\"#Heartbleed-test\" class=\"headerlink\" title=\"Heartbleed test\"></a>Heartbleed test</h2><p><a href=\"http://filippo.io/Heartbleed/\" target=\"_blank\" rel=\"noopener\">http://filippo.io/Heartbleed/</a></p>\n<p>c语言没处理好是多么的恐怖啊.</p>\n<h2 id=\"tomcat关闭时出现NoClassDefFoundError\"><a href=\"#tomcat关闭时出现NoClassDefFoundError\" class=\"headerlink\" title=\"tomcat关闭时出现NoClassDefFoundError\"></a><a id=\"tomcat_NoClassDefFoundError\">tomcat关闭时出现NoClassDefFoundError</a></h2><p>某dubbo应用,在tomcat在关闭时,报了下面的异常,</p>\n<pre><code>java.lang.NoClassDefFoundError: org/jboss/netty/util/internal/ExecutorUtil\n</code></pre><p>so,顺便分析下tomcat容器关闭时的内存泄漏检测机制.</p>\n<p>首先有个三个东东:</p>\n<ol>\n<li><p><code>org.apache.catalina.core.JreMemoryLeakPreventionListener</code></p>\n<p> 普通的java程序的类加载顺序是由父到子(先在父classloader中找,找不到在到子classloader中加载),这样做是为了安全和节省内存.web容器类加载器为了做到隔离,一般先是在子classloader中找,找不到在委托给父classloader.</p>\n<p> 此listener主要是通过使用java classloader或者tomcat 系统classloader来加载类,避免<code>WebappClassLoader</code>加载类后reload释放不了,同时也避免了内存浪费.还对一些东东进行了调整.</p>\n<p> 源代码中段话说的很形象:<code>Use the system classloader as the victim for all this ClassLoader pinning we&#39;re about to do.</code></p>\n</li>\n<li><p><code>org.apache.catalina.loader.WebappClassLoader</code></p>\n<p> 相关逻辑主要在<code>stop</code>方法中:</p>\n<ul>\n<li>调用<code>org.apache.catalina.loader.JdbcLeakPrevention</code> 来deregister Driver</li>\n<li>找出所有应用线程,如果线程还在执行,则打印警告信息.如果启用了<code>clearReferencesStopThreads</code>,使用反射来关闭线程池或者线程.</li>\n<li>清理ThreadLocal</li>\n<li>清理各种cache…</li>\n<li>清理资源路径</li>\n</ul>\n</li>\n</ol>\n<pre><code>&lt;a id=&quot;load_class_step&quot; class=&quot;anchor&quot;&gt;加载类步骤&lt;/a&gt;:\n\n1. 判断WebappClassLoader是否关闭,如果已关闭,报异常,打印日志\n2. 检查resourceEntries缓存\n3. 使用当前类加载器加载\n4. 使用SystemClassLoader加载\n5. 如果启用delegate,从父加载器加载\n6. 从`WEB-INFO/classes`和`WEB-INFO/lib`目录加载\n7. 用父类加载器来加载\n8. 加载不到抛出`ClassNotFoundException`\n</code></pre><ol>\n<li><p><code>org.apache.catalina.core.ThreadLocalLeakPreventionListener</code></p>\n<p> 清理线程池.</p>\n</li>\n</ol>\n<p>再分析下dubbo怎么关闭的:</p>\n<ol>\n<li>dubbo中的每个provide都是<code>ServiceBean</code>对象,此对象实现<code>DisposableBean</code>.在容器关闭时,<code>ServiceBean</code>取消注册.</li>\n<li><code>com.alibaba.dubbo.config.AbstractConfig</code>中注册了一个<code>ShutdownHook</code>,调用<code>ProtocolConfig.destroyAll()</code>,清理资源(比如关闭和注册中心的连接和关闭netty)</li>\n</ol>\n<p>这里需要注意下,调用<code>org.apache.catalina.loader.WebappClassLoader#stop</code>和调用<code>ProtocolConfig.destroyAll()</code>的不是同一个线程.而且<code>org.apache.catalina.loader.WebappClassLoader#started</code>字段并不是<code>volatile</code>的,有可能出现并发状态下的的不一致.这个时候,<code>WebappClassLoader</code>已经<code>started=true</code>了,然而<code>ShutdownHook</code>线程读到的值为false,继续去加载类,由于各种缓存也清空了,最终会抛出<code>ClassNotFoundException</code>(参考<a href=\"#load_class_step\">加载步骤</a>)</p>\n<p>参考:</p>\n<pre><code>http://wiki.apache.org/tomcat/MemoryLeakProtection\n</code></pre><h2 id=\"实战-Groovy-使用闭包、ExpandoMetaClass-和类别进行元编程\"><a href=\"#实战-Groovy-使用闭包、ExpandoMetaClass-和类别进行元编程\" class=\"headerlink\" title=\"实战 Groovy: 使用闭包、ExpandoMetaClass 和类别进行元编程\"></a>实战 Groovy: 使用闭包、ExpandoMetaClass 和类别进行元编程</h2><p><a href=\"http://www.ibm.com/developerworks/cn/java/j-pg06239.html\" target=\"_blank\" rel=\"noopener\">http://www.ibm.com/developerworks/cn/java/j-pg06239.html</a></p>\n<p><code>println &quot;ifconfig en0&quot;.execute().text</code>,这行代码使用fluent api+元编程,执行linux命令,打印结果.</p>\n<p>这个特性对于测试同学来说就非常重要,就这么直接mock原类的行为,很方便.</p>\n<h2 id=\"Venkat-Subramaniam-讨论多语言编程、JVM-和多核处理\"><a href=\"#Venkat-Subramaniam-讨论多语言编程、JVM-和多核处理\" class=\"headerlink\" title=\"Venkat Subramaniam 讨论多语言编程、JVM 和多核处理\"></a>Venkat Subramaniam 讨论多语言编程、JVM 和多核处理</h2><p>这篇文章很精彩,看了这篇文章有学习scala和groovy的冲动.摘录一些原文比较精彩的内容:</p>\n<h3 id=\"1-关于多语言编程\"><a href=\"#1-关于多语言编程\" class=\"headerlink\" title=\"1.关于多语言编程\"></a>1.关于多语言编程</h3><p>Ola Bini 曾在他的语言金字塔中很好地阐述关于语言。在语言金字塔中,Scala 或 Java 可以非常有效地编写基础架构代码。在此基础之上，他谈到了一个更具动态性的分层。在这一层中，利用元编程功能。可以说，元编程带来的最大优势就是能够减少您需要编写的代码量。最直观的体验就是代码数量的减少，您可以在代码中编写非常灵活的内容。在此基础之上，金字塔的塔尖是更为特定于领域的语言层，即 DSL 层。</p>\n<p>使用动态语言编程时，最重要的是设定更出色的准则，以便指导单元测试的编写，确保代码不会偏离原意，准确执行您希望的操作</p>\n<h3 id=\"2-关于多核并行\"><a href=\"#2-关于多核并行\" class=\"headerlink\" title=\"2.关于多核并行:\"></a>2.关于多核并行:</h3><p>一种方法是推行不可变性，也就是说：我不会更改任何东西。您处理的所有数据都是不可变，由于不可变，因此也不需<br>要同步。这解决了冲突问题，但我要如何在线程间通信？如何交换数据？为此，我们可以使用 Erlang 和 Scala 奉行的基于 Actor 的模型。使用 Actor，然后通过来回传递数据在 Actor 之间通信，但数据仍然保持不可变，整个过程极为安全。</p>\n<p>软件事务处理内存模型所做的是将您的数据访问绑定到事务边界内，就像数据库为您提供 ACID（原子性、一致性、隔离和持久性）时一样。它为您提供了这种功能，但您无法在内存中实现数据持久性，因此它会处理原子性、一致性和隔离。<br>您可以通过三种方法处理并行性。<strong><em>在解决并行性时,最糟糕的方法就是共享的可变性，这就是同步模型。更好的方法是采用基于 Actor 的模型，在线程间传输不可变数据。如果存在不频繁的写入操作和极其频繁的读取操作，那么第三个选择就是事务软件内存。</em></strong></p>\n<h2 id=\"Baby’s-First-Garbage-Collector\"><a href=\"#Baby’s-First-Garbage-Collector\" class=\"headerlink\" title=\"Baby’s First Garbage Collector\"></a>Baby’s First Garbage Collector</h2><p><a href=\"http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/\" target=\"_blank\" rel=\"noopener\">http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/</a></p>\n<p><a href=\"\">https://github.com/munificent/mark-sweep/blob/master/main.c</a></p>\n<p>用c实现的一个简单的gc,采用Marking and sweeping的方式,大致能明白gc如何工作了.</p>"},{"title":"2014年05月Reading Notes","date":"2014-05-29T13:52:17.000Z","_content":"\n## 面向GC的Java编程\n\n[http://coolshell.cn/articles/11541.html](http://coolshell.cn/articles/11541.html)\n\n好文,总结的很不错.\n\n\n## spring boot Initializr\n\n[http://start.spring.io/](http://start.spring.io/)\n\n有了这个,创建spring boot项目就快了.\n\n## OOM Killer\n\n很早听说OOM Killer这个东东,感觉很神秘.而且以前分析某次线上故障,我得出的结论是OOM Killer,但是没有找到日志,囧!最近在玩vagrant,用的ubuntu box,虚拟机内存分配512m,某应用配置jvm内存`-Xms256M -Xmx512m -XX:PermSize=64m -XX:MaxPermSize=256m`.应用在启动过程中日志刷了一会儿就不动了,`command+c`结束后,console报出:\n\n\tINFO: Initializing Spring root WebApplicationContext\n\t^C./tomcat.sh: line 6:  7649 Killed                  nohup mvn clean tomcat7:run -Dspring.profiles.active=$env -Dsys.name=$sysname > \"$logfile\" 2>&1 < /dev/null\n\t\n找了很久,在`/var/log/syslog`发现如下日志:\n\n\tMay 22 09:47:41 vagrant-ubuntu-saucy-64 kernel: [ 5499.448534] Out of memory: Kill process 7649 (java) score 788 or sacrifice child\n\tMay 22 09:47:41 vagrant-ubuntu-saucy-64 kernel: [ 5499.449012] Killed process 7649 (java) total-vm:1460964kB, anon-rss:407220kB, file-rss:0kB\n\t\n这篇文章解释如何处理[oom](http://www.vpsee.com/2013/10/how-to-configure-the-linux-oom-killer/)\n\n## vagrant\n\nhttps://github.com/astaxie/Go-in-Action/blob/master/ebook/zh/01.2.md\n\nhttp://blog.segmentfault.com/fenbox/1190000000264347\n\nhttp://docs.vagrantup.com/v2/getting-started/index.html\n\n如果mac环境下虚拟机出现Failed to load VMMR0.r0 (VERR_SUPLIB_WORLD_WRITABLE),执行`sudo chmod o-w /Applications`再试试.\n\n \n## 构建高可用系统的常用招数\n [http://bluedavy.me/?p=468](http://bluedavy.me/?p=468)\n \n大牛的总结,分享+总结下:\n\n1. 监控和报警\n \t\n \t监控和报警能提前发现问题/缩短故障时间,前提是得能正确的评估监控点.\n\n2. SPoF(Single Point of Failure)\n \n \t单点故障也分层次的,不过我们coder一般只关注服务层面.服务尽量做到无状态,只需要做负载就ok了.不能做成无状态的就需要做集群了.实在不行的就做成主备.\n \t\n3. 解耦\n  \t\n\t后端业务通过消息/事件来解耦(Eventbus也不错),前端页面模块化,互相不影响.\n \t\n4. 隔离\n \n\t隔离既要防止依赖的系统之间相互影响(防止故障传播),也要防止同一节点上的不同服务相互影响(资源隔离).\n\t\n\t宏观层面,区分服务重要性,如果都能服务化就好做了.不同服务可以选择配置不同个数的服务节点.重要的,访问量大的就多加点节点.这需要监控系统能准确评估服务访问情况.\n\t\n\t微观层面,在服务内部,服务对外提供的能力一般通过线程池大小和请求队列长度来控制.在这里,大不一定就好,多也不定就好.\n\t\n \n5. 容灾\n \n \t这里谈了几点:超时控制/非关键业务自动降级(用dubbo实现就很方便)/手动降级/自恢复能力(比如druid连接池)/自我保护能力\n \n自己补充点,快速故障恢复能力(日志很重要)/避免人为故障(减少开发人员犯错误的机会)/简单可依赖(能简单做的就绝对不玩花哨) \n \n## Uses MySQL to store schema-less data\n[http://backchannel.org/blog/friendfeed-schemaless-mysql](http://backchannel.org/blog/friendfeed-schemaless-mysql)\n\n如何用mysql来存储schema-less的数据,实现很简单.\n\n数据表:\n\t\n\tCREATE TABLE entities (\n    \tadded_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    \tid BINARY(16) NOT NULL,\n   \t \tupdated TIMESTAMP NOT NULL,\n    \tbody MEDIUMBLOB,\n    \tUNIQUE KEY (id),\n    \tKEY (updated)\n\t) ENGINE=InnoDB;\n\t\n假如内容是:\n\t\n\t{\n    \t\"id\": \"71f0c4d2291844cca2df6f486e96e37c\",\n    \t\"user_id\": \"f48b0440ca0c4f66991c4d5f6a078eaf\",\n    \t\"feed_id\": \"f48b0440ca0c4f66991c4d5f6a078eaf\",\n    \t\"title\": \"We just launched a new backend system for FriendFeed!\",\n    \t\"link\": \"http://friendfeed.com/e/71f0c4d2-2918-44cc-a2df-6f486e96e37c\",\n    \t\"published\": 1235697046,\n    \t\"updated\": 1235697046,\n\t}\n如果要给title建立索引,创建新表\n\n\tCREATE TABLE index_title (\n    \ttitle varchar(100) ,\n    \tentity_id BINARY(16) NOT NULL UNIQUE,\n   \t\tPRIMARY KEY (user_id, entity_id)\n\t) ENGINE=InnoDB;\n\n查询的时候先从索引表查出entity_id,然后在去entities表查询详细数据.可以存储数据为text,方便数据库直接操作(必要性不是很大,text太占内存了),当然最好还是存储压缩后的二进制数据.不是经常改动的数据,应用层在加上一层cache.\n\n索引可以异步建立,定时任务周期性的去找updated的新数据.\n\n\n## 为什么tomcat应用三分钟还关不掉\n\n这种问题一般是因为还有非deamon线程在容器关闭时没有正确的关闭导致的.可以在执行tomcat shutdown脚本后,jstack线程栈,看下还有哪些非deamon线程在执行.\n\n应用使用线程持一定要记得关闭线程池,可以用spring提供的.\n\n\t<bean id=\"taskExecutor\"\n          class=\"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor\">\n        <property name=\"corePoolSize\" value=\"10\"/>\n        <property name=\"keepAliveSeconds\" value=\"200\"/>\n        <property name=\"maxPoolSize\" value=\"50\"/>\n        <property name=\"queueCapacity\" value=\"1000\"/>\n        <property name=\"awaitTerminationSeconds\" value=\"60\"/>\n        <property name=\"waitForTasksToCompleteOnShutdown\" value=\"true\"/>\n    </bean>\n注意最后面两个参数.\n\n## The New RBAC: Resource-Based Access Control\n\n最近看看shiro的相关资料,看到这篇文章.以前也隐隐约约思考过权限控制,也感觉[RBAC](http://en.wikipedia.org/wiki/Role-Based_Access_Control)控制粒度太粗了.作者提到`Explicit Access Control`概念,通过资源来解耦角色,控制粒度更细.从权限的分配角度来说,这样使用也更方便,可以把权限分配到某个用户/某个组/某个角色.\n\n当然,我们把资源的权限和角色一一对于,角色有层次关系并且可以继承,RBAC也可以胜任细粒度的权限控制.","source":"_posts/2014-05-reading-notes.md","raw":"---\ntitle: 2014年05月Reading Notes\ndate: 2014-05-29 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n  - OOM Killer\n  - vagrant\n  - cxf unexpected element\n  - 构建高可用系统\n  - tomcat\n  - maven\n---\n\n## 面向GC的Java编程\n\n[http://coolshell.cn/articles/11541.html](http://coolshell.cn/articles/11541.html)\n\n好文,总结的很不错.\n\n\n## spring boot Initializr\n\n[http://start.spring.io/](http://start.spring.io/)\n\n有了这个,创建spring boot项目就快了.\n\n## OOM Killer\n\n很早听说OOM Killer这个东东,感觉很神秘.而且以前分析某次线上故障,我得出的结论是OOM Killer,但是没有找到日志,囧!最近在玩vagrant,用的ubuntu box,虚拟机内存分配512m,某应用配置jvm内存`-Xms256M -Xmx512m -XX:PermSize=64m -XX:MaxPermSize=256m`.应用在启动过程中日志刷了一会儿就不动了,`command+c`结束后,console报出:\n\n\tINFO: Initializing Spring root WebApplicationContext\n\t^C./tomcat.sh: line 6:  7649 Killed                  nohup mvn clean tomcat7:run -Dspring.profiles.active=$env -Dsys.name=$sysname > \"$logfile\" 2>&1 < /dev/null\n\t\n找了很久,在`/var/log/syslog`发现如下日志:\n\n\tMay 22 09:47:41 vagrant-ubuntu-saucy-64 kernel: [ 5499.448534] Out of memory: Kill process 7649 (java) score 788 or sacrifice child\n\tMay 22 09:47:41 vagrant-ubuntu-saucy-64 kernel: [ 5499.449012] Killed process 7649 (java) total-vm:1460964kB, anon-rss:407220kB, file-rss:0kB\n\t\n这篇文章解释如何处理[oom](http://www.vpsee.com/2013/10/how-to-configure-the-linux-oom-killer/)\n\n## vagrant\n\nhttps://github.com/astaxie/Go-in-Action/blob/master/ebook/zh/01.2.md\n\nhttp://blog.segmentfault.com/fenbox/1190000000264347\n\nhttp://docs.vagrantup.com/v2/getting-started/index.html\n\n如果mac环境下虚拟机出现Failed to load VMMR0.r0 (VERR_SUPLIB_WORLD_WRITABLE),执行`sudo chmod o-w /Applications`再试试.\n\n \n## 构建高可用系统的常用招数\n [http://bluedavy.me/?p=468](http://bluedavy.me/?p=468)\n \n大牛的总结,分享+总结下:\n\n1. 监控和报警\n \t\n \t监控和报警能提前发现问题/缩短故障时间,前提是得能正确的评估监控点.\n\n2. SPoF(Single Point of Failure)\n \n \t单点故障也分层次的,不过我们coder一般只关注服务层面.服务尽量做到无状态,只需要做负载就ok了.不能做成无状态的就需要做集群了.实在不行的就做成主备.\n \t\n3. 解耦\n  \t\n\t后端业务通过消息/事件来解耦(Eventbus也不错),前端页面模块化,互相不影响.\n \t\n4. 隔离\n \n\t隔离既要防止依赖的系统之间相互影响(防止故障传播),也要防止同一节点上的不同服务相互影响(资源隔离).\n\t\n\t宏观层面,区分服务重要性,如果都能服务化就好做了.不同服务可以选择配置不同个数的服务节点.重要的,访问量大的就多加点节点.这需要监控系统能准确评估服务访问情况.\n\t\n\t微观层面,在服务内部,服务对外提供的能力一般通过线程池大小和请求队列长度来控制.在这里,大不一定就好,多也不定就好.\n\t\n \n5. 容灾\n \n \t这里谈了几点:超时控制/非关键业务自动降级(用dubbo实现就很方便)/手动降级/自恢复能力(比如druid连接池)/自我保护能力\n \n自己补充点,快速故障恢复能力(日志很重要)/避免人为故障(减少开发人员犯错误的机会)/简单可依赖(能简单做的就绝对不玩花哨) \n \n## Uses MySQL to store schema-less data\n[http://backchannel.org/blog/friendfeed-schemaless-mysql](http://backchannel.org/blog/friendfeed-schemaless-mysql)\n\n如何用mysql来存储schema-less的数据,实现很简单.\n\n数据表:\n\t\n\tCREATE TABLE entities (\n    \tadded_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    \tid BINARY(16) NOT NULL,\n   \t \tupdated TIMESTAMP NOT NULL,\n    \tbody MEDIUMBLOB,\n    \tUNIQUE KEY (id),\n    \tKEY (updated)\n\t) ENGINE=InnoDB;\n\t\n假如内容是:\n\t\n\t{\n    \t\"id\": \"71f0c4d2291844cca2df6f486e96e37c\",\n    \t\"user_id\": \"f48b0440ca0c4f66991c4d5f6a078eaf\",\n    \t\"feed_id\": \"f48b0440ca0c4f66991c4d5f6a078eaf\",\n    \t\"title\": \"We just launched a new backend system for FriendFeed!\",\n    \t\"link\": \"http://friendfeed.com/e/71f0c4d2-2918-44cc-a2df-6f486e96e37c\",\n    \t\"published\": 1235697046,\n    \t\"updated\": 1235697046,\n\t}\n如果要给title建立索引,创建新表\n\n\tCREATE TABLE index_title (\n    \ttitle varchar(100) ,\n    \tentity_id BINARY(16) NOT NULL UNIQUE,\n   \t\tPRIMARY KEY (user_id, entity_id)\n\t) ENGINE=InnoDB;\n\n查询的时候先从索引表查出entity_id,然后在去entities表查询详细数据.可以存储数据为text,方便数据库直接操作(必要性不是很大,text太占内存了),当然最好还是存储压缩后的二进制数据.不是经常改动的数据,应用层在加上一层cache.\n\n索引可以异步建立,定时任务周期性的去找updated的新数据.\n\n\n## 为什么tomcat应用三分钟还关不掉\n\n这种问题一般是因为还有非deamon线程在容器关闭时没有正确的关闭导致的.可以在执行tomcat shutdown脚本后,jstack线程栈,看下还有哪些非deamon线程在执行.\n\n应用使用线程持一定要记得关闭线程池,可以用spring提供的.\n\n\t<bean id=\"taskExecutor\"\n          class=\"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor\">\n        <property name=\"corePoolSize\" value=\"10\"/>\n        <property name=\"keepAliveSeconds\" value=\"200\"/>\n        <property name=\"maxPoolSize\" value=\"50\"/>\n        <property name=\"queueCapacity\" value=\"1000\"/>\n        <property name=\"awaitTerminationSeconds\" value=\"60\"/>\n        <property name=\"waitForTasksToCompleteOnShutdown\" value=\"true\"/>\n    </bean>\n注意最后面两个参数.\n\n## The New RBAC: Resource-Based Access Control\n\n最近看看shiro的相关资料,看到这篇文章.以前也隐隐约约思考过权限控制,也感觉[RBAC](http://en.wikipedia.org/wiki/Role-Based_Access_Control)控制粒度太粗了.作者提到`Explicit Access Control`概念,通过资源来解耦角色,控制粒度更细.从权限的分配角度来说,这样使用也更方便,可以把权限分配到某个用户/某个组/某个角色.\n\n当然,我们把资源的权限和角色一一对于,角色有层次关系并且可以继承,RBAC也可以胜任细粒度的权限控制.","slug":"2014-05-reading-notes","published":1,"updated":"2018-04-01T16:53:17.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksfh000cp0ugqu5r90f9","content":"<h2 id=\"面向GC的Java编程\"><a href=\"#面向GC的Java编程\" class=\"headerlink\" title=\"面向GC的Java编程\"></a>面向GC的Java编程</h2><p><a href=\"http://coolshell.cn/articles/11541.html\" target=\"_blank\" rel=\"noopener\">http://coolshell.cn/articles/11541.html</a></p>\n<p>好文,总结的很不错.</p>\n<h2 id=\"spring-boot-Initializr\"><a href=\"#spring-boot-Initializr\" class=\"headerlink\" title=\"spring boot Initializr\"></a>spring boot Initializr</h2><p><a href=\"http://start.spring.io/\" target=\"_blank\" rel=\"noopener\">http://start.spring.io/</a></p>\n<p>有了这个,创建spring boot项目就快了.</p>\n<h2 id=\"OOM-Killer\"><a href=\"#OOM-Killer\" class=\"headerlink\" title=\"OOM Killer\"></a>OOM Killer</h2><p>很早听说OOM Killer这个东东,感觉很神秘.而且以前分析某次线上故障,我得出的结论是OOM Killer,但是没有找到日志,囧!最近在玩vagrant,用的ubuntu box,虚拟机内存分配512m,某应用配置jvm内存<code>-Xms256M -Xmx512m -XX:PermSize=64m -XX:MaxPermSize=256m</code>.应用在启动过程中日志刷了一会儿就不动了,<code>command+c</code>结束后,console报出:</p>\n<pre><code>INFO: Initializing Spring root WebApplicationContext\n^C./tomcat.sh: line 6:  7649 Killed                  nohup mvn clean tomcat7:run -Dspring.profiles.active=$env -Dsys.name=$sysname &gt; &quot;$logfile&quot; 2&gt;&amp;1 &lt; /dev/null\n</code></pre><p>找了很久,在<code>/var/log/syslog</code>发现如下日志:</p>\n<pre><code>May 22 09:47:41 vagrant-ubuntu-saucy-64 kernel: [ 5499.448534] Out of memory: Kill process 7649 (java) score 788 or sacrifice child\nMay 22 09:47:41 vagrant-ubuntu-saucy-64 kernel: [ 5499.449012] Killed process 7649 (java) total-vm:1460964kB, anon-rss:407220kB, file-rss:0kB\n</code></pre><p>这篇文章解释如何处理<a href=\"http://www.vpsee.com/2013/10/how-to-configure-the-linux-oom-killer/\" target=\"_blank\" rel=\"noopener\">oom</a></p>\n<h2 id=\"vagrant\"><a href=\"#vagrant\" class=\"headerlink\" title=\"vagrant\"></a>vagrant</h2><p><a href=\"https://github.com/astaxie/Go-in-Action/blob/master/ebook/zh/01.2.md\" target=\"_blank\" rel=\"noopener\">https://github.com/astaxie/Go-in-Action/blob/master/ebook/zh/01.2.md</a></p>\n<p><a href=\"http://blog.segmentfault.com/fenbox/1190000000264347\" target=\"_blank\" rel=\"noopener\">http://blog.segmentfault.com/fenbox/1190000000264347</a></p>\n<p><a href=\"http://docs.vagrantup.com/v2/getting-started/index.html\" target=\"_blank\" rel=\"noopener\">http://docs.vagrantup.com/v2/getting-started/index.html</a></p>\n<p>如果mac环境下虚拟机出现Failed to load VMMR0.r0 (VERR_SUPLIB_WORLD_WRITABLE),执行<code>sudo chmod o-w /Applications</code>再试试.</p>\n<h2 id=\"构建高可用系统的常用招数\"><a href=\"#构建高可用系统的常用招数\" class=\"headerlink\" title=\"构建高可用系统的常用招数\"></a>构建高可用系统的常用招数</h2><p> <a href=\"http://bluedavy.me/?p=468\" target=\"_blank\" rel=\"noopener\">http://bluedavy.me/?p=468</a></p>\n<p>大牛的总结,分享+总结下:</p>\n<ol>\n<li><p>监控和报警</p>\n<p>  监控和报警能提前发现问题/缩短故障时间,前提是得能正确的评估监控点.</p>\n</li>\n<li><p>SPoF(Single Point of Failure)</p>\n<p>  单点故障也分层次的,不过我们coder一般只关注服务层面.服务尽量做到无状态,只需要做负载就ok了.不能做成无状态的就需要做集群了.实在不行的就做成主备.</p>\n</li>\n<li><p>解耦</p>\n<p> 后端业务通过消息/事件来解耦(Eventbus也不错),前端页面模块化,互相不影响.</p>\n</li>\n<li><p>隔离</p>\n<p> 隔离既要防止依赖的系统之间相互影响(防止故障传播),也要防止同一节点上的不同服务相互影响(资源隔离).</p>\n<p> 宏观层面,区分服务重要性,如果都能服务化就好做了.不同服务可以选择配置不同个数的服务节点.重要的,访问量大的就多加点节点.这需要监控系统能准确评估服务访问情况.</p>\n<p> 微观层面,在服务内部,服务对外提供的能力一般通过线程池大小和请求队列长度来控制.在这里,大不一定就好,多也不定就好.</p>\n</li>\n</ol>\n<ol>\n<li><p>容灾</p>\n<p>  这里谈了几点:超时控制/非关键业务自动降级(用dubbo实现就很方便)/手动降级/自恢复能力(比如druid连接池)/自我保护能力</p>\n</li>\n</ol>\n<p>自己补充点,快速故障恢复能力(日志很重要)/避免人为故障(减少开发人员犯错误的机会)/简单可依赖(能简单做的就绝对不玩花哨) </p>\n<h2 id=\"Uses-MySQL-to-store-schema-less-data\"><a href=\"#Uses-MySQL-to-store-schema-less-data\" class=\"headerlink\" title=\"Uses MySQL to store schema-less data\"></a>Uses MySQL to store schema-less data</h2><p><a href=\"http://backchannel.org/blog/friendfeed-schemaless-mysql\" target=\"_blank\" rel=\"noopener\">http://backchannel.org/blog/friendfeed-schemaless-mysql</a></p>\n<p>如何用mysql来存储schema-less的数据,实现很简单.</p>\n<p>数据表:</p>\n<pre><code>CREATE TABLE entities (\n    added_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    id BINARY(16) NOT NULL,\n        updated TIMESTAMP NOT NULL,\n    body MEDIUMBLOB,\n    UNIQUE KEY (id),\n    KEY (updated)\n) ENGINE=InnoDB;\n</code></pre><p>假如内容是:</p>\n<pre><code>{\n    &quot;id&quot;: &quot;71f0c4d2291844cca2df6f486e96e37c&quot;,\n    &quot;user_id&quot;: &quot;f48b0440ca0c4f66991c4d5f6a078eaf&quot;,\n    &quot;feed_id&quot;: &quot;f48b0440ca0c4f66991c4d5f6a078eaf&quot;,\n    &quot;title&quot;: &quot;We just launched a new backend system for FriendFeed!&quot;,\n    &quot;link&quot;: &quot;http://friendfeed.com/e/71f0c4d2-2918-44cc-a2df-6f486e96e37c&quot;,\n    &quot;published&quot;: 1235697046,\n    &quot;updated&quot;: 1235697046,\n}\n</code></pre><p>如果要给title建立索引,创建新表</p>\n<pre><code>CREATE TABLE index_title (\n    title varchar(100) ,\n    entity_id BINARY(16) NOT NULL UNIQUE,\n       PRIMARY KEY (user_id, entity_id)\n) ENGINE=InnoDB;\n</code></pre><p>查询的时候先从索引表查出entity_id,然后在去entities表查询详细数据.可以存储数据为text,方便数据库直接操作(必要性不是很大,text太占内存了),当然最好还是存储压缩后的二进制数据.不是经常改动的数据,应用层在加上一层cache.</p>\n<p>索引可以异步建立,定时任务周期性的去找updated的新数据.</p>\n<h2 id=\"为什么tomcat应用三分钟还关不掉\"><a href=\"#为什么tomcat应用三分钟还关不掉\" class=\"headerlink\" title=\"为什么tomcat应用三分钟还关不掉\"></a>为什么tomcat应用三分钟还关不掉</h2><p>这种问题一般是因为还有非deamon线程在容器关闭时没有正确的关闭导致的.可以在执行tomcat shutdown脚本后,jstack线程栈,看下还有哪些非deamon线程在执行.</p>\n<p>应用使用线程持一定要记得关闭线程池,可以用spring提供的.</p>\n<pre><code>&lt;bean id=&quot;taskExecutor&quot;\n      class=&quot;org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor&quot;&gt;\n    &lt;property name=&quot;corePoolSize&quot; value=&quot;10&quot;/&gt;\n    &lt;property name=&quot;keepAliveSeconds&quot; value=&quot;200&quot;/&gt;\n    &lt;property name=&quot;maxPoolSize&quot; value=&quot;50&quot;/&gt;\n    &lt;property name=&quot;queueCapacity&quot; value=&quot;1000&quot;/&gt;\n    &lt;property name=&quot;awaitTerminationSeconds&quot; value=&quot;60&quot;/&gt;\n    &lt;property name=&quot;waitForTasksToCompleteOnShutdown&quot; value=&quot;true&quot;/&gt;\n&lt;/bean&gt;\n</code></pre><p>注意最后面两个参数.</p>\n<h2 id=\"The-New-RBAC-Resource-Based-Access-Control\"><a href=\"#The-New-RBAC-Resource-Based-Access-Control\" class=\"headerlink\" title=\"The New RBAC: Resource-Based Access Control\"></a>The New RBAC: Resource-Based Access Control</h2><p>最近看看shiro的相关资料,看到这篇文章.以前也隐隐约约思考过权限控制,也感觉<a href=\"http://en.wikipedia.org/wiki/Role-Based_Access_Control\" target=\"_blank\" rel=\"noopener\">RBAC</a>控制粒度太粗了.作者提到<code>Explicit Access Control</code>概念,通过资源来解耦角色,控制粒度更细.从权限的分配角度来说,这样使用也更方便,可以把权限分配到某个用户/某个组/某个角色.</p>\n<p>当然,我们把资源的权限和角色一一对于,角色有层次关系并且可以继承,RBAC也可以胜任细粒度的权限控制.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"面向GC的Java编程\"><a href=\"#面向GC的Java编程\" class=\"headerlink\" title=\"面向GC的Java编程\"></a>面向GC的Java编程</h2><p><a href=\"http://coolshell.cn/articles/11541.html\" target=\"_blank\" rel=\"noopener\">http://coolshell.cn/articles/11541.html</a></p>\n<p>好文,总结的很不错.</p>\n<h2 id=\"spring-boot-Initializr\"><a href=\"#spring-boot-Initializr\" class=\"headerlink\" title=\"spring boot Initializr\"></a>spring boot Initializr</h2><p><a href=\"http://start.spring.io/\" target=\"_blank\" rel=\"noopener\">http://start.spring.io/</a></p>\n<p>有了这个,创建spring boot项目就快了.</p>\n<h2 id=\"OOM-Killer\"><a href=\"#OOM-Killer\" class=\"headerlink\" title=\"OOM Killer\"></a>OOM Killer</h2><p>很早听说OOM Killer这个东东,感觉很神秘.而且以前分析某次线上故障,我得出的结论是OOM Killer,但是没有找到日志,囧!最近在玩vagrant,用的ubuntu box,虚拟机内存分配512m,某应用配置jvm内存<code>-Xms256M -Xmx512m -XX:PermSize=64m -XX:MaxPermSize=256m</code>.应用在启动过程中日志刷了一会儿就不动了,<code>command+c</code>结束后,console报出:</p>\n<pre><code>INFO: Initializing Spring root WebApplicationContext\n^C./tomcat.sh: line 6:  7649 Killed                  nohup mvn clean tomcat7:run -Dspring.profiles.active=$env -Dsys.name=$sysname &gt; &quot;$logfile&quot; 2&gt;&amp;1 &lt; /dev/null\n</code></pre><p>找了很久,在<code>/var/log/syslog</code>发现如下日志:</p>\n<pre><code>May 22 09:47:41 vagrant-ubuntu-saucy-64 kernel: [ 5499.448534] Out of memory: Kill process 7649 (java) score 788 or sacrifice child\nMay 22 09:47:41 vagrant-ubuntu-saucy-64 kernel: [ 5499.449012] Killed process 7649 (java) total-vm:1460964kB, anon-rss:407220kB, file-rss:0kB\n</code></pre><p>这篇文章解释如何处理<a href=\"http://www.vpsee.com/2013/10/how-to-configure-the-linux-oom-killer/\" target=\"_blank\" rel=\"noopener\">oom</a></p>\n<h2 id=\"vagrant\"><a href=\"#vagrant\" class=\"headerlink\" title=\"vagrant\"></a>vagrant</h2><p><a href=\"https://github.com/astaxie/Go-in-Action/blob/master/ebook/zh/01.2.md\" target=\"_blank\" rel=\"noopener\">https://github.com/astaxie/Go-in-Action/blob/master/ebook/zh/01.2.md</a></p>\n<p><a href=\"http://blog.segmentfault.com/fenbox/1190000000264347\" target=\"_blank\" rel=\"noopener\">http://blog.segmentfault.com/fenbox/1190000000264347</a></p>\n<p><a href=\"http://docs.vagrantup.com/v2/getting-started/index.html\" target=\"_blank\" rel=\"noopener\">http://docs.vagrantup.com/v2/getting-started/index.html</a></p>\n<p>如果mac环境下虚拟机出现Failed to load VMMR0.r0 (VERR_SUPLIB_WORLD_WRITABLE),执行<code>sudo chmod o-w /Applications</code>再试试.</p>\n<h2 id=\"构建高可用系统的常用招数\"><a href=\"#构建高可用系统的常用招数\" class=\"headerlink\" title=\"构建高可用系统的常用招数\"></a>构建高可用系统的常用招数</h2><p> <a href=\"http://bluedavy.me/?p=468\" target=\"_blank\" rel=\"noopener\">http://bluedavy.me/?p=468</a></p>\n<p>大牛的总结,分享+总结下:</p>\n<ol>\n<li><p>监控和报警</p>\n<p>  监控和报警能提前发现问题/缩短故障时间,前提是得能正确的评估监控点.</p>\n</li>\n<li><p>SPoF(Single Point of Failure)</p>\n<p>  单点故障也分层次的,不过我们coder一般只关注服务层面.服务尽量做到无状态,只需要做负载就ok了.不能做成无状态的就需要做集群了.实在不行的就做成主备.</p>\n</li>\n<li><p>解耦</p>\n<p> 后端业务通过消息/事件来解耦(Eventbus也不错),前端页面模块化,互相不影响.</p>\n</li>\n<li><p>隔离</p>\n<p> 隔离既要防止依赖的系统之间相互影响(防止故障传播),也要防止同一节点上的不同服务相互影响(资源隔离).</p>\n<p> 宏观层面,区分服务重要性,如果都能服务化就好做了.不同服务可以选择配置不同个数的服务节点.重要的,访问量大的就多加点节点.这需要监控系统能准确评估服务访问情况.</p>\n<p> 微观层面,在服务内部,服务对外提供的能力一般通过线程池大小和请求队列长度来控制.在这里,大不一定就好,多也不定就好.</p>\n</li>\n</ol>\n<ol>\n<li><p>容灾</p>\n<p>  这里谈了几点:超时控制/非关键业务自动降级(用dubbo实现就很方便)/手动降级/自恢复能力(比如druid连接池)/自我保护能力</p>\n</li>\n</ol>\n<p>自己补充点,快速故障恢复能力(日志很重要)/避免人为故障(减少开发人员犯错误的机会)/简单可依赖(能简单做的就绝对不玩花哨) </p>\n<h2 id=\"Uses-MySQL-to-store-schema-less-data\"><a href=\"#Uses-MySQL-to-store-schema-less-data\" class=\"headerlink\" title=\"Uses MySQL to store schema-less data\"></a>Uses MySQL to store schema-less data</h2><p><a href=\"http://backchannel.org/blog/friendfeed-schemaless-mysql\" target=\"_blank\" rel=\"noopener\">http://backchannel.org/blog/friendfeed-schemaless-mysql</a></p>\n<p>如何用mysql来存储schema-less的数据,实现很简单.</p>\n<p>数据表:</p>\n<pre><code>CREATE TABLE entities (\n    added_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    id BINARY(16) NOT NULL,\n        updated TIMESTAMP NOT NULL,\n    body MEDIUMBLOB,\n    UNIQUE KEY (id),\n    KEY (updated)\n) ENGINE=InnoDB;\n</code></pre><p>假如内容是:</p>\n<pre><code>{\n    &quot;id&quot;: &quot;71f0c4d2291844cca2df6f486e96e37c&quot;,\n    &quot;user_id&quot;: &quot;f48b0440ca0c4f66991c4d5f6a078eaf&quot;,\n    &quot;feed_id&quot;: &quot;f48b0440ca0c4f66991c4d5f6a078eaf&quot;,\n    &quot;title&quot;: &quot;We just launched a new backend system for FriendFeed!&quot;,\n    &quot;link&quot;: &quot;http://friendfeed.com/e/71f0c4d2-2918-44cc-a2df-6f486e96e37c&quot;,\n    &quot;published&quot;: 1235697046,\n    &quot;updated&quot;: 1235697046,\n}\n</code></pre><p>如果要给title建立索引,创建新表</p>\n<pre><code>CREATE TABLE index_title (\n    title varchar(100) ,\n    entity_id BINARY(16) NOT NULL UNIQUE,\n       PRIMARY KEY (user_id, entity_id)\n) ENGINE=InnoDB;\n</code></pre><p>查询的时候先从索引表查出entity_id,然后在去entities表查询详细数据.可以存储数据为text,方便数据库直接操作(必要性不是很大,text太占内存了),当然最好还是存储压缩后的二进制数据.不是经常改动的数据,应用层在加上一层cache.</p>\n<p>索引可以异步建立,定时任务周期性的去找updated的新数据.</p>\n<h2 id=\"为什么tomcat应用三分钟还关不掉\"><a href=\"#为什么tomcat应用三分钟还关不掉\" class=\"headerlink\" title=\"为什么tomcat应用三分钟还关不掉\"></a>为什么tomcat应用三分钟还关不掉</h2><p>这种问题一般是因为还有非deamon线程在容器关闭时没有正确的关闭导致的.可以在执行tomcat shutdown脚本后,jstack线程栈,看下还有哪些非deamon线程在执行.</p>\n<p>应用使用线程持一定要记得关闭线程池,可以用spring提供的.</p>\n<pre><code>&lt;bean id=&quot;taskExecutor&quot;\n      class=&quot;org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor&quot;&gt;\n    &lt;property name=&quot;corePoolSize&quot; value=&quot;10&quot;/&gt;\n    &lt;property name=&quot;keepAliveSeconds&quot; value=&quot;200&quot;/&gt;\n    &lt;property name=&quot;maxPoolSize&quot; value=&quot;50&quot;/&gt;\n    &lt;property name=&quot;queueCapacity&quot; value=&quot;1000&quot;/&gt;\n    &lt;property name=&quot;awaitTerminationSeconds&quot; value=&quot;60&quot;/&gt;\n    &lt;property name=&quot;waitForTasksToCompleteOnShutdown&quot; value=&quot;true&quot;/&gt;\n&lt;/bean&gt;\n</code></pre><p>注意最后面两个参数.</p>\n<h2 id=\"The-New-RBAC-Resource-Based-Access-Control\"><a href=\"#The-New-RBAC-Resource-Based-Access-Control\" class=\"headerlink\" title=\"The New RBAC: Resource-Based Access Control\"></a>The New RBAC: Resource-Based Access Control</h2><p>最近看看shiro的相关资料,看到这篇文章.以前也隐隐约约思考过权限控制,也感觉<a href=\"http://en.wikipedia.org/wiki/Role-Based_Access_Control\" target=\"_blank\" rel=\"noopener\">RBAC</a>控制粒度太粗了.作者提到<code>Explicit Access Control</code>概念,通过资源来解耦角色,控制粒度更细.从权限的分配角度来说,这样使用也更方便,可以把权限分配到某个用户/某个组/某个角色.</p>\n<p>当然,我们把资源的权限和角色一一对于,角色有层次关系并且可以继承,RBAC也可以胜任细粒度的权限控制.</p>\n"},{"title":"2014年06月Reading Notes","date":"2014-06-28T13:52:17.000Z","_content":"\n## Awesome Sysadmin\n\n[https://github.com/kahun/awesome-sysadmin](https://github.com/kahun/awesome-sysadmin)\n\n系统管理员的开源资源,资源暴多,技术选型时参考.\n\n\n## Tengine\n[http://dmsimard.com/2014/06/21/a-use-case-of-tengine-a-drop-in-replacement-and-fork-of-nginx/](http://dmsimard.com/2014/06/21/a-use-case-of-tengine-a-drop-in-replacement-and-fork-of-nginx/)\n\n使用tengine来做LB,通过Tengine的`unbuffered requests`特性实现了上传性能提升.\n\n不过我自己装tengine启动就遇到了问题.\n\n\tthe configuration file //Users/bohr/software/tengine/conf/nginx.conf syntax is ok\n\tnginx: [emerg] mkdir() \"//Users/bohr/software/tengine/logs/access.log\" failed (21: Is a directory)\n\tconfiguration file //Users/bohr/software/tengine/conf/nginx.conf test failed\n\n\n## 服务器操作系统应该选择 Debian/Ubuntu 还是 CentOS？\n\n[http://www.zhihu.com/question/19599986](http://www.zhihu.com/question/19599986)\n\n生产环境选择操作系统还是要慎重.现在我厂在线上用ubuntu,遇到过几次诡异事件(服务器无缘无故挂了,没有任何日志,时间跳变),看了这篇文章,SA应该会把线上的linux服务器统一了吧.\n\n\n## web-starter-kit\n[https://github.com/google/web-starter-kit](https://github.com/google/web-starter-kit)\n\nWeb Starter Kit is a starting point for multi-screen web development. It encompasses opinionated recommendations on boilerplate and tooling for building an experience that works great across multiple devices.\n\n\n## 微服务：分解应用以实现可部署性和可扩展性\n[http://www.infoq.com/cn/articles/microservices-intro](http://www.infoq.com/cn/articles/microservices-intro)\n[http://microservices.io/index.html](http://microservices.io/index.html)\n\n文章讨论了整体架构和微服务构架的优缺点.对于大型应用而言,微服务架构当然是首选.\n\nAPI网关模式用于解耦应用客户端和微服务.我们可能没有考虑对不同的客户端提供不同粒度的服务(不同客户端的网络环境不一样).\n\n对于非强一致性数据要求的场景,`事件驱动的异步更新`(服务发布事件声明有些数据发生了变化，其他的服务订阅这些事件并更新它们的数据)解耦了事件的生产者和消费者,简化了开发也提升了可用性.某应用,很多配置数据都存在memcache中,一笔业务需要查询缓存>5次,每次都要去查,感觉很不爽.还是使用本地缓存+事件驱动的异步更新来做比较好.\n","source":"_posts/2014-06-reading-notes.md","raw":"---\ntitle: 2014年06月Reading Notes\ndate: 2014-06-28 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n  - tengine\n  - web-starter-kit\n  - microservice\n\n---\n\n## Awesome Sysadmin\n\n[https://github.com/kahun/awesome-sysadmin](https://github.com/kahun/awesome-sysadmin)\n\n系统管理员的开源资源,资源暴多,技术选型时参考.\n\n\n## Tengine\n[http://dmsimard.com/2014/06/21/a-use-case-of-tengine-a-drop-in-replacement-and-fork-of-nginx/](http://dmsimard.com/2014/06/21/a-use-case-of-tengine-a-drop-in-replacement-and-fork-of-nginx/)\n\n使用tengine来做LB,通过Tengine的`unbuffered requests`特性实现了上传性能提升.\n\n不过我自己装tengine启动就遇到了问题.\n\n\tthe configuration file //Users/bohr/software/tengine/conf/nginx.conf syntax is ok\n\tnginx: [emerg] mkdir() \"//Users/bohr/software/tengine/logs/access.log\" failed (21: Is a directory)\n\tconfiguration file //Users/bohr/software/tengine/conf/nginx.conf test failed\n\n\n## 服务器操作系统应该选择 Debian/Ubuntu 还是 CentOS？\n\n[http://www.zhihu.com/question/19599986](http://www.zhihu.com/question/19599986)\n\n生产环境选择操作系统还是要慎重.现在我厂在线上用ubuntu,遇到过几次诡异事件(服务器无缘无故挂了,没有任何日志,时间跳变),看了这篇文章,SA应该会把线上的linux服务器统一了吧.\n\n\n## web-starter-kit\n[https://github.com/google/web-starter-kit](https://github.com/google/web-starter-kit)\n\nWeb Starter Kit is a starting point for multi-screen web development. It encompasses opinionated recommendations on boilerplate and tooling for building an experience that works great across multiple devices.\n\n\n## 微服务：分解应用以实现可部署性和可扩展性\n[http://www.infoq.com/cn/articles/microservices-intro](http://www.infoq.com/cn/articles/microservices-intro)\n[http://microservices.io/index.html](http://microservices.io/index.html)\n\n文章讨论了整体架构和微服务构架的优缺点.对于大型应用而言,微服务架构当然是首选.\n\nAPI网关模式用于解耦应用客户端和微服务.我们可能没有考虑对不同的客户端提供不同粒度的服务(不同客户端的网络环境不一样).\n\n对于非强一致性数据要求的场景,`事件驱动的异步更新`(服务发布事件声明有些数据发生了变化，其他的服务订阅这些事件并更新它们的数据)解耦了事件的生产者和消费者,简化了开发也提升了可用性.某应用,很多配置数据都存在memcache中,一笔业务需要查询缓存>5次,每次都要去查,感觉很不爽.还是使用本地缓存+事件驱动的异步更新来做比较好.\n","slug":"2014-06-reading-notes","published":1,"updated":"2018-04-01T16:53:17.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksfl000gp0ug2ta13zp1","content":"<h2 id=\"Awesome-Sysadmin\"><a href=\"#Awesome-Sysadmin\" class=\"headerlink\" title=\"Awesome Sysadmin\"></a>Awesome Sysadmin</h2><p><a href=\"https://github.com/kahun/awesome-sysadmin\" target=\"_blank\" rel=\"noopener\">https://github.com/kahun/awesome-sysadmin</a></p>\n<p>系统管理员的开源资源,资源暴多,技术选型时参考.</p>\n<h2 id=\"Tengine\"><a href=\"#Tengine\" class=\"headerlink\" title=\"Tengine\"></a>Tengine</h2><p><a href=\"http://dmsimard.com/2014/06/21/a-use-case-of-tengine-a-drop-in-replacement-and-fork-of-nginx/\" target=\"_blank\" rel=\"noopener\">http://dmsimard.com/2014/06/21/a-use-case-of-tengine-a-drop-in-replacement-and-fork-of-nginx/</a></p>\n<p>使用tengine来做LB,通过Tengine的<code>unbuffered requests</code>特性实现了上传性能提升.</p>\n<p>不过我自己装tengine启动就遇到了问题.</p>\n<pre><code>the configuration file //Users/bohr/software/tengine/conf/nginx.conf syntax is ok\nnginx: [emerg] mkdir() &quot;//Users/bohr/software/tengine/logs/access.log&quot; failed (21: Is a directory)\nconfiguration file //Users/bohr/software/tengine/conf/nginx.conf test failed\n</code></pre><h2 id=\"服务器操作系统应该选择-Debian-Ubuntu-还是-CentOS？\"><a href=\"#服务器操作系统应该选择-Debian-Ubuntu-还是-CentOS？\" class=\"headerlink\" title=\"服务器操作系统应该选择 Debian/Ubuntu 还是 CentOS？\"></a>服务器操作系统应该选择 Debian/Ubuntu 还是 CentOS？</h2><p><a href=\"http://www.zhihu.com/question/19599986\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/19599986</a></p>\n<p>生产环境选择操作系统还是要慎重.现在我厂在线上用ubuntu,遇到过几次诡异事件(服务器无缘无故挂了,没有任何日志,时间跳变),看了这篇文章,SA应该会把线上的linux服务器统一了吧.</p>\n<h2 id=\"web-starter-kit\"><a href=\"#web-starter-kit\" class=\"headerlink\" title=\"web-starter-kit\"></a>web-starter-kit</h2><p><a href=\"https://github.com/google/web-starter-kit\" target=\"_blank\" rel=\"noopener\">https://github.com/google/web-starter-kit</a></p>\n<p>Web Starter Kit is a starting point for multi-screen web development. It encompasses opinionated recommendations on boilerplate and tooling for building an experience that works great across multiple devices.</p>\n<h2 id=\"微服务：分解应用以实现可部署性和可扩展性\"><a href=\"#微服务：分解应用以实现可部署性和可扩展性\" class=\"headerlink\" title=\"微服务：分解应用以实现可部署性和可扩展性\"></a>微服务：分解应用以实现可部署性和可扩展性</h2><p><a href=\"http://www.infoq.com/cn/articles/microservices-intro\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/microservices-intro</a><br><a href=\"http://microservices.io/index.html\" target=\"_blank\" rel=\"noopener\">http://microservices.io/index.html</a></p>\n<p>文章讨论了整体架构和微服务构架的优缺点.对于大型应用而言,微服务架构当然是首选.</p>\n<p>API网关模式用于解耦应用客户端和微服务.我们可能没有考虑对不同的客户端提供不同粒度的服务(不同客户端的网络环境不一样).</p>\n<p>对于非强一致性数据要求的场景,<code>事件驱动的异步更新</code>(服务发布事件声明有些数据发生了变化，其他的服务订阅这些事件并更新它们的数据)解耦了事件的生产者和消费者,简化了开发也提升了可用性.某应用,很多配置数据都存在memcache中,一笔业务需要查询缓存&gt;5次,每次都要去查,感觉很不爽.还是使用本地缓存+事件驱动的异步更新来做比较好.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Awesome-Sysadmin\"><a href=\"#Awesome-Sysadmin\" class=\"headerlink\" title=\"Awesome Sysadmin\"></a>Awesome Sysadmin</h2><p><a href=\"https://github.com/kahun/awesome-sysadmin\" target=\"_blank\" rel=\"noopener\">https://github.com/kahun/awesome-sysadmin</a></p>\n<p>系统管理员的开源资源,资源暴多,技术选型时参考.</p>\n<h2 id=\"Tengine\"><a href=\"#Tengine\" class=\"headerlink\" title=\"Tengine\"></a>Tengine</h2><p><a href=\"http://dmsimard.com/2014/06/21/a-use-case-of-tengine-a-drop-in-replacement-and-fork-of-nginx/\" target=\"_blank\" rel=\"noopener\">http://dmsimard.com/2014/06/21/a-use-case-of-tengine-a-drop-in-replacement-and-fork-of-nginx/</a></p>\n<p>使用tengine来做LB,通过Tengine的<code>unbuffered requests</code>特性实现了上传性能提升.</p>\n<p>不过我自己装tengine启动就遇到了问题.</p>\n<pre><code>the configuration file //Users/bohr/software/tengine/conf/nginx.conf syntax is ok\nnginx: [emerg] mkdir() &quot;//Users/bohr/software/tengine/logs/access.log&quot; failed (21: Is a directory)\nconfiguration file //Users/bohr/software/tengine/conf/nginx.conf test failed\n</code></pre><h2 id=\"服务器操作系统应该选择-Debian-Ubuntu-还是-CentOS？\"><a href=\"#服务器操作系统应该选择-Debian-Ubuntu-还是-CentOS？\" class=\"headerlink\" title=\"服务器操作系统应该选择 Debian/Ubuntu 还是 CentOS？\"></a>服务器操作系统应该选择 Debian/Ubuntu 还是 CentOS？</h2><p><a href=\"http://www.zhihu.com/question/19599986\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/19599986</a></p>\n<p>生产环境选择操作系统还是要慎重.现在我厂在线上用ubuntu,遇到过几次诡异事件(服务器无缘无故挂了,没有任何日志,时间跳变),看了这篇文章,SA应该会把线上的linux服务器统一了吧.</p>\n<h2 id=\"web-starter-kit\"><a href=\"#web-starter-kit\" class=\"headerlink\" title=\"web-starter-kit\"></a>web-starter-kit</h2><p><a href=\"https://github.com/google/web-starter-kit\" target=\"_blank\" rel=\"noopener\">https://github.com/google/web-starter-kit</a></p>\n<p>Web Starter Kit is a starting point for multi-screen web development. It encompasses opinionated recommendations on boilerplate and tooling for building an experience that works great across multiple devices.</p>\n<h2 id=\"微服务：分解应用以实现可部署性和可扩展性\"><a href=\"#微服务：分解应用以实现可部署性和可扩展性\" class=\"headerlink\" title=\"微服务：分解应用以实现可部署性和可扩展性\"></a>微服务：分解应用以实现可部署性和可扩展性</h2><p><a href=\"http://www.infoq.com/cn/articles/microservices-intro\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/microservices-intro</a><br><a href=\"http://microservices.io/index.html\" target=\"_blank\" rel=\"noopener\">http://microservices.io/index.html</a></p>\n<p>文章讨论了整体架构和微服务构架的优缺点.对于大型应用而言,微服务架构当然是首选.</p>\n<p>API网关模式用于解耦应用客户端和微服务.我们可能没有考虑对不同的客户端提供不同粒度的服务(不同客户端的网络环境不一样).</p>\n<p>对于非强一致性数据要求的场景,<code>事件驱动的异步更新</code>(服务发布事件声明有些数据发生了变化，其他的服务订阅这些事件并更新它们的数据)解耦了事件的生产者和消费者,简化了开发也提升了可用性.某应用,很多配置数据都存在memcache中,一笔业务需要查询缓存&gt;5次,每次都要去查,感觉很不爽.还是使用本地缓存+事件驱动的异步更新来做比较好.</p>\n"},{"title":"2014年08月Reading Notes","date":"2014-08-03T13:52:17.000Z","_content":"\n## My WordPress Development Toolbox\n\n[http://tommcfarlin.com/wordpress-developer-toolbox/](http://tommcfarlin.com/wordpress-developer-toolbox/)\n\n本来是准备找git的客户端,看到这篇文章.不喜欢tower,大爱[SoureTree](http://www.sourcetreeapp.com/).\n\n[browserstack](http://www.browserstack.com/)也挺好的,适合做浏览器兼容性测试.\n\n## JVM plus Docker: Better together\n[http://www.javaworld.com/article/2456960/java-app-dev/jvm-plus-docker-better-together.html](http://www.javaworld.com/article/2456960/java-app-dev/jvm-plus-docker-better-together.html)\n\ndocker刚好弥补jvm对资源管理(CPU/IO)的不足.\n\n## SharedHashMap vs Redis\n[http://vanillajava.blogspot.jp/2014/05/sharedhashmap-vs-redis.html](http://vanillajava.blogspot.jp/2014/05/sharedhashmap-vs-redis.html)\n\n这位哥异常牛掰,java低延迟方面的专家.把性能做到极致啊!!!`It was designed to be used in Java in a pause less, garbage free manner.`狂赞!!!先留着,有时间了看看源代码.\n\n## 高性能服务器架构\n[http://blog.csdn.net/zhoudaxia/article/details/14223755](http://blog.csdn.net/zhoudaxia/article/details/14223755)\n\n这些经验可以参考下:\n\n* 数据拷贝\n\n\t特别是java,很多数据拷贝的代码埋得深,比如`StringBuilder`扩容,集合扩容等等.java中的数据拷贝除了带来cpu的压力,也会给gc带来压力.\n\n\t参考:[使用零拷贝提高数据传输效率](/zero-copy/)\n\n* 上下文切换\n\n\t线程越多,上下文切换就会越多.需要合理评估处理模型和系统情况.按照SEDA的方式把一个请求划分为多个阶段,但是多个阶段的独立线程池真的会增加上下文的切换,但这样可能会让系统利用率最高.\n\n* 内存分配\n\n\t采用类似于Buddy memory allocation的策略来减少开销.\n\n* 锁竞争\n\n\t一定要控制好锁的粒度.某些场景用map来存放锁对象,而不要使用一把大锁.\n\n## 数据库版本控制工具liquibase\n[http://www.liquibase.org/quickstart.html](http://www.liquibase.org/quickstart.html)\n\n今天和勇哥讨论了如何来控制数据库版本.我们想的方案是,数据库里面有张versions表,里面记录当前的版本是多少.然后数据库更新文件存在项目中,并以目录来区分.这样就可以在项目启动时,来对比是否有新版本,是否需要升级.这样可以做到全自动化,需要规范现在的开发同学的行为,更重要的一点是,没有人来做这个事情.\n\nliquibase正好在做这个事情,他也支持sql格式的版本,学习成本相当低.而且有内置的数据库版本和集群场景的检测,给力,先试试.\n\n参考:[如何跟踪数据库结构变动](/database-version/)\n\n## 可伸缩性最佳实践：来自eBay的经验\n(http://www.infoq.com/cn/articles/ebay-scalability-best-practices)[http://www.infoq.com/cn/articles/ebay-scalability-best-practices]\n\n手里有本2011年的架构师特刊,翻开看到的第一篇文章.虽然有点老了,但是经验还是值得我们借鉴.\n\n* 按功能分割\n\n咱们现在的架构体系基本上遵循这条最佳实践.借助于dubbo/cxf实现功能服务化.应用层可以实现水平线性扩展.\n\n* 水平切分\n\n应用层面的无状态很重要,会话之类的东西可以放在缓存服务器上,尽量让LB来实现水平切分.\n\n数据库层面读写分离/分区/分库/分表.\n\n* 避免分布式事务\n\n分布式第一定律,不要使用分布式.特别是两阶段提交,对系统的吞吐影响很大.ebuy通过周密调整数据库操作的次序、异步恢复事件，以及数据核对（reconciliation）或者集中决算（settlement batches）来实现最终一致性.\n\n* 用异步策略解耦程序\n\n组件之间的异步带来的好处是解耦/缓冲压力.组件内的异步能提供跟灵活的资源管理策略(当然带来了上下文切换的开销).我们还需要异步任务管理/确保机制.\n\n* 将过程转变为异步的流\n* 虚拟化所有层次\n\n虚拟化所有层次我们还做的不够好.硬件资源层面的虚拟化可以通过docker来实现.目前docker最缺少的是资源的管理/发现/注册能力.通用资源服务层面的虚拟化也可以通过注册中心来实现.结合配置管理系统/框架组件化,可以做到对应用的透明.\n\n* 适当地使用缓存\n\n缓存组件很多,分布式/集中式/进程内,不要选花了眼.同类型的我们只需要一种缓存组件,他必须要能支持丰富的数据结构,如果能提供持久话的能力最好(前提是在down掉的情况下要保证数据的一直.).\n\n## Why Choose Jetty?\n[https://webtide.com/why-choose-jetty/](https://webtide.com/why-choose-jetty/)\n\n一直有想法把jetty嵌入到我们的程序中来运行,jetty自身的体系结构优势便于我们去裁剪或者新增功能.\n\njetty的设计哲学很酷:\n>Don’t put your application into Jetty, put Jetty into your application.\n\n## http proxy\n\n[http://rehorn.github.io/livepool/](http://rehorn.github.io/livepool/)\n\n[http://mitmproxy.org/](http://mitmproxy.org/)\n\n两个都是好东东.可以看下手机里面在干啥,吐槽下某些粗制滥造的app.也可以用来模拟http请求.\n\n## jvm flag\n\n[http://stas-blogspot.blogspot.jp/2011/07/most-complete-list-of-xx-options-for.html](http://stas-blogspot.blogspot.jp/2011/07/most-complete-list-of-xx-options-for.html)\n\n最全的jvm flag.\n","source":"_posts/2014-08-reading-notes.md","raw":"---\ntitle: 2014年08月Reading Notes\ndate: 2014-08-03 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n  - docker\n  - java\n---\n\n## My WordPress Development Toolbox\n\n[http://tommcfarlin.com/wordpress-developer-toolbox/](http://tommcfarlin.com/wordpress-developer-toolbox/)\n\n本来是准备找git的客户端,看到这篇文章.不喜欢tower,大爱[SoureTree](http://www.sourcetreeapp.com/).\n\n[browserstack](http://www.browserstack.com/)也挺好的,适合做浏览器兼容性测试.\n\n## JVM plus Docker: Better together\n[http://www.javaworld.com/article/2456960/java-app-dev/jvm-plus-docker-better-together.html](http://www.javaworld.com/article/2456960/java-app-dev/jvm-plus-docker-better-together.html)\n\ndocker刚好弥补jvm对资源管理(CPU/IO)的不足.\n\n## SharedHashMap vs Redis\n[http://vanillajava.blogspot.jp/2014/05/sharedhashmap-vs-redis.html](http://vanillajava.blogspot.jp/2014/05/sharedhashmap-vs-redis.html)\n\n这位哥异常牛掰,java低延迟方面的专家.把性能做到极致啊!!!`It was designed to be used in Java in a pause less, garbage free manner.`狂赞!!!先留着,有时间了看看源代码.\n\n## 高性能服务器架构\n[http://blog.csdn.net/zhoudaxia/article/details/14223755](http://blog.csdn.net/zhoudaxia/article/details/14223755)\n\n这些经验可以参考下:\n\n* 数据拷贝\n\n\t特别是java,很多数据拷贝的代码埋得深,比如`StringBuilder`扩容,集合扩容等等.java中的数据拷贝除了带来cpu的压力,也会给gc带来压力.\n\n\t参考:[使用零拷贝提高数据传输效率](/zero-copy/)\n\n* 上下文切换\n\n\t线程越多,上下文切换就会越多.需要合理评估处理模型和系统情况.按照SEDA的方式把一个请求划分为多个阶段,但是多个阶段的独立线程池真的会增加上下文的切换,但这样可能会让系统利用率最高.\n\n* 内存分配\n\n\t采用类似于Buddy memory allocation的策略来减少开销.\n\n* 锁竞争\n\n\t一定要控制好锁的粒度.某些场景用map来存放锁对象,而不要使用一把大锁.\n\n## 数据库版本控制工具liquibase\n[http://www.liquibase.org/quickstart.html](http://www.liquibase.org/quickstart.html)\n\n今天和勇哥讨论了如何来控制数据库版本.我们想的方案是,数据库里面有张versions表,里面记录当前的版本是多少.然后数据库更新文件存在项目中,并以目录来区分.这样就可以在项目启动时,来对比是否有新版本,是否需要升级.这样可以做到全自动化,需要规范现在的开发同学的行为,更重要的一点是,没有人来做这个事情.\n\nliquibase正好在做这个事情,他也支持sql格式的版本,学习成本相当低.而且有内置的数据库版本和集群场景的检测,给力,先试试.\n\n参考:[如何跟踪数据库结构变动](/database-version/)\n\n## 可伸缩性最佳实践：来自eBay的经验\n(http://www.infoq.com/cn/articles/ebay-scalability-best-practices)[http://www.infoq.com/cn/articles/ebay-scalability-best-practices]\n\n手里有本2011年的架构师特刊,翻开看到的第一篇文章.虽然有点老了,但是经验还是值得我们借鉴.\n\n* 按功能分割\n\n咱们现在的架构体系基本上遵循这条最佳实践.借助于dubbo/cxf实现功能服务化.应用层可以实现水平线性扩展.\n\n* 水平切分\n\n应用层面的无状态很重要,会话之类的东西可以放在缓存服务器上,尽量让LB来实现水平切分.\n\n数据库层面读写分离/分区/分库/分表.\n\n* 避免分布式事务\n\n分布式第一定律,不要使用分布式.特别是两阶段提交,对系统的吞吐影响很大.ebuy通过周密调整数据库操作的次序、异步恢复事件，以及数据核对（reconciliation）或者集中决算（settlement batches）来实现最终一致性.\n\n* 用异步策略解耦程序\n\n组件之间的异步带来的好处是解耦/缓冲压力.组件内的异步能提供跟灵活的资源管理策略(当然带来了上下文切换的开销).我们还需要异步任务管理/确保机制.\n\n* 将过程转变为异步的流\n* 虚拟化所有层次\n\n虚拟化所有层次我们还做的不够好.硬件资源层面的虚拟化可以通过docker来实现.目前docker最缺少的是资源的管理/发现/注册能力.通用资源服务层面的虚拟化也可以通过注册中心来实现.结合配置管理系统/框架组件化,可以做到对应用的透明.\n\n* 适当地使用缓存\n\n缓存组件很多,分布式/集中式/进程内,不要选花了眼.同类型的我们只需要一种缓存组件,他必须要能支持丰富的数据结构,如果能提供持久话的能力最好(前提是在down掉的情况下要保证数据的一直.).\n\n## Why Choose Jetty?\n[https://webtide.com/why-choose-jetty/](https://webtide.com/why-choose-jetty/)\n\n一直有想法把jetty嵌入到我们的程序中来运行,jetty自身的体系结构优势便于我们去裁剪或者新增功能.\n\njetty的设计哲学很酷:\n>Don’t put your application into Jetty, put Jetty into your application.\n\n## http proxy\n\n[http://rehorn.github.io/livepool/](http://rehorn.github.io/livepool/)\n\n[http://mitmproxy.org/](http://mitmproxy.org/)\n\n两个都是好东东.可以看下手机里面在干啥,吐槽下某些粗制滥造的app.也可以用来模拟http请求.\n\n## jvm flag\n\n[http://stas-blogspot.blogspot.jp/2011/07/most-complete-list-of-xx-options-for.html](http://stas-blogspot.blogspot.jp/2011/07/most-complete-list-of-xx-options-for.html)\n\n最全的jvm flag.\n","slug":"2014-08-reading-notes","published":1,"updated":"2018-04-01T16:53:17.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksfn000ip0ugqguvco5c","content":"<h2 id=\"My-WordPress-Development-Toolbox\"><a href=\"#My-WordPress-Development-Toolbox\" class=\"headerlink\" title=\"My WordPress Development Toolbox\"></a>My WordPress Development Toolbox</h2><p><a href=\"http://tommcfarlin.com/wordpress-developer-toolbox/\" target=\"_blank\" rel=\"noopener\">http://tommcfarlin.com/wordpress-developer-toolbox/</a></p>\n<p>本来是准备找git的客户端,看到这篇文章.不喜欢tower,大爱<a href=\"http://www.sourcetreeapp.com/\" target=\"_blank\" rel=\"noopener\">SoureTree</a>.</p>\n<p><a href=\"http://www.browserstack.com/\" target=\"_blank\" rel=\"noopener\">browserstack</a>也挺好的,适合做浏览器兼容性测试.</p>\n<h2 id=\"JVM-plus-Docker-Better-together\"><a href=\"#JVM-plus-Docker-Better-together\" class=\"headerlink\" title=\"JVM plus Docker: Better together\"></a>JVM plus Docker: Better together</h2><p><a href=\"http://www.javaworld.com/article/2456960/java-app-dev/jvm-plus-docker-better-together.html\" target=\"_blank\" rel=\"noopener\">http://www.javaworld.com/article/2456960/java-app-dev/jvm-plus-docker-better-together.html</a></p>\n<p>docker刚好弥补jvm对资源管理(CPU/IO)的不足.</p>\n<h2 id=\"SharedHashMap-vs-Redis\"><a href=\"#SharedHashMap-vs-Redis\" class=\"headerlink\" title=\"SharedHashMap vs Redis\"></a>SharedHashMap vs Redis</h2><p><a href=\"http://vanillajava.blogspot.jp/2014/05/sharedhashmap-vs-redis.html\" target=\"_blank\" rel=\"noopener\">http://vanillajava.blogspot.jp/2014/05/sharedhashmap-vs-redis.html</a></p>\n<p>这位哥异常牛掰,java低延迟方面的专家.把性能做到极致啊!!!<code>It was designed to be used in Java in a pause less, garbage free manner.</code>狂赞!!!先留着,有时间了看看源代码.</p>\n<h2 id=\"高性能服务器架构\"><a href=\"#高性能服务器架构\" class=\"headerlink\" title=\"高性能服务器架构\"></a>高性能服务器架构</h2><p><a href=\"http://blog.csdn.net/zhoudaxia/article/details/14223755\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhoudaxia/article/details/14223755</a></p>\n<p>这些经验可以参考下:</p>\n<ul>\n<li><p>数据拷贝</p>\n<p>  特别是java,很多数据拷贝的代码埋得深,比如<code>StringBuilder</code>扩容,集合扩容等等.java中的数据拷贝除了带来cpu的压力,也会给gc带来压力.</p>\n<p>  参考:<a href=\"/zero-copy/\">使用零拷贝提高数据传输效率</a></p>\n</li>\n<li><p>上下文切换</p>\n<p>  线程越多,上下文切换就会越多.需要合理评估处理模型和系统情况.按照SEDA的方式把一个请求划分为多个阶段,但是多个阶段的独立线程池真的会增加上下文的切换,但这样可能会让系统利用率最高.</p>\n</li>\n<li><p>内存分配</p>\n<p>  采用类似于Buddy memory allocation的策略来减少开销.</p>\n</li>\n<li><p>锁竞争</p>\n<p>  一定要控制好锁的粒度.某些场景用map来存放锁对象,而不要使用一把大锁.</p>\n</li>\n</ul>\n<h2 id=\"数据库版本控制工具liquibase\"><a href=\"#数据库版本控制工具liquibase\" class=\"headerlink\" title=\"数据库版本控制工具liquibase\"></a>数据库版本控制工具liquibase</h2><p><a href=\"http://www.liquibase.org/quickstart.html\" target=\"_blank\" rel=\"noopener\">http://www.liquibase.org/quickstart.html</a></p>\n<p>今天和勇哥讨论了如何来控制数据库版本.我们想的方案是,数据库里面有张versions表,里面记录当前的版本是多少.然后数据库更新文件存在项目中,并以目录来区分.这样就可以在项目启动时,来对比是否有新版本,是否需要升级.这样可以做到全自动化,需要规范现在的开发同学的行为,更重要的一点是,没有人来做这个事情.</p>\n<p>liquibase正好在做这个事情,他也支持sql格式的版本,学习成本相当低.而且有内置的数据库版本和集群场景的检测,给力,先试试.</p>\n<p>参考:<a href=\"/database-version/\">如何跟踪数据库结构变动</a></p>\n<h2 id=\"可伸缩性最佳实践：来自eBay的经验\"><a href=\"#可伸缩性最佳实践：来自eBay的经验\" class=\"headerlink\" title=\"可伸缩性最佳实践：来自eBay的经验\"></a>可伸缩性最佳实践：来自eBay的经验</h2><p>(<a href=\"http://www.infoq.com/cn/articles/ebay-scalability-best-practices)[http://www.infoq.com/cn/articles/ebay-scalability-best-practices]\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/ebay-scalability-best-practices)[http://www.infoq.com/cn/articles/ebay-scalability-best-practices]</a></p>\n<p>手里有本2011年的架构师特刊,翻开看到的第一篇文章.虽然有点老了,但是经验还是值得我们借鉴.</p>\n<ul>\n<li>按功能分割</li>\n</ul>\n<p>咱们现在的架构体系基本上遵循这条最佳实践.借助于dubbo/cxf实现功能服务化.应用层可以实现水平线性扩展.</p>\n<ul>\n<li>水平切分</li>\n</ul>\n<p>应用层面的无状态很重要,会话之类的东西可以放在缓存服务器上,尽量让LB来实现水平切分.</p>\n<p>数据库层面读写分离/分区/分库/分表.</p>\n<ul>\n<li>避免分布式事务</li>\n</ul>\n<p>分布式第一定律,不要使用分布式.特别是两阶段提交,对系统的吞吐影响很大.ebuy通过周密调整数据库操作的次序、异步恢复事件，以及数据核对（reconciliation）或者集中决算（settlement batches）来实现最终一致性.</p>\n<ul>\n<li>用异步策略解耦程序</li>\n</ul>\n<p>组件之间的异步带来的好处是解耦/缓冲压力.组件内的异步能提供跟灵活的资源管理策略(当然带来了上下文切换的开销).我们还需要异步任务管理/确保机制.</p>\n<ul>\n<li>将过程转变为异步的流</li>\n<li>虚拟化所有层次</li>\n</ul>\n<p>虚拟化所有层次我们还做的不够好.硬件资源层面的虚拟化可以通过docker来实现.目前docker最缺少的是资源的管理/发现/注册能力.通用资源服务层面的虚拟化也可以通过注册中心来实现.结合配置管理系统/框架组件化,可以做到对应用的透明.</p>\n<ul>\n<li>适当地使用缓存</li>\n</ul>\n<p>缓存组件很多,分布式/集中式/进程内,不要选花了眼.同类型的我们只需要一种缓存组件,他必须要能支持丰富的数据结构,如果能提供持久话的能力最好(前提是在down掉的情况下要保证数据的一直.).</p>\n<h2 id=\"Why-Choose-Jetty\"><a href=\"#Why-Choose-Jetty\" class=\"headerlink\" title=\"Why Choose Jetty?\"></a>Why Choose Jetty?</h2><p><a href=\"https://webtide.com/why-choose-jetty/\" target=\"_blank\" rel=\"noopener\">https://webtide.com/why-choose-jetty/</a></p>\n<p>一直有想法把jetty嵌入到我们的程序中来运行,jetty自身的体系结构优势便于我们去裁剪或者新增功能.</p>\n<p>jetty的设计哲学很酷:</p>\n<blockquote>\n<p>Don’t put your application into Jetty, put Jetty into your application.</p>\n</blockquote>\n<h2 id=\"http-proxy\"><a href=\"#http-proxy\" class=\"headerlink\" title=\"http proxy\"></a>http proxy</h2><p><a href=\"http://rehorn.github.io/livepool/\" target=\"_blank\" rel=\"noopener\">http://rehorn.github.io/livepool/</a></p>\n<p><a href=\"http://mitmproxy.org/\" target=\"_blank\" rel=\"noopener\">http://mitmproxy.org/</a></p>\n<p>两个都是好东东.可以看下手机里面在干啥,吐槽下某些粗制滥造的app.也可以用来模拟http请求.</p>\n<h2 id=\"jvm-flag\"><a href=\"#jvm-flag\" class=\"headerlink\" title=\"jvm flag\"></a>jvm flag</h2><p><a href=\"http://stas-blogspot.blogspot.jp/2011/07/most-complete-list-of-xx-options-for.html\" target=\"_blank\" rel=\"noopener\">http://stas-blogspot.blogspot.jp/2011/07/most-complete-list-of-xx-options-for.html</a></p>\n<p>最全的jvm flag.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"My-WordPress-Development-Toolbox\"><a href=\"#My-WordPress-Development-Toolbox\" class=\"headerlink\" title=\"My WordPress Development Toolbox\"></a>My WordPress Development Toolbox</h2><p><a href=\"http://tommcfarlin.com/wordpress-developer-toolbox/\" target=\"_blank\" rel=\"noopener\">http://tommcfarlin.com/wordpress-developer-toolbox/</a></p>\n<p>本来是准备找git的客户端,看到这篇文章.不喜欢tower,大爱<a href=\"http://www.sourcetreeapp.com/\" target=\"_blank\" rel=\"noopener\">SoureTree</a>.</p>\n<p><a href=\"http://www.browserstack.com/\" target=\"_blank\" rel=\"noopener\">browserstack</a>也挺好的,适合做浏览器兼容性测试.</p>\n<h2 id=\"JVM-plus-Docker-Better-together\"><a href=\"#JVM-plus-Docker-Better-together\" class=\"headerlink\" title=\"JVM plus Docker: Better together\"></a>JVM plus Docker: Better together</h2><p><a href=\"http://www.javaworld.com/article/2456960/java-app-dev/jvm-plus-docker-better-together.html\" target=\"_blank\" rel=\"noopener\">http://www.javaworld.com/article/2456960/java-app-dev/jvm-plus-docker-better-together.html</a></p>\n<p>docker刚好弥补jvm对资源管理(CPU/IO)的不足.</p>\n<h2 id=\"SharedHashMap-vs-Redis\"><a href=\"#SharedHashMap-vs-Redis\" class=\"headerlink\" title=\"SharedHashMap vs Redis\"></a>SharedHashMap vs Redis</h2><p><a href=\"http://vanillajava.blogspot.jp/2014/05/sharedhashmap-vs-redis.html\" target=\"_blank\" rel=\"noopener\">http://vanillajava.blogspot.jp/2014/05/sharedhashmap-vs-redis.html</a></p>\n<p>这位哥异常牛掰,java低延迟方面的专家.把性能做到极致啊!!!<code>It was designed to be used in Java in a pause less, garbage free manner.</code>狂赞!!!先留着,有时间了看看源代码.</p>\n<h2 id=\"高性能服务器架构\"><a href=\"#高性能服务器架构\" class=\"headerlink\" title=\"高性能服务器架构\"></a>高性能服务器架构</h2><p><a href=\"http://blog.csdn.net/zhoudaxia/article/details/14223755\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhoudaxia/article/details/14223755</a></p>\n<p>这些经验可以参考下:</p>\n<ul>\n<li><p>数据拷贝</p>\n<p>  特别是java,很多数据拷贝的代码埋得深,比如<code>StringBuilder</code>扩容,集合扩容等等.java中的数据拷贝除了带来cpu的压力,也会给gc带来压力.</p>\n<p>  参考:<a href=\"/zero-copy/\">使用零拷贝提高数据传输效率</a></p>\n</li>\n<li><p>上下文切换</p>\n<p>  线程越多,上下文切换就会越多.需要合理评估处理模型和系统情况.按照SEDA的方式把一个请求划分为多个阶段,但是多个阶段的独立线程池真的会增加上下文的切换,但这样可能会让系统利用率最高.</p>\n</li>\n<li><p>内存分配</p>\n<p>  采用类似于Buddy memory allocation的策略来减少开销.</p>\n</li>\n<li><p>锁竞争</p>\n<p>  一定要控制好锁的粒度.某些场景用map来存放锁对象,而不要使用一把大锁.</p>\n</li>\n</ul>\n<h2 id=\"数据库版本控制工具liquibase\"><a href=\"#数据库版本控制工具liquibase\" class=\"headerlink\" title=\"数据库版本控制工具liquibase\"></a>数据库版本控制工具liquibase</h2><p><a href=\"http://www.liquibase.org/quickstart.html\" target=\"_blank\" rel=\"noopener\">http://www.liquibase.org/quickstart.html</a></p>\n<p>今天和勇哥讨论了如何来控制数据库版本.我们想的方案是,数据库里面有张versions表,里面记录当前的版本是多少.然后数据库更新文件存在项目中,并以目录来区分.这样就可以在项目启动时,来对比是否有新版本,是否需要升级.这样可以做到全自动化,需要规范现在的开发同学的行为,更重要的一点是,没有人来做这个事情.</p>\n<p>liquibase正好在做这个事情,他也支持sql格式的版本,学习成本相当低.而且有内置的数据库版本和集群场景的检测,给力,先试试.</p>\n<p>参考:<a href=\"/database-version/\">如何跟踪数据库结构变动</a></p>\n<h2 id=\"可伸缩性最佳实践：来自eBay的经验\"><a href=\"#可伸缩性最佳实践：来自eBay的经验\" class=\"headerlink\" title=\"可伸缩性最佳实践：来自eBay的经验\"></a>可伸缩性最佳实践：来自eBay的经验</h2><p>(<a href=\"http://www.infoq.com/cn/articles/ebay-scalability-best-practices)[http://www.infoq.com/cn/articles/ebay-scalability-best-practices]\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/ebay-scalability-best-practices)[http://www.infoq.com/cn/articles/ebay-scalability-best-practices]</a></p>\n<p>手里有本2011年的架构师特刊,翻开看到的第一篇文章.虽然有点老了,但是经验还是值得我们借鉴.</p>\n<ul>\n<li>按功能分割</li>\n</ul>\n<p>咱们现在的架构体系基本上遵循这条最佳实践.借助于dubbo/cxf实现功能服务化.应用层可以实现水平线性扩展.</p>\n<ul>\n<li>水平切分</li>\n</ul>\n<p>应用层面的无状态很重要,会话之类的东西可以放在缓存服务器上,尽量让LB来实现水平切分.</p>\n<p>数据库层面读写分离/分区/分库/分表.</p>\n<ul>\n<li>避免分布式事务</li>\n</ul>\n<p>分布式第一定律,不要使用分布式.特别是两阶段提交,对系统的吞吐影响很大.ebuy通过周密调整数据库操作的次序、异步恢复事件，以及数据核对（reconciliation）或者集中决算（settlement batches）来实现最终一致性.</p>\n<ul>\n<li>用异步策略解耦程序</li>\n</ul>\n<p>组件之间的异步带来的好处是解耦/缓冲压力.组件内的异步能提供跟灵活的资源管理策略(当然带来了上下文切换的开销).我们还需要异步任务管理/确保机制.</p>\n<ul>\n<li>将过程转变为异步的流</li>\n<li>虚拟化所有层次</li>\n</ul>\n<p>虚拟化所有层次我们还做的不够好.硬件资源层面的虚拟化可以通过docker来实现.目前docker最缺少的是资源的管理/发现/注册能力.通用资源服务层面的虚拟化也可以通过注册中心来实现.结合配置管理系统/框架组件化,可以做到对应用的透明.</p>\n<ul>\n<li>适当地使用缓存</li>\n</ul>\n<p>缓存组件很多,分布式/集中式/进程内,不要选花了眼.同类型的我们只需要一种缓存组件,他必须要能支持丰富的数据结构,如果能提供持久话的能力最好(前提是在down掉的情况下要保证数据的一直.).</p>\n<h2 id=\"Why-Choose-Jetty\"><a href=\"#Why-Choose-Jetty\" class=\"headerlink\" title=\"Why Choose Jetty?\"></a>Why Choose Jetty?</h2><p><a href=\"https://webtide.com/why-choose-jetty/\" target=\"_blank\" rel=\"noopener\">https://webtide.com/why-choose-jetty/</a></p>\n<p>一直有想法把jetty嵌入到我们的程序中来运行,jetty自身的体系结构优势便于我们去裁剪或者新增功能.</p>\n<p>jetty的设计哲学很酷:</p>\n<blockquote>\n<p>Don’t put your application into Jetty, put Jetty into your application.</p>\n</blockquote>\n<h2 id=\"http-proxy\"><a href=\"#http-proxy\" class=\"headerlink\" title=\"http proxy\"></a>http proxy</h2><p><a href=\"http://rehorn.github.io/livepool/\" target=\"_blank\" rel=\"noopener\">http://rehorn.github.io/livepool/</a></p>\n<p><a href=\"http://mitmproxy.org/\" target=\"_blank\" rel=\"noopener\">http://mitmproxy.org/</a></p>\n<p>两个都是好东东.可以看下手机里面在干啥,吐槽下某些粗制滥造的app.也可以用来模拟http请求.</p>\n<h2 id=\"jvm-flag\"><a href=\"#jvm-flag\" class=\"headerlink\" title=\"jvm flag\"></a>jvm flag</h2><p><a href=\"http://stas-blogspot.blogspot.jp/2011/07/most-complete-list-of-xx-options-for.html\" target=\"_blank\" rel=\"noopener\">http://stas-blogspot.blogspot.jp/2011/07/most-complete-list-of-xx-options-for.html</a></p>\n<p>最全的jvm flag.</p>\n"},{"title":"2014年09月Reading Notes","date":"2014-09-28T13:52:17.000Z","_content":"\n## Mcrouter:基于 Memcached协议的缓存层流量管理工具\n[http://www.infoq.com/cn/news/2014/09/mcrouter-memcached](http://www.infoq.com/cn/news/2014/09/mcrouter-memcached)\n\n[https://code.facebook.com/posts/296442737213493/introducing-mcrouter-a-memcached-protocol-router-for-scaling-memcached-deployments/](https://code.facebook.com/posts/296442737213493/introducing-mcrouter-a-memcached-protocol-router-for-scaling-memcached-deployments/)\n\nmemcache不支持服务端路由,facebook开发了`mcrouter`(能够处理每秒50亿次的请求).它和memcached之间通过文本协议通信.扮演者memcached服务器的客户端,应用的服务端.他的特性很多,基本上都是我们需要的.我们现在使用的是二进制协议,需要修改为文本协议.\n\n\n\n","source":"_posts/2014-09-reading-notes.md","raw":"---\ntitle: 2014年09月Reading Notes\ndate: 2014-09-28 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n---\n\n## Mcrouter:基于 Memcached协议的缓存层流量管理工具\n[http://www.infoq.com/cn/news/2014/09/mcrouter-memcached](http://www.infoq.com/cn/news/2014/09/mcrouter-memcached)\n\n[https://code.facebook.com/posts/296442737213493/introducing-mcrouter-a-memcached-protocol-router-for-scaling-memcached-deployments/](https://code.facebook.com/posts/296442737213493/introducing-mcrouter-a-memcached-protocol-router-for-scaling-memcached-deployments/)\n\nmemcache不支持服务端路由,facebook开发了`mcrouter`(能够处理每秒50亿次的请求).它和memcached之间通过文本协议通信.扮演者memcached服务器的客户端,应用的服务端.他的特性很多,基本上都是我们需要的.我们现在使用的是二进制协议,需要修改为文本协议.\n\n\n\n","slug":"2014-09-reading-notes","published":1,"updated":"2018-04-01T16:53:17.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksfq000lp0ugpsik3j5o","content":"<h2 id=\"Mcrouter-基于-Memcached协议的缓存层流量管理工具\"><a href=\"#Mcrouter-基于-Memcached协议的缓存层流量管理工具\" class=\"headerlink\" title=\"Mcrouter:基于 Memcached协议的缓存层流量管理工具\"></a>Mcrouter:基于 Memcached协议的缓存层流量管理工具</h2><p><a href=\"http://www.infoq.com/cn/news/2014/09/mcrouter-memcached\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/news/2014/09/mcrouter-memcached</a></p>\n<p><a href=\"https://code.facebook.com/posts/296442737213493/introducing-mcrouter-a-memcached-protocol-router-for-scaling-memcached-deployments/\" target=\"_blank\" rel=\"noopener\">https://code.facebook.com/posts/296442737213493/introducing-mcrouter-a-memcached-protocol-router-for-scaling-memcached-deployments/</a></p>\n<p>memcache不支持服务端路由,facebook开发了<code>mcrouter</code>(能够处理每秒50亿次的请求).它和memcached之间通过文本协议通信.扮演者memcached服务器的客户端,应用的服务端.他的特性很多,基本上都是我们需要的.我们现在使用的是二进制协议,需要修改为文本协议.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Mcrouter-基于-Memcached协议的缓存层流量管理工具\"><a href=\"#Mcrouter-基于-Memcached协议的缓存层流量管理工具\" class=\"headerlink\" title=\"Mcrouter:基于 Memcached协议的缓存层流量管理工具\"></a>Mcrouter:基于 Memcached协议的缓存层流量管理工具</h2><p><a href=\"http://www.infoq.com/cn/news/2014/09/mcrouter-memcached\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/news/2014/09/mcrouter-memcached</a></p>\n<p><a href=\"https://code.facebook.com/posts/296442737213493/introducing-mcrouter-a-memcached-protocol-router-for-scaling-memcached-deployments/\" target=\"_blank\" rel=\"noopener\">https://code.facebook.com/posts/296442737213493/introducing-mcrouter-a-memcached-protocol-router-for-scaling-memcached-deployments/</a></p>\n<p>memcache不支持服务端路由,facebook开发了<code>mcrouter</code>(能够处理每秒50亿次的请求).它和memcached之间通过文本协议通信.扮演者memcached服务器的客户端,应用的服务端.他的特性很多,基本上都是我们需要的.我们现在使用的是二进制协议,需要修改为文本协议.</p>\n"},{"title":"2014年10月Reading Notes","date":"2014-10-15T13:52:17.000Z","_content":"\n\n## Why does my Java process consume more memory than Xmx?\nhttps://plumbr.eu/blog/why-does-my-java-process-consume-more-memory-than-xmx\n\njava进程内存消耗会大于我们在`-Xmx`中指定的值.`-Xmx`仅仅限制了应用程序使用的heap大小.java进的内存消耗主要包括下面的东东:\n\n\tMax memory = [-Xmx] + [-XX:MaxPermSize] + number_of_threads * [-Xss]+Other\n\t\nOther:\n\n* Garbage collection(GC自己需要消耗内存来记录数据)\n* JIT optimization(JIT优化需要记录代码执行行为,Code cache-JIT编译完成后存放机器码)\n* Off-heap allocations(NIO/DirectMemory之类的东东)\n* JNI code(程序使用第三方JNI代码占用的内存)\n* Metaspace(jdk8使用它取代了permgen)\n\n## Understanding the OutOfMemoryError\nhttps://plumbr.eu/blog/understanding-java-lang-outofmemoryerror\n\n* java.lang.OutOfMemoryError: Java heap space\n\n\theap空间不足.一般加大`-Xmx`.如果还不足就有可能是内存泄漏了.\n\n* java.lang.OutOfMemoryError: PermGen space\n\n\tpermgen空间不足,默认的jvm配置得比较小,需要通过`-XX:MaxPermSize`加大.动态代码生成技术和容器redeploy资源泄漏也会导致permgen不足\n\n* java.lang.OutOfMemoryError: GC overhead limit exceeded\n\n\tjvm gc行为中超过98%以上的时间去释放小于2%的堆空间时会报这个错误\n\n* java.lang.OutOfMemoryError: unable to create new native thread\n\n\tjava没创建一个线程,会占用`-Xss`大小空间.这个异常有可能是系统内存不足导致.如果系统内存充足,往往是ulimit -u限制了一个用户创建最大线程数造成的.\n\n* java.lang.OutOfMemoryError: Requested array size exceeds VM limit\n\t\n\t申请的数组大小超过jvm定义的阀值.\n\n* java.lang.OutOfMemoryError: request <size> bytes for <reason>. Out of swap space?\n* java.lang.OutOfMemoryError: <reason> <stack trace> (Native method)\n\n\n## 20 Obstacles to Scalability\n本文罗列了20个影响伸缩性的瓶颈\n\n### 10 Obstacles to Scaling Performance\n\n1. Two-Phase Commit\n\t\n\t两阶段提交需要等待参与方确认,延时太大.所以我们基本上使用best-effort 1pc+业务上的重试.\n\n2. Insufficient Caching\n\n\t各个层次都需要引入缓存机制,现在我们对browser cache/page cache还做得比较少.\n\t\n3. Slow Disk I/O, RAID 5, Multitenant Storage\n\n\t数据库服务起I/O很关键.如果只做raid建议做raid10.当然加上fushion io之类的加速卡更好.\n\t\n4.  Serial Processing\n\n\t服务并行处理我们也还思考得比较少.比如对远程服务进行合理并行处理(可以考虑下java8中的CompletableFuture).对于缓存数据的获取,可以考虑批量获取.\n\t\n5. Missing Feature Flags\n\n\t特性开关,说大点就是服务降级,我们需要却分不同服务的重要等级,适当时候关闭某些服务,保证核心业务正常运行.\n\n6. Single Copy of the Database\n7. Using Your Database for Queuing\n8. Using a Database for Full-Text Searching\n9. Object Relational Models(orm很好用,但是缺少能hold住他的人)\n10. Missing Instrumentation(需要监控/profile工具)\n\n### 10 Obstacles to Scaling Beyond Optimization Speed\n\n1. Lack of a Code Repository and Version Control\n2. Single Points of Failure\n3. Lack of Browse-Only Mode(对于内容型的网站,此功能非常重要)\n4. Weak Communication\n5. Lack of Documentation\n6. Lack of Fire Drills(却分演练,特别是大的运维调整,此项非常必要)\n7. Insufficient Monitoring and Metrics\n8. Cowboy Operations\n9. Growing Technical Debt\n10. Insufficient Logging\n","source":"_posts/2014-10-reading-notes.md","raw":"---\ntitle: 2014年10月Reading Notes\ndate: 2014-10-15 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n---\n\n\n## Why does my Java process consume more memory than Xmx?\nhttps://plumbr.eu/blog/why-does-my-java-process-consume-more-memory-than-xmx\n\njava进程内存消耗会大于我们在`-Xmx`中指定的值.`-Xmx`仅仅限制了应用程序使用的heap大小.java进的内存消耗主要包括下面的东东:\n\n\tMax memory = [-Xmx] + [-XX:MaxPermSize] + number_of_threads * [-Xss]+Other\n\t\nOther:\n\n* Garbage collection(GC自己需要消耗内存来记录数据)\n* JIT optimization(JIT优化需要记录代码执行行为,Code cache-JIT编译完成后存放机器码)\n* Off-heap allocations(NIO/DirectMemory之类的东东)\n* JNI code(程序使用第三方JNI代码占用的内存)\n* Metaspace(jdk8使用它取代了permgen)\n\n## Understanding the OutOfMemoryError\nhttps://plumbr.eu/blog/understanding-java-lang-outofmemoryerror\n\n* java.lang.OutOfMemoryError: Java heap space\n\n\theap空间不足.一般加大`-Xmx`.如果还不足就有可能是内存泄漏了.\n\n* java.lang.OutOfMemoryError: PermGen space\n\n\tpermgen空间不足,默认的jvm配置得比较小,需要通过`-XX:MaxPermSize`加大.动态代码生成技术和容器redeploy资源泄漏也会导致permgen不足\n\n* java.lang.OutOfMemoryError: GC overhead limit exceeded\n\n\tjvm gc行为中超过98%以上的时间去释放小于2%的堆空间时会报这个错误\n\n* java.lang.OutOfMemoryError: unable to create new native thread\n\n\tjava没创建一个线程,会占用`-Xss`大小空间.这个异常有可能是系统内存不足导致.如果系统内存充足,往往是ulimit -u限制了一个用户创建最大线程数造成的.\n\n* java.lang.OutOfMemoryError: Requested array size exceeds VM limit\n\t\n\t申请的数组大小超过jvm定义的阀值.\n\n* java.lang.OutOfMemoryError: request <size> bytes for <reason>. Out of swap space?\n* java.lang.OutOfMemoryError: <reason> <stack trace> (Native method)\n\n\n## 20 Obstacles to Scalability\n本文罗列了20个影响伸缩性的瓶颈\n\n### 10 Obstacles to Scaling Performance\n\n1. Two-Phase Commit\n\t\n\t两阶段提交需要等待参与方确认,延时太大.所以我们基本上使用best-effort 1pc+业务上的重试.\n\n2. Insufficient Caching\n\n\t各个层次都需要引入缓存机制,现在我们对browser cache/page cache还做得比较少.\n\t\n3. Slow Disk I/O, RAID 5, Multitenant Storage\n\n\t数据库服务起I/O很关键.如果只做raid建议做raid10.当然加上fushion io之类的加速卡更好.\n\t\n4.  Serial Processing\n\n\t服务并行处理我们也还思考得比较少.比如对远程服务进行合理并行处理(可以考虑下java8中的CompletableFuture).对于缓存数据的获取,可以考虑批量获取.\n\t\n5. Missing Feature Flags\n\n\t特性开关,说大点就是服务降级,我们需要却分不同服务的重要等级,适当时候关闭某些服务,保证核心业务正常运行.\n\n6. Single Copy of the Database\n7. Using Your Database for Queuing\n8. Using a Database for Full-Text Searching\n9. Object Relational Models(orm很好用,但是缺少能hold住他的人)\n10. Missing Instrumentation(需要监控/profile工具)\n\n### 10 Obstacles to Scaling Beyond Optimization Speed\n\n1. Lack of a Code Repository and Version Control\n2. Single Points of Failure\n3. Lack of Browse-Only Mode(对于内容型的网站,此功能非常重要)\n4. Weak Communication\n5. Lack of Documentation\n6. Lack of Fire Drills(却分演练,特别是大的运维调整,此项非常必要)\n7. Insufficient Monitoring and Metrics\n8. Cowboy Operations\n9. Growing Technical Debt\n10. Insufficient Logging\n","slug":"2014-10-reading-notes","published":1,"updated":"2018-04-01T16:53:17.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksft000np0ugiwnuasc5","content":"<h2 id=\"Why-does-my-Java-process-consume-more-memory-than-Xmx\"><a href=\"#Why-does-my-Java-process-consume-more-memory-than-Xmx\" class=\"headerlink\" title=\"Why does my Java process consume more memory than Xmx?\"></a>Why does my Java process consume more memory than Xmx?</h2><p><a href=\"https://plumbr.eu/blog/why-does-my-java-process-consume-more-memory-than-xmx\" target=\"_blank\" rel=\"noopener\">https://plumbr.eu/blog/why-does-my-java-process-consume-more-memory-than-xmx</a></p>\n<p>java进程内存消耗会大于我们在<code>-Xmx</code>中指定的值.<code>-Xmx</code>仅仅限制了应用程序使用的heap大小.java进的内存消耗主要包括下面的东东:</p>\n<pre><code>Max memory = [-Xmx] + [-XX:MaxPermSize] + number_of_threads * [-Xss]+Other\n</code></pre><p>Other:</p>\n<ul>\n<li>Garbage collection(GC自己需要消耗内存来记录数据)</li>\n<li>JIT optimization(JIT优化需要记录代码执行行为,Code cache-JIT编译完成后存放机器码)</li>\n<li>Off-heap allocations(NIO/DirectMemory之类的东东)</li>\n<li>JNI code(程序使用第三方JNI代码占用的内存)</li>\n<li>Metaspace(jdk8使用它取代了permgen)</li>\n</ul>\n<h2 id=\"Understanding-the-OutOfMemoryError\"><a href=\"#Understanding-the-OutOfMemoryError\" class=\"headerlink\" title=\"Understanding the OutOfMemoryError\"></a>Understanding the OutOfMemoryError</h2><p><a href=\"https://plumbr.eu/blog/understanding-java-lang-outofmemoryerror\" target=\"_blank\" rel=\"noopener\">https://plumbr.eu/blog/understanding-java-lang-outofmemoryerror</a></p>\n<ul>\n<li><p>java.lang.OutOfMemoryError: Java heap space</p>\n<p>  heap空间不足.一般加大<code>-Xmx</code>.如果还不足就有可能是内存泄漏了.</p>\n</li>\n<li><p>java.lang.OutOfMemoryError: PermGen space</p>\n<p>  permgen空间不足,默认的jvm配置得比较小,需要通过<code>-XX:MaxPermSize</code>加大.动态代码生成技术和容器redeploy资源泄漏也会导致permgen不足</p>\n</li>\n<li><p>java.lang.OutOfMemoryError: GC overhead limit exceeded</p>\n<p>  jvm gc行为中超过98%以上的时间去释放小于2%的堆空间时会报这个错误</p>\n</li>\n<li><p>java.lang.OutOfMemoryError: unable to create new native thread</p>\n<p>  java没创建一个线程,会占用<code>-Xss</code>大小空间.这个异常有可能是系统内存不足导致.如果系统内存充足,往往是ulimit -u限制了一个用户创建最大线程数造成的.</p>\n</li>\n<li><p>java.lang.OutOfMemoryError: Requested array size exceeds VM limit</p>\n<p>  申请的数组大小超过jvm定义的阀值.</p>\n</li>\n<li><p>java.lang.OutOfMemoryError: request <size> bytes for <reason>. Out of swap space?</reason></size></p>\n</li>\n<li>java.lang.OutOfMemoryError: <reason> <stack trace=\"\"> (Native method)</stack></reason></li>\n</ul>\n<h2 id=\"20-Obstacles-to-Scalability\"><a href=\"#20-Obstacles-to-Scalability\" class=\"headerlink\" title=\"20 Obstacles to Scalability\"></a>20 Obstacles to Scalability</h2><p>本文罗列了20个影响伸缩性的瓶颈</p>\n<h3 id=\"10-Obstacles-to-Scaling-Performance\"><a href=\"#10-Obstacles-to-Scaling-Performance\" class=\"headerlink\" title=\"10 Obstacles to Scaling Performance\"></a>10 Obstacles to Scaling Performance</h3><ol>\n<li><p>Two-Phase Commit</p>\n<p> 两阶段提交需要等待参与方确认,延时太大.所以我们基本上使用best-effort 1pc+业务上的重试.</p>\n</li>\n<li><p>Insufficient Caching</p>\n<p> 各个层次都需要引入缓存机制,现在我们对browser cache/page cache还做得比较少.</p>\n</li>\n<li><p>Slow Disk I/O, RAID 5, Multitenant Storage</p>\n<p> 数据库服务起I/O很关键.如果只做raid建议做raid10.当然加上fushion io之类的加速卡更好.</p>\n</li>\n<li><p>Serial Processing</p>\n<p>服务并行处理我们也还思考得比较少.比如对远程服务进行合理并行处理(可以考虑下java8中的CompletableFuture).对于缓存数据的获取,可以考虑批量获取.</p>\n</li>\n<li><p>Missing Feature Flags</p>\n<p> 特性开关,说大点就是服务降级,我们需要却分不同服务的重要等级,适当时候关闭某些服务,保证核心业务正常运行.</p>\n</li>\n<li><p>Single Copy of the Database</p>\n</li>\n<li>Using Your Database for Queuing</li>\n<li>Using a Database for Full-Text Searching</li>\n<li>Object Relational Models(orm很好用,但是缺少能hold住他的人)</li>\n<li>Missing Instrumentation(需要监控/profile工具)</li>\n</ol>\n<h3 id=\"10-Obstacles-to-Scaling-Beyond-Optimization-Speed\"><a href=\"#10-Obstacles-to-Scaling-Beyond-Optimization-Speed\" class=\"headerlink\" title=\"10 Obstacles to Scaling Beyond Optimization Speed\"></a>10 Obstacles to Scaling Beyond Optimization Speed</h3><ol>\n<li>Lack of a Code Repository and Version Control</li>\n<li>Single Points of Failure</li>\n<li>Lack of Browse-Only Mode(对于内容型的网站,此功能非常重要)</li>\n<li>Weak Communication</li>\n<li>Lack of Documentation</li>\n<li>Lack of Fire Drills(却分演练,特别是大的运维调整,此项非常必要)</li>\n<li>Insufficient Monitoring and Metrics</li>\n<li>Cowboy Operations</li>\n<li>Growing Technical Debt</li>\n<li>Insufficient Logging</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Why-does-my-Java-process-consume-more-memory-than-Xmx\"><a href=\"#Why-does-my-Java-process-consume-more-memory-than-Xmx\" class=\"headerlink\" title=\"Why does my Java process consume more memory than Xmx?\"></a>Why does my Java process consume more memory than Xmx?</h2><p><a href=\"https://plumbr.eu/blog/why-does-my-java-process-consume-more-memory-than-xmx\" target=\"_blank\" rel=\"noopener\">https://plumbr.eu/blog/why-does-my-java-process-consume-more-memory-than-xmx</a></p>\n<p>java进程内存消耗会大于我们在<code>-Xmx</code>中指定的值.<code>-Xmx</code>仅仅限制了应用程序使用的heap大小.java进的内存消耗主要包括下面的东东:</p>\n<pre><code>Max memory = [-Xmx] + [-XX:MaxPermSize] + number_of_threads * [-Xss]+Other\n</code></pre><p>Other:</p>\n<ul>\n<li>Garbage collection(GC自己需要消耗内存来记录数据)</li>\n<li>JIT optimization(JIT优化需要记录代码执行行为,Code cache-JIT编译完成后存放机器码)</li>\n<li>Off-heap allocations(NIO/DirectMemory之类的东东)</li>\n<li>JNI code(程序使用第三方JNI代码占用的内存)</li>\n<li>Metaspace(jdk8使用它取代了permgen)</li>\n</ul>\n<h2 id=\"Understanding-the-OutOfMemoryError\"><a href=\"#Understanding-the-OutOfMemoryError\" class=\"headerlink\" title=\"Understanding the OutOfMemoryError\"></a>Understanding the OutOfMemoryError</h2><p><a href=\"https://plumbr.eu/blog/understanding-java-lang-outofmemoryerror\" target=\"_blank\" rel=\"noopener\">https://plumbr.eu/blog/understanding-java-lang-outofmemoryerror</a></p>\n<ul>\n<li><p>java.lang.OutOfMemoryError: Java heap space</p>\n<p>  heap空间不足.一般加大<code>-Xmx</code>.如果还不足就有可能是内存泄漏了.</p>\n</li>\n<li><p>java.lang.OutOfMemoryError: PermGen space</p>\n<p>  permgen空间不足,默认的jvm配置得比较小,需要通过<code>-XX:MaxPermSize</code>加大.动态代码生成技术和容器redeploy资源泄漏也会导致permgen不足</p>\n</li>\n<li><p>java.lang.OutOfMemoryError: GC overhead limit exceeded</p>\n<p>  jvm gc行为中超过98%以上的时间去释放小于2%的堆空间时会报这个错误</p>\n</li>\n<li><p>java.lang.OutOfMemoryError: unable to create new native thread</p>\n<p>  java没创建一个线程,会占用<code>-Xss</code>大小空间.这个异常有可能是系统内存不足导致.如果系统内存充足,往往是ulimit -u限制了一个用户创建最大线程数造成的.</p>\n</li>\n<li><p>java.lang.OutOfMemoryError: Requested array size exceeds VM limit</p>\n<p>  申请的数组大小超过jvm定义的阀值.</p>\n</li>\n<li><p>java.lang.OutOfMemoryError: request <size> bytes for <reason>. Out of swap space?</reason></size></p>\n</li>\n<li>java.lang.OutOfMemoryError: <reason> <stack trace=\"\"> (Native method)</stack></reason></li>\n</ul>\n<h2 id=\"20-Obstacles-to-Scalability\"><a href=\"#20-Obstacles-to-Scalability\" class=\"headerlink\" title=\"20 Obstacles to Scalability\"></a>20 Obstacles to Scalability</h2><p>本文罗列了20个影响伸缩性的瓶颈</p>\n<h3 id=\"10-Obstacles-to-Scaling-Performance\"><a href=\"#10-Obstacles-to-Scaling-Performance\" class=\"headerlink\" title=\"10 Obstacles to Scaling Performance\"></a>10 Obstacles to Scaling Performance</h3><ol>\n<li><p>Two-Phase Commit</p>\n<p> 两阶段提交需要等待参与方确认,延时太大.所以我们基本上使用best-effort 1pc+业务上的重试.</p>\n</li>\n<li><p>Insufficient Caching</p>\n<p> 各个层次都需要引入缓存机制,现在我们对browser cache/page cache还做得比较少.</p>\n</li>\n<li><p>Slow Disk I/O, RAID 5, Multitenant Storage</p>\n<p> 数据库服务起I/O很关键.如果只做raid建议做raid10.当然加上fushion io之类的加速卡更好.</p>\n</li>\n<li><p>Serial Processing</p>\n<p>服务并行处理我们也还思考得比较少.比如对远程服务进行合理并行处理(可以考虑下java8中的CompletableFuture).对于缓存数据的获取,可以考虑批量获取.</p>\n</li>\n<li><p>Missing Feature Flags</p>\n<p> 特性开关,说大点就是服务降级,我们需要却分不同服务的重要等级,适当时候关闭某些服务,保证核心业务正常运行.</p>\n</li>\n<li><p>Single Copy of the Database</p>\n</li>\n<li>Using Your Database for Queuing</li>\n<li>Using a Database for Full-Text Searching</li>\n<li>Object Relational Models(orm很好用,但是缺少能hold住他的人)</li>\n<li>Missing Instrumentation(需要监控/profile工具)</li>\n</ol>\n<h3 id=\"10-Obstacles-to-Scaling-Beyond-Optimization-Speed\"><a href=\"#10-Obstacles-to-Scaling-Beyond-Optimization-Speed\" class=\"headerlink\" title=\"10 Obstacles to Scaling Beyond Optimization Speed\"></a>10 Obstacles to Scaling Beyond Optimization Speed</h3><ol>\n<li>Lack of a Code Repository and Version Control</li>\n<li>Single Points of Failure</li>\n<li>Lack of Browse-Only Mode(对于内容型的网站,此功能非常重要)</li>\n<li>Weak Communication</li>\n<li>Lack of Documentation</li>\n<li>Lack of Fire Drills(却分演练,特别是大的运维调整,此项非常必要)</li>\n<li>Insufficient Monitoring and Metrics</li>\n<li>Cowboy Operations</li>\n<li>Growing Technical Debt</li>\n<li>Insufficient Logging</li>\n</ol>\n"},{"title":"2014年12月Reading Notes","date":"2014-12-14T13:52:17.000Z","_content":"\n\n## CPU Flame Graphs\nhttp://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html\n\njava里可以很方便的通过`jvisualvm`来采样性能数据,然后分析每个线程栈中比较费时的cpu操作.java以外的程序,通过cpu火焰图来分析性能问题,很直观(比较起来,jvisualvm的cpu sample report没有cpu火焰图直观).\n\n生成的`svg`报告中,`y轴`可以理解为调用栈层次,越大调用层次越深.`x轴`中的长度是调用占用时间比.\n\n`CPU Flame Graphs`生成过程需要三步:\n\n1. 采样性能数据([perf](https://perf.wiki.kernel.org/index.php/Tutorial#Counting_with_perf_stat), DTrace, SystemTap, and ktap) \n2. 转换性能数据  \n3. 利用性能数据生成`svg`报告\n\n## 协程\nhttp://niusmallnan.github.io/_build/html/_templates/openstack/coroutine_usage.html\nhttp://www.dongliu.net/post/5906310176440320\n\n协程是纯软件实现的多任务调度,在软件层面实现任务的保持和恢复.传统的用多线程的方式来实现任务调度,在高并发场景下,CPU创建开销和CPU上下文切换的开销太大.使用协程,任务调度有程序来调度,不涉及到cpu线程切换和cpu大量创建线程,性能会快不少.\n\n在使用协程时,所有的I/O都需要使用异步I/O,不然性能会大打折扣.\n\n在协程中,不同的执行单元之间通信可以采用共享内存或者消息机制.由于共享内存又会引入共享资源的同步,推荐采用消息机制.\n\n## 基于线程与基于事件的并发编程之争\nhttp://www.jdon.com/46921\n\n基于线程的并发变成带来了很多问题，很难写出高性能的程序。协程和Actor模型也许可以考虑用来降低CS的开销。\n\n\n","source":"_posts/2014-12-reading-notes.md","raw":"---\ntitle: 2014年12月Reading Notes\ndate: 2014-12-14 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n---\n\n\n## CPU Flame Graphs\nhttp://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html\n\njava里可以很方便的通过`jvisualvm`来采样性能数据,然后分析每个线程栈中比较费时的cpu操作.java以外的程序,通过cpu火焰图来分析性能问题,很直观(比较起来,jvisualvm的cpu sample report没有cpu火焰图直观).\n\n生成的`svg`报告中,`y轴`可以理解为调用栈层次,越大调用层次越深.`x轴`中的长度是调用占用时间比.\n\n`CPU Flame Graphs`生成过程需要三步:\n\n1. 采样性能数据([perf](https://perf.wiki.kernel.org/index.php/Tutorial#Counting_with_perf_stat), DTrace, SystemTap, and ktap) \n2. 转换性能数据  \n3. 利用性能数据生成`svg`报告\n\n## 协程\nhttp://niusmallnan.github.io/_build/html/_templates/openstack/coroutine_usage.html\nhttp://www.dongliu.net/post/5906310176440320\n\n协程是纯软件实现的多任务调度,在软件层面实现任务的保持和恢复.传统的用多线程的方式来实现任务调度,在高并发场景下,CPU创建开销和CPU上下文切换的开销太大.使用协程,任务调度有程序来调度,不涉及到cpu线程切换和cpu大量创建线程,性能会快不少.\n\n在使用协程时,所有的I/O都需要使用异步I/O,不然性能会大打折扣.\n\n在协程中,不同的执行单元之间通信可以采用共享内存或者消息机制.由于共享内存又会引入共享资源的同步,推荐采用消息机制.\n\n## 基于线程与基于事件的并发编程之争\nhttp://www.jdon.com/46921\n\n基于线程的并发变成带来了很多问题，很难写出高性能的程序。协程和Actor模型也许可以考虑用来降低CS的开销。\n\n\n","slug":"2014-12-reading-notes","published":1,"updated":"2018-04-01T16:53:17.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksfw000rp0ugqd3eq417","content":"<h2 id=\"CPU-Flame-Graphs\"><a href=\"#CPU-Flame-Graphs\" class=\"headerlink\" title=\"CPU Flame Graphs\"></a>CPU Flame Graphs</h2><p><a href=\"http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html\" target=\"_blank\" rel=\"noopener\">http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html</a></p>\n<p>java里可以很方便的通过<code>jvisualvm</code>来采样性能数据,然后分析每个线程栈中比较费时的cpu操作.java以外的程序,通过cpu火焰图来分析性能问题,很直观(比较起来,jvisualvm的cpu sample report没有cpu火焰图直观).</p>\n<p>生成的<code>svg</code>报告中,<code>y轴</code>可以理解为调用栈层次,越大调用层次越深.<code>x轴</code>中的长度是调用占用时间比.</p>\n<p><code>CPU Flame Graphs</code>生成过程需要三步:</p>\n<ol>\n<li>采样性能数据(<a href=\"https://perf.wiki.kernel.org/index.php/Tutorial#Counting_with_perf_stat\" target=\"_blank\" rel=\"noopener\">perf</a>, DTrace, SystemTap, and ktap) </li>\n<li>转换性能数据  </li>\n<li>利用性能数据生成<code>svg</code>报告</li>\n</ol>\n<h2 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h2><p><a href=\"http://niusmallnan.github.io/_build/html/_templates/openstack/coroutine_usage.html\" target=\"_blank\" rel=\"noopener\">http://niusmallnan.github.io/_build/html/_templates/openstack/coroutine_usage.html</a><br><a href=\"http://www.dongliu.net/post/5906310176440320\" target=\"_blank\" rel=\"noopener\">http://www.dongliu.net/post/5906310176440320</a></p>\n<p>协程是纯软件实现的多任务调度,在软件层面实现任务的保持和恢复.传统的用多线程的方式来实现任务调度,在高并发场景下,CPU创建开销和CPU上下文切换的开销太大.使用协程,任务调度有程序来调度,不涉及到cpu线程切换和cpu大量创建线程,性能会快不少.</p>\n<p>在使用协程时,所有的I/O都需要使用异步I/O,不然性能会大打折扣.</p>\n<p>在协程中,不同的执行单元之间通信可以采用共享内存或者消息机制.由于共享内存又会引入共享资源的同步,推荐采用消息机制.</p>\n<h2 id=\"基于线程与基于事件的并发编程之争\"><a href=\"#基于线程与基于事件的并发编程之争\" class=\"headerlink\" title=\"基于线程与基于事件的并发编程之争\"></a>基于线程与基于事件的并发编程之争</h2><p><a href=\"http://www.jdon.com/46921\" target=\"_blank\" rel=\"noopener\">http://www.jdon.com/46921</a></p>\n<p>基于线程的并发变成带来了很多问题，很难写出高性能的程序。协程和Actor模型也许可以考虑用来降低CS的开销。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CPU-Flame-Graphs\"><a href=\"#CPU-Flame-Graphs\" class=\"headerlink\" title=\"CPU Flame Graphs\"></a>CPU Flame Graphs</h2><p><a href=\"http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html\" target=\"_blank\" rel=\"noopener\">http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html</a></p>\n<p>java里可以很方便的通过<code>jvisualvm</code>来采样性能数据,然后分析每个线程栈中比较费时的cpu操作.java以外的程序,通过cpu火焰图来分析性能问题,很直观(比较起来,jvisualvm的cpu sample report没有cpu火焰图直观).</p>\n<p>生成的<code>svg</code>报告中,<code>y轴</code>可以理解为调用栈层次,越大调用层次越深.<code>x轴</code>中的长度是调用占用时间比.</p>\n<p><code>CPU Flame Graphs</code>生成过程需要三步:</p>\n<ol>\n<li>采样性能数据(<a href=\"https://perf.wiki.kernel.org/index.php/Tutorial#Counting_with_perf_stat\" target=\"_blank\" rel=\"noopener\">perf</a>, DTrace, SystemTap, and ktap) </li>\n<li>转换性能数据  </li>\n<li>利用性能数据生成<code>svg</code>报告</li>\n</ol>\n<h2 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h2><p><a href=\"http://niusmallnan.github.io/_build/html/_templates/openstack/coroutine_usage.html\" target=\"_blank\" rel=\"noopener\">http://niusmallnan.github.io/_build/html/_templates/openstack/coroutine_usage.html</a><br><a href=\"http://www.dongliu.net/post/5906310176440320\" target=\"_blank\" rel=\"noopener\">http://www.dongliu.net/post/5906310176440320</a></p>\n<p>协程是纯软件实现的多任务调度,在软件层面实现任务的保持和恢复.传统的用多线程的方式来实现任务调度,在高并发场景下,CPU创建开销和CPU上下文切换的开销太大.使用协程,任务调度有程序来调度,不涉及到cpu线程切换和cpu大量创建线程,性能会快不少.</p>\n<p>在使用协程时,所有的I/O都需要使用异步I/O,不然性能会大打折扣.</p>\n<p>在协程中,不同的执行单元之间通信可以采用共享内存或者消息机制.由于共享内存又会引入共享资源的同步,推荐采用消息机制.</p>\n<h2 id=\"基于线程与基于事件的并发编程之争\"><a href=\"#基于线程与基于事件的并发编程之争\" class=\"headerlink\" title=\"基于线程与基于事件的并发编程之争\"></a>基于线程与基于事件的并发编程之争</h2><p><a href=\"http://www.jdon.com/46921\" target=\"_blank\" rel=\"noopener\">http://www.jdon.com/46921</a></p>\n<p>基于线程的并发变成带来了很多问题，很难写出高性能的程序。协程和Actor模型也许可以考虑用来降低CS的开销。</p>\n"},{"title":"2014年11月Reading Notes","date":"2014-11-04T13:52:17.000Z","_content":"\n\n\n## Linux Troubleshooting, Part I: High Load\nhttp://www.linuxjournal.com/magazine/hack-and-linux-troubleshooting-part-i-high-load\n\n10月25(This is my big day)日凌晨线上某系统出现`load`很高的问题,我当时排查问题的思路和这篇文章类似.简单总结下:\n\n`load`,系统负载,可以理解为现在等待cpu处理的任务数.如何衡量`high`呢?这个和cpu核心数有关系,8核cpu,load为8,这个也不能称之为high.\n\n造成high load的原因一般有:\n\n* CPU-bound load\n\n\t某些任务太耗cpu了,导致high load.这个通过看top就能看出来.如果`top`命令中的`xx%wa`很高,说明这些任务都在等待去了.\n\n* load caused by out of memory issues\n\n\t由于内存不足,linux在使用swap了,导致high load.这个通过`free`很容易看出来.\n\n* I/O-bound load\n\n\tiostat/iotop(需安装)都很容易发现原因所在.\n\n我偏向于使用`vmstat`,用了它,什么都可以看到了.很悲剧的是,这台线上服务器一切正常.服务器重启后,负载一直很低.服务器重启后,一切都正常了.\n\n\n\n## The Best Plugins for Sublime Text\nhttp://ipestov.com/the-best-plugins-for-sublime-text/\n\n可以把sublime武装成ide的插件.\n\n## ibatis和mybatis共存\n如果先加载ibatis的jar,会遇到`java.lang.reflect.MalformedParameterizedTypeException`异常.需要让ibatis后加载.可以修改`ibatis`依赖的`artifactId`,比如改为`zibatis`\n\n## MySQL 加锁处理分析\nhttp://hedengcheng.com/?p=771\n\n这篇文章从mysql数据库原理角度来分析锁,很透彻,很深刻.\n\n比如对于一条简单的sql语句:\n\n\tdelete from test where id = ?；\n\n如果id是主键/非空的唯一索引,不会出现gap锁.如果是非索引列,直接锁表(这个太恶心了,因为server和存储引擎分离导致的);如果是非唯一的索引,事务隔离级别是read commit,锁定选取的数据.如果是repeatable read,为了防止幻读,gap lock出现了)\n\n##面向程序员的数据库访问性能优化法则\nhttp://blog.csdn.net/yzsind/article/details/6059209\n\n这篇文章很系统的介绍了程序员应该掌握的数据库优化知识.\n首先根据硬件相关知识介绍各种硬件的访问延时/带宽指标:\n![](2014-11-reading-notes/access_delay_bandwidth.gif)\n\n通过对上面的指标分析,自然得出优化的层次:\n\n1. 减少数据访问（减少磁盘访问）\n\n\t* 正确创建/使用索引\n\t* 只通过索引访问数据(索引节点中存有数据,通过索引就能拿到数据最高效)\n\t* 根据查询计划优化索引\n\t* 一个表上的索引不能太多,会增加修改操作IO.\n\n2. 返回更少数据（减少网络传输或磁盘访问）\n\n\t* 分页(通过rowid分页的方式减少IO,前提是where/order子句都要在索引上)\n\t* 只返回需要的字段(别使用select *,带来各种问题,对于我们来说,最头痛的是sql版本兼容性问题.)\n\n\n3. 减少交互次数（减少网络传输）\n\n\t* batch DML(批量操作走jdbc批量接口)\n\t* In List(多操作合并,依稀记得mysql驱动里也有这样的做法)\n\t* 设置Fetch Size(默认fetch size可能不是最优的,需要根据实际情况调整,比如分页查询,一次查询100条,在不OOM的前提下增大此值,减少网络io)\n\t* 使用存储过程(这个得看场景)\n\t* 使用ResultSet游标处理记录(这一点往往被忽略掉,使用mybatis的RowHandler来解决问题)\n\n4. 减少服务器CPU开销（减少CPU及内存开销）\n\n\t* 使用绑定变量(mysql仅仅支持硬解析,[参考](http://www.cnblogs.com/justfortaste/p/3920140.html))\n\t* 合理使用排序\n\n5. 利用更多资源（增加资源）\n","source":"_posts/2014-11-reading-notes.md","raw":"---\ntitle: 2014年11月Reading Notes\ndate: 2014-11-04 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n---\n\n\n\n## Linux Troubleshooting, Part I: High Load\nhttp://www.linuxjournal.com/magazine/hack-and-linux-troubleshooting-part-i-high-load\n\n10月25(This is my big day)日凌晨线上某系统出现`load`很高的问题,我当时排查问题的思路和这篇文章类似.简单总结下:\n\n`load`,系统负载,可以理解为现在等待cpu处理的任务数.如何衡量`high`呢?这个和cpu核心数有关系,8核cpu,load为8,这个也不能称之为high.\n\n造成high load的原因一般有:\n\n* CPU-bound load\n\n\t某些任务太耗cpu了,导致high load.这个通过看top就能看出来.如果`top`命令中的`xx%wa`很高,说明这些任务都在等待去了.\n\n* load caused by out of memory issues\n\n\t由于内存不足,linux在使用swap了,导致high load.这个通过`free`很容易看出来.\n\n* I/O-bound load\n\n\tiostat/iotop(需安装)都很容易发现原因所在.\n\n我偏向于使用`vmstat`,用了它,什么都可以看到了.很悲剧的是,这台线上服务器一切正常.服务器重启后,负载一直很低.服务器重启后,一切都正常了.\n\n\n\n## The Best Plugins for Sublime Text\nhttp://ipestov.com/the-best-plugins-for-sublime-text/\n\n可以把sublime武装成ide的插件.\n\n## ibatis和mybatis共存\n如果先加载ibatis的jar,会遇到`java.lang.reflect.MalformedParameterizedTypeException`异常.需要让ibatis后加载.可以修改`ibatis`依赖的`artifactId`,比如改为`zibatis`\n\n## MySQL 加锁处理分析\nhttp://hedengcheng.com/?p=771\n\n这篇文章从mysql数据库原理角度来分析锁,很透彻,很深刻.\n\n比如对于一条简单的sql语句:\n\n\tdelete from test where id = ?；\n\n如果id是主键/非空的唯一索引,不会出现gap锁.如果是非索引列,直接锁表(这个太恶心了,因为server和存储引擎分离导致的);如果是非唯一的索引,事务隔离级别是read commit,锁定选取的数据.如果是repeatable read,为了防止幻读,gap lock出现了)\n\n##面向程序员的数据库访问性能优化法则\nhttp://blog.csdn.net/yzsind/article/details/6059209\n\n这篇文章很系统的介绍了程序员应该掌握的数据库优化知识.\n首先根据硬件相关知识介绍各种硬件的访问延时/带宽指标:\n![](2014-11-reading-notes/access_delay_bandwidth.gif)\n\n通过对上面的指标分析,自然得出优化的层次:\n\n1. 减少数据访问（减少磁盘访问）\n\n\t* 正确创建/使用索引\n\t* 只通过索引访问数据(索引节点中存有数据,通过索引就能拿到数据最高效)\n\t* 根据查询计划优化索引\n\t* 一个表上的索引不能太多,会增加修改操作IO.\n\n2. 返回更少数据（减少网络传输或磁盘访问）\n\n\t* 分页(通过rowid分页的方式减少IO,前提是where/order子句都要在索引上)\n\t* 只返回需要的字段(别使用select *,带来各种问题,对于我们来说,最头痛的是sql版本兼容性问题.)\n\n\n3. 减少交互次数（减少网络传输）\n\n\t* batch DML(批量操作走jdbc批量接口)\n\t* In List(多操作合并,依稀记得mysql驱动里也有这样的做法)\n\t* 设置Fetch Size(默认fetch size可能不是最优的,需要根据实际情况调整,比如分页查询,一次查询100条,在不OOM的前提下增大此值,减少网络io)\n\t* 使用存储过程(这个得看场景)\n\t* 使用ResultSet游标处理记录(这一点往往被忽略掉,使用mybatis的RowHandler来解决问题)\n\n4. 减少服务器CPU开销（减少CPU及内存开销）\n\n\t* 使用绑定变量(mysql仅仅支持硬解析,[参考](http://www.cnblogs.com/justfortaste/p/3920140.html))\n\t* 合理使用排序\n\n5. 利用更多资源（增加资源）\n","slug":"2014-11-reading-notes","published":1,"updated":"2018-04-01T16:53:17.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksfx000up0ugxsx2s9a0","content":"<h2 id=\"Linux-Troubleshooting-Part-I-High-Load\"><a href=\"#Linux-Troubleshooting-Part-I-High-Load\" class=\"headerlink\" title=\"Linux Troubleshooting, Part I: High Load\"></a>Linux Troubleshooting, Part I: High Load</h2><p><a href=\"http://www.linuxjournal.com/magazine/hack-and-linux-troubleshooting-part-i-high-load\" target=\"_blank\" rel=\"noopener\">http://www.linuxjournal.com/magazine/hack-and-linux-troubleshooting-part-i-high-load</a></p>\n<p>10月25(This is my big day)日凌晨线上某系统出现<code>load</code>很高的问题,我当时排查问题的思路和这篇文章类似.简单总结下:</p>\n<p><code>load</code>,系统负载,可以理解为现在等待cpu处理的任务数.如何衡量<code>high</code>呢?这个和cpu核心数有关系,8核cpu,load为8,这个也不能称之为high.</p>\n<p>造成high load的原因一般有:</p>\n<ul>\n<li><p>CPU-bound load</p>\n<p>  某些任务太耗cpu了,导致high load.这个通过看top就能看出来.如果<code>top</code>命令中的<code>xx%wa</code>很高,说明这些任务都在等待去了.</p>\n</li>\n<li><p>load caused by out of memory issues</p>\n<p>  由于内存不足,linux在使用swap了,导致high load.这个通过<code>free</code>很容易看出来.</p>\n</li>\n<li><p>I/O-bound load</p>\n<p>  iostat/iotop(需安装)都很容易发现原因所在.</p>\n</li>\n</ul>\n<p>我偏向于使用<code>vmstat</code>,用了它,什么都可以看到了.很悲剧的是,这台线上服务器一切正常.服务器重启后,负载一直很低.服务器重启后,一切都正常了.</p>\n<h2 id=\"The-Best-Plugins-for-Sublime-Text\"><a href=\"#The-Best-Plugins-for-Sublime-Text\" class=\"headerlink\" title=\"The Best Plugins for Sublime Text\"></a>The Best Plugins for Sublime Text</h2><p><a href=\"http://ipestov.com/the-best-plugins-for-sublime-text/\" target=\"_blank\" rel=\"noopener\">http://ipestov.com/the-best-plugins-for-sublime-text/</a></p>\n<p>可以把sublime武装成ide的插件.</p>\n<h2 id=\"ibatis和mybatis共存\"><a href=\"#ibatis和mybatis共存\" class=\"headerlink\" title=\"ibatis和mybatis共存\"></a>ibatis和mybatis共存</h2><p>如果先加载ibatis的jar,会遇到<code>java.lang.reflect.MalformedParameterizedTypeException</code>异常.需要让ibatis后加载.可以修改<code>ibatis</code>依赖的<code>artifactId</code>,比如改为<code>zibatis</code></p>\n<h2 id=\"MySQL-加锁处理分析\"><a href=\"#MySQL-加锁处理分析\" class=\"headerlink\" title=\"MySQL 加锁处理分析\"></a>MySQL 加锁处理分析</h2><p><a href=\"http://hedengcheng.com/?p=771\" target=\"_blank\" rel=\"noopener\">http://hedengcheng.com/?p=771</a></p>\n<p>这篇文章从mysql数据库原理角度来分析锁,很透彻,很深刻.</p>\n<p>比如对于一条简单的sql语句:</p>\n<pre><code>delete from test where id = ?；\n</code></pre><p>如果id是主键/非空的唯一索引,不会出现gap锁.如果是非索引列,直接锁表(这个太恶心了,因为server和存储引擎分离导致的);如果是非唯一的索引,事务隔离级别是read commit,锁定选取的数据.如果是repeatable read,为了防止幻读,gap lock出现了)</p>\n<p>##面向程序员的数据库访问性能优化法则<br><a href=\"http://blog.csdn.net/yzsind/article/details/6059209\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/yzsind/article/details/6059209</a></p>\n<p>这篇文章很系统的介绍了程序员应该掌握的数据库优化知识.<br>首先根据硬件相关知识介绍各种硬件的访问延时/带宽指标:<br><img src=\"/2014-11-reading-notes/access_delay_bandwidth.gif\" alt=\"\"></p>\n<p>通过对上面的指标分析,自然得出优化的层次:</p>\n<ol>\n<li><p>减少数据访问（减少磁盘访问）</p>\n<ul>\n<li>正确创建/使用索引</li>\n<li>只通过索引访问数据(索引节点中存有数据,通过索引就能拿到数据最高效)</li>\n<li>根据查询计划优化索引</li>\n<li>一个表上的索引不能太多,会增加修改操作IO.</li>\n</ul>\n</li>\n<li><p>返回更少数据（减少网络传输或磁盘访问）</p>\n<ul>\n<li>分页(通过rowid分页的方式减少IO,前提是where/order子句都要在索引上)</li>\n<li>只返回需要的字段(别使用select *,带来各种问题,对于我们来说,最头痛的是sql版本兼容性问题.)</li>\n</ul>\n</li>\n</ol>\n<ol>\n<li><p>减少交互次数（减少网络传输）</p>\n<ul>\n<li>batch DML(批量操作走jdbc批量接口)</li>\n<li>In List(多操作合并,依稀记得mysql驱动里也有这样的做法)</li>\n<li>设置Fetch Size(默认fetch size可能不是最优的,需要根据实际情况调整,比如分页查询,一次查询100条,在不OOM的前提下增大此值,减少网络io)</li>\n<li>使用存储过程(这个得看场景)</li>\n<li>使用ResultSet游标处理记录(这一点往往被忽略掉,使用mybatis的RowHandler来解决问题)</li>\n</ul>\n</li>\n<li><p>减少服务器CPU开销（减少CPU及内存开销）</p>\n<ul>\n<li>使用绑定变量(mysql仅仅支持硬解析,<a href=\"http://www.cnblogs.com/justfortaste/p/3920140.html\" target=\"_blank\" rel=\"noopener\">参考</a>)</li>\n<li>合理使用排序</li>\n</ul>\n</li>\n<li><p>利用更多资源（增加资源）</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Linux-Troubleshooting-Part-I-High-Load\"><a href=\"#Linux-Troubleshooting-Part-I-High-Load\" class=\"headerlink\" title=\"Linux Troubleshooting, Part I: High Load\"></a>Linux Troubleshooting, Part I: High Load</h2><p><a href=\"http://www.linuxjournal.com/magazine/hack-and-linux-troubleshooting-part-i-high-load\" target=\"_blank\" rel=\"noopener\">http://www.linuxjournal.com/magazine/hack-and-linux-troubleshooting-part-i-high-load</a></p>\n<p>10月25(This is my big day)日凌晨线上某系统出现<code>load</code>很高的问题,我当时排查问题的思路和这篇文章类似.简单总结下:</p>\n<p><code>load</code>,系统负载,可以理解为现在等待cpu处理的任务数.如何衡量<code>high</code>呢?这个和cpu核心数有关系,8核cpu,load为8,这个也不能称之为high.</p>\n<p>造成high load的原因一般有:</p>\n<ul>\n<li><p>CPU-bound load</p>\n<p>  某些任务太耗cpu了,导致high load.这个通过看top就能看出来.如果<code>top</code>命令中的<code>xx%wa</code>很高,说明这些任务都在等待去了.</p>\n</li>\n<li><p>load caused by out of memory issues</p>\n<p>  由于内存不足,linux在使用swap了,导致high load.这个通过<code>free</code>很容易看出来.</p>\n</li>\n<li><p>I/O-bound load</p>\n<p>  iostat/iotop(需安装)都很容易发现原因所在.</p>\n</li>\n</ul>\n<p>我偏向于使用<code>vmstat</code>,用了它,什么都可以看到了.很悲剧的是,这台线上服务器一切正常.服务器重启后,负载一直很低.服务器重启后,一切都正常了.</p>\n<h2 id=\"The-Best-Plugins-for-Sublime-Text\"><a href=\"#The-Best-Plugins-for-Sublime-Text\" class=\"headerlink\" title=\"The Best Plugins for Sublime Text\"></a>The Best Plugins for Sublime Text</h2><p><a href=\"http://ipestov.com/the-best-plugins-for-sublime-text/\" target=\"_blank\" rel=\"noopener\">http://ipestov.com/the-best-plugins-for-sublime-text/</a></p>\n<p>可以把sublime武装成ide的插件.</p>\n<h2 id=\"ibatis和mybatis共存\"><a href=\"#ibatis和mybatis共存\" class=\"headerlink\" title=\"ibatis和mybatis共存\"></a>ibatis和mybatis共存</h2><p>如果先加载ibatis的jar,会遇到<code>java.lang.reflect.MalformedParameterizedTypeException</code>异常.需要让ibatis后加载.可以修改<code>ibatis</code>依赖的<code>artifactId</code>,比如改为<code>zibatis</code></p>\n<h2 id=\"MySQL-加锁处理分析\"><a href=\"#MySQL-加锁处理分析\" class=\"headerlink\" title=\"MySQL 加锁处理分析\"></a>MySQL 加锁处理分析</h2><p><a href=\"http://hedengcheng.com/?p=771\" target=\"_blank\" rel=\"noopener\">http://hedengcheng.com/?p=771</a></p>\n<p>这篇文章从mysql数据库原理角度来分析锁,很透彻,很深刻.</p>\n<p>比如对于一条简单的sql语句:</p>\n<pre><code>delete from test where id = ?；\n</code></pre><p>如果id是主键/非空的唯一索引,不会出现gap锁.如果是非索引列,直接锁表(这个太恶心了,因为server和存储引擎分离导致的);如果是非唯一的索引,事务隔离级别是read commit,锁定选取的数据.如果是repeatable read,为了防止幻读,gap lock出现了)</p>\n<p>##面向程序员的数据库访问性能优化法则<br><a href=\"http://blog.csdn.net/yzsind/article/details/6059209\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/yzsind/article/details/6059209</a></p>\n<p>这篇文章很系统的介绍了程序员应该掌握的数据库优化知识.<br>首先根据硬件相关知识介绍各种硬件的访问延时/带宽指标:<br><img src=\"/2014-11-reading-notes/access_delay_bandwidth.gif\" alt=\"\"></p>\n<p>通过对上面的指标分析,自然得出优化的层次:</p>\n<ol>\n<li><p>减少数据访问（减少磁盘访问）</p>\n<ul>\n<li>正确创建/使用索引</li>\n<li>只通过索引访问数据(索引节点中存有数据,通过索引就能拿到数据最高效)</li>\n<li>根据查询计划优化索引</li>\n<li>一个表上的索引不能太多,会增加修改操作IO.</li>\n</ul>\n</li>\n<li><p>返回更少数据（减少网络传输或磁盘访问）</p>\n<ul>\n<li>分页(通过rowid分页的方式减少IO,前提是where/order子句都要在索引上)</li>\n<li>只返回需要的字段(别使用select *,带来各种问题,对于我们来说,最头痛的是sql版本兼容性问题.)</li>\n</ul>\n</li>\n</ol>\n<ol>\n<li><p>减少交互次数（减少网络传输）</p>\n<ul>\n<li>batch DML(批量操作走jdbc批量接口)</li>\n<li>In List(多操作合并,依稀记得mysql驱动里也有这样的做法)</li>\n<li>设置Fetch Size(默认fetch size可能不是最优的,需要根据实际情况调整,比如分页查询,一次查询100条,在不OOM的前提下增大此值,减少网络io)</li>\n<li>使用存储过程(这个得看场景)</li>\n<li>使用ResultSet游标处理记录(这一点往往被忽略掉,使用mybatis的RowHandler来解决问题)</li>\n</ul>\n</li>\n<li><p>减少服务器CPU开销（减少CPU及内存开销）</p>\n<ul>\n<li>使用绑定变量(mysql仅仅支持硬解析,<a href=\"http://www.cnblogs.com/justfortaste/p/3920140.html\" target=\"_blank\" rel=\"noopener\">参考</a>)</li>\n<li>合理使用排序</li>\n</ul>\n</li>\n<li><p>利用更多资源（增加资源）</p>\n</li>\n</ol>\n"},{"title":"2015年02月Reading Notes","date":"2015-02-16T13:52:17.000Z","_content":"\n## Java Lambdas and Low Latency\n[http://vanillajava.blogspot.hk/2015/01/java-lambdas-and-low-latency.html](http://vanillajava.blogspot.hk/2015/01/java-lambdas-and-low-latency.html)\n\n \n `Lambdas`创建了新对象，在低延迟应用中会给`gc`带来一点点压力。[Escape Analysis](http://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html)(分析对象的使用范围，来做性能优化，比如锁消除，消除对象分配...)能减少这种压力。可以通过jvm参考`-XX:BCEATraceLevel=3`查看逃逸分析情况，进一步设置`-XX:MaxBCEAEstimateSize`来调整`Maximum bytecode size of a method to be analyzed by BC EA.`\n \n## Catch common Java mistakes as compile-time errors\n[http://errorprone.info/](http://errorprone.info/)\n\n静态代码分析工具又添一员，在编译时检查常见的java代码错误。在jdk8下貌似run不起来。\n ","source":"_posts/2015-02-reading-notes.md","raw":"---\ntitle: 2015年02月Reading Notes\ndate: 2015-02-16 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n---\n\n## Java Lambdas and Low Latency\n[http://vanillajava.blogspot.hk/2015/01/java-lambdas-and-low-latency.html](http://vanillajava.blogspot.hk/2015/01/java-lambdas-and-low-latency.html)\n\n \n `Lambdas`创建了新对象，在低延迟应用中会给`gc`带来一点点压力。[Escape Analysis](http://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html)(分析对象的使用范围，来做性能优化，比如锁消除，消除对象分配...)能减少这种压力。可以通过jvm参考`-XX:BCEATraceLevel=3`查看逃逸分析情况，进一步设置`-XX:MaxBCEAEstimateSize`来调整`Maximum bytecode size of a method to be analyzed by BC EA.`\n \n## Catch common Java mistakes as compile-time errors\n[http://errorprone.info/](http://errorprone.info/)\n\n静态代码分析工具又添一员，在编译时检查常见的java代码错误。在jdk8下貌似run不起来。\n ","slug":"2015-02-reading-notes","published":1,"updated":"2018-04-01T16:53:17.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksg0000xp0ug1kyxzci8","content":"<h2 id=\"Java-Lambdas-and-Low-Latency\"><a href=\"#Java-Lambdas-and-Low-Latency\" class=\"headerlink\" title=\"Java Lambdas and Low Latency\"></a>Java Lambdas and Low Latency</h2><p><a href=\"http://vanillajava.blogspot.hk/2015/01/java-lambdas-and-low-latency.html\" target=\"_blank\" rel=\"noopener\">http://vanillajava.blogspot.hk/2015/01/java-lambdas-and-low-latency.html</a></p>\n<p> <code>Lambdas</code>创建了新对象，在低延迟应用中会给<code>gc</code>带来一点点压力。<a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html\" target=\"_blank\" rel=\"noopener\">Escape Analysis</a>(分析对象的使用范围，来做性能优化，比如锁消除，消除对象分配…)能减少这种压力。可以通过jvm参考<code>-XX:BCEATraceLevel=3</code>查看逃逸分析情况，进一步设置<code>-XX:MaxBCEAEstimateSize</code>来调整<code>Maximum bytecode size of a method to be analyzed by BC EA.</code></p>\n<h2 id=\"Catch-common-Java-mistakes-as-compile-time-errors\"><a href=\"#Catch-common-Java-mistakes-as-compile-time-errors\" class=\"headerlink\" title=\"Catch common Java mistakes as compile-time errors\"></a>Catch common Java mistakes as compile-time errors</h2><p><a href=\"http://errorprone.info/\" target=\"_blank\" rel=\"noopener\">http://errorprone.info/</a></p>\n<p>静态代码分析工具又添一员，在编译时检查常见的java代码错误。在jdk8下貌似run不起来。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java-Lambdas-and-Low-Latency\"><a href=\"#Java-Lambdas-and-Low-Latency\" class=\"headerlink\" title=\"Java Lambdas and Low Latency\"></a>Java Lambdas and Low Latency</h2><p><a href=\"http://vanillajava.blogspot.hk/2015/01/java-lambdas-and-low-latency.html\" target=\"_blank\" rel=\"noopener\">http://vanillajava.blogspot.hk/2015/01/java-lambdas-and-low-latency.html</a></p>\n<p> <code>Lambdas</code>创建了新对象，在低延迟应用中会给<code>gc</code>带来一点点压力。<a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html\" target=\"_blank\" rel=\"noopener\">Escape Analysis</a>(分析对象的使用范围，来做性能优化，比如锁消除，消除对象分配…)能减少这种压力。可以通过jvm参考<code>-XX:BCEATraceLevel=3</code>查看逃逸分析情况，进一步设置<code>-XX:MaxBCEAEstimateSize</code>来调整<code>Maximum bytecode size of a method to be analyzed by BC EA.</code></p>\n<h2 id=\"Catch-common-Java-mistakes-as-compile-time-errors\"><a href=\"#Catch-common-Java-mistakes-as-compile-time-errors\" class=\"headerlink\" title=\"Catch common Java mistakes as compile-time errors\"></a>Catch common Java mistakes as compile-time errors</h2><p><a href=\"http://errorprone.info/\" target=\"_blank\" rel=\"noopener\">http://errorprone.info/</a></p>\n<p>静态代码分析工具又添一员，在编译时检查常见的java代码错误。在jdk8下貌似run不起来。</p>\n"},{"title":"2015年01月Reading Notes","date":"2015-01-11T13:52:17.000Z","_content":"\n\n## 构建类型安全的SQL查询\n[Advanced Spring Data JPA - Specifications and Querydsl](http://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/)\n\n[Querying JPA document](http://www.querydsl.com/static/querydsl/latest/reference/html/ch02.html#jpa_integration)\n\n[querydsl jpa example](https://github.com/querydsl/querydsl-jpa-example)\n\n[`querysql`](http://www.querydsl.com/)很早之前了解过,当时没有看到他的价值，最近在写某业务系统的分页查询过程中，看到基于`Specifications`写的复杂查询语句，有点乱，感觉有点点不爽。\n\njpa 提供了`Metamodel`,但是`Specifications`难用，生成的语法糖也难用。\n\n下面列出几种在spring-data-jpa中使用查询的例子：\n\n### 1.使用querydsl：\n\n\t public List<SchedulerRule> findByOther(String other) {\n\t\tBooleanBuilder builder = new BooleanBuilder();\n\t\tbuilder.or(schedulerRule.memo.containsIgnoreCase(other));\n\t\tbuilder.or(schedulerRule.properties.containsIgnoreCase(other));\n\t\tbuilder.or(schedulerRule.dGroup.containsIgnoreCase(other));\n\t\treturn new JPAQuery(em).from(schedulerRule).where(builder).orderBy(schedulerRule.id.asc()).list(schedulerRule);\n\t  }\n\n### 2.使用原生sql：\n\n    public List<SchedulerRule> findByOther(String other) {\n        return (List<SchedulerRule>) em\n            .createNativeQuery(\n                \"select * from  scheduler_rule where  memo LIKE :other OR properties LIKE :other OR dGroup LIKE :other order by id\",\n                SchedulerRule.class).setParameter(\"other\", \"%\" + other + \"%\").getResultList();\n    }\n    \n### 3.使用`@Query`:\n\n\t@Query(\"from SchedulerRule as rule where mod(rule.id, :clusterSize)= :mod and rule.status = 'NORMAL'\")\n\tList<SchedulerRule> findByClient(@Param(\"clusterSize\") int clusterSize, @Param(\"mod\") int mod);\n\t\n\t\n### 4.使用接口命名生成查询语句：\n\n\tPage<SchedulerRule> findByCreater(String creator, Pageable pageable);\n\n在使用querydsl时，通过配置annotation processor可以很方便的完成代码生成工作：\n\n\t <!--querydsl-->\n            <plugin>\n                <groupId>com.mysema.maven</groupId>\n                <artifactId>apt-maven-plugin</artifactId>\n                <version>1.1.0</version>\n                <configuration>\n                    <processor>com.mysema.query.apt.jpa.JPAAnnotationProcessor</processor>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>com.mysema.querydsl</groupId>\n                        <artifactId>querydsl-apt</artifactId>\n                        <version>3.6.0</version>\n                    </dependency>\n                </dependencies>\n                <executions>\n                    <execution>\n                        <phase>generate-sources</phase>\n                        <goals>\n                            <goal>process</goal>\n                        </goals>\n                        <configuration>\n                            <outputDirectory>src/gen/java</outputDirectory>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            \n            \n## ActiveJPA——针对JPA的活动记录模式\n[http://www.infoq.com/cn/articles/ActiveJPA](http://www.infoq.com/cn/articles/ActiveJPA)\n\n活动记录模式在使用上来说，还是很happy的。但是造成的问题是：1.`entity`和`DO`耦合在一起了，如果业务复杂，还是老老实实的`DDD`吧。2.复杂的查询可能还是需要借助`DAO`。如果自己来实现，考虑上关系映射，最后就是活脱脱的一个hibernat出来了。这个框架借助`JPA`的能力，简单的实现了活动记录模式。\n\n作者通过`java instrument api`+`javassit`来生成便于使用的静态方法(不需要提供类型信息)。\n\n\n## 用betamax mock掉外部http/https依赖\n[http://freeside.co/betamax/](http://freeside.co/betamax/)\n\n`betamax`在你的应用和外部应用之间架起了proxy.他会录制第一次请求，在本地文件系统中生成`Tape`，后续的请求就不会调用目标服务了。我们可以把`tape`存放在`VCS`中，也可以编辑此文件，满足特殊需求。\n\n## Building a Robust and Secure Web Application With Velocity\n[http://wiki.apache.org/velocity/BuildingSecureWebApplications](http://wiki.apache.org/velocity/BuildingSecureWebApplications)\n\n这篇文章很老了，但是很值得参考下。\n\n### Best Practices In Building A Secure, Robust Velocity Web Application\n\n\n\n1. Review all context references for unwanted methods.\n\n\t不要在Context中放入能改变程序状态的引用。\n\n2. Encode HTML special characters to avoid cross-scripting vulnerabilities.\n\n\t可以通过`EscapeHtmlReference`对符合特定模式的引用进行过滤。\n\n3. Use an up-to-date and properly configured app server.\n\n\t里面提到通过`Java Security Manager `来限制应用的行为。这也是一种不错的方式，只是灵活性不好。可以采用findbugs来检查静态代码，再控制好上传的文件/对系统的直接调用就ok了。\n\t\n\n4. Configure Velocity for production use.\n\n\t创建`EventCartridge`和`Event Handlers`来捕获异常，并记录进日志。这个工作在`com.yjf.common.util.Velocitys`里面是做了的。但是spring mvc集成 velocity可以做下。提前发现异常(上次CRSF过滤器配置出错导致的页面乱了)。\n\t\n## jello--Front End Integrated Solution for J2EE Velocity\n[https://github.com/fex-team/jello](https://github.com/fex-team/jello)\n\n[http://106.186.23.103:8080/](http://106.186.23.103:8080/)\n\n使用velocity的同学可以关注下：jello针对服务端为 JAVA + Velocity 的前端集成解决方案。为优化前端开发效率而生，提供前后端开发分离、自动性能优化、模块化开发机制等功能。\n\n[模板技巧](http://106.186.23.103:8080/velocity/index)部分文档适合学习velocity的同学看看。\n\n## 模板引擎的选择\n\n关于thymeleaf的性能：http://forum.thymeleaf.org/Performance-issue-td3722763.html\n模式freemarker性能最强，thymeleaf性能差距太大\n\n比较JVM上的模板引擎： http://www.slideshare.net/jreijn/comparing-templateenginesjvm\n\nthymeleaf的优点主要在和前端结合起来很不错，前端切完图，然后加上动态数据的部分就ok了。页面不需要服务端也能渲染出来。","source":"_posts/2015-01-reading-notes.md","raw":"---\ntitle: 2015年01月Reading Notes\ndate: 2015-01-11 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n---\n\n\n## 构建类型安全的SQL查询\n[Advanced Spring Data JPA - Specifications and Querydsl](http://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/)\n\n[Querying JPA document](http://www.querydsl.com/static/querydsl/latest/reference/html/ch02.html#jpa_integration)\n\n[querydsl jpa example](https://github.com/querydsl/querydsl-jpa-example)\n\n[`querysql`](http://www.querydsl.com/)很早之前了解过,当时没有看到他的价值，最近在写某业务系统的分页查询过程中，看到基于`Specifications`写的复杂查询语句，有点乱，感觉有点点不爽。\n\njpa 提供了`Metamodel`,但是`Specifications`难用，生成的语法糖也难用。\n\n下面列出几种在spring-data-jpa中使用查询的例子：\n\n### 1.使用querydsl：\n\n\t public List<SchedulerRule> findByOther(String other) {\n\t\tBooleanBuilder builder = new BooleanBuilder();\n\t\tbuilder.or(schedulerRule.memo.containsIgnoreCase(other));\n\t\tbuilder.or(schedulerRule.properties.containsIgnoreCase(other));\n\t\tbuilder.or(schedulerRule.dGroup.containsIgnoreCase(other));\n\t\treturn new JPAQuery(em).from(schedulerRule).where(builder).orderBy(schedulerRule.id.asc()).list(schedulerRule);\n\t  }\n\n### 2.使用原生sql：\n\n    public List<SchedulerRule> findByOther(String other) {\n        return (List<SchedulerRule>) em\n            .createNativeQuery(\n                \"select * from  scheduler_rule where  memo LIKE :other OR properties LIKE :other OR dGroup LIKE :other order by id\",\n                SchedulerRule.class).setParameter(\"other\", \"%\" + other + \"%\").getResultList();\n    }\n    \n### 3.使用`@Query`:\n\n\t@Query(\"from SchedulerRule as rule where mod(rule.id, :clusterSize)= :mod and rule.status = 'NORMAL'\")\n\tList<SchedulerRule> findByClient(@Param(\"clusterSize\") int clusterSize, @Param(\"mod\") int mod);\n\t\n\t\n### 4.使用接口命名生成查询语句：\n\n\tPage<SchedulerRule> findByCreater(String creator, Pageable pageable);\n\n在使用querydsl时，通过配置annotation processor可以很方便的完成代码生成工作：\n\n\t <!--querydsl-->\n            <plugin>\n                <groupId>com.mysema.maven</groupId>\n                <artifactId>apt-maven-plugin</artifactId>\n                <version>1.1.0</version>\n                <configuration>\n                    <processor>com.mysema.query.apt.jpa.JPAAnnotationProcessor</processor>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>com.mysema.querydsl</groupId>\n                        <artifactId>querydsl-apt</artifactId>\n                        <version>3.6.0</version>\n                    </dependency>\n                </dependencies>\n                <executions>\n                    <execution>\n                        <phase>generate-sources</phase>\n                        <goals>\n                            <goal>process</goal>\n                        </goals>\n                        <configuration>\n                            <outputDirectory>src/gen/java</outputDirectory>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            \n            \n## ActiveJPA——针对JPA的活动记录模式\n[http://www.infoq.com/cn/articles/ActiveJPA](http://www.infoq.com/cn/articles/ActiveJPA)\n\n活动记录模式在使用上来说，还是很happy的。但是造成的问题是：1.`entity`和`DO`耦合在一起了，如果业务复杂，还是老老实实的`DDD`吧。2.复杂的查询可能还是需要借助`DAO`。如果自己来实现，考虑上关系映射，最后就是活脱脱的一个hibernat出来了。这个框架借助`JPA`的能力，简单的实现了活动记录模式。\n\n作者通过`java instrument api`+`javassit`来生成便于使用的静态方法(不需要提供类型信息)。\n\n\n## 用betamax mock掉外部http/https依赖\n[http://freeside.co/betamax/](http://freeside.co/betamax/)\n\n`betamax`在你的应用和外部应用之间架起了proxy.他会录制第一次请求，在本地文件系统中生成`Tape`，后续的请求就不会调用目标服务了。我们可以把`tape`存放在`VCS`中，也可以编辑此文件，满足特殊需求。\n\n## Building a Robust and Secure Web Application With Velocity\n[http://wiki.apache.org/velocity/BuildingSecureWebApplications](http://wiki.apache.org/velocity/BuildingSecureWebApplications)\n\n这篇文章很老了，但是很值得参考下。\n\n### Best Practices In Building A Secure, Robust Velocity Web Application\n\n\n\n1. Review all context references for unwanted methods.\n\n\t不要在Context中放入能改变程序状态的引用。\n\n2. Encode HTML special characters to avoid cross-scripting vulnerabilities.\n\n\t可以通过`EscapeHtmlReference`对符合特定模式的引用进行过滤。\n\n3. Use an up-to-date and properly configured app server.\n\n\t里面提到通过`Java Security Manager `来限制应用的行为。这也是一种不错的方式，只是灵活性不好。可以采用findbugs来检查静态代码，再控制好上传的文件/对系统的直接调用就ok了。\n\t\n\n4. Configure Velocity for production use.\n\n\t创建`EventCartridge`和`Event Handlers`来捕获异常，并记录进日志。这个工作在`com.yjf.common.util.Velocitys`里面是做了的。但是spring mvc集成 velocity可以做下。提前发现异常(上次CRSF过滤器配置出错导致的页面乱了)。\n\t\n## jello--Front End Integrated Solution for J2EE Velocity\n[https://github.com/fex-team/jello](https://github.com/fex-team/jello)\n\n[http://106.186.23.103:8080/](http://106.186.23.103:8080/)\n\n使用velocity的同学可以关注下：jello针对服务端为 JAVA + Velocity 的前端集成解决方案。为优化前端开发效率而生，提供前后端开发分离、自动性能优化、模块化开发机制等功能。\n\n[模板技巧](http://106.186.23.103:8080/velocity/index)部分文档适合学习velocity的同学看看。\n\n## 模板引擎的选择\n\n关于thymeleaf的性能：http://forum.thymeleaf.org/Performance-issue-td3722763.html\n模式freemarker性能最强，thymeleaf性能差距太大\n\n比较JVM上的模板引擎： http://www.slideshare.net/jreijn/comparing-templateenginesjvm\n\nthymeleaf的优点主要在和前端结合起来很不错，前端切完图，然后加上动态数据的部分就ok了。页面不需要服务端也能渲染出来。","slug":"2015-01-reading-notes","published":1,"updated":"2018-04-01T16:53:17.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksga0011p0ugbfed7yv5","content":"<h2 id=\"构建类型安全的SQL查询\"><a href=\"#构建类型安全的SQL查询\" class=\"headerlink\" title=\"构建类型安全的SQL查询\"></a>构建类型安全的SQL查询</h2><p><a href=\"http://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/\" target=\"_blank\" rel=\"noopener\">Advanced Spring Data JPA - Specifications and Querydsl</a></p>\n<p><a href=\"http://www.querydsl.com/static/querydsl/latest/reference/html/ch02.html#jpa_integration\" target=\"_blank\" rel=\"noopener\">Querying JPA document</a></p>\n<p><a href=\"https://github.com/querydsl/querydsl-jpa-example\" target=\"_blank\" rel=\"noopener\">querydsl jpa example</a></p>\n<p><a href=\"http://www.querydsl.com/\" target=\"_blank\" rel=\"noopener\"><code>querysql</code></a>很早之前了解过,当时没有看到他的价值，最近在写某业务系统的分页查询过程中，看到基于<code>Specifications</code>写的复杂查询语句，有点乱，感觉有点点不爽。</p>\n<p>jpa 提供了<code>Metamodel</code>,但是<code>Specifications</code>难用，生成的语法糖也难用。</p>\n<p>下面列出几种在spring-data-jpa中使用查询的例子：</p>\n<h3 id=\"1-使用querydsl：\"><a href=\"#1-使用querydsl：\" class=\"headerlink\" title=\"1.使用querydsl：\"></a>1.使用querydsl：</h3><pre><code>public List&lt;SchedulerRule&gt; findByOther(String other) {\n   BooleanBuilder builder = new BooleanBuilder();\n   builder.or(schedulerRule.memo.containsIgnoreCase(other));\n   builder.or(schedulerRule.properties.containsIgnoreCase(other));\n   builder.or(schedulerRule.dGroup.containsIgnoreCase(other));\n   return new JPAQuery(em).from(schedulerRule).where(builder).orderBy(schedulerRule.id.asc()).list(schedulerRule);\n }\n</code></pre><h3 id=\"2-使用原生sql：\"><a href=\"#2-使用原生sql：\" class=\"headerlink\" title=\"2.使用原生sql：\"></a>2.使用原生sql：</h3><pre><code>public List&lt;SchedulerRule&gt; findByOther(String other) {\n    return (List&lt;SchedulerRule&gt;) em\n        .createNativeQuery(\n            &quot;select * from  scheduler_rule where  memo LIKE :other OR properties LIKE :other OR dGroup LIKE :other order by id&quot;,\n            SchedulerRule.class).setParameter(&quot;other&quot;, &quot;%&quot; + other + &quot;%&quot;).getResultList();\n}\n</code></pre><h3 id=\"3-使用-Query\"><a href=\"#3-使用-Query\" class=\"headerlink\" title=\"3.使用@Query:\"></a>3.使用<code>@Query</code>:</h3><pre><code>@Query(&quot;from SchedulerRule as rule where mod(rule.id, :clusterSize)= :mod and rule.status = &apos;NORMAL&apos;&quot;)\nList&lt;SchedulerRule&gt; findByClient(@Param(&quot;clusterSize&quot;) int clusterSize, @Param(&quot;mod&quot;) int mod);\n</code></pre><h3 id=\"4-使用接口命名生成查询语句：\"><a href=\"#4-使用接口命名生成查询语句：\" class=\"headerlink\" title=\"4.使用接口命名生成查询语句：\"></a>4.使用接口命名生成查询语句：</h3><pre><code>Page&lt;SchedulerRule&gt; findByCreater(String creator, Pageable pageable);\n</code></pre><p>在使用querydsl时，通过配置annotation processor可以很方便的完成代码生成工作：</p>\n<pre><code>&lt;!--querydsl--&gt;\n       &lt;plugin&gt;\n           &lt;groupId&gt;com.mysema.maven&lt;/groupId&gt;\n           &lt;artifactId&gt;apt-maven-plugin&lt;/artifactId&gt;\n           &lt;version&gt;1.1.0&lt;/version&gt;\n           &lt;configuration&gt;\n               &lt;processor&gt;com.mysema.query.apt.jpa.JPAAnnotationProcessor&lt;/processor&gt;\n           &lt;/configuration&gt;\n           &lt;dependencies&gt;\n               &lt;dependency&gt;\n                   &lt;groupId&gt;com.mysema.querydsl&lt;/groupId&gt;\n                   &lt;artifactId&gt;querydsl-apt&lt;/artifactId&gt;\n                   &lt;version&gt;3.6.0&lt;/version&gt;\n               &lt;/dependency&gt;\n           &lt;/dependencies&gt;\n           &lt;executions&gt;\n               &lt;execution&gt;\n                   &lt;phase&gt;generate-sources&lt;/phase&gt;\n                   &lt;goals&gt;\n                       &lt;goal&gt;process&lt;/goal&gt;\n                   &lt;/goals&gt;\n                   &lt;configuration&gt;\n                       &lt;outputDirectory&gt;src/gen/java&lt;/outputDirectory&gt;\n                   &lt;/configuration&gt;\n               &lt;/execution&gt;\n           &lt;/executions&gt;\n       &lt;/plugin&gt;\n</code></pre><h2 id=\"ActiveJPA——针对JPA的活动记录模式\"><a href=\"#ActiveJPA——针对JPA的活动记录模式\" class=\"headerlink\" title=\"ActiveJPA——针对JPA的活动记录模式\"></a>ActiveJPA——针对JPA的活动记录模式</h2><p><a href=\"http://www.infoq.com/cn/articles/ActiveJPA\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/ActiveJPA</a></p>\n<p>活动记录模式在使用上来说，还是很happy的。但是造成的问题是：1.<code>entity</code>和<code>DO</code>耦合在一起了，如果业务复杂，还是老老实实的<code>DDD</code>吧。2.复杂的查询可能还是需要借助<code>DAO</code>。如果自己来实现，考虑上关系映射，最后就是活脱脱的一个hibernat出来了。这个框架借助<code>JPA</code>的能力，简单的实现了活动记录模式。</p>\n<p>作者通过<code>java instrument api</code>+<code>javassit</code>来生成便于使用的静态方法(不需要提供类型信息)。</p>\n<h2 id=\"用betamax-mock掉外部http-https依赖\"><a href=\"#用betamax-mock掉外部http-https依赖\" class=\"headerlink\" title=\"用betamax mock掉外部http/https依赖\"></a>用betamax mock掉外部http/https依赖</h2><p><a href=\"http://freeside.co/betamax/\" target=\"_blank\" rel=\"noopener\">http://freeside.co/betamax/</a></p>\n<p><code>betamax</code>在你的应用和外部应用之间架起了proxy.他会录制第一次请求，在本地文件系统中生成<code>Tape</code>，后续的请求就不会调用目标服务了。我们可以把<code>tape</code>存放在<code>VCS</code>中，也可以编辑此文件，满足特殊需求。</p>\n<h2 id=\"Building-a-Robust-and-Secure-Web-Application-With-Velocity\"><a href=\"#Building-a-Robust-and-Secure-Web-Application-With-Velocity\" class=\"headerlink\" title=\"Building a Robust and Secure Web Application With Velocity\"></a>Building a Robust and Secure Web Application With Velocity</h2><p><a href=\"http://wiki.apache.org/velocity/BuildingSecureWebApplications\" target=\"_blank\" rel=\"noopener\">http://wiki.apache.org/velocity/BuildingSecureWebApplications</a></p>\n<p>这篇文章很老了，但是很值得参考下。</p>\n<h3 id=\"Best-Practices-In-Building-A-Secure-Robust-Velocity-Web-Application\"><a href=\"#Best-Practices-In-Building-A-Secure-Robust-Velocity-Web-Application\" class=\"headerlink\" title=\"Best Practices In Building A Secure, Robust Velocity Web Application\"></a>Best Practices In Building A Secure, Robust Velocity Web Application</h3><ol>\n<li><p>Review all context references for unwanted methods.</p>\n<p> 不要在Context中放入能改变程序状态的引用。</p>\n</li>\n<li><p>Encode HTML special characters to avoid cross-scripting vulnerabilities.</p>\n<p> 可以通过<code>EscapeHtmlReference</code>对符合特定模式的引用进行过滤。</p>\n</li>\n<li><p>Use an up-to-date and properly configured app server.</p>\n<p> 里面提到通过<code>Java Security Manager</code>来限制应用的行为。这也是一种不错的方式，只是灵活性不好。可以采用findbugs来检查静态代码，再控制好上传的文件/对系统的直接调用就ok了。</p>\n</li>\n</ol>\n<ol>\n<li><p>Configure Velocity for production use.</p>\n<p> 创建<code>EventCartridge</code>和<code>Event Handlers</code>来捕获异常，并记录进日志。这个工作在<code>com.yjf.common.util.Velocitys</code>里面是做了的。但是spring mvc集成 velocity可以做下。提前发现异常(上次CRSF过滤器配置出错导致的页面乱了)。</p>\n</li>\n</ol>\n<h2 id=\"jello–Front-End-Integrated-Solution-for-J2EE-Velocity\"><a href=\"#jello–Front-End-Integrated-Solution-for-J2EE-Velocity\" class=\"headerlink\" title=\"jello–Front End Integrated Solution for J2EE Velocity\"></a>jello–Front End Integrated Solution for J2EE Velocity</h2><p><a href=\"https://github.com/fex-team/jello\" target=\"_blank\" rel=\"noopener\">https://github.com/fex-team/jello</a></p>\n<p><a href=\"http://106.186.23.103:8080/\" target=\"_blank\" rel=\"noopener\">http://106.186.23.103:8080/</a></p>\n<p>使用velocity的同学可以关注下：jello针对服务端为 JAVA + Velocity 的前端集成解决方案。为优化前端开发效率而生，提供前后端开发分离、自动性能优化、模块化开发机制等功能。</p>\n<p><a href=\"http://106.186.23.103:8080/velocity/index\" target=\"_blank\" rel=\"noopener\">模板技巧</a>部分文档适合学习velocity的同学看看。</p>\n<h2 id=\"模板引擎的选择\"><a href=\"#模板引擎的选择\" class=\"headerlink\" title=\"模板引擎的选择\"></a>模板引擎的选择</h2><p>关于thymeleaf的性能：<a href=\"http://forum.thymeleaf.org/Performance-issue-td3722763.html\" target=\"_blank\" rel=\"noopener\">http://forum.thymeleaf.org/Performance-issue-td3722763.html</a><br>模式freemarker性能最强，thymeleaf性能差距太大</p>\n<p>比较JVM上的模板引擎： <a href=\"http://www.slideshare.net/jreijn/comparing-templateenginesjvm\" target=\"_blank\" rel=\"noopener\">http://www.slideshare.net/jreijn/comparing-templateenginesjvm</a></p>\n<p>thymeleaf的优点主要在和前端结合起来很不错，前端切完图，然后加上动态数据的部分就ok了。页面不需要服务端也能渲染出来。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"构建类型安全的SQL查询\"><a href=\"#构建类型安全的SQL查询\" class=\"headerlink\" title=\"构建类型安全的SQL查询\"></a>构建类型安全的SQL查询</h2><p><a href=\"http://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/\" target=\"_blank\" rel=\"noopener\">Advanced Spring Data JPA - Specifications and Querydsl</a></p>\n<p><a href=\"http://www.querydsl.com/static/querydsl/latest/reference/html/ch02.html#jpa_integration\" target=\"_blank\" rel=\"noopener\">Querying JPA document</a></p>\n<p><a href=\"https://github.com/querydsl/querydsl-jpa-example\" target=\"_blank\" rel=\"noopener\">querydsl jpa example</a></p>\n<p><a href=\"http://www.querydsl.com/\" target=\"_blank\" rel=\"noopener\"><code>querysql</code></a>很早之前了解过,当时没有看到他的价值，最近在写某业务系统的分页查询过程中，看到基于<code>Specifications</code>写的复杂查询语句，有点乱，感觉有点点不爽。</p>\n<p>jpa 提供了<code>Metamodel</code>,但是<code>Specifications</code>难用，生成的语法糖也难用。</p>\n<p>下面列出几种在spring-data-jpa中使用查询的例子：</p>\n<h3 id=\"1-使用querydsl：\"><a href=\"#1-使用querydsl：\" class=\"headerlink\" title=\"1.使用querydsl：\"></a>1.使用querydsl：</h3><pre><code>public List&lt;SchedulerRule&gt; findByOther(String other) {\n   BooleanBuilder builder = new BooleanBuilder();\n   builder.or(schedulerRule.memo.containsIgnoreCase(other));\n   builder.or(schedulerRule.properties.containsIgnoreCase(other));\n   builder.or(schedulerRule.dGroup.containsIgnoreCase(other));\n   return new JPAQuery(em).from(schedulerRule).where(builder).orderBy(schedulerRule.id.asc()).list(schedulerRule);\n }\n</code></pre><h3 id=\"2-使用原生sql：\"><a href=\"#2-使用原生sql：\" class=\"headerlink\" title=\"2.使用原生sql：\"></a>2.使用原生sql：</h3><pre><code>public List&lt;SchedulerRule&gt; findByOther(String other) {\n    return (List&lt;SchedulerRule&gt;) em\n        .createNativeQuery(\n            &quot;select * from  scheduler_rule where  memo LIKE :other OR properties LIKE :other OR dGroup LIKE :other order by id&quot;,\n            SchedulerRule.class).setParameter(&quot;other&quot;, &quot;%&quot; + other + &quot;%&quot;).getResultList();\n}\n</code></pre><h3 id=\"3-使用-Query\"><a href=\"#3-使用-Query\" class=\"headerlink\" title=\"3.使用@Query:\"></a>3.使用<code>@Query</code>:</h3><pre><code>@Query(&quot;from SchedulerRule as rule where mod(rule.id, :clusterSize)= :mod and rule.status = &apos;NORMAL&apos;&quot;)\nList&lt;SchedulerRule&gt; findByClient(@Param(&quot;clusterSize&quot;) int clusterSize, @Param(&quot;mod&quot;) int mod);\n</code></pre><h3 id=\"4-使用接口命名生成查询语句：\"><a href=\"#4-使用接口命名生成查询语句：\" class=\"headerlink\" title=\"4.使用接口命名生成查询语句：\"></a>4.使用接口命名生成查询语句：</h3><pre><code>Page&lt;SchedulerRule&gt; findByCreater(String creator, Pageable pageable);\n</code></pre><p>在使用querydsl时，通过配置annotation processor可以很方便的完成代码生成工作：</p>\n<pre><code>&lt;!--querydsl--&gt;\n       &lt;plugin&gt;\n           &lt;groupId&gt;com.mysema.maven&lt;/groupId&gt;\n           &lt;artifactId&gt;apt-maven-plugin&lt;/artifactId&gt;\n           &lt;version&gt;1.1.0&lt;/version&gt;\n           &lt;configuration&gt;\n               &lt;processor&gt;com.mysema.query.apt.jpa.JPAAnnotationProcessor&lt;/processor&gt;\n           &lt;/configuration&gt;\n           &lt;dependencies&gt;\n               &lt;dependency&gt;\n                   &lt;groupId&gt;com.mysema.querydsl&lt;/groupId&gt;\n                   &lt;artifactId&gt;querydsl-apt&lt;/artifactId&gt;\n                   &lt;version&gt;3.6.0&lt;/version&gt;\n               &lt;/dependency&gt;\n           &lt;/dependencies&gt;\n           &lt;executions&gt;\n               &lt;execution&gt;\n                   &lt;phase&gt;generate-sources&lt;/phase&gt;\n                   &lt;goals&gt;\n                       &lt;goal&gt;process&lt;/goal&gt;\n                   &lt;/goals&gt;\n                   &lt;configuration&gt;\n                       &lt;outputDirectory&gt;src/gen/java&lt;/outputDirectory&gt;\n                   &lt;/configuration&gt;\n               &lt;/execution&gt;\n           &lt;/executions&gt;\n       &lt;/plugin&gt;\n</code></pre><h2 id=\"ActiveJPA——针对JPA的活动记录模式\"><a href=\"#ActiveJPA——针对JPA的活动记录模式\" class=\"headerlink\" title=\"ActiveJPA——针对JPA的活动记录模式\"></a>ActiveJPA——针对JPA的活动记录模式</h2><p><a href=\"http://www.infoq.com/cn/articles/ActiveJPA\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/ActiveJPA</a></p>\n<p>活动记录模式在使用上来说，还是很happy的。但是造成的问题是：1.<code>entity</code>和<code>DO</code>耦合在一起了，如果业务复杂，还是老老实实的<code>DDD</code>吧。2.复杂的查询可能还是需要借助<code>DAO</code>。如果自己来实现，考虑上关系映射，最后就是活脱脱的一个hibernat出来了。这个框架借助<code>JPA</code>的能力，简单的实现了活动记录模式。</p>\n<p>作者通过<code>java instrument api</code>+<code>javassit</code>来生成便于使用的静态方法(不需要提供类型信息)。</p>\n<h2 id=\"用betamax-mock掉外部http-https依赖\"><a href=\"#用betamax-mock掉外部http-https依赖\" class=\"headerlink\" title=\"用betamax mock掉外部http/https依赖\"></a>用betamax mock掉外部http/https依赖</h2><p><a href=\"http://freeside.co/betamax/\" target=\"_blank\" rel=\"noopener\">http://freeside.co/betamax/</a></p>\n<p><code>betamax</code>在你的应用和外部应用之间架起了proxy.他会录制第一次请求，在本地文件系统中生成<code>Tape</code>，后续的请求就不会调用目标服务了。我们可以把<code>tape</code>存放在<code>VCS</code>中，也可以编辑此文件，满足特殊需求。</p>\n<h2 id=\"Building-a-Robust-and-Secure-Web-Application-With-Velocity\"><a href=\"#Building-a-Robust-and-Secure-Web-Application-With-Velocity\" class=\"headerlink\" title=\"Building a Robust and Secure Web Application With Velocity\"></a>Building a Robust and Secure Web Application With Velocity</h2><p><a href=\"http://wiki.apache.org/velocity/BuildingSecureWebApplications\" target=\"_blank\" rel=\"noopener\">http://wiki.apache.org/velocity/BuildingSecureWebApplications</a></p>\n<p>这篇文章很老了，但是很值得参考下。</p>\n<h3 id=\"Best-Practices-In-Building-A-Secure-Robust-Velocity-Web-Application\"><a href=\"#Best-Practices-In-Building-A-Secure-Robust-Velocity-Web-Application\" class=\"headerlink\" title=\"Best Practices In Building A Secure, Robust Velocity Web Application\"></a>Best Practices In Building A Secure, Robust Velocity Web Application</h3><ol>\n<li><p>Review all context references for unwanted methods.</p>\n<p> 不要在Context中放入能改变程序状态的引用。</p>\n</li>\n<li><p>Encode HTML special characters to avoid cross-scripting vulnerabilities.</p>\n<p> 可以通过<code>EscapeHtmlReference</code>对符合特定模式的引用进行过滤。</p>\n</li>\n<li><p>Use an up-to-date and properly configured app server.</p>\n<p> 里面提到通过<code>Java Security Manager</code>来限制应用的行为。这也是一种不错的方式，只是灵活性不好。可以采用findbugs来检查静态代码，再控制好上传的文件/对系统的直接调用就ok了。</p>\n</li>\n</ol>\n<ol>\n<li><p>Configure Velocity for production use.</p>\n<p> 创建<code>EventCartridge</code>和<code>Event Handlers</code>来捕获异常，并记录进日志。这个工作在<code>com.yjf.common.util.Velocitys</code>里面是做了的。但是spring mvc集成 velocity可以做下。提前发现异常(上次CRSF过滤器配置出错导致的页面乱了)。</p>\n</li>\n</ol>\n<h2 id=\"jello–Front-End-Integrated-Solution-for-J2EE-Velocity\"><a href=\"#jello–Front-End-Integrated-Solution-for-J2EE-Velocity\" class=\"headerlink\" title=\"jello–Front End Integrated Solution for J2EE Velocity\"></a>jello–Front End Integrated Solution for J2EE Velocity</h2><p><a href=\"https://github.com/fex-team/jello\" target=\"_blank\" rel=\"noopener\">https://github.com/fex-team/jello</a></p>\n<p><a href=\"http://106.186.23.103:8080/\" target=\"_blank\" rel=\"noopener\">http://106.186.23.103:8080/</a></p>\n<p>使用velocity的同学可以关注下：jello针对服务端为 JAVA + Velocity 的前端集成解决方案。为优化前端开发效率而生，提供前后端开发分离、自动性能优化、模块化开发机制等功能。</p>\n<p><a href=\"http://106.186.23.103:8080/velocity/index\" target=\"_blank\" rel=\"noopener\">模板技巧</a>部分文档适合学习velocity的同学看看。</p>\n<h2 id=\"模板引擎的选择\"><a href=\"#模板引擎的选择\" class=\"headerlink\" title=\"模板引擎的选择\"></a>模板引擎的选择</h2><p>关于thymeleaf的性能：<a href=\"http://forum.thymeleaf.org/Performance-issue-td3722763.html\" target=\"_blank\" rel=\"noopener\">http://forum.thymeleaf.org/Performance-issue-td3722763.html</a><br>模式freemarker性能最强，thymeleaf性能差距太大</p>\n<p>比较JVM上的模板引擎： <a href=\"http://www.slideshare.net/jreijn/comparing-templateenginesjvm\" target=\"_blank\" rel=\"noopener\">http://www.slideshare.net/jreijn/comparing-templateenginesjvm</a></p>\n<p>thymeleaf的优点主要在和前端结合起来很不错，前端切完图，然后加上动态数据的部分就ok了。页面不需要服务端也能渲染出来。</p>\n"},{"title":"2015年03月Reading Notes","date":"2015-03-02T13:52:17.000Z","_content":"\n\n## The Asset Pipeline\n[http://guides.rubyonrails.org/asset_pipeline.html](http://guides.rubyonrails.org/asset_pipeline.html)\n\n`Asset Pipeline`对网站的静态资源进行预处理(合并、简化、压缩、预处理coffeescirpt sass等)。对于静态资源的处理，这里面提到的`Fingerprinting`来优化http 缓存可以借鉴下。\n\n`Fingerprinting`技术是在文件名中加上文件内容的标识，当文件内容改变时，文件名也改变。比如文件`global.css`加入md5的指纹后，文件名为`global-908e25f4bf641868d8683022a5b62f54.css`.\n\n以前我们经常用`query string`中来标识版本，比如`main.js?1.4`/`main.js?v=1.4`.这种方式在某些CDN中有问题(有些CDN只识别文件名，新的版本文件会替换原版本的文件，在部署这个时间窗口会导致页面混乱)。\n\n在使用浏览器缓存时，一般涉及到http header包括下面两种方案:\n\n1. `Expires`和`Cache-Control: max-age` (没有过期之前，完全不发送请求)\n2. `Last-Modifed`和`ETag` (内容协商，需要发一个请求，如果内容没有变化，响应304)\n\n当方案2和`Fingerprinting`结合起来时，就比较完美了。对于现在很多开放CDN来讲，基本上都会用方案1，这是开源库名字里面的版本号就起着`Fingerprinting`的作用。也有用方案2的，估计是出于统计分析的目的。\n\n对于静态资源的缓存，理想的组合是：\n\n1. 配置很长的本地缓存时间(善用`Expires`和`Cache-Control: max-age`)，比如1年\n2. 通过`Fingerprinting`控制缓存(静态资源文件改变，对应的html的资源引用url也改变)\n","source":"_posts/2015-03-reading-notes.md","raw":"---\ntitle: 2015年03月Reading Notes\ndate: 2015-03-02 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n---\n\n\n## The Asset Pipeline\n[http://guides.rubyonrails.org/asset_pipeline.html](http://guides.rubyonrails.org/asset_pipeline.html)\n\n`Asset Pipeline`对网站的静态资源进行预处理(合并、简化、压缩、预处理coffeescirpt sass等)。对于静态资源的处理，这里面提到的`Fingerprinting`来优化http 缓存可以借鉴下。\n\n`Fingerprinting`技术是在文件名中加上文件内容的标识，当文件内容改变时，文件名也改变。比如文件`global.css`加入md5的指纹后，文件名为`global-908e25f4bf641868d8683022a5b62f54.css`.\n\n以前我们经常用`query string`中来标识版本，比如`main.js?1.4`/`main.js?v=1.4`.这种方式在某些CDN中有问题(有些CDN只识别文件名，新的版本文件会替换原版本的文件，在部署这个时间窗口会导致页面混乱)。\n\n在使用浏览器缓存时，一般涉及到http header包括下面两种方案:\n\n1. `Expires`和`Cache-Control: max-age` (没有过期之前，完全不发送请求)\n2. `Last-Modifed`和`ETag` (内容协商，需要发一个请求，如果内容没有变化，响应304)\n\n当方案2和`Fingerprinting`结合起来时，就比较完美了。对于现在很多开放CDN来讲，基本上都会用方案1，这是开源库名字里面的版本号就起着`Fingerprinting`的作用。也有用方案2的，估计是出于统计分析的目的。\n\n对于静态资源的缓存，理想的组合是：\n\n1. 配置很长的本地缓存时间(善用`Expires`和`Cache-Control: max-age`)，比如1年\n2. 通过`Fingerprinting`控制缓存(静态资源文件改变，对应的html的资源引用url也改变)\n","slug":"2015-03-reading-notes","published":1,"updated":"2018-04-01T17:20:32.815Z","_id":"cjfh2ksgc0014p0ugiswfcwzj","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"The-Asset-Pipeline\"><a href=\"#The-Asset-Pipeline\" class=\"headerlink\" title=\"The Asset Pipeline\"></a>The Asset Pipeline</h2><p><a href=\"http://guides.rubyonrails.org/asset_pipeline.html\" target=\"_blank\" rel=\"noopener\">http://guides.rubyonrails.org/asset_pipeline.html</a></p>\n<p><code>Asset Pipeline</code>对网站的静态资源进行预处理(合并、简化、压缩、预处理coffeescirpt sass等)。对于静态资源的处理，这里面提到的<code>Fingerprinting</code>来优化http 缓存可以借鉴下。</p>\n<p><code>Fingerprinting</code>技术是在文件名中加上文件内容的标识，当文件内容改变时，文件名也改变。比如文件<code>global.css</code>加入md5的指纹后，文件名为<code>global-908e25f4bf641868d8683022a5b62f54.css</code>.</p>\n<p>以前我们经常用<code>query string</code>中来标识版本，比如<code>main.js?1.4</code>/<code>main.js?v=1.4</code>.这种方式在某些CDN中有问题(有些CDN只识别文件名，新的版本文件会替换原版本的文件，在部署这个时间窗口会导致页面混乱)。</p>\n<p>在使用浏览器缓存时，一般涉及到http header包括下面两种方案:</p>\n<ol>\n<li><code>Expires</code>和<code>Cache-Control: max-age</code> (没有过期之前，完全不发送请求)</li>\n<li><code>Last-Modifed</code>和<code>ETag</code> (内容协商，需要发一个请求，如果内容没有变化，响应304)</li>\n</ol>\n<p>当方案2和<code>Fingerprinting</code>结合起来时，就比较完美了。对于现在很多开放CDN来讲，基本上都会用方案1，这是开源库名字里面的版本号就起着<code>Fingerprinting</code>的作用。也有用方案2的，估计是出于统计分析的目的。</p>\n<p>对于静态资源的缓存，理想的组合是：</p>\n<ol>\n<li>配置很长的本地缓存时间(善用<code>Expires</code>和<code>Cache-Control: max-age</code>)，比如1年</li>\n<li>通过<code>Fingerprinting</code>控制缓存(静态资源文件改变，对应的html的资源引用url也改变)</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"The-Asset-Pipeline\"><a href=\"#The-Asset-Pipeline\" class=\"headerlink\" title=\"The Asset Pipeline\"></a>The Asset Pipeline</h2><p><a href=\"http://guides.rubyonrails.org/asset_pipeline.html\" target=\"_blank\" rel=\"noopener\">http://guides.rubyonrails.org/asset_pipeline.html</a></p>\n<p><code>Asset Pipeline</code>对网站的静态资源进行预处理(合并、简化、压缩、预处理coffeescirpt sass等)。对于静态资源的处理，这里面提到的<code>Fingerprinting</code>来优化http 缓存可以借鉴下。</p>\n<p><code>Fingerprinting</code>技术是在文件名中加上文件内容的标识，当文件内容改变时，文件名也改变。比如文件<code>global.css</code>加入md5的指纹后，文件名为<code>global-908e25f4bf641868d8683022a5b62f54.css</code>.</p>\n<p>以前我们经常用<code>query string</code>中来标识版本，比如<code>main.js?1.4</code>/<code>main.js?v=1.4</code>.这种方式在某些CDN中有问题(有些CDN只识别文件名，新的版本文件会替换原版本的文件，在部署这个时间窗口会导致页面混乱)。</p>\n<p>在使用浏览器缓存时，一般涉及到http header包括下面两种方案:</p>\n<ol>\n<li><code>Expires</code>和<code>Cache-Control: max-age</code> (没有过期之前，完全不发送请求)</li>\n<li><code>Last-Modifed</code>和<code>ETag</code> (内容协商，需要发一个请求，如果内容没有变化，响应304)</li>\n</ol>\n<p>当方案2和<code>Fingerprinting</code>结合起来时，就比较完美了。对于现在很多开放CDN来讲，基本上都会用方案1，这是开源库名字里面的版本号就起着<code>Fingerprinting</code>的作用。也有用方案2的，估计是出于统计分析的目的。</p>\n<p>对于静态资源的缓存，理想的组合是：</p>\n<ol>\n<li>配置很长的本地缓存时间(善用<code>Expires</code>和<code>Cache-Control: max-age</code>)，比如1年</li>\n<li>通过<code>Fingerprinting</code>控制缓存(静态资源文件改变，对应的html的资源引用url也改变)</li>\n</ol>\n"},{"title":"2015年04月Reading Notes","date":"2015-04-01T13:52:17.000Z","_content":"\n## <a name=\"enterprise_nashorn\">Enterprise Nashorn</a>\n[https://community.oracle.com/docs/DOC-910779](https://community.oracle.com/docs/DOC-910779)\n\n本文讲述了`Nashorn`的一些使用场景：\n\n1. 由外部提供计算逻辑，服务端执行计算逻辑返回结果\n2. 用java来定义接口，js来写逻辑，方便动态更新计算逻辑。(比如短信中的路由策略，需要经常更新)\n3. 写shell脚本(访问数据库，访问网络,监控...)\n\n`Nashorn`的性能比前任强多了，但是和java比较还是有差距，主要的性能开销在js->java上。在关注性能的场景，可以在业务使用时，采用方法2，并缓存proxy对象。\n\n\tprivate static String isPrime = \" function test(num) {\\n\" + \"if (num % 2 == 0)\" + \"return false;\" + \"for (var i = 3; i * i <= num; i += 2)\"\n\t\t\t\t\t\t\t\t\t\t+ \"if (num % i == 0)\" + \"return false;\" + \"return true;\" + \"}\";\n\tprivate Supplier<Predicate<Long>> supplier = Suppliers.memoize(() -> getFilter());\n\n\tprivate Predicate getFilter() {\n\t\tInvocable invocable = (Invocable) this.engine;\n\t\ttry {\n\t\t\tthis.engine.eval(isPrime);\n\t\t\treturn invocable.getInterface(Predicate.class);\n\t\t} catch (Exception ex) {\n\t\t\tthrow Throwables.propagate(ex);\n\t\t}\n\t}\n\t@Test\n\tpublic void testJavaScriptWithMemoize() throws Exception {\n\t\tsupplier.get().test(172673l);\n\t}\n\n对比了下`nashorn`和`groovy`的性能：\n\n\tNashornPerfTest.testJavaScript: [measured 50000 out of 51000 rounds, threads: 4 (all cores)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 96, GC.time: 0.25, time.total: 34.20, time.warmup: 3.44, time.bench: 30.76\n\tNashornPerfTest.testJava: [measured 50000 out of 51000 rounds, threads: 4 (all cores)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 0.28, time.warmup: 0.01, time.bench: 0.27\n\tNashornPerfTest.testJavaScriptWithMemoize: [measured 50000 out of 51000 rounds, threads: 4 (all cores)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 0.35, time.warmup: 0.06, time.bench: 0.29\n\tGroovyTest.testGroovyWithMemoize: [measured 50000 out of 51000 rounds, threads: 4 (all cores)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 5, GC.time: 0.07, time.total: 3.86, time.warmup: 1.75, time.bench: 2.11\n\n\n## spring 多线程中两个事务执行顺序控制\n\n有些场景需要控制两个事务的执行顺序，比如事务A执行完后，需要事务B中执行费时操作。因为是费时操作，一般会把事务B放到独立的线程中执行。然而事务A和事务B在不同的线程中，事务B还会依赖事务A提交的数据。如果在事务A中新启动线程执行事务B，有可能事务A还没有提交，就开始执行事务B了。这种场景需要保证事务A提交后，才能在新线程中执行事务B。\n\n可以使用`TransactionSynchronizationManager`来解决这个问题：\n\n\tTransactionSynchronizationManager.registerSynchronization(new TransactionSynchronization(){\n           void afterCommit(){\n                //submit transaction B to threadpool\n           }\n\t})；\n\n在事务A中加上此钩子，在`afterCommit`方法中向线程池提交事务A任务。具体处理代码`AbstractPlatformTransactionManager#triggerAfterCommit`，`ThreadLocal`清理`AbstractPlatformTransactionManager#cleanupAfterCompletion`.\n\n## Web应用的缓存设计模式\n[http://robbinfan.com/blog/38/orm-cache-sumup]()\n\nrobbin大哥讲解了对`ORM`缓存的理解.我司也有不少项目用了`ORM`,大多数人没有使用缓存的意识,有这样意识的同学提到过用`ehcache`,这在单节点的情况下，工作得很好，但是到了线上多机部署，数据不一致的问题就会出现，至少也要选用分布式缓存系统来实现哈。还有一点，因为有了缓存，数据订正这种事情就要谨慎了。\n\n## <a name=\"java_reflect\">java反射的性能</a>\n\n先看看下面的数据：\n\n\tBenchmark                                  Mode  Cnt     Score    Error  Units\n \ttestInvokeMethod_Direct                avgt   20     0.587 ±  0.036  ns/op\n \ttestInvokeMethod_Reflectasm            avgt   20    39.940 ±  1.957  ns/op\n \ttestInvokeMethod_Reflectasm_withCache  avgt   20     9.784 ±  0.745  ns/op\n \ttestInvokeMethod_reflect               avgt   20  1513.409 ± 85.396  ns/op\n \ttestInvokeMethod_reflect_withCache     avgt   20    29.444 ±  1.863  ns/op\n\n上面的数据测试了`直接调用java方法`、`通过反射调用java`、`通过ReflectASM调用java`，`withCache`意思是把中间对象缓存起来。\n反射确实很慢，但是只要把反射对象缓存起来，性能提升很大，`Reflectasm_withCache`比`reflect_withCache`快了3倍多。\n\n`Reflectasm`的原理是生成java源代码来实现反射的调用，下面就是生成的源代码。\n\n\tpackage reflectasm;\n\timport java.util.Map;\n\timport com.esotericsoftware.reflectasm.MethodAccess;\n\tpublic class PojoMethodAccess extends MethodAccess {\n\t\tpublic Object invoke(Object paramObject, int paramInt, Object[] paramArrayOfObject) {\n\t\t\tPojo localPojo = (Pojo) paramObject;\n\t\t\tswitch (paramInt) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn Boolean.valueOf(localPojo.equals((Object) paramArrayOfObject[0]));\n\t\t\t\tcase 1:\n\t\t\t\t\treturn localPojo.toString();\n\t\t\t\tcase 2:\n\t\t\t\t\treturn Integer.valueOf(localPojo.hashCode());\n\t\t\t\tcase 3:\n\t\t\t\t\treturn localPojo.getName();\n\t\t\t\tcase 4:\n\t\t\t\t\tlocalPojo.setName((String) paramArrayOfObject[0]);\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t\tthrow new IllegalArgumentException(\"Method not found: \" + paramInt);\n\t\t}\n\t}\n\n补充:\n\n--\n\n\tROUND 1:\n\tBenchmark                           Mode  Cnt   Score   Error  Units\n \tMHOpto.mh_invoke                    avgt   15  11.332 ± 0.577  ns/op\n \tMHOpto.mh_invokeExact               avgt   15  10.605 ± 0.667  ns/op\n \tMHOpto.mh_invokeExact_static_fianl  avgt   15   3.797 ± 0.201  ns/op\n \tMHOpto.plain                        avgt   15   4.093 ± 0.156  ns/op\n \tMHOpto.reflect                      avgt   15  11.599 ± 0.646  ns/op\n \tMHOpto.unreflect_invoke             avgt   15  11.147 ± 0.743  ns/op\n \tMHOpto.unreflect_invokeExact        avgt   15  11.392 ± 0.518  ns/op\n\n \tROUND 2:\n \tBenchmark                           Mode  Cnt   Score   Error  Units\n\tMHOpto.mh_invoke                    avgt   15  11.799 ± 0.847  ns/op\n\tMHOpto.mh_invokeExact               avgt   15  11.830 ± 0.637  ns/op\n\tMHOpto.mh_invokeExact_static_fianl  avgt   15   4.415 ± 0.191  ns/op\n\tMHOpto.plain                        avgt   15   4.084 ± 0.300  ns/op\n\tMHOpto.reflect                      avgt   15  12.191 ± 0.637  ns/op\n\tMHOpto.unreflect_invoke             avgt   15  11.535 ± 0.816  ns/op\n\tMHOpto.unreflect_invokeExact        avgt   15  11.828 ± 0.666  ns/op\n\n`MethodHandle`太牛叉了。\n\n## <a name=\"spring_async_servelt\" >spring mvc的异步servlet实现</a>\n\nspring异步web处理流程，我们先以`Controller`方法返回`Callable`对象为例\n\n1. http线程处理请求到Controller方法，返回Callable结果\n2. spring选用`CallableMethodReturnValueHandler`来处理Callable结果，提交Callable到线程池，当前http线程返回,参考`WebAsyncManager.startCallableProcessing()`\n3. 线程池中线程执行`Callable`任务，并且`dispatch`请求到容器，参考`WebAsyncManager.setConcurrentResultAndDispatch()`\n4. 容器选取http线程继续处理请求\n\n通过分析源代码，下面几点需要关注下：\n\n1. **dispatch请求后，又会执行filterchain**，我们需要保证filter只执行一次，filter最好继承`OncePerRequestFilter`。\n\n2. spring内置了几种异步结果处理器，`CallableMethodReturnValueHandler`、`AsyncTaskMethodReturnValueHandler`、`DeferredResultMethodReturnValueHandler`分别支持方法返回`Callable`,`WebAsyncTask`,`DeferredResult`。\n\n3. `org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#taskExecutor`此默认线程池为`SimpleAsyncTaskExecutor`，此`taskExecutor`每次都会都会新建线程来处理任务，生产环境建议单独配置线程池。\n","source":"_posts/2015-04-reading-notes.md","raw":"---\ntitle: 2015年04月Reading Notes\ndate: 2015-04-01 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n  - nashorn\n  - java reflect\n---\n\n## <a name=\"enterprise_nashorn\">Enterprise Nashorn</a>\n[https://community.oracle.com/docs/DOC-910779](https://community.oracle.com/docs/DOC-910779)\n\n本文讲述了`Nashorn`的一些使用场景：\n\n1. 由外部提供计算逻辑，服务端执行计算逻辑返回结果\n2. 用java来定义接口，js来写逻辑，方便动态更新计算逻辑。(比如短信中的路由策略，需要经常更新)\n3. 写shell脚本(访问数据库，访问网络,监控...)\n\n`Nashorn`的性能比前任强多了，但是和java比较还是有差距，主要的性能开销在js->java上。在关注性能的场景，可以在业务使用时，采用方法2，并缓存proxy对象。\n\n\tprivate static String isPrime = \" function test(num) {\\n\" + \"if (num % 2 == 0)\" + \"return false;\" + \"for (var i = 3; i * i <= num; i += 2)\"\n\t\t\t\t\t\t\t\t\t\t+ \"if (num % i == 0)\" + \"return false;\" + \"return true;\" + \"}\";\n\tprivate Supplier<Predicate<Long>> supplier = Suppliers.memoize(() -> getFilter());\n\n\tprivate Predicate getFilter() {\n\t\tInvocable invocable = (Invocable) this.engine;\n\t\ttry {\n\t\t\tthis.engine.eval(isPrime);\n\t\t\treturn invocable.getInterface(Predicate.class);\n\t\t} catch (Exception ex) {\n\t\t\tthrow Throwables.propagate(ex);\n\t\t}\n\t}\n\t@Test\n\tpublic void testJavaScriptWithMemoize() throws Exception {\n\t\tsupplier.get().test(172673l);\n\t}\n\n对比了下`nashorn`和`groovy`的性能：\n\n\tNashornPerfTest.testJavaScript: [measured 50000 out of 51000 rounds, threads: 4 (all cores)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 96, GC.time: 0.25, time.total: 34.20, time.warmup: 3.44, time.bench: 30.76\n\tNashornPerfTest.testJava: [measured 50000 out of 51000 rounds, threads: 4 (all cores)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 0.28, time.warmup: 0.01, time.bench: 0.27\n\tNashornPerfTest.testJavaScriptWithMemoize: [measured 50000 out of 51000 rounds, threads: 4 (all cores)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 0.35, time.warmup: 0.06, time.bench: 0.29\n\tGroovyTest.testGroovyWithMemoize: [measured 50000 out of 51000 rounds, threads: 4 (all cores)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 5, GC.time: 0.07, time.total: 3.86, time.warmup: 1.75, time.bench: 2.11\n\n\n## spring 多线程中两个事务执行顺序控制\n\n有些场景需要控制两个事务的执行顺序，比如事务A执行完后，需要事务B中执行费时操作。因为是费时操作，一般会把事务B放到独立的线程中执行。然而事务A和事务B在不同的线程中，事务B还会依赖事务A提交的数据。如果在事务A中新启动线程执行事务B，有可能事务A还没有提交，就开始执行事务B了。这种场景需要保证事务A提交后，才能在新线程中执行事务B。\n\n可以使用`TransactionSynchronizationManager`来解决这个问题：\n\n\tTransactionSynchronizationManager.registerSynchronization(new TransactionSynchronization(){\n           void afterCommit(){\n                //submit transaction B to threadpool\n           }\n\t})；\n\n在事务A中加上此钩子，在`afterCommit`方法中向线程池提交事务A任务。具体处理代码`AbstractPlatformTransactionManager#triggerAfterCommit`，`ThreadLocal`清理`AbstractPlatformTransactionManager#cleanupAfterCompletion`.\n\n## Web应用的缓存设计模式\n[http://robbinfan.com/blog/38/orm-cache-sumup]()\n\nrobbin大哥讲解了对`ORM`缓存的理解.我司也有不少项目用了`ORM`,大多数人没有使用缓存的意识,有这样意识的同学提到过用`ehcache`,这在单节点的情况下，工作得很好，但是到了线上多机部署，数据不一致的问题就会出现，至少也要选用分布式缓存系统来实现哈。还有一点，因为有了缓存，数据订正这种事情就要谨慎了。\n\n## <a name=\"java_reflect\">java反射的性能</a>\n\n先看看下面的数据：\n\n\tBenchmark                                  Mode  Cnt     Score    Error  Units\n \ttestInvokeMethod_Direct                avgt   20     0.587 ±  0.036  ns/op\n \ttestInvokeMethod_Reflectasm            avgt   20    39.940 ±  1.957  ns/op\n \ttestInvokeMethod_Reflectasm_withCache  avgt   20     9.784 ±  0.745  ns/op\n \ttestInvokeMethod_reflect               avgt   20  1513.409 ± 85.396  ns/op\n \ttestInvokeMethod_reflect_withCache     avgt   20    29.444 ±  1.863  ns/op\n\n上面的数据测试了`直接调用java方法`、`通过反射调用java`、`通过ReflectASM调用java`，`withCache`意思是把中间对象缓存起来。\n反射确实很慢，但是只要把反射对象缓存起来，性能提升很大，`Reflectasm_withCache`比`reflect_withCache`快了3倍多。\n\n`Reflectasm`的原理是生成java源代码来实现反射的调用，下面就是生成的源代码。\n\n\tpackage reflectasm;\n\timport java.util.Map;\n\timport com.esotericsoftware.reflectasm.MethodAccess;\n\tpublic class PojoMethodAccess extends MethodAccess {\n\t\tpublic Object invoke(Object paramObject, int paramInt, Object[] paramArrayOfObject) {\n\t\t\tPojo localPojo = (Pojo) paramObject;\n\t\t\tswitch (paramInt) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn Boolean.valueOf(localPojo.equals((Object) paramArrayOfObject[0]));\n\t\t\t\tcase 1:\n\t\t\t\t\treturn localPojo.toString();\n\t\t\t\tcase 2:\n\t\t\t\t\treturn Integer.valueOf(localPojo.hashCode());\n\t\t\t\tcase 3:\n\t\t\t\t\treturn localPojo.getName();\n\t\t\t\tcase 4:\n\t\t\t\t\tlocalPojo.setName((String) paramArrayOfObject[0]);\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t\tthrow new IllegalArgumentException(\"Method not found: \" + paramInt);\n\t\t}\n\t}\n\n补充:\n\n--\n\n\tROUND 1:\n\tBenchmark                           Mode  Cnt   Score   Error  Units\n \tMHOpto.mh_invoke                    avgt   15  11.332 ± 0.577  ns/op\n \tMHOpto.mh_invokeExact               avgt   15  10.605 ± 0.667  ns/op\n \tMHOpto.mh_invokeExact_static_fianl  avgt   15   3.797 ± 0.201  ns/op\n \tMHOpto.plain                        avgt   15   4.093 ± 0.156  ns/op\n \tMHOpto.reflect                      avgt   15  11.599 ± 0.646  ns/op\n \tMHOpto.unreflect_invoke             avgt   15  11.147 ± 0.743  ns/op\n \tMHOpto.unreflect_invokeExact        avgt   15  11.392 ± 0.518  ns/op\n\n \tROUND 2:\n \tBenchmark                           Mode  Cnt   Score   Error  Units\n\tMHOpto.mh_invoke                    avgt   15  11.799 ± 0.847  ns/op\n\tMHOpto.mh_invokeExact               avgt   15  11.830 ± 0.637  ns/op\n\tMHOpto.mh_invokeExact_static_fianl  avgt   15   4.415 ± 0.191  ns/op\n\tMHOpto.plain                        avgt   15   4.084 ± 0.300  ns/op\n\tMHOpto.reflect                      avgt   15  12.191 ± 0.637  ns/op\n\tMHOpto.unreflect_invoke             avgt   15  11.535 ± 0.816  ns/op\n\tMHOpto.unreflect_invokeExact        avgt   15  11.828 ± 0.666  ns/op\n\n`MethodHandle`太牛叉了。\n\n## <a name=\"spring_async_servelt\" >spring mvc的异步servlet实现</a>\n\nspring异步web处理流程，我们先以`Controller`方法返回`Callable`对象为例\n\n1. http线程处理请求到Controller方法，返回Callable结果\n2. spring选用`CallableMethodReturnValueHandler`来处理Callable结果，提交Callable到线程池，当前http线程返回,参考`WebAsyncManager.startCallableProcessing()`\n3. 线程池中线程执行`Callable`任务，并且`dispatch`请求到容器，参考`WebAsyncManager.setConcurrentResultAndDispatch()`\n4. 容器选取http线程继续处理请求\n\n通过分析源代码，下面几点需要关注下：\n\n1. **dispatch请求后，又会执行filterchain**，我们需要保证filter只执行一次，filter最好继承`OncePerRequestFilter`。\n\n2. spring内置了几种异步结果处理器，`CallableMethodReturnValueHandler`、`AsyncTaskMethodReturnValueHandler`、`DeferredResultMethodReturnValueHandler`分别支持方法返回`Callable`,`WebAsyncTask`,`DeferredResult`。\n\n3. `org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#taskExecutor`此默认线程池为`SimpleAsyncTaskExecutor`，此`taskExecutor`每次都会都会新建线程来处理任务，生产环境建议单独配置线程池。\n","slug":"2015-04-reading-notes","published":1,"updated":"2018-04-01T17:21:01.434Z","_id":"cjfh2ksge0018p0ugkexptpxj","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Enterprise-Nashorn\"><a href=\"#Enterprise-Nashorn\" class=\"headerlink\" title=\"Enterprise Nashorn\"></a><a name=\"enterprise_nashorn\">Enterprise Nashorn</a></h2><p><a href=\"https://community.oracle.com/docs/DOC-910779\" target=\"_blank\" rel=\"noopener\">https://community.oracle.com/docs/DOC-910779</a></p>\n<p>本文讲述了<code>Nashorn</code>的一些使用场景：</p>\n<ol>\n<li>由外部提供计算逻辑，服务端执行计算逻辑返回结果</li>\n<li>用java来定义接口，js来写逻辑，方便动态更新计算逻辑。(比如短信中的路由策略，需要经常更新)</li>\n<li>写shell脚本(访问数据库，访问网络,监控…)</li>\n</ol>\n<p><code>Nashorn</code>的性能比前任强多了，但是和java比较还是有差距，主要的性能开销在js-&gt;java上。在关注性能的场景，可以在业务使用时，采用方法2，并缓存proxy对象。</p>\n<pre><code>private static String isPrime = &quot; function test(num) {\\n&quot; + &quot;if (num % 2 == 0)&quot; + &quot;return false;&quot; + &quot;for (var i = 3; i * i &lt;= num; i += 2)&quot;\n                                    + &quot;if (num % i == 0)&quot; + &quot;return false;&quot; + &quot;return true;&quot; + &quot;}&quot;;\nprivate Supplier&lt;Predicate&lt;Long&gt;&gt; supplier = Suppliers.memoize(() -&gt; getFilter());\n\nprivate Predicate getFilter() {\n    Invocable invocable = (Invocable) this.engine;\n    try {\n        this.engine.eval(isPrime);\n        return invocable.getInterface(Predicate.class);\n    } catch (Exception ex) {\n        throw Throwables.propagate(ex);\n    }\n}\n@Test\npublic void testJavaScriptWithMemoize() throws Exception {\n    supplier.get().test(172673l);\n}\n</code></pre><p>对比了下<code>nashorn</code>和<code>groovy</code>的性能：</p>\n<pre><code>NashornPerfTest.testJavaScript: [measured 50000 out of 51000 rounds, threads: 4 (all cores)]\n round: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 96, GC.time: 0.25, time.total: 34.20, time.warmup: 3.44, time.bench: 30.76\nNashornPerfTest.testJava: [measured 50000 out of 51000 rounds, threads: 4 (all cores)]\n round: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 0.28, time.warmup: 0.01, time.bench: 0.27\nNashornPerfTest.testJavaScriptWithMemoize: [measured 50000 out of 51000 rounds, threads: 4 (all cores)]\n round: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 0.35, time.warmup: 0.06, time.bench: 0.29\nGroovyTest.testGroovyWithMemoize: [measured 50000 out of 51000 rounds, threads: 4 (all cores)]\n round: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 5, GC.time: 0.07, time.total: 3.86, time.warmup: 1.75, time.bench: 2.11\n</code></pre><h2 id=\"spring-多线程中两个事务执行顺序控制\"><a href=\"#spring-多线程中两个事务执行顺序控制\" class=\"headerlink\" title=\"spring 多线程中两个事务执行顺序控制\"></a>spring 多线程中两个事务执行顺序控制</h2><p>有些场景需要控制两个事务的执行顺序，比如事务A执行完后，需要事务B中执行费时操作。因为是费时操作，一般会把事务B放到独立的线程中执行。然而事务A和事务B在不同的线程中，事务B还会依赖事务A提交的数据。如果在事务A中新启动线程执行事务B，有可能事务A还没有提交，就开始执行事务B了。这种场景需要保证事务A提交后，才能在新线程中执行事务B。</p>\n<p>可以使用<code>TransactionSynchronizationManager</code>来解决这个问题：</p>\n<pre><code>TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronization(){\n       void afterCommit(){\n            //submit transaction B to threadpool\n       }\n})；\n</code></pre><p>在事务A中加上此钩子，在<code>afterCommit</code>方法中向线程池提交事务A任务。具体处理代码<code>AbstractPlatformTransactionManager#triggerAfterCommit</code>，<code>ThreadLocal</code>清理<code>AbstractPlatformTransactionManager#cleanupAfterCompletion</code>.</p>\n<h2 id=\"Web应用的缓存设计模式\"><a href=\"#Web应用的缓存设计模式\" class=\"headerlink\" title=\"Web应用的缓存设计模式\"></a>Web应用的缓存设计模式</h2><p><a href=\"\">http://robbinfan.com/blog/38/orm-cache-sumup</a></p>\n<p>robbin大哥讲解了对<code>ORM</code>缓存的理解.我司也有不少项目用了<code>ORM</code>,大多数人没有使用缓存的意识,有这样意识的同学提到过用<code>ehcache</code>,这在单节点的情况下，工作得很好，但是到了线上多机部署，数据不一致的问题就会出现，至少也要选用分布式缓存系统来实现哈。还有一点，因为有了缓存，数据订正这种事情就要谨慎了。</p>\n<h2 id=\"java反射的性能\"><a href=\"#java反射的性能\" class=\"headerlink\" title=\"java反射的性能\"></a><a name=\"java_reflect\">java反射的性能</a></h2><p>先看看下面的数据：</p>\n<pre><code>Benchmark                                  Mode  Cnt     Score    Error  Units\n testInvokeMethod_Direct                avgt   20     0.587 ±  0.036  ns/op\n testInvokeMethod_Reflectasm            avgt   20    39.940 ±  1.957  ns/op\n testInvokeMethod_Reflectasm_withCache  avgt   20     9.784 ±  0.745  ns/op\n testInvokeMethod_reflect               avgt   20  1513.409 ± 85.396  ns/op\n testInvokeMethod_reflect_withCache     avgt   20    29.444 ±  1.863  ns/op\n</code></pre><p>上面的数据测试了<code>直接调用java方法</code>、<code>通过反射调用java</code>、<code>通过ReflectASM调用java</code>，<code>withCache</code>意思是把中间对象缓存起来。<br>反射确实很慢，但是只要把反射对象缓存起来，性能提升很大，<code>Reflectasm_withCache</code>比<code>reflect_withCache</code>快了3倍多。</p>\n<p><code>Reflectasm</code>的原理是生成java源代码来实现反射的调用，下面就是生成的源代码。</p>\n<pre><code>package reflectasm;\nimport java.util.Map;\nimport com.esotericsoftware.reflectasm.MethodAccess;\npublic class PojoMethodAccess extends MethodAccess {\n    public Object invoke(Object paramObject, int paramInt, Object[] paramArrayOfObject) {\n        Pojo localPojo = (Pojo) paramObject;\n        switch (paramInt) {\n            case 0:\n                return Boolean.valueOf(localPojo.equals((Object) paramArrayOfObject[0]));\n            case 1:\n                return localPojo.toString();\n            case 2:\n                return Integer.valueOf(localPojo.hashCode());\n            case 3:\n                return localPojo.getName();\n            case 4:\n                localPojo.setName((String) paramArrayOfObject[0]);\n                return null;\n        }\n        throw new IllegalArgumentException(&quot;Method not found: &quot; + paramInt);\n    }\n}\n</code></pre><p>补充:</p>\n<p>–</p>\n<pre><code>ROUND 1:\nBenchmark                           Mode  Cnt   Score   Error  Units\n MHOpto.mh_invoke                    avgt   15  11.332 ± 0.577  ns/op\n MHOpto.mh_invokeExact               avgt   15  10.605 ± 0.667  ns/op\n MHOpto.mh_invokeExact_static_fianl  avgt   15   3.797 ± 0.201  ns/op\n MHOpto.plain                        avgt   15   4.093 ± 0.156  ns/op\n MHOpto.reflect                      avgt   15  11.599 ± 0.646  ns/op\n MHOpto.unreflect_invoke             avgt   15  11.147 ± 0.743  ns/op\n MHOpto.unreflect_invokeExact        avgt   15  11.392 ± 0.518  ns/op\n\n ROUND 2:\n Benchmark                           Mode  Cnt   Score   Error  Units\nMHOpto.mh_invoke                    avgt   15  11.799 ± 0.847  ns/op\nMHOpto.mh_invokeExact               avgt   15  11.830 ± 0.637  ns/op\nMHOpto.mh_invokeExact_static_fianl  avgt   15   4.415 ± 0.191  ns/op\nMHOpto.plain                        avgt   15   4.084 ± 0.300  ns/op\nMHOpto.reflect                      avgt   15  12.191 ± 0.637  ns/op\nMHOpto.unreflect_invoke             avgt   15  11.535 ± 0.816  ns/op\nMHOpto.unreflect_invokeExact        avgt   15  11.828 ± 0.666  ns/op\n</code></pre><p><code>MethodHandle</code>太牛叉了。</p>\n<h2 id=\"spring-mvc的异步servlet实现\"><a href=\"#spring-mvc的异步servlet实现\" class=\"headerlink\" title=\"spring mvc的异步servlet实现\"></a><a name=\"spring_async_servelt\">spring mvc的异步servlet实现</a></h2><p>spring异步web处理流程，我们先以<code>Controller</code>方法返回<code>Callable</code>对象为例</p>\n<ol>\n<li>http线程处理请求到Controller方法，返回Callable结果</li>\n<li>spring选用<code>CallableMethodReturnValueHandler</code>来处理Callable结果，提交Callable到线程池，当前http线程返回,参考<code>WebAsyncManager.startCallableProcessing()</code></li>\n<li>线程池中线程执行<code>Callable</code>任务，并且<code>dispatch</code>请求到容器，参考<code>WebAsyncManager.setConcurrentResultAndDispatch()</code></li>\n<li>容器选取http线程继续处理请求</li>\n</ol>\n<p>通过分析源代码，下面几点需要关注下：</p>\n<ol>\n<li><p><strong>dispatch请求后，又会执行filterchain</strong>，我们需要保证filter只执行一次，filter最好继承<code>OncePerRequestFilter</code>。</p>\n</li>\n<li><p>spring内置了几种异步结果处理器，<code>CallableMethodReturnValueHandler</code>、<code>AsyncTaskMethodReturnValueHandler</code>、<code>DeferredResultMethodReturnValueHandler</code>分别支持方法返回<code>Callable</code>,<code>WebAsyncTask</code>,<code>DeferredResult</code>。</p>\n</li>\n<li><p><code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#taskExecutor</code>此默认线程池为<code>SimpleAsyncTaskExecutor</code>，此<code>taskExecutor</code>每次都会都会新建线程来处理任务，生产环境建议单独配置线程池。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Enterprise-Nashorn\"><a href=\"#Enterprise-Nashorn\" class=\"headerlink\" title=\"Enterprise Nashorn\"></a><a name=\"enterprise_nashorn\">Enterprise Nashorn</a></h2><p><a href=\"https://community.oracle.com/docs/DOC-910779\" target=\"_blank\" rel=\"noopener\">https://community.oracle.com/docs/DOC-910779</a></p>\n<p>本文讲述了<code>Nashorn</code>的一些使用场景：</p>\n<ol>\n<li>由外部提供计算逻辑，服务端执行计算逻辑返回结果</li>\n<li>用java来定义接口，js来写逻辑，方便动态更新计算逻辑。(比如短信中的路由策略，需要经常更新)</li>\n<li>写shell脚本(访问数据库，访问网络,监控…)</li>\n</ol>\n<p><code>Nashorn</code>的性能比前任强多了，但是和java比较还是有差距，主要的性能开销在js-&gt;java上。在关注性能的场景，可以在业务使用时，采用方法2，并缓存proxy对象。</p>\n<pre><code>private static String isPrime = &quot; function test(num) {\\n&quot; + &quot;if (num % 2 == 0)&quot; + &quot;return false;&quot; + &quot;for (var i = 3; i * i &lt;= num; i += 2)&quot;\n                                    + &quot;if (num % i == 0)&quot; + &quot;return false;&quot; + &quot;return true;&quot; + &quot;}&quot;;\nprivate Supplier&lt;Predicate&lt;Long&gt;&gt; supplier = Suppliers.memoize(() -&gt; getFilter());\n\nprivate Predicate getFilter() {\n    Invocable invocable = (Invocable) this.engine;\n    try {\n        this.engine.eval(isPrime);\n        return invocable.getInterface(Predicate.class);\n    } catch (Exception ex) {\n        throw Throwables.propagate(ex);\n    }\n}\n@Test\npublic void testJavaScriptWithMemoize() throws Exception {\n    supplier.get().test(172673l);\n}\n</code></pre><p>对比了下<code>nashorn</code>和<code>groovy</code>的性能：</p>\n<pre><code>NashornPerfTest.testJavaScript: [measured 50000 out of 51000 rounds, threads: 4 (all cores)]\n round: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 96, GC.time: 0.25, time.total: 34.20, time.warmup: 3.44, time.bench: 30.76\nNashornPerfTest.testJava: [measured 50000 out of 51000 rounds, threads: 4 (all cores)]\n round: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 0.28, time.warmup: 0.01, time.bench: 0.27\nNashornPerfTest.testJavaScriptWithMemoize: [measured 50000 out of 51000 rounds, threads: 4 (all cores)]\n round: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 0.35, time.warmup: 0.06, time.bench: 0.29\nGroovyTest.testGroovyWithMemoize: [measured 50000 out of 51000 rounds, threads: 4 (all cores)]\n round: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 5, GC.time: 0.07, time.total: 3.86, time.warmup: 1.75, time.bench: 2.11\n</code></pre><h2 id=\"spring-多线程中两个事务执行顺序控制\"><a href=\"#spring-多线程中两个事务执行顺序控制\" class=\"headerlink\" title=\"spring 多线程中两个事务执行顺序控制\"></a>spring 多线程中两个事务执行顺序控制</h2><p>有些场景需要控制两个事务的执行顺序，比如事务A执行完后，需要事务B中执行费时操作。因为是费时操作，一般会把事务B放到独立的线程中执行。然而事务A和事务B在不同的线程中，事务B还会依赖事务A提交的数据。如果在事务A中新启动线程执行事务B，有可能事务A还没有提交，就开始执行事务B了。这种场景需要保证事务A提交后，才能在新线程中执行事务B。</p>\n<p>可以使用<code>TransactionSynchronizationManager</code>来解决这个问题：</p>\n<pre><code>TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronization(){\n       void afterCommit(){\n            //submit transaction B to threadpool\n       }\n})；\n</code></pre><p>在事务A中加上此钩子，在<code>afterCommit</code>方法中向线程池提交事务A任务。具体处理代码<code>AbstractPlatformTransactionManager#triggerAfterCommit</code>，<code>ThreadLocal</code>清理<code>AbstractPlatformTransactionManager#cleanupAfterCompletion</code>.</p>\n<h2 id=\"Web应用的缓存设计模式\"><a href=\"#Web应用的缓存设计模式\" class=\"headerlink\" title=\"Web应用的缓存设计模式\"></a>Web应用的缓存设计模式</h2><p><a href=\"\">http://robbinfan.com/blog/38/orm-cache-sumup</a></p>\n<p>robbin大哥讲解了对<code>ORM</code>缓存的理解.我司也有不少项目用了<code>ORM</code>,大多数人没有使用缓存的意识,有这样意识的同学提到过用<code>ehcache</code>,这在单节点的情况下，工作得很好，但是到了线上多机部署，数据不一致的问题就会出现，至少也要选用分布式缓存系统来实现哈。还有一点，因为有了缓存，数据订正这种事情就要谨慎了。</p>\n<h2 id=\"java反射的性能\"><a href=\"#java反射的性能\" class=\"headerlink\" title=\"java反射的性能\"></a><a name=\"java_reflect\">java反射的性能</a></h2><p>先看看下面的数据：</p>\n<pre><code>Benchmark                                  Mode  Cnt     Score    Error  Units\n testInvokeMethod_Direct                avgt   20     0.587 ±  0.036  ns/op\n testInvokeMethod_Reflectasm            avgt   20    39.940 ±  1.957  ns/op\n testInvokeMethod_Reflectasm_withCache  avgt   20     9.784 ±  0.745  ns/op\n testInvokeMethod_reflect               avgt   20  1513.409 ± 85.396  ns/op\n testInvokeMethod_reflect_withCache     avgt   20    29.444 ±  1.863  ns/op\n</code></pre><p>上面的数据测试了<code>直接调用java方法</code>、<code>通过反射调用java</code>、<code>通过ReflectASM调用java</code>，<code>withCache</code>意思是把中间对象缓存起来。<br>反射确实很慢，但是只要把反射对象缓存起来，性能提升很大，<code>Reflectasm_withCache</code>比<code>reflect_withCache</code>快了3倍多。</p>\n<p><code>Reflectasm</code>的原理是生成java源代码来实现反射的调用，下面就是生成的源代码。</p>\n<pre><code>package reflectasm;\nimport java.util.Map;\nimport com.esotericsoftware.reflectasm.MethodAccess;\npublic class PojoMethodAccess extends MethodAccess {\n    public Object invoke(Object paramObject, int paramInt, Object[] paramArrayOfObject) {\n        Pojo localPojo = (Pojo) paramObject;\n        switch (paramInt) {\n            case 0:\n                return Boolean.valueOf(localPojo.equals((Object) paramArrayOfObject[0]));\n            case 1:\n                return localPojo.toString();\n            case 2:\n                return Integer.valueOf(localPojo.hashCode());\n            case 3:\n                return localPojo.getName();\n            case 4:\n                localPojo.setName((String) paramArrayOfObject[0]);\n                return null;\n        }\n        throw new IllegalArgumentException(&quot;Method not found: &quot; + paramInt);\n    }\n}\n</code></pre><p>补充:</p>\n<p>–</p>\n<pre><code>ROUND 1:\nBenchmark                           Mode  Cnt   Score   Error  Units\n MHOpto.mh_invoke                    avgt   15  11.332 ± 0.577  ns/op\n MHOpto.mh_invokeExact               avgt   15  10.605 ± 0.667  ns/op\n MHOpto.mh_invokeExact_static_fianl  avgt   15   3.797 ± 0.201  ns/op\n MHOpto.plain                        avgt   15   4.093 ± 0.156  ns/op\n MHOpto.reflect                      avgt   15  11.599 ± 0.646  ns/op\n MHOpto.unreflect_invoke             avgt   15  11.147 ± 0.743  ns/op\n MHOpto.unreflect_invokeExact        avgt   15  11.392 ± 0.518  ns/op\n\n ROUND 2:\n Benchmark                           Mode  Cnt   Score   Error  Units\nMHOpto.mh_invoke                    avgt   15  11.799 ± 0.847  ns/op\nMHOpto.mh_invokeExact               avgt   15  11.830 ± 0.637  ns/op\nMHOpto.mh_invokeExact_static_fianl  avgt   15   4.415 ± 0.191  ns/op\nMHOpto.plain                        avgt   15   4.084 ± 0.300  ns/op\nMHOpto.reflect                      avgt   15  12.191 ± 0.637  ns/op\nMHOpto.unreflect_invoke             avgt   15  11.535 ± 0.816  ns/op\nMHOpto.unreflect_invokeExact        avgt   15  11.828 ± 0.666  ns/op\n</code></pre><p><code>MethodHandle</code>太牛叉了。</p>\n<h2 id=\"spring-mvc的异步servlet实现\"><a href=\"#spring-mvc的异步servlet实现\" class=\"headerlink\" title=\"spring mvc的异步servlet实现\"></a><a name=\"spring_async_servelt\">spring mvc的异步servlet实现</a></h2><p>spring异步web处理流程，我们先以<code>Controller</code>方法返回<code>Callable</code>对象为例</p>\n<ol>\n<li>http线程处理请求到Controller方法，返回Callable结果</li>\n<li>spring选用<code>CallableMethodReturnValueHandler</code>来处理Callable结果，提交Callable到线程池，当前http线程返回,参考<code>WebAsyncManager.startCallableProcessing()</code></li>\n<li>线程池中线程执行<code>Callable</code>任务，并且<code>dispatch</code>请求到容器，参考<code>WebAsyncManager.setConcurrentResultAndDispatch()</code></li>\n<li>容器选取http线程继续处理请求</li>\n</ol>\n<p>通过分析源代码，下面几点需要关注下：</p>\n<ol>\n<li><p><strong>dispatch请求后，又会执行filterchain</strong>，我们需要保证filter只执行一次，filter最好继承<code>OncePerRequestFilter</code>。</p>\n</li>\n<li><p>spring内置了几种异步结果处理器，<code>CallableMethodReturnValueHandler</code>、<code>AsyncTaskMethodReturnValueHandler</code>、<code>DeferredResultMethodReturnValueHandler</code>分别支持方法返回<code>Callable</code>,<code>WebAsyncTask</code>,<code>DeferredResult</code>。</p>\n</li>\n<li><p><code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#taskExecutor</code>此默认线程池为<code>SimpleAsyncTaskExecutor</code>，此<code>taskExecutor</code>每次都会都会新建线程来处理任务，生产环境建议单独配置线程池。</p>\n</li>\n</ol>\n"},{"title":"2015年05月Reading Notes","date":"2015-05-01T13:52:17.000Z","_content":"\n\t\n## <a name=\"springloaded\">使用spring loaded提高开发效率</a>\n[spring-loaded](https://github.com/spring-projects/spring-loaded)和[jrebel](http://zeroturnaround.com/software/jrebel/)类似，它能发现您修改的类并重新加载。在开发测试时，您只需要使用它启动后，就可以一直写代码了。jrebel是收费的软件，spring-loaded免费，而且他很了解您代码中用到的spring特性，能很智能的帮忙重新加载类，并把bean注册到spring容器中。\n\n使用很简单，参考下面的步骤：\n\n1. 下载[springloaded](http://repo.spring.io/simple/libs-release-local/org/springframework/springloaded/1.2.3.RELEASE/springloaded-1.2.3.RELEASE.jar)\n2. 配置IDEA\n\t\n\t* 打开`Run/Debug Configuations`,在`Defaults`中选择`Application`\n\t* 在右边的`Configuration` tab中配置`VM options`\n\n\t\t\t-javaagent:/Users/bohr/software/springloaded/springloaded-1.2.3.RELEASE.jar -noverify\n\t\n\t有了此默认配置，一劳永逸。上面的路径地址修改为您保存springloaded的路径\n3. 执行任何java类\n4. 修改后，编译此java类就能看到修改后的效果了。","source":"_posts/2015-05-reading-notes.md","raw":"---\ntitle: 2015年05月Reading Notes\ndate: 2015-05-01 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n  - springloaded\n---\n\n\t\n## <a name=\"springloaded\">使用spring loaded提高开发效率</a>\n[spring-loaded](https://github.com/spring-projects/spring-loaded)和[jrebel](http://zeroturnaround.com/software/jrebel/)类似，它能发现您修改的类并重新加载。在开发测试时，您只需要使用它启动后，就可以一直写代码了。jrebel是收费的软件，spring-loaded免费，而且他很了解您代码中用到的spring特性，能很智能的帮忙重新加载类，并把bean注册到spring容器中。\n\n使用很简单，参考下面的步骤：\n\n1. 下载[springloaded](http://repo.spring.io/simple/libs-release-local/org/springframework/springloaded/1.2.3.RELEASE/springloaded-1.2.3.RELEASE.jar)\n2. 配置IDEA\n\t\n\t* 打开`Run/Debug Configuations`,在`Defaults`中选择`Application`\n\t* 在右边的`Configuration` tab中配置`VM options`\n\n\t\t\t-javaagent:/Users/bohr/software/springloaded/springloaded-1.2.3.RELEASE.jar -noverify\n\t\n\t有了此默认配置，一劳永逸。上面的路径地址修改为您保存springloaded的路径\n3. 执行任何java类\n4. 修改后，编译此java类就能看到修改后的效果了。","slug":"2015-05-reading-notes","published":1,"updated":"2018-04-01T16:53:17.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksgg001bp0ug43yjk99c","content":"<h2 id=\"使用spring-loaded提高开发效率\"><a href=\"#使用spring-loaded提高开发效率\" class=\"headerlink\" title=\"使用spring loaded提高开发效率\"></a><a name=\"springloaded\">使用spring loaded提高开发效率</a></h2><p><a href=\"https://github.com/spring-projects/spring-loaded\" target=\"_blank\" rel=\"noopener\">spring-loaded</a>和<a href=\"http://zeroturnaround.com/software/jrebel/\" target=\"_blank\" rel=\"noopener\">jrebel</a>类似，它能发现您修改的类并重新加载。在开发测试时，您只需要使用它启动后，就可以一直写代码了。jrebel是收费的软件，spring-loaded免费，而且他很了解您代码中用到的spring特性，能很智能的帮忙重新加载类，并把bean注册到spring容器中。</p>\n<p>使用很简单，参考下面的步骤：</p>\n<ol>\n<li>下载<a href=\"http://repo.spring.io/simple/libs-release-local/org/springframework/springloaded/1.2.3.RELEASE/springloaded-1.2.3.RELEASE.jar\" target=\"_blank\" rel=\"noopener\">springloaded</a></li>\n<li><p>配置IDEA</p>\n<ul>\n<li>打开<code>Run/Debug Configuations</code>,在<code>Defaults</code>中选择<code>Application</code></li>\n<li><p>在右边的<code>Configuration</code> tab中配置<code>VM options</code></p>\n<pre><code>-javaagent:/Users/bohr/software/springloaded/springloaded-1.2.3.RELEASE.jar -noverify\n</code></pre><p>有了此默认配置，一劳永逸。上面的路径地址修改为您保存springloaded的路径</p>\n</li>\n</ul>\n</li>\n<li>执行任何java类</li>\n<li>修改后，编译此java类就能看到修改后的效果了。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用spring-loaded提高开发效率\"><a href=\"#使用spring-loaded提高开发效率\" class=\"headerlink\" title=\"使用spring loaded提高开发效率\"></a><a name=\"springloaded\">使用spring loaded提高开发效率</a></h2><p><a href=\"https://github.com/spring-projects/spring-loaded\" target=\"_blank\" rel=\"noopener\">spring-loaded</a>和<a href=\"http://zeroturnaround.com/software/jrebel/\" target=\"_blank\" rel=\"noopener\">jrebel</a>类似，它能发现您修改的类并重新加载。在开发测试时，您只需要使用它启动后，就可以一直写代码了。jrebel是收费的软件，spring-loaded免费，而且他很了解您代码中用到的spring特性，能很智能的帮忙重新加载类，并把bean注册到spring容器中。</p>\n<p>使用很简单，参考下面的步骤：</p>\n<ol>\n<li>下载<a href=\"http://repo.spring.io/simple/libs-release-local/org/springframework/springloaded/1.2.3.RELEASE/springloaded-1.2.3.RELEASE.jar\" target=\"_blank\" rel=\"noopener\">springloaded</a></li>\n<li><p>配置IDEA</p>\n<ul>\n<li>打开<code>Run/Debug Configuations</code>,在<code>Defaults</code>中选择<code>Application</code></li>\n<li><p>在右边的<code>Configuration</code> tab中配置<code>VM options</code></p>\n<pre><code>-javaagent:/Users/bohr/software/springloaded/springloaded-1.2.3.RELEASE.jar -noverify\n</code></pre><p>有了此默认配置，一劳永逸。上面的路径地址修改为您保存springloaded的路径</p>\n</li>\n</ul>\n</li>\n<li>执行任何java类</li>\n<li>修改后，编译此java类就能看到修改后的效果了。</li>\n</ol>\n"},{"title":"2015年11月Reading Notes","date":"2015-11-01T13:52:17.000Z","_content":"\t\n## <a name=\"spring-session\">Next Generation Session Management with Spring Session</a>\n\n[http://www.infoq.com/articles/Next-Generation-Session-Management-with-Spring-Session](http://www.infoq.com/articles/Next-Generation-Session-Management-with-Spring-Session)\n\n在大规模集群的场景，无状态的应用能减少运维成本、缩短应用恢复时间。spring session主要解决了web应用session持久化的问题。把session存储在应用外部，让应用无状态。\n\nspring session主要提供如下能力：\n\n1. 把session的存储逻辑抽取出来，可以选择rdis，或者自己实现session存储\n2. 使用websocket也能保持会话\n3. 非web应用也能使用会话\n4. 支持多个session(可以登陆多个用户)\n5. Restful API也能通过http header维护会话\n\nspring session 1.1版本支持`HttpSessionListener`.如果使用的redis，spring session通过key过期时的过期事件+redis消息推送来实现。可惜我们用的是`codis`，我们实现了`DisabledRedisMessageListenerContainer`把这个能力屏蔽了。\n\n更多参考：[spring session 官方文档](http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/#introduction) [Add HttpSessionListener Support](https://github.com/spring-projects/spring-session/issues/4)\n\n## <a name=\"the-twelve-factor-app\">The Twelve-Factor App</a>\n\n[http://12factor.net](http://12factor.net)\n\nThe twelve-factor app is a methodology for building software-as-a-service apps.\n\n1. Codebase:One codebase tracked in revision control, many deploys\n\n\tone codebase per app（all tracked in revision control）, but there will be many deploys of the app(one or more staging use same code,use multi config file or configuration management system for different stage ). \n\t\n2. Dependencies:Explicitly declare and isolate dependencies\n\n\t declares all dependencies via a dependency declaration manifest,and use dependencies check strategy to ensure that no implicit dependencies.\n\t\n3. Config:Store config in the environment\n\n\tuse mutli config file （[build env-awared app](http://bohr.me/env-aware/)）\t or use configuration management system （[spring cloud config](http://cloud.spring.io/spring-cloud-config/)）\n\t\n4. Backing Services:Treat backing services as attached resources\n\n\tapp makes no distinction between local and third party services（both are attached resources）. A deploy should be able to swap out a local MySQL database with one managed by a third party (such as Amazon RDS) without any changes to the app’s code. \n\t\n5. Build, release, run:Strictly separate build and run stages\n\n\tapp uses strict separation between the build, release, and run stages. For example, it is impossible to make changes to the code at runtime, since there is no way to propagate those changes back to the build stage（we can put dynamic part code into db ）.\n\t\n6. Processes:Execute the app as one or more stateless processes\n\n\tTwelve-factor processes are stateless and share-nothing. Any data that needs to persist must be stored in a stateful backing service, typically a database.Sticky sessions should never be used or relied upon. \n\t\n7. Port binding:Export services via port binding\n\n\tThe twelve-factor app is completely self-contained and does not rely on runtime injection of a webserver into the execution environment to create a web-facing service. The web app exports HTTP as a service by binding to a port, and listening to requests coming in on that port.\n\t\n8.  Concurrency:Scale out via the process model\n\n\tprocesses are a first class citizen.Processes in the twelve-factor app take strong cues from the unix process model for running service daemons. Using this model, the developer can architect their app to handle diverse workloads by assigning each type of work to a process type.\n\t\n9. Disposability:Maximize robustness with fast startup and graceful shutdown\n\n\tProcesses should strive to minimize startup time.\n\t\n\tProcesses shut down gracefully （ ceasing to listen on the service port,thereby refusing any new requests, allowing any current requests to finish, and then exiting.）when they receive a SIGTERM signal from the process manager.\n\t\n\tFor a worker process, graceful shutdown is achieved by **returning the current job to the work queue**.Implicit in this model is that all jobs are **reentrant**, which typically is achieved by wrapping the results in a transaction, or making the operation `idempotent`.\n\t\n\tProcesses should also be robust against sudden death, in the case of a failure in the underlying hardware.  A recommended approach is use of a robust queueing backend that returns jobs to the queue when clients disconnect or time out. Either way, a twelve-factor app is architected to handle unexpected, non-graceful terminations. \n\t\n10. Dev/prod parity:Keep development, staging, and production as similar as possible\n\n\n\t  x      | Traditional app           | Twelve-factor app     |\n\t--------------------|------------------|-----------------------|\n\tTime between deploys | Weeks   | Hours   |\n\tCode authors vs code deployers  | Different people | Same people  |\n\tDev vs production environments  | Divergent | As similar as possible  |\n\n\tThe twelve-factor developer resists the urge to use different backing services between development and production, even when adapters theoretically abstract away any differences in backing services.\n\t\n11. Logs:Treat logs as event streams\n\t\t\n\tA twelve-factor app never concerns itself with routing or storage of its output stream(maybe dont fit for java app).\n\t\n12. Admin processes:Run admin/management tasks as one-off processes\n\t\n\tOne-off admin processes should be run in an identical environment as the regular long-running processes of the app. They run against a release, using the same codebase and config as any process run against that release. Admin code must ship with application code to avoid synchronization issues.\n\t\n","source":"_posts/2015-11-reading-notes.md","raw":"---\ntitle: 2015年11月Reading Notes\ndate: 2015-11-01 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n  - spring-session\n---\n\t\n## <a name=\"spring-session\">Next Generation Session Management with Spring Session</a>\n\n[http://www.infoq.com/articles/Next-Generation-Session-Management-with-Spring-Session](http://www.infoq.com/articles/Next-Generation-Session-Management-with-Spring-Session)\n\n在大规模集群的场景，无状态的应用能减少运维成本、缩短应用恢复时间。spring session主要解决了web应用session持久化的问题。把session存储在应用外部，让应用无状态。\n\nspring session主要提供如下能力：\n\n1. 把session的存储逻辑抽取出来，可以选择rdis，或者自己实现session存储\n2. 使用websocket也能保持会话\n3. 非web应用也能使用会话\n4. 支持多个session(可以登陆多个用户)\n5. Restful API也能通过http header维护会话\n\nspring session 1.1版本支持`HttpSessionListener`.如果使用的redis，spring session通过key过期时的过期事件+redis消息推送来实现。可惜我们用的是`codis`，我们实现了`DisabledRedisMessageListenerContainer`把这个能力屏蔽了。\n\n更多参考：[spring session 官方文档](http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/#introduction) [Add HttpSessionListener Support](https://github.com/spring-projects/spring-session/issues/4)\n\n## <a name=\"the-twelve-factor-app\">The Twelve-Factor App</a>\n\n[http://12factor.net](http://12factor.net)\n\nThe twelve-factor app is a methodology for building software-as-a-service apps.\n\n1. Codebase:One codebase tracked in revision control, many deploys\n\n\tone codebase per app（all tracked in revision control）, but there will be many deploys of the app(one or more staging use same code,use multi config file or configuration management system for different stage ). \n\t\n2. Dependencies:Explicitly declare and isolate dependencies\n\n\t declares all dependencies via a dependency declaration manifest,and use dependencies check strategy to ensure that no implicit dependencies.\n\t\n3. Config:Store config in the environment\n\n\tuse mutli config file （[build env-awared app](http://bohr.me/env-aware/)）\t or use configuration management system （[spring cloud config](http://cloud.spring.io/spring-cloud-config/)）\n\t\n4. Backing Services:Treat backing services as attached resources\n\n\tapp makes no distinction between local and third party services（both are attached resources）. A deploy should be able to swap out a local MySQL database with one managed by a third party (such as Amazon RDS) without any changes to the app’s code. \n\t\n5. Build, release, run:Strictly separate build and run stages\n\n\tapp uses strict separation between the build, release, and run stages. For example, it is impossible to make changes to the code at runtime, since there is no way to propagate those changes back to the build stage（we can put dynamic part code into db ）.\n\t\n6. Processes:Execute the app as one or more stateless processes\n\n\tTwelve-factor processes are stateless and share-nothing. Any data that needs to persist must be stored in a stateful backing service, typically a database.Sticky sessions should never be used or relied upon. \n\t\n7. Port binding:Export services via port binding\n\n\tThe twelve-factor app is completely self-contained and does not rely on runtime injection of a webserver into the execution environment to create a web-facing service. The web app exports HTTP as a service by binding to a port, and listening to requests coming in on that port.\n\t\n8.  Concurrency:Scale out via the process model\n\n\tprocesses are a first class citizen.Processes in the twelve-factor app take strong cues from the unix process model for running service daemons. Using this model, the developer can architect their app to handle diverse workloads by assigning each type of work to a process type.\n\t\n9. Disposability:Maximize robustness with fast startup and graceful shutdown\n\n\tProcesses should strive to minimize startup time.\n\t\n\tProcesses shut down gracefully （ ceasing to listen on the service port,thereby refusing any new requests, allowing any current requests to finish, and then exiting.）when they receive a SIGTERM signal from the process manager.\n\t\n\tFor a worker process, graceful shutdown is achieved by **returning the current job to the work queue**.Implicit in this model is that all jobs are **reentrant**, which typically is achieved by wrapping the results in a transaction, or making the operation `idempotent`.\n\t\n\tProcesses should also be robust against sudden death, in the case of a failure in the underlying hardware.  A recommended approach is use of a robust queueing backend that returns jobs to the queue when clients disconnect or time out. Either way, a twelve-factor app is architected to handle unexpected, non-graceful terminations. \n\t\n10. Dev/prod parity:Keep development, staging, and production as similar as possible\n\n\n\t  x      | Traditional app           | Twelve-factor app     |\n\t--------------------|------------------|-----------------------|\n\tTime between deploys | Weeks   | Hours   |\n\tCode authors vs code deployers  | Different people | Same people  |\n\tDev vs production environments  | Divergent | As similar as possible  |\n\n\tThe twelve-factor developer resists the urge to use different backing services between development and production, even when adapters theoretically abstract away any differences in backing services.\n\t\n11. Logs:Treat logs as event streams\n\t\t\n\tA twelve-factor app never concerns itself with routing or storage of its output stream(maybe dont fit for java app).\n\t\n12. Admin processes:Run admin/management tasks as one-off processes\n\t\n\tOne-off admin processes should be run in an identical environment as the regular long-running processes of the app. They run against a release, using the same codebase and config as any process run against that release. Admin code must ship with application code to avoid synchronization issues.\n\t\n","slug":"2015-11-reading-notes","published":1,"updated":"2018-04-01T16:53:17.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksgi001fp0ugyoguuqdj","content":"<h2 id=\"Next-Generation-Session-Management-with-Spring-Session\"><a href=\"#Next-Generation-Session-Management-with-Spring-Session\" class=\"headerlink\" title=\"Next Generation Session Management with Spring Session\"></a><a name=\"spring-session\">Next Generation Session Management with Spring Session</a></h2><p><a href=\"http://www.infoq.com/articles/Next-Generation-Session-Management-with-Spring-Session\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/articles/Next-Generation-Session-Management-with-Spring-Session</a></p>\n<p>在大规模集群的场景，无状态的应用能减少运维成本、缩短应用恢复时间。spring session主要解决了web应用session持久化的问题。把session存储在应用外部，让应用无状态。</p>\n<p>spring session主要提供如下能力：</p>\n<ol>\n<li>把session的存储逻辑抽取出来，可以选择rdis，或者自己实现session存储</li>\n<li>使用websocket也能保持会话</li>\n<li>非web应用也能使用会话</li>\n<li>支持多个session(可以登陆多个用户)</li>\n<li>Restful API也能通过http header维护会话</li>\n</ol>\n<p>spring session 1.1版本支持<code>HttpSessionListener</code>.如果使用的redis，spring session通过key过期时的过期事件+redis消息推送来实现。可惜我们用的是<code>codis</code>，我们实现了<code>DisabledRedisMessageListenerContainer</code>把这个能力屏蔽了。</p>\n<p>更多参考：<a href=\"http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/#introduction\" target=\"_blank\" rel=\"noopener\">spring session 官方文档</a> <a href=\"https://github.com/spring-projects/spring-session/issues/4\" target=\"_blank\" rel=\"noopener\">Add HttpSessionListener Support</a></p>\n<h2 id=\"The-Twelve-Factor-App\"><a href=\"#The-Twelve-Factor-App\" class=\"headerlink\" title=\"The Twelve-Factor App\"></a><a name=\"the-twelve-factor-app\">The Twelve-Factor App</a></h2><p><a href=\"http://12factor.net\" target=\"_blank\" rel=\"noopener\">http://12factor.net</a></p>\n<p>The twelve-factor app is a methodology for building software-as-a-service apps.</p>\n<ol>\n<li><p>Codebase:One codebase tracked in revision control, many deploys</p>\n<p> one codebase per app（all tracked in revision control）, but there will be many deploys of the app(one or more staging use same code,use multi config file or configuration management system for different stage ). </p>\n</li>\n<li><p>Dependencies:Explicitly declare and isolate dependencies</p>\n<p>  declares all dependencies via a dependency declaration manifest,and use dependencies check strategy to ensure that no implicit dependencies.</p>\n</li>\n<li><p>Config:Store config in the environment</p>\n<p> use mutli config file （<a href=\"http://bohr.me/env-aware/\">build env-awared app</a>）     or use configuration management system （<a href=\"http://cloud.spring.io/spring-cloud-config/\" target=\"_blank\" rel=\"noopener\">spring cloud config</a>）</p>\n</li>\n<li><p>Backing Services:Treat backing services as attached resources</p>\n<p> app makes no distinction between local and third party services（both are attached resources）. A deploy should be able to swap out a local MySQL database with one managed by a third party (such as Amazon RDS) without any changes to the app’s code. </p>\n</li>\n<li><p>Build, release, run:Strictly separate build and run stages</p>\n<p> app uses strict separation between the build, release, and run stages. For example, it is impossible to make changes to the code at runtime, since there is no way to propagate those changes back to the build stage（we can put dynamic part code into db ）.</p>\n</li>\n<li><p>Processes:Execute the app as one or more stateless processes</p>\n<p> Twelve-factor processes are stateless and share-nothing. Any data that needs to persist must be stored in a stateful backing service, typically a database.Sticky sessions should never be used or relied upon. </p>\n</li>\n<li><p>Port binding:Export services via port binding</p>\n<p> The twelve-factor app is completely self-contained and does not rely on runtime injection of a webserver into the execution environment to create a web-facing service. The web app exports HTTP as a service by binding to a port, and listening to requests coming in on that port.</p>\n</li>\n<li><p>Concurrency:Scale out via the process model</p>\n<p>processes are a first class citizen.Processes in the twelve-factor app take strong cues from the unix process model for running service daemons. Using this model, the developer can architect their app to handle diverse workloads by assigning each type of work to a process type.</p>\n</li>\n<li><p>Disposability:Maximize robustness with fast startup and graceful shutdown</p>\n<p> Processes should strive to minimize startup time.</p>\n<p> Processes shut down gracefully （ ceasing to listen on the service port,thereby refusing any new requests, allowing any current requests to finish, and then exiting.）when they receive a SIGTERM signal from the process manager.</p>\n<p> For a worker process, graceful shutdown is achieved by <strong>returning the current job to the work queue</strong>.Implicit in this model is that all jobs are <strong>reentrant</strong>, which typically is achieved by wrapping the results in a transaction, or making the operation <code>idempotent</code>.</p>\n<p> Processes should also be robust against sudden death, in the case of a failure in the underlying hardware.  A recommended approach is use of a robust queueing backend that returns jobs to the queue when clients disconnect or time out. Either way, a twelve-factor app is architected to handle unexpected, non-graceful terminations. </p>\n</li>\n<li><p>Dev/prod parity:Keep development, staging, and production as similar as possible</p>\n</li>\n</ol>\n<pre><code>  x      | Traditional app           | Twelve-factor app     |\n--------------------|------------------|-----------------------|\nTime between deploys | Weeks   | Hours   |\nCode authors vs code deployers  | Different people | Same people  |\nDev vs production environments  | Divergent | As similar as possible  |\n\nThe twelve-factor developer resists the urge to use different backing services between development and production, even when adapters theoretically abstract away any differences in backing services.\n</code></pre><ol>\n<li><p>Logs:Treat logs as event streams</p>\n<p>A twelve-factor app never concerns itself with routing or storage of its output stream(maybe dont fit for java app).</p>\n</li>\n<li><p>Admin processes:Run admin/management tasks as one-off processes</p>\n<p>One-off admin processes should be run in an identical environment as the regular long-running processes of the app. They run against a release, using the same codebase and config as any process run against that release. Admin code must ship with application code to avoid synchronization issues.</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Next-Generation-Session-Management-with-Spring-Session\"><a href=\"#Next-Generation-Session-Management-with-Spring-Session\" class=\"headerlink\" title=\"Next Generation Session Management with Spring Session\"></a><a name=\"spring-session\">Next Generation Session Management with Spring Session</a></h2><p><a href=\"http://www.infoq.com/articles/Next-Generation-Session-Management-with-Spring-Session\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/articles/Next-Generation-Session-Management-with-Spring-Session</a></p>\n<p>在大规模集群的场景，无状态的应用能减少运维成本、缩短应用恢复时间。spring session主要解决了web应用session持久化的问题。把session存储在应用外部，让应用无状态。</p>\n<p>spring session主要提供如下能力：</p>\n<ol>\n<li>把session的存储逻辑抽取出来，可以选择rdis，或者自己实现session存储</li>\n<li>使用websocket也能保持会话</li>\n<li>非web应用也能使用会话</li>\n<li>支持多个session(可以登陆多个用户)</li>\n<li>Restful API也能通过http header维护会话</li>\n</ol>\n<p>spring session 1.1版本支持<code>HttpSessionListener</code>.如果使用的redis，spring session通过key过期时的过期事件+redis消息推送来实现。可惜我们用的是<code>codis</code>，我们实现了<code>DisabledRedisMessageListenerContainer</code>把这个能力屏蔽了。</p>\n<p>更多参考：<a href=\"http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/#introduction\" target=\"_blank\" rel=\"noopener\">spring session 官方文档</a> <a href=\"https://github.com/spring-projects/spring-session/issues/4\" target=\"_blank\" rel=\"noopener\">Add HttpSessionListener Support</a></p>\n<h2 id=\"The-Twelve-Factor-App\"><a href=\"#The-Twelve-Factor-App\" class=\"headerlink\" title=\"The Twelve-Factor App\"></a><a name=\"the-twelve-factor-app\">The Twelve-Factor App</a></h2><p><a href=\"http://12factor.net\" target=\"_blank\" rel=\"noopener\">http://12factor.net</a></p>\n<p>The twelve-factor app is a methodology for building software-as-a-service apps.</p>\n<ol>\n<li><p>Codebase:One codebase tracked in revision control, many deploys</p>\n<p> one codebase per app（all tracked in revision control）, but there will be many deploys of the app(one or more staging use same code,use multi config file or configuration management system for different stage ). </p>\n</li>\n<li><p>Dependencies:Explicitly declare and isolate dependencies</p>\n<p>  declares all dependencies via a dependency declaration manifest,and use dependencies check strategy to ensure that no implicit dependencies.</p>\n</li>\n<li><p>Config:Store config in the environment</p>\n<p> use mutli config file （<a href=\"http://bohr.me/env-aware/\">build env-awared app</a>）     or use configuration management system （<a href=\"http://cloud.spring.io/spring-cloud-config/\" target=\"_blank\" rel=\"noopener\">spring cloud config</a>）</p>\n</li>\n<li><p>Backing Services:Treat backing services as attached resources</p>\n<p> app makes no distinction between local and third party services（both are attached resources）. A deploy should be able to swap out a local MySQL database with one managed by a third party (such as Amazon RDS) without any changes to the app’s code. </p>\n</li>\n<li><p>Build, release, run:Strictly separate build and run stages</p>\n<p> app uses strict separation between the build, release, and run stages. For example, it is impossible to make changes to the code at runtime, since there is no way to propagate those changes back to the build stage（we can put dynamic part code into db ）.</p>\n</li>\n<li><p>Processes:Execute the app as one or more stateless processes</p>\n<p> Twelve-factor processes are stateless and share-nothing. Any data that needs to persist must be stored in a stateful backing service, typically a database.Sticky sessions should never be used or relied upon. </p>\n</li>\n<li><p>Port binding:Export services via port binding</p>\n<p> The twelve-factor app is completely self-contained and does not rely on runtime injection of a webserver into the execution environment to create a web-facing service. The web app exports HTTP as a service by binding to a port, and listening to requests coming in on that port.</p>\n</li>\n<li><p>Concurrency:Scale out via the process model</p>\n<p>processes are a first class citizen.Processes in the twelve-factor app take strong cues from the unix process model for running service daemons. Using this model, the developer can architect their app to handle diverse workloads by assigning each type of work to a process type.</p>\n</li>\n<li><p>Disposability:Maximize robustness with fast startup and graceful shutdown</p>\n<p> Processes should strive to minimize startup time.</p>\n<p> Processes shut down gracefully （ ceasing to listen on the service port,thereby refusing any new requests, allowing any current requests to finish, and then exiting.）when they receive a SIGTERM signal from the process manager.</p>\n<p> For a worker process, graceful shutdown is achieved by <strong>returning the current job to the work queue</strong>.Implicit in this model is that all jobs are <strong>reentrant</strong>, which typically is achieved by wrapping the results in a transaction, or making the operation <code>idempotent</code>.</p>\n<p> Processes should also be robust against sudden death, in the case of a failure in the underlying hardware.  A recommended approach is use of a robust queueing backend that returns jobs to the queue when clients disconnect or time out. Either way, a twelve-factor app is architected to handle unexpected, non-graceful terminations. </p>\n</li>\n<li><p>Dev/prod parity:Keep development, staging, and production as similar as possible</p>\n</li>\n</ol>\n<pre><code>  x      | Traditional app           | Twelve-factor app     |\n--------------------|------------------|-----------------------|\nTime between deploys | Weeks   | Hours   |\nCode authors vs code deployers  | Different people | Same people  |\nDev vs production environments  | Divergent | As similar as possible  |\n\nThe twelve-factor developer resists the urge to use different backing services between development and production, even when adapters theoretically abstract away any differences in backing services.\n</code></pre><ol>\n<li><p>Logs:Treat logs as event streams</p>\n<p>A twelve-factor app never concerns itself with routing or storage of its output stream(maybe dont fit for java app).</p>\n</li>\n<li><p>Admin processes:Run admin/management tasks as one-off processes</p>\n<p>One-off admin processes should be run in an identical environment as the regular long-running processes of the app. They run against a release, using the same codebase and config as any process run against that release. Admin code must ship with application code to avoid synchronization issues.</p>\n</li>\n</ol>\n"},{"title":"2016年04月Reading Notes","date":"2016-04-05T13:52:17.000Z","_content":"\t\n## <a name=\"false-sharing\">@Contended FOR false sharing</a>\n\nABOUT False Sharing：\n\n>>Most high performance processors, insert a cache buffer between slow memory and the high speed registers of the CPU. Accessing a memory location causes a slice of actual memory (a cache line) containing the memory location requested to be copied into the cache. Subsequent references to the same memory location or those around it can probably be satisfied out of the cache until the system determines it is necessary to maintain the coherency between cache and memory.\n\n\n>>Each update of an individual element of a cache line marks the line as invalid. Other processors accessing a different element in the same line see the line marked as invalid. They are forced to fetch a more recent copy of the line from memory or elsewhere, even though the element accessed has not been modified. This is because cache coherency is maintained on a cache-line basis, and not for individual elements. As a result there will be an increase in interconnect traffic and overhead.\n\n当下列条件满足时，False sharing极大降低了并发性能。\n\n* Shared data is modified by multiple processors.\n* Multiple processors update data within the same cache line.\n* This updating occurs very frequently (for example, in a tight loop).\n\njava8 引入了`@Contended`，在对象编译时，编译器会插入`padding`,防止多个数据在一个cache line中。\n\n\n`https://github.com/m0wfo/false-sharing-demo`测试结果：\n\n\t[0] % java -XX:-RestrictContended -jar target/false-sharing-demo-1.0.0-SNAPSHOT.jar plain\n\tUpdating unpadded version 1B times Took: 55.457223514sec\n\tUpdating @Contended version 1B times Took: 7.387646696sec","source":"_posts/2016-04-reading-notes.md","raw":"---\ntitle: 2016年04月Reading Notes\ndate: 2016-04-05 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n---\n\t\n## <a name=\"false-sharing\">@Contended FOR false sharing</a>\n\nABOUT False Sharing：\n\n>>Most high performance processors, insert a cache buffer between slow memory and the high speed registers of the CPU. Accessing a memory location causes a slice of actual memory (a cache line) containing the memory location requested to be copied into the cache. Subsequent references to the same memory location or those around it can probably be satisfied out of the cache until the system determines it is necessary to maintain the coherency between cache and memory.\n\n\n>>Each update of an individual element of a cache line marks the line as invalid. Other processors accessing a different element in the same line see the line marked as invalid. They are forced to fetch a more recent copy of the line from memory or elsewhere, even though the element accessed has not been modified. This is because cache coherency is maintained on a cache-line basis, and not for individual elements. As a result there will be an increase in interconnect traffic and overhead.\n\n当下列条件满足时，False sharing极大降低了并发性能。\n\n* Shared data is modified by multiple processors.\n* Multiple processors update data within the same cache line.\n* This updating occurs very frequently (for example, in a tight loop).\n\njava8 引入了`@Contended`，在对象编译时，编译器会插入`padding`,防止多个数据在一个cache line中。\n\n\n`https://github.com/m0wfo/false-sharing-demo`测试结果：\n\n\t[0] % java -XX:-RestrictContended -jar target/false-sharing-demo-1.0.0-SNAPSHOT.jar plain\n\tUpdating unpadded version 1B times Took: 55.457223514sec\n\tUpdating @Contended version 1B times Took: 7.387646696sec","slug":"2016-04-reading-notes","published":1,"updated":"2018-04-01T16:53:17.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksgk001ip0ug2oodqdfx","content":"<h2 id=\"Contended-FOR-false-sharing\"><a href=\"#Contended-FOR-false-sharing\" class=\"headerlink\" title=\"@Contended FOR false sharing\"></a><a name=\"false-sharing\">@Contended FOR false sharing</a></h2><p>ABOUT False Sharing：</p>\n<blockquote>\n<blockquote>\n<p>Most high performance processors, insert a cache buffer between slow memory and the high speed registers of the CPU. Accessing a memory location causes a slice of actual memory (a cache line) containing the memory location requested to be copied into the cache. Subsequent references to the same memory location or those around it can probably be satisfied out of the cache until the system determines it is necessary to maintain the coherency between cache and memory.</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>Each update of an individual element of a cache line marks the line as invalid. Other processors accessing a different element in the same line see the line marked as invalid. They are forced to fetch a more recent copy of the line from memory or elsewhere, even though the element accessed has not been modified. This is because cache coherency is maintained on a cache-line basis, and not for individual elements. As a result there will be an increase in interconnect traffic and overhead.</p>\n</blockquote>\n</blockquote>\n<p>当下列条件满足时，False sharing极大降低了并发性能。</p>\n<ul>\n<li>Shared data is modified by multiple processors.</li>\n<li>Multiple processors update data within the same cache line.</li>\n<li>This updating occurs very frequently (for example, in a tight loop).</li>\n</ul>\n<p>java8 引入了<code>@Contended</code>，在对象编译时，编译器会插入<code>padding</code>,防止多个数据在一个cache line中。</p>\n<p><code>https://github.com/m0wfo/false-sharing-demo</code>测试结果：</p>\n<pre><code>[0] % java -XX:-RestrictContended -jar target/false-sharing-demo-1.0.0-SNAPSHOT.jar plain\nUpdating unpadded version 1B times Took: 55.457223514sec\nUpdating @Contended version 1B times Took: 7.387646696sec\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Contended-FOR-false-sharing\"><a href=\"#Contended-FOR-false-sharing\" class=\"headerlink\" title=\"@Contended FOR false sharing\"></a><a name=\"false-sharing\">@Contended FOR false sharing</a></h2><p>ABOUT False Sharing：</p>\n<blockquote>\n<blockquote>\n<p>Most high performance processors, insert a cache buffer between slow memory and the high speed registers of the CPU. Accessing a memory location causes a slice of actual memory (a cache line) containing the memory location requested to be copied into the cache. Subsequent references to the same memory location or those around it can probably be satisfied out of the cache until the system determines it is necessary to maintain the coherency between cache and memory.</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>Each update of an individual element of a cache line marks the line as invalid. Other processors accessing a different element in the same line see the line marked as invalid. They are forced to fetch a more recent copy of the line from memory or elsewhere, even though the element accessed has not been modified. This is because cache coherency is maintained on a cache-line basis, and not for individual elements. As a result there will be an increase in interconnect traffic and overhead.</p>\n</blockquote>\n</blockquote>\n<p>当下列条件满足时，False sharing极大降低了并发性能。</p>\n<ul>\n<li>Shared data is modified by multiple processors.</li>\n<li>Multiple processors update data within the same cache line.</li>\n<li>This updating occurs very frequently (for example, in a tight loop).</li>\n</ul>\n<p>java8 引入了<code>@Contended</code>，在对象编译时，编译器会插入<code>padding</code>,防止多个数据在一个cache line中。</p>\n<p><code>https://github.com/m0wfo/false-sharing-demo</code>测试结果：</p>\n<pre><code>[0] % java -XX:-RestrictContended -jar target/false-sharing-demo-1.0.0-SNAPSHOT.jar plain\nUpdating unpadded version 1B times Took: 55.457223514sec\nUpdating @Contended version 1B times Took: 7.387646696sec\n</code></pre>"},{"title":"2016年02月Reading Notes","date":"2016-02-01T13:52:17.000Z","_content":"\n## <a name=\"about-arch\">[每个架构师都应该研究下康威定律](http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&mid=408286995&idx=1&sn=1634698023c48b754d42af69cee2ab32)</a>\n\n最近在做`DEVOPS`,看技术的出发点有所变化，正好看到这篇文章，总结下自己。\n\n### 1. 系统架构的目标是解决利益相关者的关注点。\n\n>>架构其实是发现利益相关者（stakeholder），然后解决他们的关注点（concerns）\n>>\n>> 业务方，产品经理，客户/用户，开发经理，工程师，项目经理，测试人员，运维人员，产品运营人员等等都有可能是利益相关者，架构师要充分和利益相关者沟通，深入理解他们的关注点和痛点，并出架构解决这些关注点。\n\n架构师在这里也定位为一个好的需求分析师，但是架构师往往会从自己的角度(利益相关或者立场相关)来设计。我之前一直做开发工作，在技术选型或者研究时，对于可运维性考虑得比较少，在痛过几次后，发现监控的价值，来补充相关`metrics`的能力。\n\n### 2. 关注非功能性需求\n\n* easy to separate\n* easy to understand\n* easy to extend\n* easy to change\n* easy to replace\n* easy to deploy\n* easy to scale\n* easy to recover\n* easy to connect\n* easy to afford\n\n>> Architecture represents the significant design decisions that shape a system, where significant is measured by cost of change.\n>>\n>> 架构的目标是用于管理复杂性、易变性和不确定性，以确保在长期的系统演化过程中，一部分架构的变化不会对架构的其它部分产生不必要的负面影响。\n\n这里补充一点，需要考虑`easy to find the problem`。除了合理的规划日志，我们要做到`failfast`。当关键资源依赖条件不满足，我们最好是把问题用最显示的方式暴露出来，而不是让它在那里一直报错。\n\n### 3. 架构的迭代和演化性\n\n>> 做技术架构的都有点完美主义倾向，一开始往往喜欢求大求全，忽视架构的演化和迭代性，这种倾向易造产品和用户之间不能形成有效快速的反馈，产品不满足最终用户需求.\n>>\n>> 在系统真正地投入生产使用之前，再好的架构都只是假设，产品越晚被使用者使用，失败的成本和风险就越高，而小步行进，通过MVP快速实验，获取客户反馈，迭代演化产品，能有效地减少失败的成本和风险。\n\n好的架构是衍变出来的，而非设计出来的。\n\n### 4. 构建闭环反馈架构\n\n>>第一条道路，系统思维，开发驱动的组织机体，其能力不是制作软件，而是持续的交付客户价值，架构师需要有全局视角和系统思维（System Thinking），深入理解整个价值交付链，从业务需求、研发、测试、集成，到部署运维，这条价值链的效率并不依赖于单个或者几个环节，局部优化的结果往往是全局受损，架构师要站在系统高度去优化整个价值交付链，让企业和客户之间形成快速和高效的价值传递。\n\n>>第二条道路，强化反馈环，任何过程改进的目标都是加强和缩短反馈环。\n>>\n>>收集->测量->调整->闭环重复，在有测量数据和反馈的基础上，系统、应用、流程和客户体验才有可能获得持续的提升和改善，否则没有数据的所谓改进只能靠拍脑袋或者说猜测。\n\n这里提到监控的重要性，**没有测量，就没有改进和提升**，[MDD](http://www.infoq.com/cn/articles/metrics-driven-development)这偏文章有点意思，通过分层和可用的性能指标让开发人员了解项目业务方面的内容，反过来，业务人员也能理解项目技术方面的内容，看到开发人员所面临的问题和我们的负载局限。\n\n\n\n>>第三条道路，鼓励勇于承担责任，冒险试错和持续提升的文化。\n\n最后，贴上一张关于`DevOps`的图。\n\n![](2016-02-reading-notes/devops.jpg)\n\n## 时间序列数据库的秘密\n\n[http://www.infoq.com/cn/articles/database-timestamp-01](http://www.infoq.com/cn/articles/database-timestamp-01)\n\n[http://www.infoq.com/cn/articles/database-timestamp-01](http://www.infoq.com/cn/articles/database-timestamp-01)\n\n[http://www.infoq.com/cn/articles/database-timestamp-01](http://www.infoq.com/cn/articles/database-timestamp-01)\n\n此文讲明白了时序数据库，最近也在纠结这个事(原来一直看好opentsdb，但是没有深入调研opentsdb的细节，对es也不是太了解)，这里总结下全文。\n\n时间序列数据库除了提供查询能力外，我们也希望能够提供在查询阶段做聚合能力。\n\n聚合有有三个步骤:\n\n* 用索引检索出行号(搜索引擎最擅长)\n* 从主存储按行号加载列(列式存储最合适)\n* 计算(分布式计算列数据)\n\n`ES`在这三个步骤上都做得很好。\n\n1. 如何快速检索？\n\n\t![](http://cdn3.infoqstatic.com/statics_s2_20160217-0123u3/resource/articles/database-timestamp-02/zh/resources/0820002.jpg)\n\t\n\tlucene倒排索引由`Term index`->`Term Dictionary`->`Posting List`构成。`TI`是对`TD`做的索引，实现对Term的快速查找。Mysql使用b-tree排序存储`TD`在磁盘上;`Lucene`增加了`TI`保存在内存中，查询效率更高。\n\n2. 如何联合索引查询？\n\n\t对于`age=18 AND gender=女`的查询过滤。mysql的做法是(如果两个列都建立了索引，当然gender列做索引在mysql上没有什么卵用)先在索引上找`age=18`的所有id，然后遍历id匹配。\n\n\tElasticsearch支持：\n\n\t* 使用skip list数据结构。同时遍历gender和age的posting list，互相skip；\n\n\t\t利用skip list(Level0存储原始有序数据，level1存储部分数据，查找时从level1跳过部分数据)，跳过了遍历的成本,并且用`Frame of Reference`(计算差值，分块后，每个块内部选择合适的bit来存储)压缩存储。\n\n\t* 使用bitset数据结构，对gender和age两个filter分别求出bitset，对两个bitset做AN操作。\n\n\t\t大多数场景下，bitset非常稀疏，bitset压缩空间很大。lucene采用`Roaring Bitmap`,算法也有点意思：\n\t\t计算N/65536和N%65536的值，把N/65536相同的分为一个组，分组后根据每个组的情况用short数字或者bitset。\n\n3. 如何减少文档数？\n\n\t一般采用数据库会合并，把多行数据合并成一行，比如把原来精确到秒的数据合并为分。`ES`中使用内嵌文档(Nested Document)实现公共字段的去从(比如应用名、ip、环境标识、metricsname)\n\n4. 如何加载更快？\n\n\t如何利用索引和主存储，是一种两难的选择。\n\n   * 选择不使用索引，只使用主存储：除非查询的字段就是主存储的排序字段，否则就需要顺序扫描整个主存储。\n\n\t\t这要求数据存储按照查询条件来选择主键(mysql中的聚簇索引)，如果查询条件很多，会扫描整个文件。\n\n   * 选择使用索引，然后用找到的row id去主存储加载数据：这样会导致很多碎片化的随机读操作。\n\n   \t从硬盘上随机读写性能低\n\n   Lucene底层读取文件基于mmap，充分利用操作系统的特性来映射文件到内存(列式存储的优点是每列一个文件，可以充分利用mmap，加载需要的列)，所以还是内存越大越好。\n\n5. 分布式聚合如何做得快？\n\n\t通过数据分片，把数据分散到多台机器。在计算时，各个节点index计算聚合结果，然后汇总后在聚合。这样也减少了网络带宽，充分利用了各个节点的计算能力。\n\n6. 为什么时间序列需要更复杂的聚合？\n\n\t通常会有降频(比如原来时间精确到秒，现在需要以分为单位)和降维(比如原来有地域纬度，统计时求所有地区)需求。`ES`支持Pipeline Aggregation可以实现数据在聚合之后再做聚合，能满足多次聚合的需求。\n","source":"_posts/2016-02-reading-notes.md","raw":"---\ntitle: 2016年02月Reading Notes\ndate: 2016-02-01 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n---\n\n## <a name=\"about-arch\">[每个架构师都应该研究下康威定律](http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&mid=408286995&idx=1&sn=1634698023c48b754d42af69cee2ab32)</a>\n\n最近在做`DEVOPS`,看技术的出发点有所变化，正好看到这篇文章，总结下自己。\n\n### 1. 系统架构的目标是解决利益相关者的关注点。\n\n>>架构其实是发现利益相关者（stakeholder），然后解决他们的关注点（concerns）\n>>\n>> 业务方，产品经理，客户/用户，开发经理，工程师，项目经理，测试人员，运维人员，产品运营人员等等都有可能是利益相关者，架构师要充分和利益相关者沟通，深入理解他们的关注点和痛点，并出架构解决这些关注点。\n\n架构师在这里也定位为一个好的需求分析师，但是架构师往往会从自己的角度(利益相关或者立场相关)来设计。我之前一直做开发工作，在技术选型或者研究时，对于可运维性考虑得比较少，在痛过几次后，发现监控的价值，来补充相关`metrics`的能力。\n\n### 2. 关注非功能性需求\n\n* easy to separate\n* easy to understand\n* easy to extend\n* easy to change\n* easy to replace\n* easy to deploy\n* easy to scale\n* easy to recover\n* easy to connect\n* easy to afford\n\n>> Architecture represents the significant design decisions that shape a system, where significant is measured by cost of change.\n>>\n>> 架构的目标是用于管理复杂性、易变性和不确定性，以确保在长期的系统演化过程中，一部分架构的变化不会对架构的其它部分产生不必要的负面影响。\n\n这里补充一点，需要考虑`easy to find the problem`。除了合理的规划日志，我们要做到`failfast`。当关键资源依赖条件不满足，我们最好是把问题用最显示的方式暴露出来，而不是让它在那里一直报错。\n\n### 3. 架构的迭代和演化性\n\n>> 做技术架构的都有点完美主义倾向，一开始往往喜欢求大求全，忽视架构的演化和迭代性，这种倾向易造产品和用户之间不能形成有效快速的反馈，产品不满足最终用户需求.\n>>\n>> 在系统真正地投入生产使用之前，再好的架构都只是假设，产品越晚被使用者使用，失败的成本和风险就越高，而小步行进，通过MVP快速实验，获取客户反馈，迭代演化产品，能有效地减少失败的成本和风险。\n\n好的架构是衍变出来的，而非设计出来的。\n\n### 4. 构建闭环反馈架构\n\n>>第一条道路，系统思维，开发驱动的组织机体，其能力不是制作软件，而是持续的交付客户价值，架构师需要有全局视角和系统思维（System Thinking），深入理解整个价值交付链，从业务需求、研发、测试、集成，到部署运维，这条价值链的效率并不依赖于单个或者几个环节，局部优化的结果往往是全局受损，架构师要站在系统高度去优化整个价值交付链，让企业和客户之间形成快速和高效的价值传递。\n\n>>第二条道路，强化反馈环，任何过程改进的目标都是加强和缩短反馈环。\n>>\n>>收集->测量->调整->闭环重复，在有测量数据和反馈的基础上，系统、应用、流程和客户体验才有可能获得持续的提升和改善，否则没有数据的所谓改进只能靠拍脑袋或者说猜测。\n\n这里提到监控的重要性，**没有测量，就没有改进和提升**，[MDD](http://www.infoq.com/cn/articles/metrics-driven-development)这偏文章有点意思，通过分层和可用的性能指标让开发人员了解项目业务方面的内容，反过来，业务人员也能理解项目技术方面的内容，看到开发人员所面临的问题和我们的负载局限。\n\n\n\n>>第三条道路，鼓励勇于承担责任，冒险试错和持续提升的文化。\n\n最后，贴上一张关于`DevOps`的图。\n\n![](2016-02-reading-notes/devops.jpg)\n\n## 时间序列数据库的秘密\n\n[http://www.infoq.com/cn/articles/database-timestamp-01](http://www.infoq.com/cn/articles/database-timestamp-01)\n\n[http://www.infoq.com/cn/articles/database-timestamp-01](http://www.infoq.com/cn/articles/database-timestamp-01)\n\n[http://www.infoq.com/cn/articles/database-timestamp-01](http://www.infoq.com/cn/articles/database-timestamp-01)\n\n此文讲明白了时序数据库，最近也在纠结这个事(原来一直看好opentsdb，但是没有深入调研opentsdb的细节，对es也不是太了解)，这里总结下全文。\n\n时间序列数据库除了提供查询能力外，我们也希望能够提供在查询阶段做聚合能力。\n\n聚合有有三个步骤:\n\n* 用索引检索出行号(搜索引擎最擅长)\n* 从主存储按行号加载列(列式存储最合适)\n* 计算(分布式计算列数据)\n\n`ES`在这三个步骤上都做得很好。\n\n1. 如何快速检索？\n\n\t![](http://cdn3.infoqstatic.com/statics_s2_20160217-0123u3/resource/articles/database-timestamp-02/zh/resources/0820002.jpg)\n\t\n\tlucene倒排索引由`Term index`->`Term Dictionary`->`Posting List`构成。`TI`是对`TD`做的索引，实现对Term的快速查找。Mysql使用b-tree排序存储`TD`在磁盘上;`Lucene`增加了`TI`保存在内存中，查询效率更高。\n\n2. 如何联合索引查询？\n\n\t对于`age=18 AND gender=女`的查询过滤。mysql的做法是(如果两个列都建立了索引，当然gender列做索引在mysql上没有什么卵用)先在索引上找`age=18`的所有id，然后遍历id匹配。\n\n\tElasticsearch支持：\n\n\t* 使用skip list数据结构。同时遍历gender和age的posting list，互相skip；\n\n\t\t利用skip list(Level0存储原始有序数据，level1存储部分数据，查找时从level1跳过部分数据)，跳过了遍历的成本,并且用`Frame of Reference`(计算差值，分块后，每个块内部选择合适的bit来存储)压缩存储。\n\n\t* 使用bitset数据结构，对gender和age两个filter分别求出bitset，对两个bitset做AN操作。\n\n\t\t大多数场景下，bitset非常稀疏，bitset压缩空间很大。lucene采用`Roaring Bitmap`,算法也有点意思：\n\t\t计算N/65536和N%65536的值，把N/65536相同的分为一个组，分组后根据每个组的情况用short数字或者bitset。\n\n3. 如何减少文档数？\n\n\t一般采用数据库会合并，把多行数据合并成一行，比如把原来精确到秒的数据合并为分。`ES`中使用内嵌文档(Nested Document)实现公共字段的去从(比如应用名、ip、环境标识、metricsname)\n\n4. 如何加载更快？\n\n\t如何利用索引和主存储，是一种两难的选择。\n\n   * 选择不使用索引，只使用主存储：除非查询的字段就是主存储的排序字段，否则就需要顺序扫描整个主存储。\n\n\t\t这要求数据存储按照查询条件来选择主键(mysql中的聚簇索引)，如果查询条件很多，会扫描整个文件。\n\n   * 选择使用索引，然后用找到的row id去主存储加载数据：这样会导致很多碎片化的随机读操作。\n\n   \t从硬盘上随机读写性能低\n\n   Lucene底层读取文件基于mmap，充分利用操作系统的特性来映射文件到内存(列式存储的优点是每列一个文件，可以充分利用mmap，加载需要的列)，所以还是内存越大越好。\n\n5. 分布式聚合如何做得快？\n\n\t通过数据分片，把数据分散到多台机器。在计算时，各个节点index计算聚合结果，然后汇总后在聚合。这样也减少了网络带宽，充分利用了各个节点的计算能力。\n\n6. 为什么时间序列需要更复杂的聚合？\n\n\t通常会有降频(比如原来时间精确到秒，现在需要以分为单位)和降维(比如原来有地域纬度，统计时求所有地区)需求。`ES`支持Pipeline Aggregation可以实现数据在聚合之后再做聚合，能满足多次聚合的需求。\n","slug":"2016-02-reading-notes","published":1,"updated":"2018-04-01T16:53:17.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksgm001mp0ugl7zlumom","content":"<h2 id=\"每个架构师都应该研究下康威定律\"><a href=\"#每个架构师都应该研究下康威定律\" class=\"headerlink\" title=\"每个架构师都应该研究下康威定律\"></a><a name=\"about-arch\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=408286995&amp;idx=1&amp;sn=1634698023c48b754d42af69cee2ab32\" target=\"_blank\" rel=\"noopener\">每个架构师都应该研究下康威定律</a></a></h2><p>最近在做<code>DEVOPS</code>,看技术的出发点有所变化，正好看到这篇文章，总结下自己。</p>\n<h3 id=\"1-系统架构的目标是解决利益相关者的关注点。\"><a href=\"#1-系统架构的目标是解决利益相关者的关注点。\" class=\"headerlink\" title=\"1. 系统架构的目标是解决利益相关者的关注点。\"></a>1. 系统架构的目标是解决利益相关者的关注点。</h3><blockquote>\n<blockquote>\n<p>架构其实是发现利益相关者（stakeholder），然后解决他们的关注点（concerns）</p>\n<p>业务方，产品经理，客户/用户，开发经理，工程师，项目经理，测试人员，运维人员，产品运营人员等等都有可能是利益相关者，架构师要充分和利益相关者沟通，深入理解他们的关注点和痛点，并出架构解决这些关注点。</p>\n</blockquote>\n</blockquote>\n<p>架构师在这里也定位为一个好的需求分析师，但是架构师往往会从自己的角度(利益相关或者立场相关)来设计。我之前一直做开发工作，在技术选型或者研究时，对于可运维性考虑得比较少，在痛过几次后，发现监控的价值，来补充相关<code>metrics</code>的能力。</p>\n<h3 id=\"2-关注非功能性需求\"><a href=\"#2-关注非功能性需求\" class=\"headerlink\" title=\"2. 关注非功能性需求\"></a>2. 关注非功能性需求</h3><ul>\n<li>easy to separate</li>\n<li>easy to understand</li>\n<li>easy to extend</li>\n<li>easy to change</li>\n<li>easy to replace</li>\n<li>easy to deploy</li>\n<li>easy to scale</li>\n<li>easy to recover</li>\n<li>easy to connect</li>\n<li>easy to afford</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>Architecture represents the significant design decisions that shape a system, where significant is measured by cost of change.</p>\n<p>架构的目标是用于管理复杂性、易变性和不确定性，以确保在长期的系统演化过程中，一部分架构的变化不会对架构的其它部分产生不必要的负面影响。</p>\n</blockquote>\n</blockquote>\n<p>这里补充一点，需要考虑<code>easy to find the problem</code>。除了合理的规划日志，我们要做到<code>failfast</code>。当关键资源依赖条件不满足，我们最好是把问题用最显示的方式暴露出来，而不是让它在那里一直报错。</p>\n<h3 id=\"3-架构的迭代和演化性\"><a href=\"#3-架构的迭代和演化性\" class=\"headerlink\" title=\"3. 架构的迭代和演化性\"></a>3. 架构的迭代和演化性</h3><blockquote>\n<blockquote>\n<p>做技术架构的都有点完美主义倾向，一开始往往喜欢求大求全，忽视架构的演化和迭代性，这种倾向易造产品和用户之间不能形成有效快速的反馈，产品不满足最终用户需求.</p>\n<p>在系统真正地投入生产使用之前，再好的架构都只是假设，产品越晚被使用者使用，失败的成本和风险就越高，而小步行进，通过MVP快速实验，获取客户反馈，迭代演化产品，能有效地减少失败的成本和风险。</p>\n</blockquote>\n</blockquote>\n<p>好的架构是衍变出来的，而非设计出来的。</p>\n<h3 id=\"4-构建闭环反馈架构\"><a href=\"#4-构建闭环反馈架构\" class=\"headerlink\" title=\"4. 构建闭环反馈架构\"></a>4. 构建闭环反馈架构</h3><blockquote>\n<blockquote>\n<p>第一条道路，系统思维，开发驱动的组织机体，其能力不是制作软件，而是持续的交付客户价值，架构师需要有全局视角和系统思维（System Thinking），深入理解整个价值交付链，从业务需求、研发、测试、集成，到部署运维，这条价值链的效率并不依赖于单个或者几个环节，局部优化的结果往往是全局受损，架构师要站在系统高度去优化整个价值交付链，让企业和客户之间形成快速和高效的价值传递。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>第二条道路，强化反馈环，任何过程改进的目标都是加强和缩短反馈环。</p>\n<p>收集-&gt;测量-&gt;调整-&gt;闭环重复，在有测量数据和反馈的基础上，系统、应用、流程和客户体验才有可能获得持续的提升和改善，否则没有数据的所谓改进只能靠拍脑袋或者说猜测。</p>\n</blockquote>\n</blockquote>\n<p>这里提到监控的重要性，<strong>没有测量，就没有改进和提升</strong>，<a href=\"http://www.infoq.com/cn/articles/metrics-driven-development\" target=\"_blank\" rel=\"noopener\">MDD</a>这偏文章有点意思，通过分层和可用的性能指标让开发人员了解项目业务方面的内容，反过来，业务人员也能理解项目技术方面的内容，看到开发人员所面临的问题和我们的负载局限。</p>\n<blockquote>\n<blockquote>\n<p>第三条道路，鼓励勇于承担责任，冒险试错和持续提升的文化。</p>\n</blockquote>\n</blockquote>\n<p>最后，贴上一张关于<code>DevOps</code>的图。</p>\n<p><img src=\"/2016-02-reading-notes/devops.jpg\" alt=\"\"></p>\n<h2 id=\"时间序列数据库的秘密\"><a href=\"#时间序列数据库的秘密\" class=\"headerlink\" title=\"时间序列数据库的秘密\"></a>时间序列数据库的秘密</h2><p><a href=\"http://www.infoq.com/cn/articles/database-timestamp-01\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/database-timestamp-01</a></p>\n<p><a href=\"http://www.infoq.com/cn/articles/database-timestamp-01\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/database-timestamp-01</a></p>\n<p><a href=\"http://www.infoq.com/cn/articles/database-timestamp-01\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/database-timestamp-01</a></p>\n<p>此文讲明白了时序数据库，最近也在纠结这个事(原来一直看好opentsdb，但是没有深入调研opentsdb的细节，对es也不是太了解)，这里总结下全文。</p>\n<p>时间序列数据库除了提供查询能力外，我们也希望能够提供在查询阶段做聚合能力。</p>\n<p>聚合有有三个步骤:</p>\n<ul>\n<li>用索引检索出行号(搜索引擎最擅长)</li>\n<li>从主存储按行号加载列(列式存储最合适)</li>\n<li>计算(分布式计算列数据)</li>\n</ul>\n<p><code>ES</code>在这三个步骤上都做得很好。</p>\n<ol>\n<li><p>如何快速检索？</p>\n<p> <img src=\"http://cdn3.infoqstatic.com/statics_s2_20160217-0123u3/resource/articles/database-timestamp-02/zh/resources/0820002.jpg\" alt=\"\"></p>\n<p> lucene倒排索引由<code>Term index</code>-&gt;<code>Term Dictionary</code>-&gt;<code>Posting List</code>构成。<code>TI</code>是对<code>TD</code>做的索引，实现对Term的快速查找。Mysql使用b-tree排序存储<code>TD</code>在磁盘上;<code>Lucene</code>增加了<code>TI</code>保存在内存中，查询效率更高。</p>\n</li>\n<li><p>如何联合索引查询？</p>\n<p> 对于<code>age=18 AND gender=女</code>的查询过滤。mysql的做法是(如果两个列都建立了索引，当然gender列做索引在mysql上没有什么卵用)先在索引上找<code>age=18</code>的所有id，然后遍历id匹配。</p>\n<p> Elasticsearch支持：</p>\n<ul>\n<li><p>使用skip list数据结构。同时遍历gender和age的posting list，互相skip；</p>\n<p>  利用skip list(Level0存储原始有序数据，level1存储部分数据，查找时从level1跳过部分数据)，跳过了遍历的成本,并且用<code>Frame of Reference</code>(计算差值，分块后，每个块内部选择合适的bit来存储)压缩存储。</p>\n</li>\n<li><p>使用bitset数据结构，对gender和age两个filter分别求出bitset，对两个bitset做AN操作。</p>\n<p>  大多数场景下，bitset非常稀疏，bitset压缩空间很大。lucene采用<code>Roaring Bitmap</code>,算法也有点意思：<br>  计算N/65536和N%65536的值，把N/65536相同的分为一个组，分组后根据每个组的情况用short数字或者bitset。</p>\n</li>\n</ul>\n</li>\n<li><p>如何减少文档数？</p>\n<p> 一般采用数据库会合并，把多行数据合并成一行，比如把原来精确到秒的数据合并为分。<code>ES</code>中使用内嵌文档(Nested Document)实现公共字段的去从(比如应用名、ip、环境标识、metricsname)</p>\n</li>\n<li><p>如何加载更快？</p>\n<p> 如何利用索引和主存储，是一种两难的选择。</p>\n<ul>\n<li><p>选择不使用索引，只使用主存储：除非查询的字段就是主存储的排序字段，否则就需要顺序扫描整个主存储。</p>\n<p>   这要求数据存储按照查询条件来选择主键(mysql中的聚簇索引)，如果查询条件很多，会扫描整个文件。</p>\n</li>\n<li><p>选择使用索引，然后用找到的row id去主存储加载数据：这样会导致很多碎片化的随机读操作。</p>\n<p>  从硬盘上随机读写性能低</p>\n</li>\n</ul>\n<p>Lucene底层读取文件基于mmap，充分利用操作系统的特性来映射文件到内存(列式存储的优点是每列一个文件，可以充分利用mmap，加载需要的列)，所以还是内存越大越好。</p>\n</li>\n<li><p>分布式聚合如何做得快？</p>\n<p> 通过数据分片，把数据分散到多台机器。在计算时，各个节点index计算聚合结果，然后汇总后在聚合。这样也减少了网络带宽，充分利用了各个节点的计算能力。</p>\n</li>\n<li><p>为什么时间序列需要更复杂的聚合？</p>\n<p> 通常会有降频(比如原来时间精确到秒，现在需要以分为单位)和降维(比如原来有地域纬度，统计时求所有地区)需求。<code>ES</code>支持Pipeline Aggregation可以实现数据在聚合之后再做聚合，能满足多次聚合的需求。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"每个架构师都应该研究下康威定律\"><a href=\"#每个架构师都应该研究下康威定律\" class=\"headerlink\" title=\"每个架构师都应该研究下康威定律\"></a><a name=\"about-arch\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=408286995&amp;idx=1&amp;sn=1634698023c48b754d42af69cee2ab32\" target=\"_blank\" rel=\"noopener\">每个架构师都应该研究下康威定律</a></a></h2><p>最近在做<code>DEVOPS</code>,看技术的出发点有所变化，正好看到这篇文章，总结下自己。</p>\n<h3 id=\"1-系统架构的目标是解决利益相关者的关注点。\"><a href=\"#1-系统架构的目标是解决利益相关者的关注点。\" class=\"headerlink\" title=\"1. 系统架构的目标是解决利益相关者的关注点。\"></a>1. 系统架构的目标是解决利益相关者的关注点。</h3><blockquote>\n<blockquote>\n<p>架构其实是发现利益相关者（stakeholder），然后解决他们的关注点（concerns）</p>\n<p>业务方，产品经理，客户/用户，开发经理，工程师，项目经理，测试人员，运维人员，产品运营人员等等都有可能是利益相关者，架构师要充分和利益相关者沟通，深入理解他们的关注点和痛点，并出架构解决这些关注点。</p>\n</blockquote>\n</blockquote>\n<p>架构师在这里也定位为一个好的需求分析师，但是架构师往往会从自己的角度(利益相关或者立场相关)来设计。我之前一直做开发工作，在技术选型或者研究时，对于可运维性考虑得比较少，在痛过几次后，发现监控的价值，来补充相关<code>metrics</code>的能力。</p>\n<h3 id=\"2-关注非功能性需求\"><a href=\"#2-关注非功能性需求\" class=\"headerlink\" title=\"2. 关注非功能性需求\"></a>2. 关注非功能性需求</h3><ul>\n<li>easy to separate</li>\n<li>easy to understand</li>\n<li>easy to extend</li>\n<li>easy to change</li>\n<li>easy to replace</li>\n<li>easy to deploy</li>\n<li>easy to scale</li>\n<li>easy to recover</li>\n<li>easy to connect</li>\n<li>easy to afford</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>Architecture represents the significant design decisions that shape a system, where significant is measured by cost of change.</p>\n<p>架构的目标是用于管理复杂性、易变性和不确定性，以确保在长期的系统演化过程中，一部分架构的变化不会对架构的其它部分产生不必要的负面影响。</p>\n</blockquote>\n</blockquote>\n<p>这里补充一点，需要考虑<code>easy to find the problem</code>。除了合理的规划日志，我们要做到<code>failfast</code>。当关键资源依赖条件不满足，我们最好是把问题用最显示的方式暴露出来，而不是让它在那里一直报错。</p>\n<h3 id=\"3-架构的迭代和演化性\"><a href=\"#3-架构的迭代和演化性\" class=\"headerlink\" title=\"3. 架构的迭代和演化性\"></a>3. 架构的迭代和演化性</h3><blockquote>\n<blockquote>\n<p>做技术架构的都有点完美主义倾向，一开始往往喜欢求大求全，忽视架构的演化和迭代性，这种倾向易造产品和用户之间不能形成有效快速的反馈，产品不满足最终用户需求.</p>\n<p>在系统真正地投入生产使用之前，再好的架构都只是假设，产品越晚被使用者使用，失败的成本和风险就越高，而小步行进，通过MVP快速实验，获取客户反馈，迭代演化产品，能有效地减少失败的成本和风险。</p>\n</blockquote>\n</blockquote>\n<p>好的架构是衍变出来的，而非设计出来的。</p>\n<h3 id=\"4-构建闭环反馈架构\"><a href=\"#4-构建闭环反馈架构\" class=\"headerlink\" title=\"4. 构建闭环反馈架构\"></a>4. 构建闭环反馈架构</h3><blockquote>\n<blockquote>\n<p>第一条道路，系统思维，开发驱动的组织机体，其能力不是制作软件，而是持续的交付客户价值，架构师需要有全局视角和系统思维（System Thinking），深入理解整个价值交付链，从业务需求、研发、测试、集成，到部署运维，这条价值链的效率并不依赖于单个或者几个环节，局部优化的结果往往是全局受损，架构师要站在系统高度去优化整个价值交付链，让企业和客户之间形成快速和高效的价值传递。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>第二条道路，强化反馈环，任何过程改进的目标都是加强和缩短反馈环。</p>\n<p>收集-&gt;测量-&gt;调整-&gt;闭环重复，在有测量数据和反馈的基础上，系统、应用、流程和客户体验才有可能获得持续的提升和改善，否则没有数据的所谓改进只能靠拍脑袋或者说猜测。</p>\n</blockquote>\n</blockquote>\n<p>这里提到监控的重要性，<strong>没有测量，就没有改进和提升</strong>，<a href=\"http://www.infoq.com/cn/articles/metrics-driven-development\" target=\"_blank\" rel=\"noopener\">MDD</a>这偏文章有点意思，通过分层和可用的性能指标让开发人员了解项目业务方面的内容，反过来，业务人员也能理解项目技术方面的内容，看到开发人员所面临的问题和我们的负载局限。</p>\n<blockquote>\n<blockquote>\n<p>第三条道路，鼓励勇于承担责任，冒险试错和持续提升的文化。</p>\n</blockquote>\n</blockquote>\n<p>最后，贴上一张关于<code>DevOps</code>的图。</p>\n<p><img src=\"/2016-02-reading-notes/devops.jpg\" alt=\"\"></p>\n<h2 id=\"时间序列数据库的秘密\"><a href=\"#时间序列数据库的秘密\" class=\"headerlink\" title=\"时间序列数据库的秘密\"></a>时间序列数据库的秘密</h2><p><a href=\"http://www.infoq.com/cn/articles/database-timestamp-01\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/database-timestamp-01</a></p>\n<p><a href=\"http://www.infoq.com/cn/articles/database-timestamp-01\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/database-timestamp-01</a></p>\n<p><a href=\"http://www.infoq.com/cn/articles/database-timestamp-01\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/database-timestamp-01</a></p>\n<p>此文讲明白了时序数据库，最近也在纠结这个事(原来一直看好opentsdb，但是没有深入调研opentsdb的细节，对es也不是太了解)，这里总结下全文。</p>\n<p>时间序列数据库除了提供查询能力外，我们也希望能够提供在查询阶段做聚合能力。</p>\n<p>聚合有有三个步骤:</p>\n<ul>\n<li>用索引检索出行号(搜索引擎最擅长)</li>\n<li>从主存储按行号加载列(列式存储最合适)</li>\n<li>计算(分布式计算列数据)</li>\n</ul>\n<p><code>ES</code>在这三个步骤上都做得很好。</p>\n<ol>\n<li><p>如何快速检索？</p>\n<p> <img src=\"http://cdn3.infoqstatic.com/statics_s2_20160217-0123u3/resource/articles/database-timestamp-02/zh/resources/0820002.jpg\" alt=\"\"></p>\n<p> lucene倒排索引由<code>Term index</code>-&gt;<code>Term Dictionary</code>-&gt;<code>Posting List</code>构成。<code>TI</code>是对<code>TD</code>做的索引，实现对Term的快速查找。Mysql使用b-tree排序存储<code>TD</code>在磁盘上;<code>Lucene</code>增加了<code>TI</code>保存在内存中，查询效率更高。</p>\n</li>\n<li><p>如何联合索引查询？</p>\n<p> 对于<code>age=18 AND gender=女</code>的查询过滤。mysql的做法是(如果两个列都建立了索引，当然gender列做索引在mysql上没有什么卵用)先在索引上找<code>age=18</code>的所有id，然后遍历id匹配。</p>\n<p> Elasticsearch支持：</p>\n<ul>\n<li><p>使用skip list数据结构。同时遍历gender和age的posting list，互相skip；</p>\n<p>  利用skip list(Level0存储原始有序数据，level1存储部分数据，查找时从level1跳过部分数据)，跳过了遍历的成本,并且用<code>Frame of Reference</code>(计算差值，分块后，每个块内部选择合适的bit来存储)压缩存储。</p>\n</li>\n<li><p>使用bitset数据结构，对gender和age两个filter分别求出bitset，对两个bitset做AN操作。</p>\n<p>  大多数场景下，bitset非常稀疏，bitset压缩空间很大。lucene采用<code>Roaring Bitmap</code>,算法也有点意思：<br>  计算N/65536和N%65536的值，把N/65536相同的分为一个组，分组后根据每个组的情况用short数字或者bitset。</p>\n</li>\n</ul>\n</li>\n<li><p>如何减少文档数？</p>\n<p> 一般采用数据库会合并，把多行数据合并成一行，比如把原来精确到秒的数据合并为分。<code>ES</code>中使用内嵌文档(Nested Document)实现公共字段的去从(比如应用名、ip、环境标识、metricsname)</p>\n</li>\n<li><p>如何加载更快？</p>\n<p> 如何利用索引和主存储，是一种两难的选择。</p>\n<ul>\n<li><p>选择不使用索引，只使用主存储：除非查询的字段就是主存储的排序字段，否则就需要顺序扫描整个主存储。</p>\n<p>   这要求数据存储按照查询条件来选择主键(mysql中的聚簇索引)，如果查询条件很多，会扫描整个文件。</p>\n</li>\n<li><p>选择使用索引，然后用找到的row id去主存储加载数据：这样会导致很多碎片化的随机读操作。</p>\n<p>  从硬盘上随机读写性能低</p>\n</li>\n</ul>\n<p>Lucene底层读取文件基于mmap，充分利用操作系统的特性来映射文件到内存(列式存储的优点是每列一个文件，可以充分利用mmap，加载需要的列)，所以还是内存越大越好。</p>\n</li>\n<li><p>分布式聚合如何做得快？</p>\n<p> 通过数据分片，把数据分散到多台机器。在计算时，各个节点index计算聚合结果，然后汇总后在聚合。这样也减少了网络带宽，充分利用了各个节点的计算能力。</p>\n</li>\n<li><p>为什么时间序列需要更复杂的聚合？</p>\n<p> 通常会有降频(比如原来时间精确到秒，现在需要以分为单位)和降维(比如原来有地域纬度，统计时求所有地区)需求。<code>ES</code>支持Pipeline Aggregation可以实现数据在聚合之后再做聚合，能满足多次聚合的需求。</p>\n</li>\n</ol>\n"},{"title":"2016年05月Reading Notes","date":"2016-05-11T13:52:17.000Z","_content":"\t\n## NGINX Plus vs. F5 BIG-IP: A Price-Performance Comparison\n\n当通用硬件的处理能力越来越强，专有芯片的使用场景会越来越少，硬件提供商会逐步转型为软件提供商。以前也听到不少声音，比如某硬件负载设备，通用cpu中集成了`LVS`.\n\n未来我们可能、会、应该废弃掉大部分负载均衡设备吧。\n\n## Microservices + Oracle: A Bright Future\n\n这篇文章对微服务的讲述很全面。部分观点不谋而合...\n\n\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/key/y5r6fWXDjIHS9I\" width=\"595\" height=\"485\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/KellyGoetsch/microservices-oracle-a-bright-future\" title=\"Microservices + Oracle: A Bright Future\" target=\"_blank\">Microservices + Oracle: A Bright Future</a> </strong> from <strong><a href=\"//www.slideshare.net/KellyGoetsch\" target=\"_blank\">Kelly Goetsch</a></strong> </div>","source":"_posts/2016-05-reading-notes.md","raw":"---\ntitle: 2016年05月Reading Notes\ndate: 2016-05-11 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n  - nginx plus\n---\n\t\n## NGINX Plus vs. F5 BIG-IP: A Price-Performance Comparison\n\n当通用硬件的处理能力越来越强，专有芯片的使用场景会越来越少，硬件提供商会逐步转型为软件提供商。以前也听到不少声音，比如某硬件负载设备，通用cpu中集成了`LVS`.\n\n未来我们可能、会、应该废弃掉大部分负载均衡设备吧。\n\n## Microservices + Oracle: A Bright Future\n\n这篇文章对微服务的讲述很全面。部分观点不谋而合...\n\n\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/key/y5r6fWXDjIHS9I\" width=\"595\" height=\"485\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/KellyGoetsch/microservices-oracle-a-bright-future\" title=\"Microservices + Oracle: A Bright Future\" target=\"_blank\">Microservices + Oracle: A Bright Future</a> </strong> from <strong><a href=\"//www.slideshare.net/KellyGoetsch\" target=\"_blank\">Kelly Goetsch</a></strong> </div>","slug":"2016-05-reading-notes","published":1,"updated":"2018-04-01T16:53:17.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksgx001pp0ugvkero60x","content":"<h2 id=\"NGINX-Plus-vs-F5-BIG-IP-A-Price-Performance-Comparison\"><a href=\"#NGINX-Plus-vs-F5-BIG-IP-A-Price-Performance-Comparison\" class=\"headerlink\" title=\"NGINX Plus vs. F5 BIG-IP: A Price-Performance Comparison\"></a>NGINX Plus vs. F5 BIG-IP: A Price-Performance Comparison</h2><p>当通用硬件的处理能力越来越强，专有芯片的使用场景会越来越少，硬件提供商会逐步转型为软件提供商。以前也听到不少声音，比如某硬件负载设备，通用cpu中集成了<code>LVS</code>.</p>\n<p>未来我们可能、会、应该废弃掉大部分负载均衡设备吧。</p>\n<h2 id=\"Microservices-Oracle-A-Bright-Future\"><a href=\"#Microservices-Oracle-A-Bright-Future\" class=\"headerlink\" title=\"Microservices + Oracle: A Bright Future\"></a>Microservices + Oracle: A Bright Future</h2><p>这篇文章对微服务的讲述很全面。部分观点不谋而合…</p>\n<p><iframe src=\"//www.slideshare.net/slideshow/embed_code/key/y5r6fWXDjIHS9I\" width=\"595\" height=\"485\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/KellyGoetsch/microservices-oracle-a-bright-future\" title=\"Microservices + Oracle: A Bright Future\" target=\"_blank\">Microservices + Oracle: A Bright Future</a> </strong> from <strong><a href=\"//www.slideshare.net/KellyGoetsch\" target=\"_blank\">Kelly Goetsch</a></strong> </div></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"NGINX-Plus-vs-F5-BIG-IP-A-Price-Performance-Comparison\"><a href=\"#NGINX-Plus-vs-F5-BIG-IP-A-Price-Performance-Comparison\" class=\"headerlink\" title=\"NGINX Plus vs. F5 BIG-IP: A Price-Performance Comparison\"></a>NGINX Plus vs. F5 BIG-IP: A Price-Performance Comparison</h2><p>当通用硬件的处理能力越来越强，专有芯片的使用场景会越来越少，硬件提供商会逐步转型为软件提供商。以前也听到不少声音，比如某硬件负载设备，通用cpu中集成了<code>LVS</code>.</p>\n<p>未来我们可能、会、应该废弃掉大部分负载均衡设备吧。</p>\n<h2 id=\"Microservices-Oracle-A-Bright-Future\"><a href=\"#Microservices-Oracle-A-Bright-Future\" class=\"headerlink\" title=\"Microservices + Oracle: A Bright Future\"></a>Microservices + Oracle: A Bright Future</h2><p>这篇文章对微服务的讲述很全面。部分观点不谋而合…</p>\n<p><iframe src=\"//www.slideshare.net/slideshow/embed_code/key/y5r6fWXDjIHS9I\" width=\"595\" height=\"485\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/KellyGoetsch/microservices-oracle-a-bright-future\" title=\"Microservices + Oracle: A Bright Future\" target=\"_blank\">Microservices + Oracle: A Bright Future</a> </strong> from <strong><a href=\"//www.slideshare.net/KellyGoetsch\" target=\"_blank\">Kelly Goetsch</a></strong> </div></p>\n"},{"title":"2016年06月Reading Notes","date":"2016-06-19T13:52:17.000Z","_content":"\t\n## Service Wiring with Spring Cloud\n\nhttps://www.infoq.com/articles/spring-cloud-service-wiring\n\n这篇文章聊到了spring cloud如何提供配置管理、服务发现、服务路由能力。结合我们的现状谈谈：\n\n1. 有些应用没有做到cloud-ready，依赖服务地址配置信息写死。。\n2. 内部请求用dubbo，实现了服务发现，服务路由，大多数问题已经hold住了\n3. 自研的配置管理系统可以做到配置动态更新，比spring cloud 下的`Enabling Dynamic Refresh`做法优雅多不少\n4. 还需要提供http服务的服务注册、发现能力。为外部http负载均衡、内部http服务依赖提供服务发现、服务路由能力\n\n","source":"_posts/2016-06-reading-notes.md","raw":"---\ntitle: 2016年06月Reading Notes\ndate: 2016-06-19 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n  - nginx plus\n---\n\t\n## Service Wiring with Spring Cloud\n\nhttps://www.infoq.com/articles/spring-cloud-service-wiring\n\n这篇文章聊到了spring cloud如何提供配置管理、服务发现、服务路由能力。结合我们的现状谈谈：\n\n1. 有些应用没有做到cloud-ready，依赖服务地址配置信息写死。。\n2. 内部请求用dubbo，实现了服务发现，服务路由，大多数问题已经hold住了\n3. 自研的配置管理系统可以做到配置动态更新，比spring cloud 下的`Enabling Dynamic Refresh`做法优雅多不少\n4. 还需要提供http服务的服务注册、发现能力。为外部http负载均衡、内部http服务依赖提供服务发现、服务路由能力\n\n","slug":"2016-06-reading-notes","published":1,"updated":"2018-04-01T16:53:17.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksgz001tp0ughrrtd847","content":"<h2 id=\"Service-Wiring-with-Spring-Cloud\"><a href=\"#Service-Wiring-with-Spring-Cloud\" class=\"headerlink\" title=\"Service Wiring with Spring Cloud\"></a>Service Wiring with Spring Cloud</h2><p><a href=\"https://www.infoq.com/articles/spring-cloud-service-wiring\" target=\"_blank\" rel=\"noopener\">https://www.infoq.com/articles/spring-cloud-service-wiring</a></p>\n<p>这篇文章聊到了spring cloud如何提供配置管理、服务发现、服务路由能力。结合我们的现状谈谈：</p>\n<ol>\n<li>有些应用没有做到cloud-ready，依赖服务地址配置信息写死。。</li>\n<li>内部请求用dubbo，实现了服务发现，服务路由，大多数问题已经hold住了</li>\n<li>自研的配置管理系统可以做到配置动态更新，比spring cloud 下的<code>Enabling Dynamic Refresh</code>做法优雅多不少</li>\n<li>还需要提供http服务的服务注册、发现能力。为外部http负载均衡、内部http服务依赖提供服务发现、服务路由能力</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Service-Wiring-with-Spring-Cloud\"><a href=\"#Service-Wiring-with-Spring-Cloud\" class=\"headerlink\" title=\"Service Wiring with Spring Cloud\"></a>Service Wiring with Spring Cloud</h2><p><a href=\"https://www.infoq.com/articles/spring-cloud-service-wiring\" target=\"_blank\" rel=\"noopener\">https://www.infoq.com/articles/spring-cloud-service-wiring</a></p>\n<p>这篇文章聊到了spring cloud如何提供配置管理、服务发现、服务路由能力。结合我们的现状谈谈：</p>\n<ol>\n<li>有些应用没有做到cloud-ready，依赖服务地址配置信息写死。。</li>\n<li>内部请求用dubbo，实现了服务发现，服务路由，大多数问题已经hold住了</li>\n<li>自研的配置管理系统可以做到配置动态更新，比spring cloud 下的<code>Enabling Dynamic Refresh</code>做法优雅多不少</li>\n<li>还需要提供http服务的服务注册、发现能力。为外部http负载均衡、内部http服务依赖提供服务发现、服务路由能力</li>\n</ol>\n"},{"title":"2016年08月Reading Notes","date":"2016-08-10T13:52:17.000Z","_content":"\t\n## 服务发现\n\n服务发现用于动态感知服务提供方地址，并提供服务路由分发策略能力。\n\n### 1. 客户端发现\n\n客户端从注册中心获取服务列表，客户端监听服务列表的变化，客户端通过路由策略选择合适的服务端地址。\n\n服务端在停服务时，需要先通知客户端不要发送新请求过来，等服务端把当前请求处理完后，才断开连接。\n\n### 2. 代理端发现\n\n代理端对外提供服务，主要用于对外请求路由。代理端(比如nginx/haproxy)转发请求到后端服务。后端服务暴露地址到注册中心，代理程序动态获取服务地址。\n\nnginx可以试试[nginx-upsync-module](https://github.com/weibocom/nginx-upsync-module)\n\n在k8s内部，采用nginx+dns+k8s proxy实现。\n\n## 关于高可用系统\n\nhttp://coolshell.cn/articles/17459.html\n\n前段时间写了一段公司的公关文(CUI NIU BI)，强迫自己写了`5个9`。\n\n作者讲了几个大实话：\n\n>>如果你没有一套科学的牛逼的软件工程的管理，没有牛逼先进的自动化的运维工具，没有技术能力很牛逼的工程师团队，怎么可能出现高可用的系统啊。\n\n>>深层次的东西则是——对工程这门科学的尊重：1.对待技术的态度 2.一个公司的工程文化 3.领导者对工程的尊重\n\n佛渡有缘人，点到即止，不强求。\n\n1. 以前对高可用的关注点主要在应用层面，现在加入运维团队后，高可用的关注点延伸到机房、硬件。\n2. 同城双活只要网络质量靠谱点，还是比较好做，主要是南北请求路由控制和东西流量故障切换。\n3. 把服务不可用的因素分成[planned、unplanned](https://docs.oracle.com/cd/A91202_01/901_doc/rac.901/a89867/pshavdtl.htm)，分别设计预案\n\n也许把`SLA`写到合同里，我就不敢乱吹牛逼了。","source":"_posts/2016-08-reading-notes.md","raw":"---\ntitle: 2016年08月Reading Notes\ndate: 2016-08-10 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n  - 服务发现\n---\n\t\n## 服务发现\n\n服务发现用于动态感知服务提供方地址，并提供服务路由分发策略能力。\n\n### 1. 客户端发现\n\n客户端从注册中心获取服务列表，客户端监听服务列表的变化，客户端通过路由策略选择合适的服务端地址。\n\n服务端在停服务时，需要先通知客户端不要发送新请求过来，等服务端把当前请求处理完后，才断开连接。\n\n### 2. 代理端发现\n\n代理端对外提供服务，主要用于对外请求路由。代理端(比如nginx/haproxy)转发请求到后端服务。后端服务暴露地址到注册中心，代理程序动态获取服务地址。\n\nnginx可以试试[nginx-upsync-module](https://github.com/weibocom/nginx-upsync-module)\n\n在k8s内部，采用nginx+dns+k8s proxy实现。\n\n## 关于高可用系统\n\nhttp://coolshell.cn/articles/17459.html\n\n前段时间写了一段公司的公关文(CUI NIU BI)，强迫自己写了`5个9`。\n\n作者讲了几个大实话：\n\n>>如果你没有一套科学的牛逼的软件工程的管理，没有牛逼先进的自动化的运维工具，没有技术能力很牛逼的工程师团队，怎么可能出现高可用的系统啊。\n\n>>深层次的东西则是——对工程这门科学的尊重：1.对待技术的态度 2.一个公司的工程文化 3.领导者对工程的尊重\n\n佛渡有缘人，点到即止，不强求。\n\n1. 以前对高可用的关注点主要在应用层面，现在加入运维团队后，高可用的关注点延伸到机房、硬件。\n2. 同城双活只要网络质量靠谱点，还是比较好做，主要是南北请求路由控制和东西流量故障切换。\n3. 把服务不可用的因素分成[planned、unplanned](https://docs.oracle.com/cd/A91202_01/901_doc/rac.901/a89867/pshavdtl.htm)，分别设计预案\n\n也许把`SLA`写到合同里，我就不敢乱吹牛逼了。","slug":"2016-08-reading-notes","published":1,"updated":"2018-04-01T16:53:17.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksh3001wp0ug0trswaeh","content":"<h2 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h2><p>服务发现用于动态感知服务提供方地址，并提供服务路由分发策略能力。</p>\n<h3 id=\"1-客户端发现\"><a href=\"#1-客户端发现\" class=\"headerlink\" title=\"1. 客户端发现\"></a>1. 客户端发现</h3><p>客户端从注册中心获取服务列表，客户端监听服务列表的变化，客户端通过路由策略选择合适的服务端地址。</p>\n<p>服务端在停服务时，需要先通知客户端不要发送新请求过来，等服务端把当前请求处理完后，才断开连接。</p>\n<h3 id=\"2-代理端发现\"><a href=\"#2-代理端发现\" class=\"headerlink\" title=\"2. 代理端发现\"></a>2. 代理端发现</h3><p>代理端对外提供服务，主要用于对外请求路由。代理端(比如nginx/haproxy)转发请求到后端服务。后端服务暴露地址到注册中心，代理程序动态获取服务地址。</p>\n<p>nginx可以试试<a href=\"https://github.com/weibocom/nginx-upsync-module\" target=\"_blank\" rel=\"noopener\">nginx-upsync-module</a></p>\n<p>在k8s内部，采用nginx+dns+k8s proxy实现。</p>\n<h2 id=\"关于高可用系统\"><a href=\"#关于高可用系统\" class=\"headerlink\" title=\"关于高可用系统\"></a>关于高可用系统</h2><p><a href=\"http://coolshell.cn/articles/17459.html\" target=\"_blank\" rel=\"noopener\">http://coolshell.cn/articles/17459.html</a></p>\n<p>前段时间写了一段公司的公关文(CUI NIU BI)，强迫自己写了<code>5个9</code>。</p>\n<p>作者讲了几个大实话：</p>\n<blockquote>\n<blockquote>\n<p>如果你没有一套科学的牛逼的软件工程的管理，没有牛逼先进的自动化的运维工具，没有技术能力很牛逼的工程师团队，怎么可能出现高可用的系统啊。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>深层次的东西则是——对工程这门科学的尊重：1.对待技术的态度 2.一个公司的工程文化 3.领导者对工程的尊重</p>\n</blockquote>\n</blockquote>\n<p>佛渡有缘人，点到即止，不强求。</p>\n<ol>\n<li>以前对高可用的关注点主要在应用层面，现在加入运维团队后，高可用的关注点延伸到机房、硬件。</li>\n<li>同城双活只要网络质量靠谱点，还是比较好做，主要是南北请求路由控制和东西流量故障切换。</li>\n<li>把服务不可用的因素分成<a href=\"https://docs.oracle.com/cd/A91202_01/901_doc/rac.901/a89867/pshavdtl.htm\" target=\"_blank\" rel=\"noopener\">planned、unplanned</a>，分别设计预案</li>\n</ol>\n<p>也许把<code>SLA</code>写到合同里，我就不敢乱吹牛逼了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h2><p>服务发现用于动态感知服务提供方地址，并提供服务路由分发策略能力。</p>\n<h3 id=\"1-客户端发现\"><a href=\"#1-客户端发现\" class=\"headerlink\" title=\"1. 客户端发现\"></a>1. 客户端发现</h3><p>客户端从注册中心获取服务列表，客户端监听服务列表的变化，客户端通过路由策略选择合适的服务端地址。</p>\n<p>服务端在停服务时，需要先通知客户端不要发送新请求过来，等服务端把当前请求处理完后，才断开连接。</p>\n<h3 id=\"2-代理端发现\"><a href=\"#2-代理端发现\" class=\"headerlink\" title=\"2. 代理端发现\"></a>2. 代理端发现</h3><p>代理端对外提供服务，主要用于对外请求路由。代理端(比如nginx/haproxy)转发请求到后端服务。后端服务暴露地址到注册中心，代理程序动态获取服务地址。</p>\n<p>nginx可以试试<a href=\"https://github.com/weibocom/nginx-upsync-module\" target=\"_blank\" rel=\"noopener\">nginx-upsync-module</a></p>\n<p>在k8s内部，采用nginx+dns+k8s proxy实现。</p>\n<h2 id=\"关于高可用系统\"><a href=\"#关于高可用系统\" class=\"headerlink\" title=\"关于高可用系统\"></a>关于高可用系统</h2><p><a href=\"http://coolshell.cn/articles/17459.html\" target=\"_blank\" rel=\"noopener\">http://coolshell.cn/articles/17459.html</a></p>\n<p>前段时间写了一段公司的公关文(CUI NIU BI)，强迫自己写了<code>5个9</code>。</p>\n<p>作者讲了几个大实话：</p>\n<blockquote>\n<blockquote>\n<p>如果你没有一套科学的牛逼的软件工程的管理，没有牛逼先进的自动化的运维工具，没有技术能力很牛逼的工程师团队，怎么可能出现高可用的系统啊。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>深层次的东西则是——对工程这门科学的尊重：1.对待技术的态度 2.一个公司的工程文化 3.领导者对工程的尊重</p>\n</blockquote>\n</blockquote>\n<p>佛渡有缘人，点到即止，不强求。</p>\n<ol>\n<li>以前对高可用的关注点主要在应用层面，现在加入运维团队后，高可用的关注点延伸到机房、硬件。</li>\n<li>同城双活只要网络质量靠谱点，还是比较好做，主要是南北请求路由控制和东西流量故障切换。</li>\n<li>把服务不可用的因素分成<a href=\"https://docs.oracle.com/cd/A91202_01/901_doc/rac.901/a89867/pshavdtl.htm\" target=\"_blank\" rel=\"noopener\">planned、unplanned</a>，分别设计预案</li>\n</ol>\n<p>也许把<code>SLA</code>写到合同里，我就不敢乱吹牛逼了。</p>\n"},{"title":"don't worry, be happy!","date":"2015-11-22T13:52:17.000Z","_content":"\t\n\n### 情绪地雷区避雷方案：\n\n1. 安排B计划 (比如等人吃饭，提前准备点事做，别人没到就做自己的事)\n2. 公开自己的情绪死穴 (比如提前给人说哪些是不喜欢的，如果你这样做了，我也避免不了我不发脾气)\n\n### 情绪管理在生活与工作中的应用\n\n1. 正向思考\n\n\t凡事往正面的角度去想，选取对自己最有利的注解\n\n2. 转移注意力\n\n\t去做能带来好情绪的活动或事情。比如吃自己最喜爱的食物\n\t\n3. 让开放的肢体动作带动情绪\n\n\t比如去爬山，去跑步，去旅游。\n\t\n4. 透过问句引导自己改变认知\n\n\t\ta.对方是故意的还是无心的？\n\t\tb.这件事还有没有其他角度与意义可以让我感觉更好？\n\t\tc.如果我希望自己的情绪变好，现在我应该做什么？\n\t\td.这样做是真的会让情绪变好还是会有后遗症？\n\t\te.我可以寻求谁的帮助来改善自己的情绪？\n\t\n\n5. 发现自己情绪有失控的感觉或倾向，必要时离开现场\n6. 把不满、愤怒、失意等负面情绪写在纸上，然后烧掉、冲掉、寄出或者收藏\n7. 了解自身的有点，积极表现自己，但求尽心尽力\n8. 多看别人的好，适度予以宽容的对待\n9. 接近拥有心灵智慧的良师益友\n\n\t智慧不起烦恼，慈悲没有敌人\n\t\n10. 提醒自己：世间事都只是过程而非结果\n\n\t每件事最终都会过去，包括我自己(凡人必有一死)\n\t\n11. 全力以赴后，放下得失心，因为你没有办法决定所有的事一定如你所愿\n\n\t战胜对手只是人生的赢家，战胜自己才是命运的强者\n\t\n### 哈佛大学推荐20个快乐的习惯\n\n1. be grateful\t(学会感恩)\n\n\t让自己变慢脚步，看看你的四周，关注生活中的细微之处：人行道上淡紫色的花，美丽的日落，洗去你一天疲惫的淋浴，伴侣眼中的笑容。当你的感恩之心能够欣赏生活的美，思考和祝福，你自然就充满了幸福感。\n\t\n2. choose your friedns wisely\n\n\t如果你想变得开心的话，要选择和乐观的朋友在一起，他们能欣赏你真实的自己，让你的生活变得更丰富，快乐，有意义。\n\n3. cultivate compassion (培养同情心)\n\n\t当我们代替别人，站在另一个角度看问题，我们更能用同情心，客观和有效的处理问题。生活中就会少一些冲突，多一点快乐。\n\t\n4. keep leaning\n\n\t学习让我们保持年轻，梦想让我们充满活力。我们运用大脑，进行运作的时候，我们就不大会想不开心心的事情，我们会变得更开心和满足。\n\n5. become a problem solver (学会解决问题)\n6. do what you love\n7. live in the present\n\n\t你感到沮丧，是因为你活在过去。你会感到担忧和焦虑，是因为你活在未来。但是当你感到满足，开心和平和时，你才是活在当下。\n\t\n8. laugh often\n\n\t　笑是对抗生气或沮丧最有力的的东西。不要把生活看的太严肃。要学会在每日的奋斗中寻找幽默感和笑声。\n\t　\n9. practice forgiveness\n\n\t憎恨和生气是对自我的惩罚。当你释怀的时候，事实上你是在对自己施以善意。最重要的是，学会原谅自己。每个人都犯错。只有通过我们的错误，我们才慢慢学会如何成为一个更强大，更好的人。\n\t\n10. say thanks often\n\n\t对生活中的祝福要学会欣赏。向那些让你生活变好的人，无论或大或小，表达出你的欣赏之情也同样重要。\n\t\n11. create deeper connections （学会深交）\n\n\t我们的幸福感会在和另一个人的深交中不断猛增。专注聆听是加强这种关系纽带和把幸福感带给自己和别人的两个最重要的方面。\n\t\n12. keep you agreement\n\n\t我们的自尊是建立在我们对自己守承诺的情况下。高度的自尊和幸福感有直接关联。所以要对自己和别人遵守承诺。\n\t\n13. meditate （冥想）\n14. focus on what you're doing\n\n\t当你全身心投入一件事的时候，你就会处于一个开心的状态。当我们处于这种状态，你就不大会关心别人对你怎么看，不大会被不大重要的事情干扰。结果呢？更幸福，当然啦！\n\t\n15. be optimistic\n\n\t对于开心的人来说，玻璃都一直是半满的。每当你面对一个挑战时，如果你倾向于想象最坏的想法，那就自我转换这种情况。告诉你自己一个状况中的好处或者你从中学到的东西。乐观肯定能驱动成功和幸福感。\n\n16. love unconditionally\n\n\t没人是完美的,接受你自己所有的不完美,也要这样对待别人。无条件的爱一个人并不意味着你要花所有的时间和他们在一起，或者帮助他们解决问题。无条件的爱意味着接受真实的他们，以他们自己的步伐，让他们自己摸索。\n\t\n17. don't give up\n\n\t没有完成的方案和不断的失败不可避免的会削弱你的自尊。如果你决定做某事，做完它。\n\t\n18. do you best and then let go\n\n\t每个人都有局限性。而且有时候尽管我们很努力做一件事情，但是总会事与愿违。所以做最好的自己，然后放手。当你尽了全力，你就没有遗憾了。\n\t\n19. take care of yourself\n\n\t一个健康的身体是幸福的关键。如果你身体不好，你无论如何努力，都很难快乐。确信自己吃得好，做锻炼，找点时间休息。好好照顾你的身体，大脑和精神。\n\t\n20. give back （学会给予）\n\n\t做好事是最能确保你心情好的方法之一。根据哈佛，人们做好事，他们的大脑变得活跃，就好像当你经历别的奖励时，大脑所受的刺激。所以，那些关心别人的人要比不大关心别人的人更开心。\n\t","source":"_posts/be-happy.md","raw":"---\ntitle: don't worry, be happy!\ndate: 2015-11-22 21:52:17\ncategories: java\ntags:\n  - be happy\n---\n\t\n\n### 情绪地雷区避雷方案：\n\n1. 安排B计划 (比如等人吃饭，提前准备点事做，别人没到就做自己的事)\n2. 公开自己的情绪死穴 (比如提前给人说哪些是不喜欢的，如果你这样做了，我也避免不了我不发脾气)\n\n### 情绪管理在生活与工作中的应用\n\n1. 正向思考\n\n\t凡事往正面的角度去想，选取对自己最有利的注解\n\n2. 转移注意力\n\n\t去做能带来好情绪的活动或事情。比如吃自己最喜爱的食物\n\t\n3. 让开放的肢体动作带动情绪\n\n\t比如去爬山，去跑步，去旅游。\n\t\n4. 透过问句引导自己改变认知\n\n\t\ta.对方是故意的还是无心的？\n\t\tb.这件事还有没有其他角度与意义可以让我感觉更好？\n\t\tc.如果我希望自己的情绪变好，现在我应该做什么？\n\t\td.这样做是真的会让情绪变好还是会有后遗症？\n\t\te.我可以寻求谁的帮助来改善自己的情绪？\n\t\n\n5. 发现自己情绪有失控的感觉或倾向，必要时离开现场\n6. 把不满、愤怒、失意等负面情绪写在纸上，然后烧掉、冲掉、寄出或者收藏\n7. 了解自身的有点，积极表现自己，但求尽心尽力\n8. 多看别人的好，适度予以宽容的对待\n9. 接近拥有心灵智慧的良师益友\n\n\t智慧不起烦恼，慈悲没有敌人\n\t\n10. 提醒自己：世间事都只是过程而非结果\n\n\t每件事最终都会过去，包括我自己(凡人必有一死)\n\t\n11. 全力以赴后，放下得失心，因为你没有办法决定所有的事一定如你所愿\n\n\t战胜对手只是人生的赢家，战胜自己才是命运的强者\n\t\n### 哈佛大学推荐20个快乐的习惯\n\n1. be grateful\t(学会感恩)\n\n\t让自己变慢脚步，看看你的四周，关注生活中的细微之处：人行道上淡紫色的花，美丽的日落，洗去你一天疲惫的淋浴，伴侣眼中的笑容。当你的感恩之心能够欣赏生活的美，思考和祝福，你自然就充满了幸福感。\n\t\n2. choose your friedns wisely\n\n\t如果你想变得开心的话，要选择和乐观的朋友在一起，他们能欣赏你真实的自己，让你的生活变得更丰富，快乐，有意义。\n\n3. cultivate compassion (培养同情心)\n\n\t当我们代替别人，站在另一个角度看问题，我们更能用同情心，客观和有效的处理问题。生活中就会少一些冲突，多一点快乐。\n\t\n4. keep leaning\n\n\t学习让我们保持年轻，梦想让我们充满活力。我们运用大脑，进行运作的时候，我们就不大会想不开心心的事情，我们会变得更开心和满足。\n\n5. become a problem solver (学会解决问题)\n6. do what you love\n7. live in the present\n\n\t你感到沮丧，是因为你活在过去。你会感到担忧和焦虑，是因为你活在未来。但是当你感到满足，开心和平和时，你才是活在当下。\n\t\n8. laugh often\n\n\t　笑是对抗生气或沮丧最有力的的东西。不要把生活看的太严肃。要学会在每日的奋斗中寻找幽默感和笑声。\n\t　\n9. practice forgiveness\n\n\t憎恨和生气是对自我的惩罚。当你释怀的时候，事实上你是在对自己施以善意。最重要的是，学会原谅自己。每个人都犯错。只有通过我们的错误，我们才慢慢学会如何成为一个更强大，更好的人。\n\t\n10. say thanks often\n\n\t对生活中的祝福要学会欣赏。向那些让你生活变好的人，无论或大或小，表达出你的欣赏之情也同样重要。\n\t\n11. create deeper connections （学会深交）\n\n\t我们的幸福感会在和另一个人的深交中不断猛增。专注聆听是加强这种关系纽带和把幸福感带给自己和别人的两个最重要的方面。\n\t\n12. keep you agreement\n\n\t我们的自尊是建立在我们对自己守承诺的情况下。高度的自尊和幸福感有直接关联。所以要对自己和别人遵守承诺。\n\t\n13. meditate （冥想）\n14. focus on what you're doing\n\n\t当你全身心投入一件事的时候，你就会处于一个开心的状态。当我们处于这种状态，你就不大会关心别人对你怎么看，不大会被不大重要的事情干扰。结果呢？更幸福，当然啦！\n\t\n15. be optimistic\n\n\t对于开心的人来说，玻璃都一直是半满的。每当你面对一个挑战时，如果你倾向于想象最坏的想法，那就自我转换这种情况。告诉你自己一个状况中的好处或者你从中学到的东西。乐观肯定能驱动成功和幸福感。\n\n16. love unconditionally\n\n\t没人是完美的,接受你自己所有的不完美,也要这样对待别人。无条件的爱一个人并不意味着你要花所有的时间和他们在一起，或者帮助他们解决问题。无条件的爱意味着接受真实的他们，以他们自己的步伐，让他们自己摸索。\n\t\n17. don't give up\n\n\t没有完成的方案和不断的失败不可避免的会削弱你的自尊。如果你决定做某事，做完它。\n\t\n18. do you best and then let go\n\n\t每个人都有局限性。而且有时候尽管我们很努力做一件事情，但是总会事与愿违。所以做最好的自己，然后放手。当你尽了全力，你就没有遗憾了。\n\t\n19. take care of yourself\n\n\t一个健康的身体是幸福的关键。如果你身体不好，你无论如何努力，都很难快乐。确信自己吃得好，做锻炼，找点时间休息。好好照顾你的身体，大脑和精神。\n\t\n20. give back （学会给予）\n\n\t做好事是最能确保你心情好的方法之一。根据哈佛，人们做好事，他们的大脑变得活跃，就好像当你经历别的奖励时，大脑所受的刺激。所以，那些关心别人的人要比不大关心别人的人更开心。\n\t","slug":"be-happy","published":1,"updated":"2018-04-01T16:53:17.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksh5001zp0uga6t7j1d4","content":"<h3 id=\"情绪地雷区避雷方案：\"><a href=\"#情绪地雷区避雷方案：\" class=\"headerlink\" title=\"情绪地雷区避雷方案：\"></a>情绪地雷区避雷方案：</h3><ol>\n<li>安排B计划 (比如等人吃饭，提前准备点事做，别人没到就做自己的事)</li>\n<li>公开自己的情绪死穴 (比如提前给人说哪些是不喜欢的，如果你这样做了，我也避免不了我不发脾气)</li>\n</ol>\n<h3 id=\"情绪管理在生活与工作中的应用\"><a href=\"#情绪管理在生活与工作中的应用\" class=\"headerlink\" title=\"情绪管理在生活与工作中的应用\"></a>情绪管理在生活与工作中的应用</h3><ol>\n<li><p>正向思考</p>\n<p> 凡事往正面的角度去想，选取对自己最有利的注解</p>\n</li>\n<li><p>转移注意力</p>\n<p> 去做能带来好情绪的活动或事情。比如吃自己最喜爱的食物</p>\n</li>\n<li><p>让开放的肢体动作带动情绪</p>\n<p> 比如去爬山，去跑步，去旅游。</p>\n</li>\n<li><p>透过问句引导自己改变认知</p>\n<pre><code>a.对方是故意的还是无心的？\nb.这件事还有没有其他角度与意义可以让我感觉更好？\nc.如果我希望自己的情绪变好，现在我应该做什么？\nd.这样做是真的会让情绪变好还是会有后遗症？\ne.我可以寻求谁的帮助来改善自己的情绪？\n</code></pre></li>\n</ol>\n<ol>\n<li>发现自己情绪有失控的感觉或倾向，必要时离开现场</li>\n<li>把不满、愤怒、失意等负面情绪写在纸上，然后烧掉、冲掉、寄出或者收藏</li>\n<li>了解自身的有点，积极表现自己，但求尽心尽力</li>\n<li>多看别人的好，适度予以宽容的对待</li>\n<li><p>接近拥有心灵智慧的良师益友</p>\n<p> 智慧不起烦恼，慈悲没有敌人</p>\n</li>\n<li><p>提醒自己：世间事都只是过程而非结果</p>\n<p>每件事最终都会过去，包括我自己(凡人必有一死)</p>\n</li>\n<li><p>全力以赴后，放下得失心，因为你没有办法决定所有的事一定如你所愿</p>\n<p>战胜对手只是人生的赢家，战胜自己才是命运的强者</p>\n</li>\n</ol>\n<h3 id=\"哈佛大学推荐20个快乐的习惯\"><a href=\"#哈佛大学推荐20个快乐的习惯\" class=\"headerlink\" title=\"哈佛大学推荐20个快乐的习惯\"></a>哈佛大学推荐20个快乐的习惯</h3><ol>\n<li><p>be grateful    (学会感恩)</p>\n<p> 让自己变慢脚步，看看你的四周，关注生活中的细微之处：人行道上淡紫色的花，美丽的日落，洗去你一天疲惫的淋浴，伴侣眼中的笑容。当你的感恩之心能够欣赏生活的美，思考和祝福，你自然就充满了幸福感。</p>\n</li>\n<li><p>choose your friedns wisely</p>\n<p> 如果你想变得开心的话，要选择和乐观的朋友在一起，他们能欣赏你真实的自己，让你的生活变得更丰富，快乐，有意义。</p>\n</li>\n<li><p>cultivate compassion (培养同情心)</p>\n<p> 当我们代替别人，站在另一个角度看问题，我们更能用同情心，客观和有效的处理问题。生活中就会少一些冲突，多一点快乐。</p>\n</li>\n<li><p>keep leaning</p>\n<p> 学习让我们保持年轻，梦想让我们充满活力。我们运用大脑，进行运作的时候，我们就不大会想不开心心的事情，我们会变得更开心和满足。</p>\n</li>\n<li><p>become a problem solver (学会解决问题)</p>\n</li>\n<li>do what you love</li>\n<li><p>live in the present</p>\n<p> 你感到沮丧，是因为你活在过去。你会感到担忧和焦虑，是因为你活在未来。但是当你感到满足，开心和平和时，你才是活在当下。</p>\n</li>\n<li><p>laugh often</p>\n<p> 　笑是对抗生气或沮丧最有力的的东西。不要把生活看的太严肃。要学会在每日的奋斗中寻找幽默感和笑声。\n 　</p>\n</li>\n<li><p>practice forgiveness</p>\n<p> 憎恨和生气是对自我的惩罚。当你释怀的时候，事实上你是在对自己施以善意。最重要的是，学会原谅自己。每个人都犯错。只有通过我们的错误，我们才慢慢学会如何成为一个更强大，更好的人。</p>\n</li>\n<li><p>say thanks often</p>\n<p>对生活中的祝福要学会欣赏。向那些让你生活变好的人，无论或大或小，表达出你的欣赏之情也同样重要。</p>\n</li>\n<li><p>create deeper connections （学会深交）</p>\n<p>我们的幸福感会在和另一个人的深交中不断猛增。专注聆听是加强这种关系纽带和把幸福感带给自己和别人的两个最重要的方面。</p>\n</li>\n<li><p>keep you agreement</p>\n<p>我们的自尊是建立在我们对自己守承诺的情况下。高度的自尊和幸福感有直接关联。所以要对自己和别人遵守承诺。</p>\n</li>\n<li><p>meditate （冥想）</p>\n</li>\n<li><p>focus on what you’re doing</p>\n<p>当你全身心投入一件事的时候，你就会处于一个开心的状态。当我们处于这种状态，你就不大会关心别人对你怎么看，不大会被不大重要的事情干扰。结果呢？更幸福，当然啦！</p>\n</li>\n<li><p>be optimistic</p>\n<p>对于开心的人来说，玻璃都一直是半满的。每当你面对一个挑战时，如果你倾向于想象最坏的想法，那就自我转换这种情况。告诉你自己一个状况中的好处或者你从中学到的东西。乐观肯定能驱动成功和幸福感。</p>\n</li>\n<li><p>love unconditionally</p>\n<p>没人是完美的,接受你自己所有的不完美,也要这样对待别人。无条件的爱一个人并不意味着你要花所有的时间和他们在一起，或者帮助他们解决问题。无条件的爱意味着接受真实的他们，以他们自己的步伐，让他们自己摸索。</p>\n</li>\n<li><p>don’t give up</p>\n<p>没有完成的方案和不断的失败不可避免的会削弱你的自尊。如果你决定做某事，做完它。</p>\n</li>\n<li><p>do you best and then let go</p>\n<p>每个人都有局限性。而且有时候尽管我们很努力做一件事情，但是总会事与愿违。所以做最好的自己，然后放手。当你尽了全力，你就没有遗憾了。</p>\n</li>\n<li><p>take care of yourself</p>\n<p>一个健康的身体是幸福的关键。如果你身体不好，你无论如何努力，都很难快乐。确信自己吃得好，做锻炼，找点时间休息。好好照顾你的身体，大脑和精神。</p>\n</li>\n<li><p>give back （学会给予）</p>\n<p>做好事是最能确保你心情好的方法之一。根据哈佛，人们做好事，他们的大脑变得活跃，就好像当你经历别的奖励时，大脑所受的刺激。所以，那些关心别人的人要比不大关心别人的人更开心。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"情绪地雷区避雷方案：\"><a href=\"#情绪地雷区避雷方案：\" class=\"headerlink\" title=\"情绪地雷区避雷方案：\"></a>情绪地雷区避雷方案：</h3><ol>\n<li>安排B计划 (比如等人吃饭，提前准备点事做，别人没到就做自己的事)</li>\n<li>公开自己的情绪死穴 (比如提前给人说哪些是不喜欢的，如果你这样做了，我也避免不了我不发脾气)</li>\n</ol>\n<h3 id=\"情绪管理在生活与工作中的应用\"><a href=\"#情绪管理在生活与工作中的应用\" class=\"headerlink\" title=\"情绪管理在生活与工作中的应用\"></a>情绪管理在生活与工作中的应用</h3><ol>\n<li><p>正向思考</p>\n<p> 凡事往正面的角度去想，选取对自己最有利的注解</p>\n</li>\n<li><p>转移注意力</p>\n<p> 去做能带来好情绪的活动或事情。比如吃自己最喜爱的食物</p>\n</li>\n<li><p>让开放的肢体动作带动情绪</p>\n<p> 比如去爬山，去跑步，去旅游。</p>\n</li>\n<li><p>透过问句引导自己改变认知</p>\n<pre><code>a.对方是故意的还是无心的？\nb.这件事还有没有其他角度与意义可以让我感觉更好？\nc.如果我希望自己的情绪变好，现在我应该做什么？\nd.这样做是真的会让情绪变好还是会有后遗症？\ne.我可以寻求谁的帮助来改善自己的情绪？\n</code></pre></li>\n</ol>\n<ol>\n<li>发现自己情绪有失控的感觉或倾向，必要时离开现场</li>\n<li>把不满、愤怒、失意等负面情绪写在纸上，然后烧掉、冲掉、寄出或者收藏</li>\n<li>了解自身的有点，积极表现自己，但求尽心尽力</li>\n<li>多看别人的好，适度予以宽容的对待</li>\n<li><p>接近拥有心灵智慧的良师益友</p>\n<p> 智慧不起烦恼，慈悲没有敌人</p>\n</li>\n<li><p>提醒自己：世间事都只是过程而非结果</p>\n<p>每件事最终都会过去，包括我自己(凡人必有一死)</p>\n</li>\n<li><p>全力以赴后，放下得失心，因为你没有办法决定所有的事一定如你所愿</p>\n<p>战胜对手只是人生的赢家，战胜自己才是命运的强者</p>\n</li>\n</ol>\n<h3 id=\"哈佛大学推荐20个快乐的习惯\"><a href=\"#哈佛大学推荐20个快乐的习惯\" class=\"headerlink\" title=\"哈佛大学推荐20个快乐的习惯\"></a>哈佛大学推荐20个快乐的习惯</h3><ol>\n<li><p>be grateful    (学会感恩)</p>\n<p> 让自己变慢脚步，看看你的四周，关注生活中的细微之处：人行道上淡紫色的花，美丽的日落，洗去你一天疲惫的淋浴，伴侣眼中的笑容。当你的感恩之心能够欣赏生活的美，思考和祝福，你自然就充满了幸福感。</p>\n</li>\n<li><p>choose your friedns wisely</p>\n<p> 如果你想变得开心的话，要选择和乐观的朋友在一起，他们能欣赏你真实的自己，让你的生活变得更丰富，快乐，有意义。</p>\n</li>\n<li><p>cultivate compassion (培养同情心)</p>\n<p> 当我们代替别人，站在另一个角度看问题，我们更能用同情心，客观和有效的处理问题。生活中就会少一些冲突，多一点快乐。</p>\n</li>\n<li><p>keep leaning</p>\n<p> 学习让我们保持年轻，梦想让我们充满活力。我们运用大脑，进行运作的时候，我们就不大会想不开心心的事情，我们会变得更开心和满足。</p>\n</li>\n<li><p>become a problem solver (学会解决问题)</p>\n</li>\n<li>do what you love</li>\n<li><p>live in the present</p>\n<p> 你感到沮丧，是因为你活在过去。你会感到担忧和焦虑，是因为你活在未来。但是当你感到满足，开心和平和时，你才是活在当下。</p>\n</li>\n<li><p>laugh often</p>\n<p> 　笑是对抗生气或沮丧最有力的的东西。不要把生活看的太严肃。要学会在每日的奋斗中寻找幽默感和笑声。\n 　</p>\n</li>\n<li><p>practice forgiveness</p>\n<p> 憎恨和生气是对自我的惩罚。当你释怀的时候，事实上你是在对自己施以善意。最重要的是，学会原谅自己。每个人都犯错。只有通过我们的错误，我们才慢慢学会如何成为一个更强大，更好的人。</p>\n</li>\n<li><p>say thanks often</p>\n<p>对生活中的祝福要学会欣赏。向那些让你生活变好的人，无论或大或小，表达出你的欣赏之情也同样重要。</p>\n</li>\n<li><p>create deeper connections （学会深交）</p>\n<p>我们的幸福感会在和另一个人的深交中不断猛增。专注聆听是加强这种关系纽带和把幸福感带给自己和别人的两个最重要的方面。</p>\n</li>\n<li><p>keep you agreement</p>\n<p>我们的自尊是建立在我们对自己守承诺的情况下。高度的自尊和幸福感有直接关联。所以要对自己和别人遵守承诺。</p>\n</li>\n<li><p>meditate （冥想）</p>\n</li>\n<li><p>focus on what you’re doing</p>\n<p>当你全身心投入一件事的时候，你就会处于一个开心的状态。当我们处于这种状态，你就不大会关心别人对你怎么看，不大会被不大重要的事情干扰。结果呢？更幸福，当然啦！</p>\n</li>\n<li><p>be optimistic</p>\n<p>对于开心的人来说，玻璃都一直是半满的。每当你面对一个挑战时，如果你倾向于想象最坏的想法，那就自我转换这种情况。告诉你自己一个状况中的好处或者你从中学到的东西。乐观肯定能驱动成功和幸福感。</p>\n</li>\n<li><p>love unconditionally</p>\n<p>没人是完美的,接受你自己所有的不完美,也要这样对待别人。无条件的爱一个人并不意味着你要花所有的时间和他们在一起，或者帮助他们解决问题。无条件的爱意味着接受真实的他们，以他们自己的步伐，让他们自己摸索。</p>\n</li>\n<li><p>don’t give up</p>\n<p>没有完成的方案和不断的失败不可避免的会削弱你的自尊。如果你决定做某事，做完它。</p>\n</li>\n<li><p>do you best and then let go</p>\n<p>每个人都有局限性。而且有时候尽管我们很努力做一件事情，但是总会事与愿违。所以做最好的自己，然后放手。当你尽了全力，你就没有遗憾了。</p>\n</li>\n<li><p>take care of yourself</p>\n<p>一个健康的身体是幸福的关键。如果你身体不好，你无论如何努力，都很难快乐。确信自己吃得好，做锻炼，找点时间休息。好好照顾你的身体，大脑和精神。</p>\n</li>\n<li><p>give back （学会给予）</p>\n<p>做好事是最能确保你心情好的方法之一。根据哈佛，人们做好事，他们的大脑变得活跃，就好像当你经历别的奖励时，大脑所受的刺激。所以，那些关心别人的人要比不大关心别人的人更开心。</p>\n</li>\n</ol>\n"},{"title":"cxf如何传字段为null","date":"2013-11-29T13:52:17.000Z","_content":"\n传输对象如下：\n\n\tpublic class EmailSenderOrder {\n\tprivate String clientName=\"test\";\n\t//clientName默认值为test\n\t}\n\n应用场景需要传输的`clientName`为null，我们在使用client时，会有如下代码：\n\n\tEmailSenderOrder emailSenderOrder = new EmailSenderOrder(); \n\temailSenderOrder.setClientName(null); \n\n服务端在接受到对象后，clientName结果等于了test。\n<!--more-->\n默认情况下，如果field为null，cxf client生成的报文中没有这个field的报文，这就导致在反序列化时，初始化对象时用了默认值。\n\n可以如下解决：\n\n\t//通过字段序列化\n\t@XmlAccessorType(XmlAccessType.FIELD) \n\n\tpublic class EmailSenderOrder {\n\n\t//如果clientName为null，生成报文<clientName xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:nil=\"true\"/>\n\t@XmlElement(name = \"clientName\", nillable = true) \n\tprivate String clientName=\"test\";\n\t\n\t}","source":"_posts/cxf-trans-filed-null.md","raw":"---\ntitle: cxf如何传字段为null\ndate: 2013-11-29 21:52:17\ncategories: java\ntags:\n  - cxf\n---\n\n传输对象如下：\n\n\tpublic class EmailSenderOrder {\n\tprivate String clientName=\"test\";\n\t//clientName默认值为test\n\t}\n\n应用场景需要传输的`clientName`为null，我们在使用client时，会有如下代码：\n\n\tEmailSenderOrder emailSenderOrder = new EmailSenderOrder(); \n\temailSenderOrder.setClientName(null); \n\n服务端在接受到对象后，clientName结果等于了test。\n<!--more-->\n默认情况下，如果field为null，cxf client生成的报文中没有这个field的报文，这就导致在反序列化时，初始化对象时用了默认值。\n\n可以如下解决：\n\n\t//通过字段序列化\n\t@XmlAccessorType(XmlAccessType.FIELD) \n\n\tpublic class EmailSenderOrder {\n\n\t//如果clientName为null，生成报文<clientName xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:nil=\"true\"/>\n\t@XmlElement(name = \"clientName\", nillable = true) \n\tprivate String clientName=\"test\";\n\t\n\t}","slug":"cxf-trans-filed-null","published":1,"updated":"2018-04-01T16:53:17.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksh70022p0ugnc3fplco","content":"<p>传输对象如下：</p>\n<pre><code>public class EmailSenderOrder {\nprivate String clientName=&quot;test&quot;;\n//clientName默认值为test\n}\n</code></pre><p>应用场景需要传输的<code>clientName</code>为null，我们在使用client时，会有如下代码：</p>\n<pre><code>EmailSenderOrder emailSenderOrder = new EmailSenderOrder(); \nemailSenderOrder.setClientName(null); \n</code></pre><p>服务端在接受到对象后，clientName结果等于了test。<br><a id=\"more\"></a><br>默认情况下，如果field为null，cxf client生成的报文中没有这个field的报文，这就导致在反序列化时，初始化对象时用了默认值。</p>\n<p>可以如下解决：</p>\n<pre><code>//通过字段序列化\n@XmlAccessorType(XmlAccessType.FIELD) \n\npublic class EmailSenderOrder {\n\n//如果clientName为null，生成报文&lt;clientName xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:nil=&quot;true&quot;/&gt;\n@XmlElement(name = &quot;clientName&quot;, nillable = true) \nprivate String clientName=&quot;test&quot;;\n\n}\n</code></pre>","site":{"data":{}},"excerpt":"<p>传输对象如下：</p>\n<pre><code>public class EmailSenderOrder {\nprivate String clientName=&quot;test&quot;;\n//clientName默认值为test\n}\n</code></pre><p>应用场景需要传输的<code>clientName</code>为null，我们在使用client时，会有如下代码：</p>\n<pre><code>EmailSenderOrder emailSenderOrder = new EmailSenderOrder(); \nemailSenderOrder.setClientName(null); \n</code></pre><p>服务端在接受到对象后，clientName结果等于了test。<br></p>","more":"<br>默认情况下，如果field为null，cxf client生成的报文中没有这个field的报文，这就导致在反序列化时，初始化对象时用了默认值。<p></p>\n<p>可以如下解决：</p>\n<pre><code>//通过字段序列化\n@XmlAccessorType(XmlAccessType.FIELD) \n\npublic class EmailSenderOrder {\n\n//如果clientName为null，生成报文&lt;clientName xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:nil=&quot;true&quot;/&gt;\n@XmlElement(name = &quot;clientName&quot;, nillable = true) \nprivate String clientName=&quot;test&quot;;\n\n}\n</code></pre>"},{"title":"webservice优化","date":"2014-08-14T13:52:17.000Z","_content":"\n很早之前写的一篇文字,一直没有搬上blog,以后会慢慢把有些东西放到blog上来.\n\nwebservice的性能实在是敢恭维。曾经因为webservice吞吐量上不去，对webservice进行了一些性能方面的优化:\n\n## 1.分析\n\r### 1.1 FastInfoset\n\r采用了[FastInfoset](http://en.wikipedia.org/wiki/Fast_Infoset)(简称FI)，效果很明显，极端条件下的大数据量传输，性能提高60%，他可以减少传输成本，序列化成本和xml解析成本。cxf基于http协商机制(检查请求header中`Accept: application/fastinfoset`)来启用FI。\n\r\r### 1.2 Gzip\n\r客户端和服务器端是否使用Gzip压缩，也是基于http协议协商的(检查请求header 中是否有`Accept-encoding:gzip`)。但是这里需要仔细权衡下。对于小数据量，启用gzip压缩支持是吃力不讨好的行为，数据量很小的时候，gzip压缩结果不明显，还浪费cpu。\n\r### 1.3 unexpected element异常\n\r见:http://bohr.me/cxf-unexpected-element/\r\r### 1.4 处理过程分析\r\rcxf 中通过一些列interceptor来完成数据解析处理操作，每个interceptor绑定到特定的阶段，下面是GZIP 和FI interceptor所处的阶段\n\n类型 | Direction | Phase\n----- | ------- | ------------\nGzip | IN  | Phase.RECEIVE\n  | Out  | Phase.PREPARE_SEND\n FI | IN  | Phase.POST_STREAM\n | Out  | Phase.PRE_STREAM\r\t\r数据进来时，先`RECEIVE`阶段适配InputStream对象为GZIPInputStream，然后在`POST_STREAM`阶段解析数据。完成gzip解压缩，FI解析数据过程。\n\r\r数据出去时，在`PREPARE_SEND`阶段适配OutputStream对象为GZipThresholdOutputStream，在`PRE_STREAM`阶段再序列化为二进制数据传输出去。完成FI序列化数据，GZIP压缩数据过程。\n\r\r测试发送20250byte数据，仅仅启用FI时，发送数据量为20181byte，再启用Gzip压缩后，发送数据量为258byte。\n\r\r\r\r## 2.操作步骤\n\r\r### 2.1添加依赖\n\r\rcxf版本修改为2.7.0并加入FastInfoset\n\r\r\t<dependency>\r\t\t<groupId>com.sun.xml.fastinfoset</groupId>\r\t\t<artifactId>FastInfoset</artifactId>\r\t\t<version>1.2.9</version>\r\t</dependency>\n\r\t\r### 2.2\t修改cxf配置\n\r\r#### 2.2.1 删除引入的cxf配置 \n\r\r\t<import resource=\"classpath:META-INF/cxf/cxf.xml\" />\r\t<import resource=\"classpath:META-INF/cxf/cxf-extension-soap.xml\" />\r\t<import resource=\"classpath:META-INF/cxf/cxf-servlet.xml\" />\n\r\t\r我们项目中很多spring配置文件都加入了上面的东东，这个不是必须的，不删除这东东会导致配置不生效。\n\r\r#### 2.2.2 配置gzip和FI\n\r\rSpring配置文件中引入cxf namespace\r`xmlns:cxf=http://cxf.apache.org/core和xsi:schemaLocation\rhttp://cxf.apache.org/core  http://cxf.apache.org/schemas/core.xsd`\n\r然后加入配置\r\t\n\r\t<cxf:bus>\r\t\t<cxf:features>\r\t\t\t<cxf:fastinfoset force=\"false\" />\r\t\t\t<bean class=\"org.apache.cxf.transport.common.gzip.GZIPFeature\">\r\t\t\t\t<property name=\"threshold\">\r\t\t\t\t\t<value>2048</value>\r\t\t\t\t</property>\r\t\t\t</bean>\r\t\t</cxf:features>\r\t</cxf:bus>\r\r注意这些特性client和server端都要配置。\n\r\r## 3.写在最后\n\r启用`gzip`和`FastInfoset`,性能基本上也到达webservice的极致了.通过`IgnoreUnexpectedElementValidationEventHandler`再解决易用性问题,基本完美.\r","source":"_posts/cxf-tuning.md","raw":"---\ntitle: webservice优化\ndate: 2014-08-14 21:52:17\ncategories: java\ntags:\n  - webservice\n---\n\n很早之前写的一篇文字,一直没有搬上blog,以后会慢慢把有些东西放到blog上来.\n\nwebservice的性能实在是敢恭维。曾经因为webservice吞吐量上不去，对webservice进行了一些性能方面的优化:\n\n## 1.分析\n\r### 1.1 FastInfoset\n\r采用了[FastInfoset](http://en.wikipedia.org/wiki/Fast_Infoset)(简称FI)，效果很明显，极端条件下的大数据量传输，性能提高60%，他可以减少传输成本，序列化成本和xml解析成本。cxf基于http协商机制(检查请求header中`Accept: application/fastinfoset`)来启用FI。\n\r\r### 1.2 Gzip\n\r客户端和服务器端是否使用Gzip压缩，也是基于http协议协商的(检查请求header 中是否有`Accept-encoding:gzip`)。但是这里需要仔细权衡下。对于小数据量，启用gzip压缩支持是吃力不讨好的行为，数据量很小的时候，gzip压缩结果不明显，还浪费cpu。\n\r### 1.3 unexpected element异常\n\r见:http://bohr.me/cxf-unexpected-element/\r\r### 1.4 处理过程分析\r\rcxf 中通过一些列interceptor来完成数据解析处理操作，每个interceptor绑定到特定的阶段，下面是GZIP 和FI interceptor所处的阶段\n\n类型 | Direction | Phase\n----- | ------- | ------------\nGzip | IN  | Phase.RECEIVE\n  | Out  | Phase.PREPARE_SEND\n FI | IN  | Phase.POST_STREAM\n | Out  | Phase.PRE_STREAM\r\t\r数据进来时，先`RECEIVE`阶段适配InputStream对象为GZIPInputStream，然后在`POST_STREAM`阶段解析数据。完成gzip解压缩，FI解析数据过程。\n\r\r数据出去时，在`PREPARE_SEND`阶段适配OutputStream对象为GZipThresholdOutputStream，在`PRE_STREAM`阶段再序列化为二进制数据传输出去。完成FI序列化数据，GZIP压缩数据过程。\n\r\r测试发送20250byte数据，仅仅启用FI时，发送数据量为20181byte，再启用Gzip压缩后，发送数据量为258byte。\n\r\r\r\r## 2.操作步骤\n\r\r### 2.1添加依赖\n\r\rcxf版本修改为2.7.0并加入FastInfoset\n\r\r\t<dependency>\r\t\t<groupId>com.sun.xml.fastinfoset</groupId>\r\t\t<artifactId>FastInfoset</artifactId>\r\t\t<version>1.2.9</version>\r\t</dependency>\n\r\t\r### 2.2\t修改cxf配置\n\r\r#### 2.2.1 删除引入的cxf配置 \n\r\r\t<import resource=\"classpath:META-INF/cxf/cxf.xml\" />\r\t<import resource=\"classpath:META-INF/cxf/cxf-extension-soap.xml\" />\r\t<import resource=\"classpath:META-INF/cxf/cxf-servlet.xml\" />\n\r\t\r我们项目中很多spring配置文件都加入了上面的东东，这个不是必须的，不删除这东东会导致配置不生效。\n\r\r#### 2.2.2 配置gzip和FI\n\r\rSpring配置文件中引入cxf namespace\r`xmlns:cxf=http://cxf.apache.org/core和xsi:schemaLocation\rhttp://cxf.apache.org/core  http://cxf.apache.org/schemas/core.xsd`\n\r然后加入配置\r\t\n\r\t<cxf:bus>\r\t\t<cxf:features>\r\t\t\t<cxf:fastinfoset force=\"false\" />\r\t\t\t<bean class=\"org.apache.cxf.transport.common.gzip.GZIPFeature\">\r\t\t\t\t<property name=\"threshold\">\r\t\t\t\t\t<value>2048</value>\r\t\t\t\t</property>\r\t\t\t</bean>\r\t\t</cxf:features>\r\t</cxf:bus>\r\r注意这些特性client和server端都要配置。\n\r\r## 3.写在最后\n\r启用`gzip`和`FastInfoset`,性能基本上也到达webservice的极致了.通过`IgnoreUnexpectedElementValidationEventHandler`再解决易用性问题,基本完美.\r","slug":"cxf-tuning","published":1,"updated":"2018-04-01T16:53:17.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksh80024p0ugsns49ga2","content":"<p>很早之前写的一篇文字,一直没有搬上blog,以后会慢慢把有些东西放到blog上来.</p>\n<p>webservice的性能实在是敢恭维。曾经因为webservice吞吐量上不去，对webservice进行了一些性能方面的优化:</p>\n<h2 id=\"1-分析\"><a href=\"#1-分析\" class=\"headerlink\" title=\"1.分析\"></a>1.分析</h2><h3 id=\"1-1-FastInfoset\"><a href=\"#1-1-FastInfoset\" class=\"headerlink\" title=\"1.1 FastInfoset\"></a>1.1 FastInfoset</h3><p>采用了<a href=\"http://en.wikipedia.org/wiki/Fast_Infoset\" target=\"_blank\" rel=\"noopener\">FastInfoset</a>(简称FI)，效果很明显，极端条件下的大数据量传输，性能提高60%，他可以减少传输成本，序列化成本和xml解析成本。cxf基于http协商机制(检查请求header中<code>Accept: application/fastinfoset</code>)来启用FI。</p>\n<h3 id=\"1-2-Gzip\"><a href=\"#1-2-Gzip\" class=\"headerlink\" title=\"1.2 Gzip\"></a>1.2 Gzip</h3><p>客户端和服务器端是否使用Gzip压缩，也是基于http协议协商的(检查请求header 中是否有<code>Accept-encoding:gzip</code>)。但是这里需要仔细权衡下。对于小数据量，启用gzip压缩支持是吃力不讨好的行为，数据量很小的时候，gzip压缩结果不明显，还浪费cpu。</p>\n<h3 id=\"1-3-unexpected-element异常\"><a href=\"#1-3-unexpected-element异常\" class=\"headerlink\" title=\"1.3 unexpected element异常\"></a>1.3 unexpected element异常</h3><p>见:<a href=\"http://bohr.me/cxf-unexpected-element/\">http://bohr.me/cxf-unexpected-element/</a></p>\n<h3 id=\"1-4-处理过程分析\"><a href=\"#1-4-处理过程分析\" class=\"headerlink\" title=\"1.4 处理过程分析\"></a>1.4 处理过程分析</h3><p>cxf 中通过一些列interceptor来完成数据解析处理操作，每个interceptor绑定到特定的阶段，下面是GZIP 和FI interceptor所处的阶段</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>Direction</th>\n<th>Phase</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Gzip</td>\n<td>IN</td>\n<td>Phase.RECEIVE</td>\n</tr>\n<tr>\n<td></td>\n<td>Out</td>\n<td>Phase.PREPARE_SEND</td>\n</tr>\n<tr>\n<td> FI</td>\n<td>IN</td>\n<td>Phase.POST_STREAM</td>\n</tr>\n<tr>\n<td></td>\n<td>Out</td>\n<td>Phase.PRE_STREAM</td>\n</tr>\n</tbody>\n</table>\n<p>数据进来时，先<code>RECEIVE</code>阶段适配InputStream对象为GZIPInputStream，然后在<code>POST_STREAM</code>阶段解析数据。完成gzip解压缩，FI解析数据过程。</p>\n<p>数据出去时，在<code>PREPARE_SEND</code>阶段适配OutputStream对象为GZipThresholdOutputStream，在<code>PRE_STREAM</code>阶段再序列化为二进制数据传输出去。完成FI序列化数据，GZIP压缩数据过程。</p>\n<p>测试发送20250byte数据，仅仅启用FI时，发送数据量为20181byte，再启用Gzip压缩后，发送数据量为258byte。</p>\n<h2 id=\"2-操作步骤\"><a href=\"#2-操作步骤\" class=\"headerlink\" title=\"2.操作步骤\"></a>2.操作步骤</h2><h3 id=\"2-1添加依赖\"><a href=\"#2-1添加依赖\" class=\"headerlink\" title=\"2.1添加依赖\"></a>2.1添加依赖</h3><p>cxf版本修改为2.7.0并加入FastInfoset</p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.sun.xml.fastinfoset&lt;/groupId&gt;\n    &lt;artifactId&gt;FastInfoset&lt;/artifactId&gt;\n    &lt;version&gt;1.2.9&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre><h3 id=\"2-2-修改cxf配置\"><a href=\"#2-2-修改cxf配置\" class=\"headerlink\" title=\"2.2    修改cxf配置\"></a>2.2    修改cxf配置</h3><h4 id=\"2-2-1-删除引入的cxf配置\"><a href=\"#2-2-1-删除引入的cxf配置\" class=\"headerlink\" title=\"2.2.1 删除引入的cxf配置\"></a>2.2.1 删除引入的cxf配置</h4><pre><code>&lt;import resource=&quot;classpath:META-INF/cxf/cxf.xml&quot; /&gt;\n&lt;import resource=&quot;classpath:META-INF/cxf/cxf-extension-soap.xml&quot; /&gt;\n&lt;import resource=&quot;classpath:META-INF/cxf/cxf-servlet.xml&quot; /&gt;\n</code></pre><p>我们项目中很多spring配置文件都加入了上面的东东，这个不是必须的，不删除这东东会导致配置不生效。</p>\n<h4 id=\"2-2-2-配置gzip和FI\"><a href=\"#2-2-2-配置gzip和FI\" class=\"headerlink\" title=\"2.2.2 配置gzip和FI\"></a>2.2.2 配置gzip和FI</h4><p>Spring配置文件中引入cxf namespace<br><code>xmlns:cxf=http://cxf.apache.org/core和xsi:schemaLocation\nhttp://cxf.apache.org/core  http://cxf.apache.org/schemas/core.xsd</code></p>\n<p>然后加入配置</p>\n<pre><code>&lt;cxf:bus&gt;\n    &lt;cxf:features&gt;\n        &lt;cxf:fastinfoset force=&quot;false&quot; /&gt;\n        &lt;bean class=&quot;org.apache.cxf.transport.common.gzip.GZIPFeature&quot;&gt;\n            &lt;property name=&quot;threshold&quot;&gt;\n                &lt;value&gt;2048&lt;/value&gt;\n            &lt;/property&gt;\n        &lt;/bean&gt;\n    &lt;/cxf:features&gt;\n&lt;/cxf:bus&gt;\n</code></pre><p>注意这些特性client和server端都要配置。</p>\n<h2 id=\"3-写在最后\"><a href=\"#3-写在最后\" class=\"headerlink\" title=\"3.写在最后\"></a>3.写在最后</h2><p>启用<code>gzip</code>和<code>FastInfoset</code>,性能基本上也到达webservice的极致了.通过<code>IgnoreUnexpectedElementValidationEventHandler</code>再解决易用性问题,基本完美.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>很早之前写的一篇文字,一直没有搬上blog,以后会慢慢把有些东西放到blog上来.</p>\n<p>webservice的性能实在是敢恭维。曾经因为webservice吞吐量上不去，对webservice进行了一些性能方面的优化:</p>\n<h2 id=\"1-分析\"><a href=\"#1-分析\" class=\"headerlink\" title=\"1.分析\"></a>1.分析</h2><h3 id=\"1-1-FastInfoset\"><a href=\"#1-1-FastInfoset\" class=\"headerlink\" title=\"1.1 FastInfoset\"></a>1.1 FastInfoset</h3><p>采用了<a href=\"http://en.wikipedia.org/wiki/Fast_Infoset\" target=\"_blank\" rel=\"noopener\">FastInfoset</a>(简称FI)，效果很明显，极端条件下的大数据量传输，性能提高60%，他可以减少传输成本，序列化成本和xml解析成本。cxf基于http协商机制(检查请求header中<code>Accept: application/fastinfoset</code>)来启用FI。</p>\n<h3 id=\"1-2-Gzip\"><a href=\"#1-2-Gzip\" class=\"headerlink\" title=\"1.2 Gzip\"></a>1.2 Gzip</h3><p>客户端和服务器端是否使用Gzip压缩，也是基于http协议协商的(检查请求header 中是否有<code>Accept-encoding:gzip</code>)。但是这里需要仔细权衡下。对于小数据量，启用gzip压缩支持是吃力不讨好的行为，数据量很小的时候，gzip压缩结果不明显，还浪费cpu。</p>\n<h3 id=\"1-3-unexpected-element异常\"><a href=\"#1-3-unexpected-element异常\" class=\"headerlink\" title=\"1.3 unexpected element异常\"></a>1.3 unexpected element异常</h3><p>见:<a href=\"http://bohr.me/cxf-unexpected-element/\">http://bohr.me/cxf-unexpected-element/</a></p>\n<h3 id=\"1-4-处理过程分析\"><a href=\"#1-4-处理过程分析\" class=\"headerlink\" title=\"1.4 处理过程分析\"></a>1.4 处理过程分析</h3><p>cxf 中通过一些列interceptor来完成数据解析处理操作，每个interceptor绑定到特定的阶段，下面是GZIP 和FI interceptor所处的阶段</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>Direction</th>\n<th>Phase</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Gzip</td>\n<td>IN</td>\n<td>Phase.RECEIVE</td>\n</tr>\n<tr>\n<td></td>\n<td>Out</td>\n<td>Phase.PREPARE_SEND</td>\n</tr>\n<tr>\n<td> FI</td>\n<td>IN</td>\n<td>Phase.POST_STREAM</td>\n</tr>\n<tr>\n<td></td>\n<td>Out</td>\n<td>Phase.PRE_STREAM</td>\n</tr>\n</tbody>\n</table>\n<p>数据进来时，先<code>RECEIVE</code>阶段适配InputStream对象为GZIPInputStream，然后在<code>POST_STREAM</code>阶段解析数据。完成gzip解压缩，FI解析数据过程。</p>\n<p>数据出去时，在<code>PREPARE_SEND</code>阶段适配OutputStream对象为GZipThresholdOutputStream，在<code>PRE_STREAM</code>阶段再序列化为二进制数据传输出去。完成FI序列化数据，GZIP压缩数据过程。</p>\n<p>测试发送20250byte数据，仅仅启用FI时，发送数据量为20181byte，再启用Gzip压缩后，发送数据量为258byte。</p>\n<h2 id=\"2-操作步骤\"><a href=\"#2-操作步骤\" class=\"headerlink\" title=\"2.操作步骤\"></a>2.操作步骤</h2><h3 id=\"2-1添加依赖\"><a href=\"#2-1添加依赖\" class=\"headerlink\" title=\"2.1添加依赖\"></a>2.1添加依赖</h3><p>cxf版本修改为2.7.0并加入FastInfoset</p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.sun.xml.fastinfoset&lt;/groupId&gt;\n    &lt;artifactId&gt;FastInfoset&lt;/artifactId&gt;\n    &lt;version&gt;1.2.9&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre><h3 id=\"2-2-修改cxf配置\"><a href=\"#2-2-修改cxf配置\" class=\"headerlink\" title=\"2.2    修改cxf配置\"></a>2.2    修改cxf配置</h3><h4 id=\"2-2-1-删除引入的cxf配置\"><a href=\"#2-2-1-删除引入的cxf配置\" class=\"headerlink\" title=\"2.2.1 删除引入的cxf配置\"></a>2.2.1 删除引入的cxf配置</h4><pre><code>&lt;import resource=&quot;classpath:META-INF/cxf/cxf.xml&quot; /&gt;\n&lt;import resource=&quot;classpath:META-INF/cxf/cxf-extension-soap.xml&quot; /&gt;\n&lt;import resource=&quot;classpath:META-INF/cxf/cxf-servlet.xml&quot; /&gt;\n</code></pre><p>我们项目中很多spring配置文件都加入了上面的东东，这个不是必须的，不删除这东东会导致配置不生效。</p>\n<h4 id=\"2-2-2-配置gzip和FI\"><a href=\"#2-2-2-配置gzip和FI\" class=\"headerlink\" title=\"2.2.2 配置gzip和FI\"></a>2.2.2 配置gzip和FI</h4><p>Spring配置文件中引入cxf namespace<br><code>xmlns:cxf=http://cxf.apache.org/core和xsi:schemaLocation\nhttp://cxf.apache.org/core  http://cxf.apache.org/schemas/core.xsd</code></p>\n<p>然后加入配置</p>\n<pre><code>&lt;cxf:bus&gt;\n    &lt;cxf:features&gt;\n        &lt;cxf:fastinfoset force=&quot;false&quot; /&gt;\n        &lt;bean class=&quot;org.apache.cxf.transport.common.gzip.GZIPFeature&quot;&gt;\n            &lt;property name=&quot;threshold&quot;&gt;\n                &lt;value&gt;2048&lt;/value&gt;\n            &lt;/property&gt;\n        &lt;/bean&gt;\n    &lt;/cxf:features&gt;\n&lt;/cxf:bus&gt;\n</code></pre><p>注意这些特性client和server端都要配置。</p>\n<h2 id=\"3-写在最后\"><a href=\"#3-写在最后\" class=\"headerlink\" title=\"3.写在最后\"></a>3.写在最后</h2><p>启用<code>gzip</code>和<code>FastInfoset</code>,性能基本上也到达webservice的极致了.通过<code>IgnoreUnexpectedElementValidationEventHandler</code>再解决易用性问题,基本完美.</p>\n"},{"title":"烦人的cxf unexpected element 异常","date":"2014-05-15T13:52:17.000Z","_content":"\n### 1.背景\n\n当cxf传输的数据对象结构变化时,比如请求对象减少了字段,响应对象增加了字段,在jaxb unmarsh时会抛出异常,导致接口访问失败.\n\n\tjavax.xml.bind.UnmarshalException: unexpected element (uri:\"\", local:\"name\"). Expected elements are <{}name>\n\t\n上面这是一个典型的`unexpected element`异常,如果cxf客户端请求中多了一个`name`属性,或者cxf服务端响应中多了一个`name`属性,都会导致此异常.\n\n### 2.源代码分析\n\n翻了下源代码:\n\n`com.sun.xml.bind.v2.runtime.unmarshaller.StructureLoader#childElement`检查是否是新增属性\n\t\n\t @Override\n    public void childElement(UnmarshallingContext.State state, TagName arg) throws SAXException {\n        ChildLoader child = childUnmarshallers.get(arg.uri,arg.local);\n        if(child==null) {//检查是否新增属性\n            child = catchAll;\n            if(child==null) {\n                super.childElement(state,arg);\n                return;\n            }\n        }\n\n        state.loader = child.loader;\n        state.receiver = child.receiver;\n    }\n\n在`com.sun.xml.bind.v2.runtime.unmarshaller.Loader`中检查是否处理此问题\n\n\t public void childElement(UnmarshallingContext.State state, TagName ea) throws SAXException {\n        // notify the error, then recover by ignoring the whole element.\n        reportUnexpectedChildElement(ea, true);\n        state.loader = Discarder.INSTANCE;\n        state.receiver = null;\n    }\n\n    @SuppressWarnings({\"StringEquality\"})\n    protected final void reportUnexpectedChildElement(TagName ea, boolean canRecover) throws SAXException {\n        if(canRecover && !UnmarshallingContext.getInstance().parent.hasEventHandler())\n        //这里默认会有个EventHandler,不会直接忽略此问题\n            // this error happens particurly often (when input documents contain a lot of unexpected elements to be ignored),\n            // so don't bother computing all the messages and etc if we know that\n            // there's no event handler to receive the error in the end. See #286 \n            return;\n         //下面的代码抛出异常\n        if(ea.uri!=ea.uri.intern() || ea.local!=ea.local.intern())\n            reportError(Messages.UNINTERNED_STRINGS.format(), canRecover );\n        else\n            reportError(Messages.UNEXPECTED_ELEMENT.format(ea.uri,ea.local,computeExpectedElements()), canRecover );\n    }\n    \n在`org.apache.cxf.jaxb.io.DataReaderImpl#createUnmarshaller`中设置了`EventHandler`,注意这里的`veventHandler`,默认是没有的.\n\n\tif (setEventHandler) {\n                um.setEventHandler(new WSUIDValidationHandler(veventHandler));\n    }\n    \n `org.apache.cxf.jaxb.io.DataReaderImpl.WSUIDValidationHandler`的代码很简单:\n\n\tprivate static class WSUIDValidationHandler implements ValidationEventHandler {\n        ValidationEventHandler origHandler;\n        WSUIDValidationHandler(ValidationEventHandler o) {\n            origHandler = o;\n        }\n\n        public boolean handleEvent(ValidationEvent event) {\n            String msg = event.getMessage();\n            System.out.println(\"WSUIDValidationHandler\"+msg);\n            if (msg != null\n                    && msg.contains(\":Id\")\n                    && (msg.startsWith(\"cvc-type.3.1.1: \")\n                    || msg.startsWith(\"cvc-type.3.2.2: \")\n                    || msg.startsWith(\"cvc-complex-type.3.1.1: \")\n                    || msg.startsWith(\"cvc-complex-type.3.2.2: \"))) {\n                return true;\n            }\n            if (origHandler != null) {\n                return origHandler.handleEvent(event);\n            }\n            return false;\n        }\n    }\n    \n先自己处理,自己处理不了的交给`origHandler`,那我们只需要自己构建一个`javax.xml.bind.ValidationEventHandler`来专门处理`unexpected element`异常,问题就得到了解决.\n\n`org.apache.cxf.jaxb.io.DataReaderImpl#setProperty`中有段代码:\n\n\t veventHandler = (ValidationEventHandler)m.getContextualProperty(\"jaxb-validation-event-handler\");\n            if (veventHandler == null) {\n                veventHandler = databinding.getValidationEventHandler();\n            }\n \n 如果配置了`jaxb-validation-event-handler`属性,就可以让我们自己的`javax.xml.bind.ValidationEventHandler`来处理此异常.也可以设置`setEventHandler`为`false`,不设置异常处理器,忽略所有unmarsh异常,不过这样我感觉太暴力了点,这样做也忽略了`org.apache.cxf.jaxb.io.DataReaderImpl.WSUIDValidationHandler`的逻辑,点儿都不科学.\n \n### 3.实现\n\n 上面分析清楚了,实现就很简单,实现`javax.xml.bind.ValidationEventHandler`\n \n\tpublic class IgnoreUnexpectedElementValidationEventHandler implements ValidationEventHandler {\n    \t\tprivate static final Logger logger = LoggerFactory.getLogger(IgnoreUnexpectedElementValidationEventHandler.class);\n\n    \t\t@Override\n    \t\tpublic boolean handleEvent(ValidationEvent event) {\n       \t\t \tString msg = event.getMessage();\n       \t\t \tif (msg != null && msg.startsWith(\"unexpected element\")) {\n           \t\t \tlogger.warn(\"{}\", msg);\n           \t\t \treturn true;\n        \t \t}\n          \t\treturn false;\n    \t\t}\n\t}\n \n 在`cxf:bus`中配置下就ok\n \n \t <cxf:bus>\n        <cxf:properties>\n            <entry key=\"jaxb-validation-event-handler\">\n                <bean class=\"IgnoreUnexpectedElementValidationEventHandler\"/>\n            </entry>\n        </cxf:properties>\n    </cxf:bus>\n    \n 建议只在线上环境启用此东东,线下还是不要开启,早点发现问题是好事.\n \n","source":"_posts/cxf-unexpected-element.md","raw":"---\ntitle: 烦人的cxf unexpected element 异常\ndate: 2014-05-15 21:52:17\ncategories: java\ntags:\n  - cxf\n---\n\n### 1.背景\n\n当cxf传输的数据对象结构变化时,比如请求对象减少了字段,响应对象增加了字段,在jaxb unmarsh时会抛出异常,导致接口访问失败.\n\n\tjavax.xml.bind.UnmarshalException: unexpected element (uri:\"\", local:\"name\"). Expected elements are <{}name>\n\t\n上面这是一个典型的`unexpected element`异常,如果cxf客户端请求中多了一个`name`属性,或者cxf服务端响应中多了一个`name`属性,都会导致此异常.\n\n### 2.源代码分析\n\n翻了下源代码:\n\n`com.sun.xml.bind.v2.runtime.unmarshaller.StructureLoader#childElement`检查是否是新增属性\n\t\n\t @Override\n    public void childElement(UnmarshallingContext.State state, TagName arg) throws SAXException {\n        ChildLoader child = childUnmarshallers.get(arg.uri,arg.local);\n        if(child==null) {//检查是否新增属性\n            child = catchAll;\n            if(child==null) {\n                super.childElement(state,arg);\n                return;\n            }\n        }\n\n        state.loader = child.loader;\n        state.receiver = child.receiver;\n    }\n\n在`com.sun.xml.bind.v2.runtime.unmarshaller.Loader`中检查是否处理此问题\n\n\t public void childElement(UnmarshallingContext.State state, TagName ea) throws SAXException {\n        // notify the error, then recover by ignoring the whole element.\n        reportUnexpectedChildElement(ea, true);\n        state.loader = Discarder.INSTANCE;\n        state.receiver = null;\n    }\n\n    @SuppressWarnings({\"StringEquality\"})\n    protected final void reportUnexpectedChildElement(TagName ea, boolean canRecover) throws SAXException {\n        if(canRecover && !UnmarshallingContext.getInstance().parent.hasEventHandler())\n        //这里默认会有个EventHandler,不会直接忽略此问题\n            // this error happens particurly often (when input documents contain a lot of unexpected elements to be ignored),\n            // so don't bother computing all the messages and etc if we know that\n            // there's no event handler to receive the error in the end. See #286 \n            return;\n         //下面的代码抛出异常\n        if(ea.uri!=ea.uri.intern() || ea.local!=ea.local.intern())\n            reportError(Messages.UNINTERNED_STRINGS.format(), canRecover );\n        else\n            reportError(Messages.UNEXPECTED_ELEMENT.format(ea.uri,ea.local,computeExpectedElements()), canRecover );\n    }\n    \n在`org.apache.cxf.jaxb.io.DataReaderImpl#createUnmarshaller`中设置了`EventHandler`,注意这里的`veventHandler`,默认是没有的.\n\n\tif (setEventHandler) {\n                um.setEventHandler(new WSUIDValidationHandler(veventHandler));\n    }\n    \n `org.apache.cxf.jaxb.io.DataReaderImpl.WSUIDValidationHandler`的代码很简单:\n\n\tprivate static class WSUIDValidationHandler implements ValidationEventHandler {\n        ValidationEventHandler origHandler;\n        WSUIDValidationHandler(ValidationEventHandler o) {\n            origHandler = o;\n        }\n\n        public boolean handleEvent(ValidationEvent event) {\n            String msg = event.getMessage();\n            System.out.println(\"WSUIDValidationHandler\"+msg);\n            if (msg != null\n                    && msg.contains(\":Id\")\n                    && (msg.startsWith(\"cvc-type.3.1.1: \")\n                    || msg.startsWith(\"cvc-type.3.2.2: \")\n                    || msg.startsWith(\"cvc-complex-type.3.1.1: \")\n                    || msg.startsWith(\"cvc-complex-type.3.2.2: \"))) {\n                return true;\n            }\n            if (origHandler != null) {\n                return origHandler.handleEvent(event);\n            }\n            return false;\n        }\n    }\n    \n先自己处理,自己处理不了的交给`origHandler`,那我们只需要自己构建一个`javax.xml.bind.ValidationEventHandler`来专门处理`unexpected element`异常,问题就得到了解决.\n\n`org.apache.cxf.jaxb.io.DataReaderImpl#setProperty`中有段代码:\n\n\t veventHandler = (ValidationEventHandler)m.getContextualProperty(\"jaxb-validation-event-handler\");\n            if (veventHandler == null) {\n                veventHandler = databinding.getValidationEventHandler();\n            }\n \n 如果配置了`jaxb-validation-event-handler`属性,就可以让我们自己的`javax.xml.bind.ValidationEventHandler`来处理此异常.也可以设置`setEventHandler`为`false`,不设置异常处理器,忽略所有unmarsh异常,不过这样我感觉太暴力了点,这样做也忽略了`org.apache.cxf.jaxb.io.DataReaderImpl.WSUIDValidationHandler`的逻辑,点儿都不科学.\n \n### 3.实现\n\n 上面分析清楚了,实现就很简单,实现`javax.xml.bind.ValidationEventHandler`\n \n\tpublic class IgnoreUnexpectedElementValidationEventHandler implements ValidationEventHandler {\n    \t\tprivate static final Logger logger = LoggerFactory.getLogger(IgnoreUnexpectedElementValidationEventHandler.class);\n\n    \t\t@Override\n    \t\tpublic boolean handleEvent(ValidationEvent event) {\n       \t\t \tString msg = event.getMessage();\n       \t\t \tif (msg != null && msg.startsWith(\"unexpected element\")) {\n           \t\t \tlogger.warn(\"{}\", msg);\n           \t\t \treturn true;\n        \t \t}\n          \t\treturn false;\n    \t\t}\n\t}\n \n 在`cxf:bus`中配置下就ok\n \n \t <cxf:bus>\n        <cxf:properties>\n            <entry key=\"jaxb-validation-event-handler\">\n                <bean class=\"IgnoreUnexpectedElementValidationEventHandler\"/>\n            </entry>\n        </cxf:properties>\n    </cxf:bus>\n    \n 建议只在线上环境启用此东东,线下还是不要开启,早点发现问题是好事.\n \n","slug":"cxf-unexpected-element","published":1,"updated":"2018-04-01T16:53:17.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksha0027p0ugs494kxdr","content":"<h3 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1.背景\"></a>1.背景</h3><p>当cxf传输的数据对象结构变化时,比如请求对象减少了字段,响应对象增加了字段,在jaxb unmarsh时会抛出异常,导致接口访问失败.</p>\n<pre><code>javax.xml.bind.UnmarshalException: unexpected element (uri:&quot;&quot;, local:&quot;name&quot;). Expected elements are &lt;{}name&gt;\n</code></pre><p>上面这是一个典型的<code>unexpected element</code>异常,如果cxf客户端请求中多了一个<code>name</code>属性,或者cxf服务端响应中多了一个<code>name</code>属性,都会导致此异常.</p>\n<h3 id=\"2-源代码分析\"><a href=\"#2-源代码分析\" class=\"headerlink\" title=\"2.源代码分析\"></a>2.源代码分析</h3><p>翻了下源代码:</p>\n<p><code>com.sun.xml.bind.v2.runtime.unmarshaller.StructureLoader#childElement</code>检查是否是新增属性</p>\n<pre><code> @Override\npublic void childElement(UnmarshallingContext.State state, TagName arg) throws SAXException {\n    ChildLoader child = childUnmarshallers.get(arg.uri,arg.local);\n    if(child==null) {//检查是否新增属性\n        child = catchAll;\n        if(child==null) {\n            super.childElement(state,arg);\n            return;\n        }\n    }\n\n    state.loader = child.loader;\n    state.receiver = child.receiver;\n}\n</code></pre><p>在<code>com.sun.xml.bind.v2.runtime.unmarshaller.Loader</code>中检查是否处理此问题</p>\n<pre><code> public void childElement(UnmarshallingContext.State state, TagName ea) throws SAXException {\n    // notify the error, then recover by ignoring the whole element.\n    reportUnexpectedChildElement(ea, true);\n    state.loader = Discarder.INSTANCE;\n    state.receiver = null;\n}\n\n@SuppressWarnings({&quot;StringEquality&quot;})\nprotected final void reportUnexpectedChildElement(TagName ea, boolean canRecover) throws SAXException {\n    if(canRecover &amp;&amp; !UnmarshallingContext.getInstance().parent.hasEventHandler())\n    //这里默认会有个EventHandler,不会直接忽略此问题\n        // this error happens particurly often (when input documents contain a lot of unexpected elements to be ignored),\n        // so don&apos;t bother computing all the messages and etc if we know that\n        // there&apos;s no event handler to receive the error in the end. See #286 \n        return;\n     //下面的代码抛出异常\n    if(ea.uri!=ea.uri.intern() || ea.local!=ea.local.intern())\n        reportError(Messages.UNINTERNED_STRINGS.format(), canRecover );\n    else\n        reportError(Messages.UNEXPECTED_ELEMENT.format(ea.uri,ea.local,computeExpectedElements()), canRecover );\n}\n</code></pre><p>在<code>org.apache.cxf.jaxb.io.DataReaderImpl#createUnmarshaller</code>中设置了<code>EventHandler</code>,注意这里的<code>veventHandler</code>,默认是没有的.</p>\n<pre><code>if (setEventHandler) {\n            um.setEventHandler(new WSUIDValidationHandler(veventHandler));\n}\n</code></pre><p> <code>org.apache.cxf.jaxb.io.DataReaderImpl.WSUIDValidationHandler</code>的代码很简单:</p>\n<pre><code>private static class WSUIDValidationHandler implements ValidationEventHandler {\n    ValidationEventHandler origHandler;\n    WSUIDValidationHandler(ValidationEventHandler o) {\n        origHandler = o;\n    }\n\n    public boolean handleEvent(ValidationEvent event) {\n        String msg = event.getMessage();\n        System.out.println(&quot;WSUIDValidationHandler&quot;+msg);\n        if (msg != null\n                &amp;&amp; msg.contains(&quot;:Id&quot;)\n                &amp;&amp; (msg.startsWith(&quot;cvc-type.3.1.1: &quot;)\n                || msg.startsWith(&quot;cvc-type.3.2.2: &quot;)\n                || msg.startsWith(&quot;cvc-complex-type.3.1.1: &quot;)\n                || msg.startsWith(&quot;cvc-complex-type.3.2.2: &quot;))) {\n            return true;\n        }\n        if (origHandler != null) {\n            return origHandler.handleEvent(event);\n        }\n        return false;\n    }\n}\n</code></pre><p>先自己处理,自己处理不了的交给<code>origHandler</code>,那我们只需要自己构建一个<code>javax.xml.bind.ValidationEventHandler</code>来专门处理<code>unexpected element</code>异常,问题就得到了解决.</p>\n<p><code>org.apache.cxf.jaxb.io.DataReaderImpl#setProperty</code>中有段代码:</p>\n<pre><code>veventHandler = (ValidationEventHandler)m.getContextualProperty(&quot;jaxb-validation-event-handler&quot;);\n       if (veventHandler == null) {\n           veventHandler = databinding.getValidationEventHandler();\n       }\n</code></pre><p> 如果配置了<code>jaxb-validation-event-handler</code>属性,就可以让我们自己的<code>javax.xml.bind.ValidationEventHandler</code>来处理此异常.也可以设置<code>setEventHandler</code>为<code>false</code>,不设置异常处理器,忽略所有unmarsh异常,不过这样我感觉太暴力了点,这样做也忽略了<code>org.apache.cxf.jaxb.io.DataReaderImpl.WSUIDValidationHandler</code>的逻辑,点儿都不科学.</p>\n<h3 id=\"3-实现\"><a href=\"#3-实现\" class=\"headerlink\" title=\"3.实现\"></a>3.实现</h3><p> 上面分析清楚了,实现就很简单,实现<code>javax.xml.bind.ValidationEventHandler</code></p>\n<pre><code>public class IgnoreUnexpectedElementValidationEventHandler implements ValidationEventHandler {\n        private static final Logger logger = LoggerFactory.getLogger(IgnoreUnexpectedElementValidationEventHandler.class);\n\n        @Override\n        public boolean handleEvent(ValidationEvent event) {\n                String msg = event.getMessage();\n                if (msg != null &amp;&amp; msg.startsWith(&quot;unexpected element&quot;)) {\n                    logger.warn(&quot;{}&quot;, msg);\n                    return true;\n             }\n              return false;\n        }\n}\n</code></pre><p> 在<code>cxf:bus</code>中配置下就ok</p>\n<pre><code>  &lt;cxf:bus&gt;\n    &lt;cxf:properties&gt;\n        &lt;entry key=&quot;jaxb-validation-event-handler&quot;&gt;\n            &lt;bean class=&quot;IgnoreUnexpectedElementValidationEventHandler&quot;/&gt;\n        &lt;/entry&gt;\n    &lt;/cxf:properties&gt;\n&lt;/cxf:bus&gt;\n</code></pre><p> 建议只在线上环境启用此东东,线下还是不要开启,早点发现问题是好事.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1.背景\"></a>1.背景</h3><p>当cxf传输的数据对象结构变化时,比如请求对象减少了字段,响应对象增加了字段,在jaxb unmarsh时会抛出异常,导致接口访问失败.</p>\n<pre><code>javax.xml.bind.UnmarshalException: unexpected element (uri:&quot;&quot;, local:&quot;name&quot;). Expected elements are &lt;{}name&gt;\n</code></pre><p>上面这是一个典型的<code>unexpected element</code>异常,如果cxf客户端请求中多了一个<code>name</code>属性,或者cxf服务端响应中多了一个<code>name</code>属性,都会导致此异常.</p>\n<h3 id=\"2-源代码分析\"><a href=\"#2-源代码分析\" class=\"headerlink\" title=\"2.源代码分析\"></a>2.源代码分析</h3><p>翻了下源代码:</p>\n<p><code>com.sun.xml.bind.v2.runtime.unmarshaller.StructureLoader#childElement</code>检查是否是新增属性</p>\n<pre><code> @Override\npublic void childElement(UnmarshallingContext.State state, TagName arg) throws SAXException {\n    ChildLoader child = childUnmarshallers.get(arg.uri,arg.local);\n    if(child==null) {//检查是否新增属性\n        child = catchAll;\n        if(child==null) {\n            super.childElement(state,arg);\n            return;\n        }\n    }\n\n    state.loader = child.loader;\n    state.receiver = child.receiver;\n}\n</code></pre><p>在<code>com.sun.xml.bind.v2.runtime.unmarshaller.Loader</code>中检查是否处理此问题</p>\n<pre><code> public void childElement(UnmarshallingContext.State state, TagName ea) throws SAXException {\n    // notify the error, then recover by ignoring the whole element.\n    reportUnexpectedChildElement(ea, true);\n    state.loader = Discarder.INSTANCE;\n    state.receiver = null;\n}\n\n@SuppressWarnings({&quot;StringEquality&quot;})\nprotected final void reportUnexpectedChildElement(TagName ea, boolean canRecover) throws SAXException {\n    if(canRecover &amp;&amp; !UnmarshallingContext.getInstance().parent.hasEventHandler())\n    //这里默认会有个EventHandler,不会直接忽略此问题\n        // this error happens particurly often (when input documents contain a lot of unexpected elements to be ignored),\n        // so don&apos;t bother computing all the messages and etc if we know that\n        // there&apos;s no event handler to receive the error in the end. See #286 \n        return;\n     //下面的代码抛出异常\n    if(ea.uri!=ea.uri.intern() || ea.local!=ea.local.intern())\n        reportError(Messages.UNINTERNED_STRINGS.format(), canRecover );\n    else\n        reportError(Messages.UNEXPECTED_ELEMENT.format(ea.uri,ea.local,computeExpectedElements()), canRecover );\n}\n</code></pre><p>在<code>org.apache.cxf.jaxb.io.DataReaderImpl#createUnmarshaller</code>中设置了<code>EventHandler</code>,注意这里的<code>veventHandler</code>,默认是没有的.</p>\n<pre><code>if (setEventHandler) {\n            um.setEventHandler(new WSUIDValidationHandler(veventHandler));\n}\n</code></pre><p> <code>org.apache.cxf.jaxb.io.DataReaderImpl.WSUIDValidationHandler</code>的代码很简单:</p>\n<pre><code>private static class WSUIDValidationHandler implements ValidationEventHandler {\n    ValidationEventHandler origHandler;\n    WSUIDValidationHandler(ValidationEventHandler o) {\n        origHandler = o;\n    }\n\n    public boolean handleEvent(ValidationEvent event) {\n        String msg = event.getMessage();\n        System.out.println(&quot;WSUIDValidationHandler&quot;+msg);\n        if (msg != null\n                &amp;&amp; msg.contains(&quot;:Id&quot;)\n                &amp;&amp; (msg.startsWith(&quot;cvc-type.3.1.1: &quot;)\n                || msg.startsWith(&quot;cvc-type.3.2.2: &quot;)\n                || msg.startsWith(&quot;cvc-complex-type.3.1.1: &quot;)\n                || msg.startsWith(&quot;cvc-complex-type.3.2.2: &quot;))) {\n            return true;\n        }\n        if (origHandler != null) {\n            return origHandler.handleEvent(event);\n        }\n        return false;\n    }\n}\n</code></pre><p>先自己处理,自己处理不了的交给<code>origHandler</code>,那我们只需要自己构建一个<code>javax.xml.bind.ValidationEventHandler</code>来专门处理<code>unexpected element</code>异常,问题就得到了解决.</p>\n<p><code>org.apache.cxf.jaxb.io.DataReaderImpl#setProperty</code>中有段代码:</p>\n<pre><code>veventHandler = (ValidationEventHandler)m.getContextualProperty(&quot;jaxb-validation-event-handler&quot;);\n       if (veventHandler == null) {\n           veventHandler = databinding.getValidationEventHandler();\n       }\n</code></pre><p> 如果配置了<code>jaxb-validation-event-handler</code>属性,就可以让我们自己的<code>javax.xml.bind.ValidationEventHandler</code>来处理此异常.也可以设置<code>setEventHandler</code>为<code>false</code>,不设置异常处理器,忽略所有unmarsh异常,不过这样我感觉太暴力了点,这样做也忽略了<code>org.apache.cxf.jaxb.io.DataReaderImpl.WSUIDValidationHandler</code>的逻辑,点儿都不科学.</p>\n<h3 id=\"3-实现\"><a href=\"#3-实现\" class=\"headerlink\" title=\"3.实现\"></a>3.实现</h3><p> 上面分析清楚了,实现就很简单,实现<code>javax.xml.bind.ValidationEventHandler</code></p>\n<pre><code>public class IgnoreUnexpectedElementValidationEventHandler implements ValidationEventHandler {\n        private static final Logger logger = LoggerFactory.getLogger(IgnoreUnexpectedElementValidationEventHandler.class);\n\n        @Override\n        public boolean handleEvent(ValidationEvent event) {\n                String msg = event.getMessage();\n                if (msg != null &amp;&amp; msg.startsWith(&quot;unexpected element&quot;)) {\n                    logger.warn(&quot;{}&quot;, msg);\n                    return true;\n             }\n              return false;\n        }\n}\n</code></pre><p> 在<code>cxf:bus</code>中配置下就ok</p>\n<pre><code>  &lt;cxf:bus&gt;\n    &lt;cxf:properties&gt;\n        &lt;entry key=&quot;jaxb-validation-event-handler&quot;&gt;\n            &lt;bean class=&quot;IgnoreUnexpectedElementValidationEventHandler&quot;/&gt;\n        &lt;/entry&gt;\n    &lt;/cxf:properties&gt;\n&lt;/cxf:bus&gt;\n</code></pre><p> 建议只在线上环境启用此东东,线下还是不要开启,早点发现问题是好事.</p>\n"},{"title":"如何跟踪数据库结构变动","date":"2014-08-15T13:52:17.000Z","_content":"\n\n昨天和澎湃聊了这个事情,当时的想法是数据库中有表记录版本,项目代码中存储变更脚本.无意中看到数据库版本控制工具[liquibase](http://www.liquibase.org/index.html).最开始还是有点担心,怕这东西把数据库玩坏了.看了看官方文档,再粗略看了下主流程的源代码,发掘下我想要的功能,这个工具已经足够强大了,我们用好就行.\n\n下面以cs为例,讲讲整个过程.\n\n### 1. 在cs-dal中添加maven依赖.\n\n\t    <build>\n            <plugin>\n                <groupId>org.liquibase</groupId>\n                <artifactId>liquibase-maven-plugin</artifactId>\n                <version>3.2.2</version>\n                <configuration>\n                    <!--数据库变更主文件-->\n                    <changeLogFile>src/main/resources/db/changelog/db.master.xml</changeLogFile>\n                    <!--数据库相关配置文件-->\n                    <propertyFile>src/main/resources/db/config/dal-${spring.profiles.active}.properties</propertyFile>\n                </configuration>\n                <executions>\n                    <execution>\n                        <phase>process-resources</phase>\n                        <goals>\n                            <goal>update</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n    \n    \n### 2. 编写数据库变更脚本\n\n#### 2.1 数据库变更主文件\n\n`db.master.xml`:\n\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<databaseChangeLog\n        xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog\n         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.2.xsd\">\n    \t<!--数据库变更文件.注意:保证顺序,脚本执行顺序和include的先后有关系.includeAll可以加载所有脚本,加载顺序和文件命名有关系,容易犯错误,建议不使用.-->\n    \t<include relativeToChangelogFile=\"true\" file=\"db.1.0.sql\"/>\n   \t\t<include relativeToChangelogFile=\"true\" file=\"db.2.0.sql\"/>\n\t</databaseChangeLog>\n\t\n#### 2.2 变更脚本\n\n`db.1.0.sql`:\n\n\t--liquibase formatted sql\n\n\t--changeset qiubo:1\n\tcreate table test1 (\n    \tid int primary key,\n    \tname varchar(255)\n\t);\n\t--rollback drop table test1;\n\n`db.2.0.sql`:\n\n\t--liquibase formatted sql\n\n\t--changeset qiubo:2\n\tinsert into test1 (id, name) values (1, 'name 1');\n\tinsert into test1 (id, name) values (2, 'name 2');\n\t\n\n语法参考:http://www.liquibase.org/documentation/sql_format.html\n\n\n#### 2.3 数据库配置文件\n\ndal-local.properties\n\n\tdriver=com.mysql.jdbc.Driver\n\turl=jdbc:mysql://127.0.0.1:3306/yjf_cs?useUnicode=true&characterEncoding=UTF8&zeroDateTimeBehavior=convertToNull\n\tusername=root\n\tpassword=root\n\t#数据库schema名\n\tchangelogSchemaName=yjf_cs\n\n建议大家把原来的数据库配置文件中的key改为和这个一致,没必要搞多份配置.\n\t\n### 3.路径结构\n\n确保xxx-dal如下的路径结构,请大家统一:\n\n\n\t|---pom.xml\n\t|---src\n\t|    |---main\n\t|    |    |---java\n\t|    |    |---resources\n\t|    |    |        |---db\n\t|    |    |        |    |---changelog\n\t|    |    |        |    |        |---db.1.0.sql\n\t|    |    |        |    |        |---db.2.0.sql\n\t|    |    |        |    |        |---db.master.xml\n\t|    |    |        |    |---config\n\t|    |    |        |    |     |---dal-dev.properties\n\t|    |    |        |    |     |---dal-local.properties\n\t|    |    |        |    |     |---dal-net.properties\n\t|    |    |        |    |     |---dal-online.properties\n\t|    |    |        |    |     |---dal-pnet.properties\n\t|    |    |        |    |     |---dal-sdev.properties\n\t|    |    |        |    |     |---dal-snet.properties\n\t|    |    |        |    |     |---dal-stest.properties\n\t|    |    |        |    |     |---dal-test.properties\n\n\n### 4.执行\n\t\n在cs-dal目录执行:\n\n\tmvn liquibase:update -Dspring.profiles.active=local\n\t\n上面的脚本会以local环境执行,读取`dal-local.properties`中的数据库配置,执行数据库变更脚本.执行成功后,会在数据库中新建两个表.`DATABASECHANGELOG`会记录数据库变更信息,`DATABASECHANGELOGLOCK`用于防止多台服务器同时部署时的并发问题.\n\n### 5.注意事项\n1. 先不要搞线上.\n2. 变更脚本命名:我现在做得简单`db.1.0.sql`,最好版本号为项目版本号,便于跟踪.\n3. 新项目建议采用此方案,跟踪数据库所有的开发变动.\n4. 老项目可以采用全量的方式使用.全量,先根据数据库的基础数据生成变更脚本[generating_changelogs](http://www.liquibase.org/documentation/generating_changelogs.html),然后同步版本(changeLogSync)到数据库中.这样做的好处是,以后可以从无到有的创建当前版本的数据库了.参考[Adding Liquibase on an Existing project](http://www.liquibase.org/documentation/existing_project.html)\n5. 老项目也可以采用增量的方式使用,增量的方式不会管以前的数据版本.如果采用这种方式,在新环境搭建数据库,你需要先用数据库工具还原到没有版本之前的状态,然后再执行变更脚本.参考[Adding Liquibase on an Existing project](http://www.liquibase.org/documentation/existing_project.html)\n6. 请不要修改(脚本内容/脚本路径)之前的数据库变更脚本,liquibase会对每个Changesets生成摘要,执行时会去对比,如果你修改了以前的Changesets,会报错(所有的变更在事务中执行,出错了会回滚,不用担心会影响到数据库).\n7. 官方文档很全,想深入的同学请阅读[FAQ](http://www.liquibase.org/faq.html)/[BEST PRACTICES](http://www.liquibase.org/bestpractices.html)/[Maven Liquibase Plugin](http://www.liquibase.org/documentation/maven/index.html).遇到问题之前先检查配置是否正确,有bug可以找我^_^.","source":"_posts/database-version.md","raw":"---\ntitle: 如何跟踪数据库结构变动\ndate: 2014-08-15 21:52:17\ncategories: java\ntags:\n  - 数据库版本\n---\n\n\n昨天和澎湃聊了这个事情,当时的想法是数据库中有表记录版本,项目代码中存储变更脚本.无意中看到数据库版本控制工具[liquibase](http://www.liquibase.org/index.html).最开始还是有点担心,怕这东西把数据库玩坏了.看了看官方文档,再粗略看了下主流程的源代码,发掘下我想要的功能,这个工具已经足够强大了,我们用好就行.\n\n下面以cs为例,讲讲整个过程.\n\n### 1. 在cs-dal中添加maven依赖.\n\n\t    <build>\n            <plugin>\n                <groupId>org.liquibase</groupId>\n                <artifactId>liquibase-maven-plugin</artifactId>\n                <version>3.2.2</version>\n                <configuration>\n                    <!--数据库变更主文件-->\n                    <changeLogFile>src/main/resources/db/changelog/db.master.xml</changeLogFile>\n                    <!--数据库相关配置文件-->\n                    <propertyFile>src/main/resources/db/config/dal-${spring.profiles.active}.properties</propertyFile>\n                </configuration>\n                <executions>\n                    <execution>\n                        <phase>process-resources</phase>\n                        <goals>\n                            <goal>update</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n    \n    \n### 2. 编写数据库变更脚本\n\n#### 2.1 数据库变更主文件\n\n`db.master.xml`:\n\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<databaseChangeLog\n        xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog\n         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.2.xsd\">\n    \t<!--数据库变更文件.注意:保证顺序,脚本执行顺序和include的先后有关系.includeAll可以加载所有脚本,加载顺序和文件命名有关系,容易犯错误,建议不使用.-->\n    \t<include relativeToChangelogFile=\"true\" file=\"db.1.0.sql\"/>\n   \t\t<include relativeToChangelogFile=\"true\" file=\"db.2.0.sql\"/>\n\t</databaseChangeLog>\n\t\n#### 2.2 变更脚本\n\n`db.1.0.sql`:\n\n\t--liquibase formatted sql\n\n\t--changeset qiubo:1\n\tcreate table test1 (\n    \tid int primary key,\n    \tname varchar(255)\n\t);\n\t--rollback drop table test1;\n\n`db.2.0.sql`:\n\n\t--liquibase formatted sql\n\n\t--changeset qiubo:2\n\tinsert into test1 (id, name) values (1, 'name 1');\n\tinsert into test1 (id, name) values (2, 'name 2');\n\t\n\n语法参考:http://www.liquibase.org/documentation/sql_format.html\n\n\n#### 2.3 数据库配置文件\n\ndal-local.properties\n\n\tdriver=com.mysql.jdbc.Driver\n\turl=jdbc:mysql://127.0.0.1:3306/yjf_cs?useUnicode=true&characterEncoding=UTF8&zeroDateTimeBehavior=convertToNull\n\tusername=root\n\tpassword=root\n\t#数据库schema名\n\tchangelogSchemaName=yjf_cs\n\n建议大家把原来的数据库配置文件中的key改为和这个一致,没必要搞多份配置.\n\t\n### 3.路径结构\n\n确保xxx-dal如下的路径结构,请大家统一:\n\n\n\t|---pom.xml\n\t|---src\n\t|    |---main\n\t|    |    |---java\n\t|    |    |---resources\n\t|    |    |        |---db\n\t|    |    |        |    |---changelog\n\t|    |    |        |    |        |---db.1.0.sql\n\t|    |    |        |    |        |---db.2.0.sql\n\t|    |    |        |    |        |---db.master.xml\n\t|    |    |        |    |---config\n\t|    |    |        |    |     |---dal-dev.properties\n\t|    |    |        |    |     |---dal-local.properties\n\t|    |    |        |    |     |---dal-net.properties\n\t|    |    |        |    |     |---dal-online.properties\n\t|    |    |        |    |     |---dal-pnet.properties\n\t|    |    |        |    |     |---dal-sdev.properties\n\t|    |    |        |    |     |---dal-snet.properties\n\t|    |    |        |    |     |---dal-stest.properties\n\t|    |    |        |    |     |---dal-test.properties\n\n\n### 4.执行\n\t\n在cs-dal目录执行:\n\n\tmvn liquibase:update -Dspring.profiles.active=local\n\t\n上面的脚本会以local环境执行,读取`dal-local.properties`中的数据库配置,执行数据库变更脚本.执行成功后,会在数据库中新建两个表.`DATABASECHANGELOG`会记录数据库变更信息,`DATABASECHANGELOGLOCK`用于防止多台服务器同时部署时的并发问题.\n\n### 5.注意事项\n1. 先不要搞线上.\n2. 变更脚本命名:我现在做得简单`db.1.0.sql`,最好版本号为项目版本号,便于跟踪.\n3. 新项目建议采用此方案,跟踪数据库所有的开发变动.\n4. 老项目可以采用全量的方式使用.全量,先根据数据库的基础数据生成变更脚本[generating_changelogs](http://www.liquibase.org/documentation/generating_changelogs.html),然后同步版本(changeLogSync)到数据库中.这样做的好处是,以后可以从无到有的创建当前版本的数据库了.参考[Adding Liquibase on an Existing project](http://www.liquibase.org/documentation/existing_project.html)\n5. 老项目也可以采用增量的方式使用,增量的方式不会管以前的数据版本.如果采用这种方式,在新环境搭建数据库,你需要先用数据库工具还原到没有版本之前的状态,然后再执行变更脚本.参考[Adding Liquibase on an Existing project](http://www.liquibase.org/documentation/existing_project.html)\n6. 请不要修改(脚本内容/脚本路径)之前的数据库变更脚本,liquibase会对每个Changesets生成摘要,执行时会去对比,如果你修改了以前的Changesets,会报错(所有的变更在事务中执行,出错了会回滚,不用担心会影响到数据库).\n7. 官方文档很全,想深入的同学请阅读[FAQ](http://www.liquibase.org/faq.html)/[BEST PRACTICES](http://www.liquibase.org/bestpractices.html)/[Maven Liquibase Plugin](http://www.liquibase.org/documentation/maven/index.html).遇到问题之前先检查配置是否正确,有bug可以找我^_^.","slug":"database-version","published":1,"updated":"2018-04-01T16:53:17.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2kshc002ap0ug1xt7zx9s","content":"<p>昨天和澎湃聊了这个事情,当时的想法是数据库中有表记录版本,项目代码中存储变更脚本.无意中看到数据库版本控制工具<a href=\"http://www.liquibase.org/index.html\" target=\"_blank\" rel=\"noopener\">liquibase</a>.最开始还是有点担心,怕这东西把数据库玩坏了.看了看官方文档,再粗略看了下主流程的源代码,发掘下我想要的功能,这个工具已经足够强大了,我们用好就行.</p>\n<p>下面以cs为例,讲讲整个过程.</p>\n<h3 id=\"1-在cs-dal中添加maven依赖\"><a href=\"#1-在cs-dal中添加maven依赖\" class=\"headerlink\" title=\"1. 在cs-dal中添加maven依赖.\"></a>1. 在cs-dal中添加maven依赖.</h3><pre><code>    &lt;build&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;\n            &lt;artifactId&gt;liquibase-maven-plugin&lt;/artifactId&gt;\n            &lt;version&gt;3.2.2&lt;/version&gt;\n            &lt;configuration&gt;\n                &lt;!--数据库变更主文件--&gt;\n                &lt;changeLogFile&gt;src/main/resources/db/changelog/db.master.xml&lt;/changeLogFile&gt;\n                &lt;!--数据库相关配置文件--&gt;\n                &lt;propertyFile&gt;src/main/resources/db/config/dal-${spring.profiles.active}.properties&lt;/propertyFile&gt;\n            &lt;/configuration&gt;\n            &lt;executions&gt;\n                &lt;execution&gt;\n                    &lt;phase&gt;process-resources&lt;/phase&gt;\n                    &lt;goals&gt;\n                        &lt;goal&gt;update&lt;/goal&gt;\n                    &lt;/goals&gt;\n                &lt;/execution&gt;\n            &lt;/executions&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre><h3 id=\"2-编写数据库变更脚本\"><a href=\"#2-编写数据库变更脚本\" class=\"headerlink\" title=\"2. 编写数据库变更脚本\"></a>2. 编写数据库变更脚本</h3><h4 id=\"2-1-数据库变更主文件\"><a href=\"#2-1-数据库变更主文件\" class=\"headerlink\" title=\"2.1 数据库变更主文件\"></a>2.1 数据库变更主文件</h4><p><code>db.master.xml</code>:</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;databaseChangeLog\n    xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog\n     http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.2.xsd&quot;&gt;\n    &lt;!--数据库变更文件.注意:保证顺序,脚本执行顺序和include的先后有关系.includeAll可以加载所有脚本,加载顺序和文件命名有关系,容易犯错误,建议不使用.--&gt;\n    &lt;include relativeToChangelogFile=&quot;true&quot; file=&quot;db.1.0.sql&quot;/&gt;\n       &lt;include relativeToChangelogFile=&quot;true&quot; file=&quot;db.2.0.sql&quot;/&gt;\n&lt;/databaseChangeLog&gt;\n</code></pre><h4 id=\"2-2-变更脚本\"><a href=\"#2-2-变更脚本\" class=\"headerlink\" title=\"2.2 变更脚本\"></a>2.2 变更脚本</h4><p><code>db.1.0.sql</code>:</p>\n<pre><code>--liquibase formatted sql\n\n--changeset qiubo:1\ncreate table test1 (\n    id int primary key,\n    name varchar(255)\n);\n--rollback drop table test1;\n</code></pre><p><code>db.2.0.sql</code>:</p>\n<pre><code>--liquibase formatted sql\n\n--changeset qiubo:2\ninsert into test1 (id, name) values (1, &apos;name 1&apos;);\ninsert into test1 (id, name) values (2, &apos;name 2&apos;);\n</code></pre><p>语法参考:<a href=\"http://www.liquibase.org/documentation/sql_format.html\" target=\"_blank\" rel=\"noopener\">http://www.liquibase.org/documentation/sql_format.html</a></p>\n<h4 id=\"2-3-数据库配置文件\"><a href=\"#2-3-数据库配置文件\" class=\"headerlink\" title=\"2.3 数据库配置文件\"></a>2.3 数据库配置文件</h4><p>dal-local.properties</p>\n<pre><code>driver=com.mysql.jdbc.Driver\nurl=jdbc:mysql://127.0.0.1:3306/yjf_cs?useUnicode=true&amp;characterEncoding=UTF8&amp;zeroDateTimeBehavior=convertToNull\nusername=root\npassword=root\n#数据库schema名\nchangelogSchemaName=yjf_cs\n</code></pre><p>建议大家把原来的数据库配置文件中的key改为和这个一致,没必要搞多份配置.</p>\n<h3 id=\"3-路径结构\"><a href=\"#3-路径结构\" class=\"headerlink\" title=\"3.路径结构\"></a>3.路径结构</h3><p>确保xxx-dal如下的路径结构,请大家统一:</p>\n<pre><code>|---pom.xml\n|---src\n|    |---main\n|    |    |---java\n|    |    |---resources\n|    |    |        |---db\n|    |    |        |    |---changelog\n|    |    |        |    |        |---db.1.0.sql\n|    |    |        |    |        |---db.2.0.sql\n|    |    |        |    |        |---db.master.xml\n|    |    |        |    |---config\n|    |    |        |    |     |---dal-dev.properties\n|    |    |        |    |     |---dal-local.properties\n|    |    |        |    |     |---dal-net.properties\n|    |    |        |    |     |---dal-online.properties\n|    |    |        |    |     |---dal-pnet.properties\n|    |    |        |    |     |---dal-sdev.properties\n|    |    |        |    |     |---dal-snet.properties\n|    |    |        |    |     |---dal-stest.properties\n|    |    |        |    |     |---dal-test.properties\n</code></pre><h3 id=\"4-执行\"><a href=\"#4-执行\" class=\"headerlink\" title=\"4.执行\"></a>4.执行</h3><p>在cs-dal目录执行:</p>\n<pre><code>mvn liquibase:update -Dspring.profiles.active=local\n</code></pre><p>上面的脚本会以local环境执行,读取<code>dal-local.properties</code>中的数据库配置,执行数据库变更脚本.执行成功后,会在数据库中新建两个表.<code>DATABASECHANGELOG</code>会记录数据库变更信息,<code>DATABASECHANGELOGLOCK</code>用于防止多台服务器同时部署时的并发问题.</p>\n<h3 id=\"5-注意事项\"><a href=\"#5-注意事项\" class=\"headerlink\" title=\"5.注意事项\"></a>5.注意事项</h3><ol>\n<li>先不要搞线上.</li>\n<li>变更脚本命名:我现在做得简单<code>db.1.0.sql</code>,最好版本号为项目版本号,便于跟踪.</li>\n<li>新项目建议采用此方案,跟踪数据库所有的开发变动.</li>\n<li>老项目可以采用全量的方式使用.全量,先根据数据库的基础数据生成变更脚本<a href=\"http://www.liquibase.org/documentation/generating_changelogs.html\" target=\"_blank\" rel=\"noopener\">generating_changelogs</a>,然后同步版本(changeLogSync)到数据库中.这样做的好处是,以后可以从无到有的创建当前版本的数据库了.参考<a href=\"http://www.liquibase.org/documentation/existing_project.html\" target=\"_blank\" rel=\"noopener\">Adding Liquibase on an Existing project</a></li>\n<li>老项目也可以采用增量的方式使用,增量的方式不会管以前的数据版本.如果采用这种方式,在新环境搭建数据库,你需要先用数据库工具还原到没有版本之前的状态,然后再执行变更脚本.参考<a href=\"http://www.liquibase.org/documentation/existing_project.html\" target=\"_blank\" rel=\"noopener\">Adding Liquibase on an Existing project</a></li>\n<li>请不要修改(脚本内容/脚本路径)之前的数据库变更脚本,liquibase会对每个Changesets生成摘要,执行时会去对比,如果你修改了以前的Changesets,会报错(所有的变更在事务中执行,出错了会回滚,不用担心会影响到数据库).</li>\n<li>官方文档很全,想深入的同学请阅读<a href=\"http://www.liquibase.org/faq.html\" target=\"_blank\" rel=\"noopener\">FAQ</a>/<a href=\"http://www.liquibase.org/bestpractices.html\" target=\"_blank\" rel=\"noopener\">BEST PRACTICES</a>/<a href=\"http://www.liquibase.org/documentation/maven/index.html\" target=\"_blank\" rel=\"noopener\">Maven Liquibase Plugin</a>.遇到问题之前先检查配置是否正确,有bug可以找我^_^.</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天和澎湃聊了这个事情,当时的想法是数据库中有表记录版本,项目代码中存储变更脚本.无意中看到数据库版本控制工具<a href=\"http://www.liquibase.org/index.html\" target=\"_blank\" rel=\"noopener\">liquibase</a>.最开始还是有点担心,怕这东西把数据库玩坏了.看了看官方文档,再粗略看了下主流程的源代码,发掘下我想要的功能,这个工具已经足够强大了,我们用好就行.</p>\n<p>下面以cs为例,讲讲整个过程.</p>\n<h3 id=\"1-在cs-dal中添加maven依赖\"><a href=\"#1-在cs-dal中添加maven依赖\" class=\"headerlink\" title=\"1. 在cs-dal中添加maven依赖.\"></a>1. 在cs-dal中添加maven依赖.</h3><pre><code>    &lt;build&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;\n            &lt;artifactId&gt;liquibase-maven-plugin&lt;/artifactId&gt;\n            &lt;version&gt;3.2.2&lt;/version&gt;\n            &lt;configuration&gt;\n                &lt;!--数据库变更主文件--&gt;\n                &lt;changeLogFile&gt;src/main/resources/db/changelog/db.master.xml&lt;/changeLogFile&gt;\n                &lt;!--数据库相关配置文件--&gt;\n                &lt;propertyFile&gt;src/main/resources/db/config/dal-${spring.profiles.active}.properties&lt;/propertyFile&gt;\n            &lt;/configuration&gt;\n            &lt;executions&gt;\n                &lt;execution&gt;\n                    &lt;phase&gt;process-resources&lt;/phase&gt;\n                    &lt;goals&gt;\n                        &lt;goal&gt;update&lt;/goal&gt;\n                    &lt;/goals&gt;\n                &lt;/execution&gt;\n            &lt;/executions&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre><h3 id=\"2-编写数据库变更脚本\"><a href=\"#2-编写数据库变更脚本\" class=\"headerlink\" title=\"2. 编写数据库变更脚本\"></a>2. 编写数据库变更脚本</h3><h4 id=\"2-1-数据库变更主文件\"><a href=\"#2-1-数据库变更主文件\" class=\"headerlink\" title=\"2.1 数据库变更主文件\"></a>2.1 数据库变更主文件</h4><p><code>db.master.xml</code>:</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;databaseChangeLog\n    xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog\n     http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.2.xsd&quot;&gt;\n    &lt;!--数据库变更文件.注意:保证顺序,脚本执行顺序和include的先后有关系.includeAll可以加载所有脚本,加载顺序和文件命名有关系,容易犯错误,建议不使用.--&gt;\n    &lt;include relativeToChangelogFile=&quot;true&quot; file=&quot;db.1.0.sql&quot;/&gt;\n       &lt;include relativeToChangelogFile=&quot;true&quot; file=&quot;db.2.0.sql&quot;/&gt;\n&lt;/databaseChangeLog&gt;\n</code></pre><h4 id=\"2-2-变更脚本\"><a href=\"#2-2-变更脚本\" class=\"headerlink\" title=\"2.2 变更脚本\"></a>2.2 变更脚本</h4><p><code>db.1.0.sql</code>:</p>\n<pre><code>--liquibase formatted sql\n\n--changeset qiubo:1\ncreate table test1 (\n    id int primary key,\n    name varchar(255)\n);\n--rollback drop table test1;\n</code></pre><p><code>db.2.0.sql</code>:</p>\n<pre><code>--liquibase formatted sql\n\n--changeset qiubo:2\ninsert into test1 (id, name) values (1, &apos;name 1&apos;);\ninsert into test1 (id, name) values (2, &apos;name 2&apos;);\n</code></pre><p>语法参考:<a href=\"http://www.liquibase.org/documentation/sql_format.html\" target=\"_blank\" rel=\"noopener\">http://www.liquibase.org/documentation/sql_format.html</a></p>\n<h4 id=\"2-3-数据库配置文件\"><a href=\"#2-3-数据库配置文件\" class=\"headerlink\" title=\"2.3 数据库配置文件\"></a>2.3 数据库配置文件</h4><p>dal-local.properties</p>\n<pre><code>driver=com.mysql.jdbc.Driver\nurl=jdbc:mysql://127.0.0.1:3306/yjf_cs?useUnicode=true&amp;characterEncoding=UTF8&amp;zeroDateTimeBehavior=convertToNull\nusername=root\npassword=root\n#数据库schema名\nchangelogSchemaName=yjf_cs\n</code></pre><p>建议大家把原来的数据库配置文件中的key改为和这个一致,没必要搞多份配置.</p>\n<h3 id=\"3-路径结构\"><a href=\"#3-路径结构\" class=\"headerlink\" title=\"3.路径结构\"></a>3.路径结构</h3><p>确保xxx-dal如下的路径结构,请大家统一:</p>\n<pre><code>|---pom.xml\n|---src\n|    |---main\n|    |    |---java\n|    |    |---resources\n|    |    |        |---db\n|    |    |        |    |---changelog\n|    |    |        |    |        |---db.1.0.sql\n|    |    |        |    |        |---db.2.0.sql\n|    |    |        |    |        |---db.master.xml\n|    |    |        |    |---config\n|    |    |        |    |     |---dal-dev.properties\n|    |    |        |    |     |---dal-local.properties\n|    |    |        |    |     |---dal-net.properties\n|    |    |        |    |     |---dal-online.properties\n|    |    |        |    |     |---dal-pnet.properties\n|    |    |        |    |     |---dal-sdev.properties\n|    |    |        |    |     |---dal-snet.properties\n|    |    |        |    |     |---dal-stest.properties\n|    |    |        |    |     |---dal-test.properties\n</code></pre><h3 id=\"4-执行\"><a href=\"#4-执行\" class=\"headerlink\" title=\"4.执行\"></a>4.执行</h3><p>在cs-dal目录执行:</p>\n<pre><code>mvn liquibase:update -Dspring.profiles.active=local\n</code></pre><p>上面的脚本会以local环境执行,读取<code>dal-local.properties</code>中的数据库配置,执行数据库变更脚本.执行成功后,会在数据库中新建两个表.<code>DATABASECHANGELOG</code>会记录数据库变更信息,<code>DATABASECHANGELOGLOCK</code>用于防止多台服务器同时部署时的并发问题.</p>\n<h3 id=\"5-注意事项\"><a href=\"#5-注意事项\" class=\"headerlink\" title=\"5.注意事项\"></a>5.注意事项</h3><ol>\n<li>先不要搞线上.</li>\n<li>变更脚本命名:我现在做得简单<code>db.1.0.sql</code>,最好版本号为项目版本号,便于跟踪.</li>\n<li>新项目建议采用此方案,跟踪数据库所有的开发变动.</li>\n<li>老项目可以采用全量的方式使用.全量,先根据数据库的基础数据生成变更脚本<a href=\"http://www.liquibase.org/documentation/generating_changelogs.html\" target=\"_blank\" rel=\"noopener\">generating_changelogs</a>,然后同步版本(changeLogSync)到数据库中.这样做的好处是,以后可以从无到有的创建当前版本的数据库了.参考<a href=\"http://www.liquibase.org/documentation/existing_project.html\" target=\"_blank\" rel=\"noopener\">Adding Liquibase on an Existing project</a></li>\n<li>老项目也可以采用增量的方式使用,增量的方式不会管以前的数据版本.如果采用这种方式,在新环境搭建数据库,你需要先用数据库工具还原到没有版本之前的状态,然后再执行变更脚本.参考<a href=\"http://www.liquibase.org/documentation/existing_project.html\" target=\"_blank\" rel=\"noopener\">Adding Liquibase on an Existing project</a></li>\n<li>请不要修改(脚本内容/脚本路径)之前的数据库变更脚本,liquibase会对每个Changesets生成摘要,执行时会去对比,如果你修改了以前的Changesets,会报错(所有的变更在事务中执行,出错了会回滚,不用担心会影响到数据库).</li>\n<li>官方文档很全,想深入的同学请阅读<a href=\"http://www.liquibase.org/faq.html\" target=\"_blank\" rel=\"noopener\">FAQ</a>/<a href=\"http://www.liquibase.org/bestpractices.html\" target=\"_blank\" rel=\"noopener\">BEST PRACTICES</a>/<a href=\"http://www.liquibase.org/documentation/maven/index.html\" target=\"_blank\" rel=\"noopener\">Maven Liquibase Plugin</a>.遇到问题之前先检查配置是否正确,有bug可以找我^_^.</li>\n</ol>\n"},{"title":"依赖管理","date":"2014-01-14T13:52:17.000Z","_content":"\n# 依赖管理\n\n项目依赖问题很让人头痛，也出了很多事故，线上线下都很闹心。本着让大家都能开心的原则😄，在**@培根**童鞋的要求下，刚好我对maven很熟，刚好我对公司遇到的依赖问题也很了解，写了此文档。\n\n请您带着一个大大的问号**?**阅读此文档.您可以把您遇到的依赖问题(此文档没有包含的)发给我,丰富案例库.您可以补充依赖检查中的不足之处,毕竟我个人的能力有限.您可以分享一些灰常有用的插件,方便大家.您可以谈谈您对依赖风险控制的想法.**Help Me Help You!**\n\n## 一.依赖管理目标\n\n1. 此规范更新后,使用方不需要修改代码\n3. 规范开源jar包版本\n4. 检查传递依赖\n5. 检查项目classpath中是否有类名相同的依赖jar包\n6. 检查已知不能使用的jar包\n7. 定义常用插件\n8. 优化yjf-common-util依赖,不是每个项目都使用的包定义为provided,由项目自己引入\n\n## 二.如何实现目标\n\n### 1.创建公共父pom\n\n* 定义所有易极付项目都依赖的父pom `com.yiji.yiji-parent`\n* 此pom为SNAPSHOT\n* 此pom在`dependencyManagement`中定义常用jar包的版本\n* 此pom显示依赖`yjf-common-util` `guava` `log`\n* 此pom使用`maven-enforcer-plugin`来规范传递依赖,要求当前依赖的版本和传递依赖版本一样或者比传递依赖版本高(比如A->Cv1 ,A->D->Cv2,如果`v1<v2`,则打包失败)\n* 此pom使用`maven-enforcer-plugin`来规范引入会导致已知问题的包(比如我们的项目都使用`slf4j`和`logback`,那我们的依赖中不能出现`org.slf4j:slf4j-log4j12`)\n* 此pom使用`com.yiji.maven.yiji-maven-plugin`来检查classpath中是否有类名相同的jar包出现.如果有,在`console`中也会提示警告,在执行打包命令的目录生成`dependency-check.log`文件,此文件中会记录检查了哪些包.同时,以后我们也可以通过此日志文件来了解我们项目间的依赖情况.\n* 此pom包含常用maven插件`maven-compiler-plugin` `maven-source-plugin` `maven-eclipse-plugin` `findbugs-maven-plugin` `maven-pmd-plugin`方便大家日常使用\n* 此pom中的开源依赖,我会定期check是否有更新,是否有bug修复\n\n### 2.开发`com.yiji.maven.yiji-maven-plugin`\n\n此插件已开发完毕,代码也很简单,可以发现一些类加载顺序不一致导致的潜在的问题.\n\n目前此插件只检查不同的jar包中是否有相同的类名.还可以增加对资源文件的检查,文件名相同还可以增加对内容的检查.这些需求如有必要,以后在加上.此插件也是SNAPSHOT的,以后我升级了,大家不用改动任何代码.\n\n### 3.定制`settings.xml`\n\n* 此文件定义`snapshot`依赖为每次打包检查\n* 其他大多人不需要关心的东东\n\n\n## 三.如何实施\n\n目前已完成cs项目的改造,使用上面的东东,cs的pom文件还廋身不少.\n\n由于传递依赖,不敢贸然大规模推广,先选择被依赖较少的项目使用.和**@培根**商量,先选择**boss项目\\易融通项目\\易房保项目**使用,使用过程中出现任何问题,请联系我(也可以顺带请我喝茶)\n\n如果这几个项目把雷踩完了,需要找一个统一的时间点,大家一起修改\\测试\\上线\n## 四.如何搞\n\n### 1.替换`setting.xml`\n\n下载`svn://192.168.45.206/common/yiji-parent/settings.xml`,替换maven安装目录中的`setting.xml`\n\n### 2.配置项目父pom\n\n拿cs为例，在cs的父pom中加入\n\n\t<parent>\n        <groupId>com.yiji</groupId>\n        <artifactId>yiji-parent</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n去掉dependencyManagement中的开源jar依赖(公司内部的依赖不要去掉， `com.yiji.yiji-parent`中没有定义这些东东)。检查项目中的开源依赖是否有版本号，如果有并且IDE提示重复的定义，去掉此版本号；如果没有提示，应该是在 `com.yiji.yiji-parent`里没有加入此依赖，请联系我。\n\n### 3.测试打包\n\n执行`mvnp`试试，如果有传递依赖问题，打包会失败，请先联系我。如果打包成功，请检查`dependency-check.log`文件中有没有警告\n\n### 4.测试项目\n\n运行单元测试用例，看会不会出现问题，最好找**@翼德**同学全量回归下。\n\n## 五.FAQ\n\n### 1.为什么不提供方便发布的东东\n\n##### 原因有：\n\n\n- 容易出错，命令很简单，容易把发往生产的包发到测试环境，除非你很了解\n- setting.xml里不支持定义`distributionManagement`，只能在pom里面定义。因为我们有多套nexus，需要通过profile来定义不同环境对应不同的nexus，但是profile不能继承(我测试是这样的)\n- 我们大多数项目，只能把facade发布到nexus，即便profile支持继承，我也不敢把这玩意儿加到`com.yiji.yiji-parent`中。万一某童鞋在项目根目录执行了mvn deploy，**@培根**会不开心的...😠\n\n##### 如何解决：\n\n可以参考`com.yiji.yiji-parent`中的profiles部分，请在facade中定义这个玩意儿，然后执行命令\n\n### 2.有哪些常用的mvn命令，可以方便大家使用\n\n非window用户，请在~/.bash_profile中加入\n\n\t\talias mvni='mvn -T 1C clean install -Dmaven.test.skip=true'\n\t\talias mvnp='mvn -T 1C clean package -Dmaven.test.skip=true'\n\t\talias mvnv='mvn versions:set -DgenerateBackupPoms=false'\n\t\talias mvnd='mvn -T 1C clean deploy -Dmaven.test.skip=true'\n\t\talias mvndd='mvn -T 1C clean deploy -P dev  -Dmaven.test.skip=true'\n\t\talias mvndo='mvn -T 1C clean deploy -P online -Dmaven.test.skip=true'\n\t\talias mvnc='mvn -T 1C clean eclipse:clean idea:clean'\n\t\talias mvne='mvn -T 1C clean eclipse:clean eclipse:eclipse  -DdownloadSources=true'\n不知道各命令啥意思的童鞋请google.\n\nwindow用户请把`svn://192.168.45.206/common/yiji-parent/script`中的脚本添加到PATH中，have a try.\n\n### 3.为毛不加入自动生成doc文档插件\n\n`yjf-common-util`里面用`maven-javadoc-plugin`来生成doc文档并在发布时上传到nexus。不过这很费时，而且我们以前使用的`codetemplates`里面有很多javadoc不认识的东东，警告一大堆，看着惨不忍睹。\n\n### 4.IDE里面安装maven插件有什么好处\n\n好处很多，它可以检查一些pom编写错误，也可以方便看依赖树。eclipse对maven支持很牛，依赖树看着会很爽，简单的依赖问题，用它就可以搞定。IDEA的智能提示很牛，添加依赖快捷键就可以搞定。\n\n以后有依赖问题的童鞋，先用IDE提供的依赖树功能发现问题。找我也可以，但别让我给你安装maven插件，生命是短暂的啊。\n### 5.maven我不熟怎么办\n\n肯定不是凉拌，可以先看看`http://www.infoq.com/cn/minibooks/maven-in-action` `http://www.juvenxu.com/category/maven/`\n后面我会给大家分享maven一些基本的东东。\n### 6.依赖问题除了maven导致的,还有其他导致的,如何解决?\n\n主要是把场景找出来,然后分析这些问题,我们自己来添加些防御手段.比如今天**@周洋**同学遇到的两个spring bean id配置一样了,导致本地开发测试ok,199启动确不正常.我们可以给spring添加点东东来检查重复id的问题.\n\n### 7.我依赖的某jar版本就是不一样\n\n有这样的的需求,现在问题比较突出的应该是金融这块.金融依赖很多银行提供的jar包,这些包可能会冲突.比如金融某项目,既依赖`httpclient3`又依赖`httpclient4`.\n\n这种情况只能在项目里面指定版本了,使用`com.yiji.maven.yiji-maven-plugin`里提供的版本不是强制约束.但是建议大家都别这样做,除非没办法.\n\n### 8.spring4.0都发布了,我们是不是该升级了.\n\n我们现在用的是spring 3.1,可能有项目用的spring3.2.\n\n[spring3.2](http://docs.spring.io/spring/docs/3.2.6.RELEASE/spring-framework-reference/htmlsingle/#new-in-3.2) 有很多新特性,比如test framework,此次升级也把spring升级到3.2.6.\n\n[spring 4.0](http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-whats-new)改动太大,暂时不考虑\n\n### 9.在公共父pom中升级一个版本,风险怎么把控\n\n以后大家都继承此父pom,升级一个版本意味着大家都升级了.风险确实很大.\n\n首先,我们会去分析此依赖的`release notes`,评估升级的必要性和影响面.\n\n然后,我们会找bops这样的大杂烩项目来做测试,测试相关特性是否受影响.  \n\n### 10.为什么不把`setting.xml`的配置移到pom中\n\n这样做的目的是为了做到环境感知,不同环境的maven `setting.xml`会不一样,这是信息中心和我需要做的事情.对于大家,只需要使用svn repos中的`setting.xml`.放到pom中,这个pom需要定义不同的profile,还需要修改我们现有的各个环境的打包脚本.\n\n### 11.常见踩雷问题\n\n#### 11.1 java.lang.NoClassDefFoundError: org/springframework/ui/velocity/VelocityEngineFactory\n\n这个原因是spring把相关的类放到了spring-context-support里面.如果你用spring的声明式cache,也会遇到找不到类,都加入下面的依赖.\n\n\t<dependency>\n\t\t<groupId>org.springframework</groupId>\n\t\t<artifactId>spring-context-support</artifactId>\n\t</dependency>\n\t\n#### 11.2 velocity报错\n\n\tjava.lang.IllegalStateException: Cannot convert value of type \t[org.springframework.web.servlet.view.velocity.VelocityConfigurer] to required type [org.apache.velocity.app.VelocityEngine] for property 'velocityEngine': no matching editors or conversion strategy found\n\tat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:267)\n\n报错是因为配置的bean `org.springframework.web.servlet.view.velocity.VelocityConfigurer` id为`velocityEngine`.此id覆盖了默认的velocityEngine,把这个id改为`velocityConfigurer`就ok\n\n#### 11.3  net.sf.ehcache.util.UpdateChecker - Update check failed: \n\n关闭ehcache启动时检查版本,在ehcache配置根元素上添加属性`updateCheck=\"false\"` \n\n#### 11.4 `BeanCopier`报错\n\n'net.sf.cglib.core.TypeUtils.parseType(Ljava/lang/String;)Lorg/objectweb/asm/Type;'\n这是以为spring 3.2对asm有改动[Migrating to Spring Framework 3.2](http://docs.spring.io/spring/docs/3.2.6.RELEASE/spring-framework-reference/htmlsingle/#migration-3.2)(D.3和D.4讲了这些东东),咱也得跟着改动,遇到这个错误,去掉cglib-nodep的依赖就ok\n\n加入下面的依赖:\n\t\n\t<dependency>\n        <groupId>cglib</groupId>\n        <artifactId>cglib</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.ow2.asm</groupId>\n        <artifactId>asm-util</artifactId>\n    </dependency>\n\n#### 11.5 `Spring MVC controller` 处理ajax请求报错 `406 Not Acceptable`\n\n`spring 3.2`引入了内容协商的概念,此概念很REST,资源输出格式由客户端来定义.目前支持三种:\n\n* 请求后缀名\n比如getUser.html getUser.xml  getUser.json 分别代表请求输出为html/xml/json\n* 参数\n比如请求为getUser?type=xml getUser?type=json\n* http header \n在http请求中设置`Accept` header,由客户端编程定义接收什么格式的返回.\n\n这三种方式,我个人觉得第三种最优雅,很适合编程实现对资源的访问.第一种很直观,第二种有点破坏REST的味道了.参考[Content Negotiation using Spring MVC](http://spring.io/blog/2013/05/11/content-negotiation-using-spring-mvc)\n\n遇到这个错误,很可能是因为我们在`Controller`中定义`@RequestMapping`的`value`带有html后缀,但是我们在方法上也加上了`@ResponseBody`,这让spring很困惑,你请求为html,返回输出又要去解析为json.\n\n##### 配置:\n\n1.引入正确的schema\n把schemaLocation中spring mvc schema版本去掉\n\n\t\thttp://www.springframework.org/schema/mvc\n\t      http://www.springframework.org/schema/mvc/spring-mvc.xsd\n\n2.配置`contentNegotiationManager`\n\t\n\t<bean id=\"contentNegotiationManager\"\n          class=\"org.springframework.web.accept.ContentNegotiationManagerFactoryBean\">\n        <property name=\"favorPathExtension\" value=\"false\"/>\n        <property name=\"favorParameter\" value=\"false\"/>\n        <property name=\"ignoreAcceptHeader\" value=\"true\"/>\n        <property name=\"useJaf\" value=\"false\"/>\n        <property name=\"defaultContentType\" value=\"application/json\"/>\n    </bean>\n    \n3.配置json转换器\n\n\t<mvc:annotation-driven\n             content-negotiation-manager=\"contentNegotiationManager\">\n        <mvc:message-converters register-defaults=\"true\">\n            <bean id=\"fastJsonHttpMessageConverter\"\n                  class=\"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter\">\n                <property name=\"supportedMediaTypes\">\n                    <list>\n                        <value>application/json;charset=UTF-8</value>\n                    </list>\n                </property>\n                <property name=\"features\" value=\"WriteDateUseDateFormat\"/>\n            </bean>\n        </mvc:message-converters>\n    </mvc:annotation-driven>\n    \n我们很多童鞋spring mvc用得很不地道,建议看看官方demo [mvc-showcase-screencast](http://s3.springsource.org/MVC/mvc-showcase-screencast.mov)\n\n#### 11.6 使用`com.yjf.common.web.CrossScriptingFilter`报找不到ESAPI\n\n添加依赖.\n\n\t<dependency>\n    \t<groupId>org.owasp.esapi</groupId>\n    \t<artifactId>esapi</artifactId>\n\t\t<exclusions>\n\t\t\t<exclusion>\n            \t<artifactId>log4j</artifactId>\n            \t<groupId>log4j</groupId>\n        \t</exclusion>\n        \t<exclusion>\n        \t\t<groupId>xerces</groupId>\n            \t<artifactId>xercesImpl</artifactId>\n        \t</exclusion>\n         </exclusions>\n    </dependency>\n    <dependency>\n    \t<groupId>xerces</groupId>\n        <artifactId>xercesImpl</artifactId>\n    </dependency>\n\n","source":"_posts/dependency-management.md","raw":"---\ntitle: 依赖管理\ndate: 2014-01-14 21:52:17\ncategories: java\ntags:\n  - 依赖管理\n---\n\n# 依赖管理\n\n项目依赖问题很让人头痛，也出了很多事故，线上线下都很闹心。本着让大家都能开心的原则😄，在**@培根**童鞋的要求下，刚好我对maven很熟，刚好我对公司遇到的依赖问题也很了解，写了此文档。\n\n请您带着一个大大的问号**?**阅读此文档.您可以把您遇到的依赖问题(此文档没有包含的)发给我,丰富案例库.您可以补充依赖检查中的不足之处,毕竟我个人的能力有限.您可以分享一些灰常有用的插件,方便大家.您可以谈谈您对依赖风险控制的想法.**Help Me Help You!**\n\n## 一.依赖管理目标\n\n1. 此规范更新后,使用方不需要修改代码\n3. 规范开源jar包版本\n4. 检查传递依赖\n5. 检查项目classpath中是否有类名相同的依赖jar包\n6. 检查已知不能使用的jar包\n7. 定义常用插件\n8. 优化yjf-common-util依赖,不是每个项目都使用的包定义为provided,由项目自己引入\n\n## 二.如何实现目标\n\n### 1.创建公共父pom\n\n* 定义所有易极付项目都依赖的父pom `com.yiji.yiji-parent`\n* 此pom为SNAPSHOT\n* 此pom在`dependencyManagement`中定义常用jar包的版本\n* 此pom显示依赖`yjf-common-util` `guava` `log`\n* 此pom使用`maven-enforcer-plugin`来规范传递依赖,要求当前依赖的版本和传递依赖版本一样或者比传递依赖版本高(比如A->Cv1 ,A->D->Cv2,如果`v1<v2`,则打包失败)\n* 此pom使用`maven-enforcer-plugin`来规范引入会导致已知问题的包(比如我们的项目都使用`slf4j`和`logback`,那我们的依赖中不能出现`org.slf4j:slf4j-log4j12`)\n* 此pom使用`com.yiji.maven.yiji-maven-plugin`来检查classpath中是否有类名相同的jar包出现.如果有,在`console`中也会提示警告,在执行打包命令的目录生成`dependency-check.log`文件,此文件中会记录检查了哪些包.同时,以后我们也可以通过此日志文件来了解我们项目间的依赖情况.\n* 此pom包含常用maven插件`maven-compiler-plugin` `maven-source-plugin` `maven-eclipse-plugin` `findbugs-maven-plugin` `maven-pmd-plugin`方便大家日常使用\n* 此pom中的开源依赖,我会定期check是否有更新,是否有bug修复\n\n### 2.开发`com.yiji.maven.yiji-maven-plugin`\n\n此插件已开发完毕,代码也很简单,可以发现一些类加载顺序不一致导致的潜在的问题.\n\n目前此插件只检查不同的jar包中是否有相同的类名.还可以增加对资源文件的检查,文件名相同还可以增加对内容的检查.这些需求如有必要,以后在加上.此插件也是SNAPSHOT的,以后我升级了,大家不用改动任何代码.\n\n### 3.定制`settings.xml`\n\n* 此文件定义`snapshot`依赖为每次打包检查\n* 其他大多人不需要关心的东东\n\n\n## 三.如何实施\n\n目前已完成cs项目的改造,使用上面的东东,cs的pom文件还廋身不少.\n\n由于传递依赖,不敢贸然大规模推广,先选择被依赖较少的项目使用.和**@培根**商量,先选择**boss项目\\易融通项目\\易房保项目**使用,使用过程中出现任何问题,请联系我(也可以顺带请我喝茶)\n\n如果这几个项目把雷踩完了,需要找一个统一的时间点,大家一起修改\\测试\\上线\n## 四.如何搞\n\n### 1.替换`setting.xml`\n\n下载`svn://192.168.45.206/common/yiji-parent/settings.xml`,替换maven安装目录中的`setting.xml`\n\n### 2.配置项目父pom\n\n拿cs为例，在cs的父pom中加入\n\n\t<parent>\n        <groupId>com.yiji</groupId>\n        <artifactId>yiji-parent</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n去掉dependencyManagement中的开源jar依赖(公司内部的依赖不要去掉， `com.yiji.yiji-parent`中没有定义这些东东)。检查项目中的开源依赖是否有版本号，如果有并且IDE提示重复的定义，去掉此版本号；如果没有提示，应该是在 `com.yiji.yiji-parent`里没有加入此依赖，请联系我。\n\n### 3.测试打包\n\n执行`mvnp`试试，如果有传递依赖问题，打包会失败，请先联系我。如果打包成功，请检查`dependency-check.log`文件中有没有警告\n\n### 4.测试项目\n\n运行单元测试用例，看会不会出现问题，最好找**@翼德**同学全量回归下。\n\n## 五.FAQ\n\n### 1.为什么不提供方便发布的东东\n\n##### 原因有：\n\n\n- 容易出错，命令很简单，容易把发往生产的包发到测试环境，除非你很了解\n- setting.xml里不支持定义`distributionManagement`，只能在pom里面定义。因为我们有多套nexus，需要通过profile来定义不同环境对应不同的nexus，但是profile不能继承(我测试是这样的)\n- 我们大多数项目，只能把facade发布到nexus，即便profile支持继承，我也不敢把这玩意儿加到`com.yiji.yiji-parent`中。万一某童鞋在项目根目录执行了mvn deploy，**@培根**会不开心的...😠\n\n##### 如何解决：\n\n可以参考`com.yiji.yiji-parent`中的profiles部分，请在facade中定义这个玩意儿，然后执行命令\n\n### 2.有哪些常用的mvn命令，可以方便大家使用\n\n非window用户，请在~/.bash_profile中加入\n\n\t\talias mvni='mvn -T 1C clean install -Dmaven.test.skip=true'\n\t\talias mvnp='mvn -T 1C clean package -Dmaven.test.skip=true'\n\t\talias mvnv='mvn versions:set -DgenerateBackupPoms=false'\n\t\talias mvnd='mvn -T 1C clean deploy -Dmaven.test.skip=true'\n\t\talias mvndd='mvn -T 1C clean deploy -P dev  -Dmaven.test.skip=true'\n\t\talias mvndo='mvn -T 1C clean deploy -P online -Dmaven.test.skip=true'\n\t\talias mvnc='mvn -T 1C clean eclipse:clean idea:clean'\n\t\talias mvne='mvn -T 1C clean eclipse:clean eclipse:eclipse  -DdownloadSources=true'\n不知道各命令啥意思的童鞋请google.\n\nwindow用户请把`svn://192.168.45.206/common/yiji-parent/script`中的脚本添加到PATH中，have a try.\n\n### 3.为毛不加入自动生成doc文档插件\n\n`yjf-common-util`里面用`maven-javadoc-plugin`来生成doc文档并在发布时上传到nexus。不过这很费时，而且我们以前使用的`codetemplates`里面有很多javadoc不认识的东东，警告一大堆，看着惨不忍睹。\n\n### 4.IDE里面安装maven插件有什么好处\n\n好处很多，它可以检查一些pom编写错误，也可以方便看依赖树。eclipse对maven支持很牛，依赖树看着会很爽，简单的依赖问题，用它就可以搞定。IDEA的智能提示很牛，添加依赖快捷键就可以搞定。\n\n以后有依赖问题的童鞋，先用IDE提供的依赖树功能发现问题。找我也可以，但别让我给你安装maven插件，生命是短暂的啊。\n### 5.maven我不熟怎么办\n\n肯定不是凉拌，可以先看看`http://www.infoq.com/cn/minibooks/maven-in-action` `http://www.juvenxu.com/category/maven/`\n后面我会给大家分享maven一些基本的东东。\n### 6.依赖问题除了maven导致的,还有其他导致的,如何解决?\n\n主要是把场景找出来,然后分析这些问题,我们自己来添加些防御手段.比如今天**@周洋**同学遇到的两个spring bean id配置一样了,导致本地开发测试ok,199启动确不正常.我们可以给spring添加点东东来检查重复id的问题.\n\n### 7.我依赖的某jar版本就是不一样\n\n有这样的的需求,现在问题比较突出的应该是金融这块.金融依赖很多银行提供的jar包,这些包可能会冲突.比如金融某项目,既依赖`httpclient3`又依赖`httpclient4`.\n\n这种情况只能在项目里面指定版本了,使用`com.yiji.maven.yiji-maven-plugin`里提供的版本不是强制约束.但是建议大家都别这样做,除非没办法.\n\n### 8.spring4.0都发布了,我们是不是该升级了.\n\n我们现在用的是spring 3.1,可能有项目用的spring3.2.\n\n[spring3.2](http://docs.spring.io/spring/docs/3.2.6.RELEASE/spring-framework-reference/htmlsingle/#new-in-3.2) 有很多新特性,比如test framework,此次升级也把spring升级到3.2.6.\n\n[spring 4.0](http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-whats-new)改动太大,暂时不考虑\n\n### 9.在公共父pom中升级一个版本,风险怎么把控\n\n以后大家都继承此父pom,升级一个版本意味着大家都升级了.风险确实很大.\n\n首先,我们会去分析此依赖的`release notes`,评估升级的必要性和影响面.\n\n然后,我们会找bops这样的大杂烩项目来做测试,测试相关特性是否受影响.  \n\n### 10.为什么不把`setting.xml`的配置移到pom中\n\n这样做的目的是为了做到环境感知,不同环境的maven `setting.xml`会不一样,这是信息中心和我需要做的事情.对于大家,只需要使用svn repos中的`setting.xml`.放到pom中,这个pom需要定义不同的profile,还需要修改我们现有的各个环境的打包脚本.\n\n### 11.常见踩雷问题\n\n#### 11.1 java.lang.NoClassDefFoundError: org/springframework/ui/velocity/VelocityEngineFactory\n\n这个原因是spring把相关的类放到了spring-context-support里面.如果你用spring的声明式cache,也会遇到找不到类,都加入下面的依赖.\n\n\t<dependency>\n\t\t<groupId>org.springframework</groupId>\n\t\t<artifactId>spring-context-support</artifactId>\n\t</dependency>\n\t\n#### 11.2 velocity报错\n\n\tjava.lang.IllegalStateException: Cannot convert value of type \t[org.springframework.web.servlet.view.velocity.VelocityConfigurer] to required type [org.apache.velocity.app.VelocityEngine] for property 'velocityEngine': no matching editors or conversion strategy found\n\tat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:267)\n\n报错是因为配置的bean `org.springframework.web.servlet.view.velocity.VelocityConfigurer` id为`velocityEngine`.此id覆盖了默认的velocityEngine,把这个id改为`velocityConfigurer`就ok\n\n#### 11.3  net.sf.ehcache.util.UpdateChecker - Update check failed: \n\n关闭ehcache启动时检查版本,在ehcache配置根元素上添加属性`updateCheck=\"false\"` \n\n#### 11.4 `BeanCopier`报错\n\n'net.sf.cglib.core.TypeUtils.parseType(Ljava/lang/String;)Lorg/objectweb/asm/Type;'\n这是以为spring 3.2对asm有改动[Migrating to Spring Framework 3.2](http://docs.spring.io/spring/docs/3.2.6.RELEASE/spring-framework-reference/htmlsingle/#migration-3.2)(D.3和D.4讲了这些东东),咱也得跟着改动,遇到这个错误,去掉cglib-nodep的依赖就ok\n\n加入下面的依赖:\n\t\n\t<dependency>\n        <groupId>cglib</groupId>\n        <artifactId>cglib</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.ow2.asm</groupId>\n        <artifactId>asm-util</artifactId>\n    </dependency>\n\n#### 11.5 `Spring MVC controller` 处理ajax请求报错 `406 Not Acceptable`\n\n`spring 3.2`引入了内容协商的概念,此概念很REST,资源输出格式由客户端来定义.目前支持三种:\n\n* 请求后缀名\n比如getUser.html getUser.xml  getUser.json 分别代表请求输出为html/xml/json\n* 参数\n比如请求为getUser?type=xml getUser?type=json\n* http header \n在http请求中设置`Accept` header,由客户端编程定义接收什么格式的返回.\n\n这三种方式,我个人觉得第三种最优雅,很适合编程实现对资源的访问.第一种很直观,第二种有点破坏REST的味道了.参考[Content Negotiation using Spring MVC](http://spring.io/blog/2013/05/11/content-negotiation-using-spring-mvc)\n\n遇到这个错误,很可能是因为我们在`Controller`中定义`@RequestMapping`的`value`带有html后缀,但是我们在方法上也加上了`@ResponseBody`,这让spring很困惑,你请求为html,返回输出又要去解析为json.\n\n##### 配置:\n\n1.引入正确的schema\n把schemaLocation中spring mvc schema版本去掉\n\n\t\thttp://www.springframework.org/schema/mvc\n\t      http://www.springframework.org/schema/mvc/spring-mvc.xsd\n\n2.配置`contentNegotiationManager`\n\t\n\t<bean id=\"contentNegotiationManager\"\n          class=\"org.springframework.web.accept.ContentNegotiationManagerFactoryBean\">\n        <property name=\"favorPathExtension\" value=\"false\"/>\n        <property name=\"favorParameter\" value=\"false\"/>\n        <property name=\"ignoreAcceptHeader\" value=\"true\"/>\n        <property name=\"useJaf\" value=\"false\"/>\n        <property name=\"defaultContentType\" value=\"application/json\"/>\n    </bean>\n    \n3.配置json转换器\n\n\t<mvc:annotation-driven\n             content-negotiation-manager=\"contentNegotiationManager\">\n        <mvc:message-converters register-defaults=\"true\">\n            <bean id=\"fastJsonHttpMessageConverter\"\n                  class=\"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter\">\n                <property name=\"supportedMediaTypes\">\n                    <list>\n                        <value>application/json;charset=UTF-8</value>\n                    </list>\n                </property>\n                <property name=\"features\" value=\"WriteDateUseDateFormat\"/>\n            </bean>\n        </mvc:message-converters>\n    </mvc:annotation-driven>\n    \n我们很多童鞋spring mvc用得很不地道,建议看看官方demo [mvc-showcase-screencast](http://s3.springsource.org/MVC/mvc-showcase-screencast.mov)\n\n#### 11.6 使用`com.yjf.common.web.CrossScriptingFilter`报找不到ESAPI\n\n添加依赖.\n\n\t<dependency>\n    \t<groupId>org.owasp.esapi</groupId>\n    \t<artifactId>esapi</artifactId>\n\t\t<exclusions>\n\t\t\t<exclusion>\n            \t<artifactId>log4j</artifactId>\n            \t<groupId>log4j</groupId>\n        \t</exclusion>\n        \t<exclusion>\n        \t\t<groupId>xerces</groupId>\n            \t<artifactId>xercesImpl</artifactId>\n        \t</exclusion>\n         </exclusions>\n    </dependency>\n    <dependency>\n    \t<groupId>xerces</groupId>\n        <artifactId>xercesImpl</artifactId>\n    </dependency>\n\n","slug":"dependency-management","published":1,"updated":"2018-04-01T16:53:17.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2kshe002ep0ugfojbydkj","content":"<h1 id=\"依赖管理\"><a href=\"#依赖管理\" class=\"headerlink\" title=\"依赖管理\"></a>依赖管理</h1><p>项目依赖问题很让人头痛，也出了很多事故，线上线下都很闹心。本着让大家都能开心的原则😄，在<strong>@培根</strong>童鞋的要求下，刚好我对maven很熟，刚好我对公司遇到的依赖问题也很了解，写了此文档。</p>\n<p>请您带着一个大大的问号<strong>?</strong>阅读此文档.您可以把您遇到的依赖问题(此文档没有包含的)发给我,丰富案例库.您可以补充依赖检查中的不足之处,毕竟我个人的能力有限.您可以分享一些灰常有用的插件,方便大家.您可以谈谈您对依赖风险控制的想法.<strong>Help Me Help You!</strong></p>\n<h2 id=\"一-依赖管理目标\"><a href=\"#一-依赖管理目标\" class=\"headerlink\" title=\"一.依赖管理目标\"></a>一.依赖管理目标</h2><ol>\n<li>此规范更新后,使用方不需要修改代码</li>\n<li>规范开源jar包版本</li>\n<li>检查传递依赖</li>\n<li>检查项目classpath中是否有类名相同的依赖jar包</li>\n<li>检查已知不能使用的jar包</li>\n<li>定义常用插件</li>\n<li>优化yjf-common-util依赖,不是每个项目都使用的包定义为provided,由项目自己引入</li>\n</ol>\n<h2 id=\"二-如何实现目标\"><a href=\"#二-如何实现目标\" class=\"headerlink\" title=\"二.如何实现目标\"></a>二.如何实现目标</h2><h3 id=\"1-创建公共父pom\"><a href=\"#1-创建公共父pom\" class=\"headerlink\" title=\"1.创建公共父pom\"></a>1.创建公共父pom</h3><ul>\n<li>定义所有易极付项目都依赖的父pom <code>com.yiji.yiji-parent</code></li>\n<li>此pom为SNAPSHOT</li>\n<li>此pom在<code>dependencyManagement</code>中定义常用jar包的版本</li>\n<li>此pom显示依赖<code>yjf-common-util</code> <code>guava</code> <code>log</code></li>\n<li>此pom使用<code>maven-enforcer-plugin</code>来规范传递依赖,要求当前依赖的版本和传递依赖版本一样或者比传递依赖版本高(比如A-&gt;Cv1 ,A-&gt;D-&gt;Cv2,如果<code>v1&lt;v2</code>,则打包失败)</li>\n<li>此pom使用<code>maven-enforcer-plugin</code>来规范引入会导致已知问题的包(比如我们的项目都使用<code>slf4j</code>和<code>logback</code>,那我们的依赖中不能出现<code>org.slf4j:slf4j-log4j12</code>)</li>\n<li>此pom使用<code>com.yiji.maven.yiji-maven-plugin</code>来检查classpath中是否有类名相同的jar包出现.如果有,在<code>console</code>中也会提示警告,在执行打包命令的目录生成<code>dependency-check.log</code>文件,此文件中会记录检查了哪些包.同时,以后我们也可以通过此日志文件来了解我们项目间的依赖情况.</li>\n<li>此pom包含常用maven插件<code>maven-compiler-plugin</code> <code>maven-source-plugin</code> <code>maven-eclipse-plugin</code> <code>findbugs-maven-plugin</code> <code>maven-pmd-plugin</code>方便大家日常使用</li>\n<li>此pom中的开源依赖,我会定期check是否有更新,是否有bug修复</li>\n</ul>\n<h3 id=\"2-开发com-yiji-maven-yiji-maven-plugin\"><a href=\"#2-开发com-yiji-maven-yiji-maven-plugin\" class=\"headerlink\" title=\"2.开发com.yiji.maven.yiji-maven-plugin\"></a>2.开发<code>com.yiji.maven.yiji-maven-plugin</code></h3><p>此插件已开发完毕,代码也很简单,可以发现一些类加载顺序不一致导致的潜在的问题.</p>\n<p>目前此插件只检查不同的jar包中是否有相同的类名.还可以增加对资源文件的检查,文件名相同还可以增加对内容的检查.这些需求如有必要,以后在加上.此插件也是SNAPSHOT的,以后我升级了,大家不用改动任何代码.</p>\n<h3 id=\"3-定制settings-xml\"><a href=\"#3-定制settings-xml\" class=\"headerlink\" title=\"3.定制settings.xml\"></a>3.定制<code>settings.xml</code></h3><ul>\n<li>此文件定义<code>snapshot</code>依赖为每次打包检查</li>\n<li>其他大多人不需要关心的东东</li>\n</ul>\n<h2 id=\"三-如何实施\"><a href=\"#三-如何实施\" class=\"headerlink\" title=\"三.如何实施\"></a>三.如何实施</h2><p>目前已完成cs项目的改造,使用上面的东东,cs的pom文件还廋身不少.</p>\n<p>由于传递依赖,不敢贸然大规模推广,先选择被依赖较少的项目使用.和<strong>@培根</strong>商量,先选择<strong>boss项目\\易融通项目\\易房保项目</strong>使用,使用过程中出现任何问题,请联系我(也可以顺带请我喝茶)</p>\n<p>如果这几个项目把雷踩完了,需要找一个统一的时间点,大家一起修改\\测试\\上线</p>\n<h2 id=\"四-如何搞\"><a href=\"#四-如何搞\" class=\"headerlink\" title=\"四.如何搞\"></a>四.如何搞</h2><h3 id=\"1-替换setting-xml\"><a href=\"#1-替换setting-xml\" class=\"headerlink\" title=\"1.替换setting.xml\"></a>1.替换<code>setting.xml</code></h3><p>下载<code>svn://192.168.45.206/common/yiji-parent/settings.xml</code>,替换maven安装目录中的<code>setting.xml</code></p>\n<h3 id=\"2-配置项目父pom\"><a href=\"#2-配置项目父pom\" class=\"headerlink\" title=\"2.配置项目父pom\"></a>2.配置项目父pom</h3><p>拿cs为例，在cs的父pom中加入</p>\n<pre><code>&lt;parent&gt;\n    &lt;groupId&gt;com.yiji&lt;/groupId&gt;\n    &lt;artifactId&gt;yiji-parent&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n&lt;/parent&gt;\n</code></pre><p>去掉dependencyManagement中的开源jar依赖(公司内部的依赖不要去掉， <code>com.yiji.yiji-parent</code>中没有定义这些东东)。检查项目中的开源依赖是否有版本号，如果有并且IDE提示重复的定义，去掉此版本号；如果没有提示，应该是在 <code>com.yiji.yiji-parent</code>里没有加入此依赖，请联系我。</p>\n<h3 id=\"3-测试打包\"><a href=\"#3-测试打包\" class=\"headerlink\" title=\"3.测试打包\"></a>3.测试打包</h3><p>执行<code>mvnp</code>试试，如果有传递依赖问题，打包会失败，请先联系我。如果打包成功，请检查<code>dependency-check.log</code>文件中有没有警告</p>\n<h3 id=\"4-测试项目\"><a href=\"#4-测试项目\" class=\"headerlink\" title=\"4.测试项目\"></a>4.测试项目</h3><p>运行单元测试用例，看会不会出现问题，最好找<strong>@翼德</strong>同学全量回归下。</p>\n<h2 id=\"五-FAQ\"><a href=\"#五-FAQ\" class=\"headerlink\" title=\"五.FAQ\"></a>五.FAQ</h2><h3 id=\"1-为什么不提供方便发布的东东\"><a href=\"#1-为什么不提供方便发布的东东\" class=\"headerlink\" title=\"1.为什么不提供方便发布的东东\"></a>1.为什么不提供方便发布的东东</h3><h5 id=\"原因有：\"><a href=\"#原因有：\" class=\"headerlink\" title=\"原因有：\"></a>原因有：</h5><ul>\n<li>容易出错，命令很简单，容易把发往生产的包发到测试环境，除非你很了解</li>\n<li>setting.xml里不支持定义<code>distributionManagement</code>，只能在pom里面定义。因为我们有多套nexus，需要通过profile来定义不同环境对应不同的nexus，但是profile不能继承(我测试是这样的)</li>\n<li>我们大多数项目，只能把facade发布到nexus，即便profile支持继承，我也不敢把这玩意儿加到<code>com.yiji.yiji-parent</code>中。万一某童鞋在项目根目录执行了mvn deploy，<strong>@培根</strong>会不开心的…😠</li>\n</ul>\n<h5 id=\"如何解决：\"><a href=\"#如何解决：\" class=\"headerlink\" title=\"如何解决：\"></a>如何解决：</h5><p>可以参考<code>com.yiji.yiji-parent</code>中的profiles部分，请在facade中定义这个玩意儿，然后执行命令</p>\n<h3 id=\"2-有哪些常用的mvn命令，可以方便大家使用\"><a href=\"#2-有哪些常用的mvn命令，可以方便大家使用\" class=\"headerlink\" title=\"2.有哪些常用的mvn命令，可以方便大家使用\"></a>2.有哪些常用的mvn命令，可以方便大家使用</h3><p>非window用户，请在~/.bash_profile中加入</p>\n<pre><code>alias mvni=&apos;mvn -T 1C clean install -Dmaven.test.skip=true&apos;\nalias mvnp=&apos;mvn -T 1C clean package -Dmaven.test.skip=true&apos;\nalias mvnv=&apos;mvn versions:set -DgenerateBackupPoms=false&apos;\nalias mvnd=&apos;mvn -T 1C clean deploy -Dmaven.test.skip=true&apos;\nalias mvndd=&apos;mvn -T 1C clean deploy -P dev  -Dmaven.test.skip=true&apos;\nalias mvndo=&apos;mvn -T 1C clean deploy -P online -Dmaven.test.skip=true&apos;\nalias mvnc=&apos;mvn -T 1C clean eclipse:clean idea:clean&apos;\nalias mvne=&apos;mvn -T 1C clean eclipse:clean eclipse:eclipse  -DdownloadSources=true&apos;\n</code></pre><p>不知道各命令啥意思的童鞋请google.</p>\n<p>window用户请把<code>svn://192.168.45.206/common/yiji-parent/script</code>中的脚本添加到PATH中，have a try.</p>\n<h3 id=\"3-为毛不加入自动生成doc文档插件\"><a href=\"#3-为毛不加入自动生成doc文档插件\" class=\"headerlink\" title=\"3.为毛不加入自动生成doc文档插件\"></a>3.为毛不加入自动生成doc文档插件</h3><p><code>yjf-common-util</code>里面用<code>maven-javadoc-plugin</code>来生成doc文档并在发布时上传到nexus。不过这很费时，而且我们以前使用的<code>codetemplates</code>里面有很多javadoc不认识的东东，警告一大堆，看着惨不忍睹。</p>\n<h3 id=\"4-IDE里面安装maven插件有什么好处\"><a href=\"#4-IDE里面安装maven插件有什么好处\" class=\"headerlink\" title=\"4.IDE里面安装maven插件有什么好处\"></a>4.IDE里面安装maven插件有什么好处</h3><p>好处很多，它可以检查一些pom编写错误，也可以方便看依赖树。eclipse对maven支持很牛，依赖树看着会很爽，简单的依赖问题，用它就可以搞定。IDEA的智能提示很牛，添加依赖快捷键就可以搞定。</p>\n<p>以后有依赖问题的童鞋，先用IDE提供的依赖树功能发现问题。找我也可以，但别让我给你安装maven插件，生命是短暂的啊。</p>\n<h3 id=\"5-maven我不熟怎么办\"><a href=\"#5-maven我不熟怎么办\" class=\"headerlink\" title=\"5.maven我不熟怎么办\"></a>5.maven我不熟怎么办</h3><p>肯定不是凉拌，可以先看看<code>http://www.infoq.com/cn/minibooks/maven-in-action</code> <code>http://www.juvenxu.com/category/maven/</code><br>后面我会给大家分享maven一些基本的东东。</p>\n<h3 id=\"6-依赖问题除了maven导致的-还有其他导致的-如何解决\"><a href=\"#6-依赖问题除了maven导致的-还有其他导致的-如何解决\" class=\"headerlink\" title=\"6.依赖问题除了maven导致的,还有其他导致的,如何解决?\"></a>6.依赖问题除了maven导致的,还有其他导致的,如何解决?</h3><p>主要是把场景找出来,然后分析这些问题,我们自己来添加些防御手段.比如今天<strong>@周洋</strong>同学遇到的两个spring bean id配置一样了,导致本地开发测试ok,199启动确不正常.我们可以给spring添加点东东来检查重复id的问题.</p>\n<h3 id=\"7-我依赖的某jar版本就是不一样\"><a href=\"#7-我依赖的某jar版本就是不一样\" class=\"headerlink\" title=\"7.我依赖的某jar版本就是不一样\"></a>7.我依赖的某jar版本就是不一样</h3><p>有这样的的需求,现在问题比较突出的应该是金融这块.金融依赖很多银行提供的jar包,这些包可能会冲突.比如金融某项目,既依赖<code>httpclient3</code>又依赖<code>httpclient4</code>.</p>\n<p>这种情况只能在项目里面指定版本了,使用<code>com.yiji.maven.yiji-maven-plugin</code>里提供的版本不是强制约束.但是建议大家都别这样做,除非没办法.</p>\n<h3 id=\"8-spring4-0都发布了-我们是不是该升级了\"><a href=\"#8-spring4-0都发布了-我们是不是该升级了\" class=\"headerlink\" title=\"8.spring4.0都发布了,我们是不是该升级了.\"></a>8.spring4.0都发布了,我们是不是该升级了.</h3><p>我们现在用的是spring 3.1,可能有项目用的spring3.2.</p>\n<p><a href=\"http://docs.spring.io/spring/docs/3.2.6.RELEASE/spring-framework-reference/htmlsingle/#new-in-3.2\" target=\"_blank\" rel=\"noopener\">spring3.2</a> 有很多新特性,比如test framework,此次升级也把spring升级到3.2.6.</p>\n<p><a href=\"http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-whats-new\" target=\"_blank\" rel=\"noopener\">spring 4.0</a>改动太大,暂时不考虑</p>\n<h3 id=\"9-在公共父pom中升级一个版本-风险怎么把控\"><a href=\"#9-在公共父pom中升级一个版本-风险怎么把控\" class=\"headerlink\" title=\"9.在公共父pom中升级一个版本,风险怎么把控\"></a>9.在公共父pom中升级一个版本,风险怎么把控</h3><p>以后大家都继承此父pom,升级一个版本意味着大家都升级了.风险确实很大.</p>\n<p>首先,我们会去分析此依赖的<code>release notes</code>,评估升级的必要性和影响面.</p>\n<p>然后,我们会找bops这样的大杂烩项目来做测试,测试相关特性是否受影响.  </p>\n<h3 id=\"10-为什么不把setting-xml的配置移到pom中\"><a href=\"#10-为什么不把setting-xml的配置移到pom中\" class=\"headerlink\" title=\"10.为什么不把setting.xml的配置移到pom中\"></a>10.为什么不把<code>setting.xml</code>的配置移到pom中</h3><p>这样做的目的是为了做到环境感知,不同环境的maven <code>setting.xml</code>会不一样,这是信息中心和我需要做的事情.对于大家,只需要使用svn repos中的<code>setting.xml</code>.放到pom中,这个pom需要定义不同的profile,还需要修改我们现有的各个环境的打包脚本.</p>\n<h3 id=\"11-常见踩雷问题\"><a href=\"#11-常见踩雷问题\" class=\"headerlink\" title=\"11.常见踩雷问题\"></a>11.常见踩雷问题</h3><h4 id=\"11-1-java-lang-NoClassDefFoundError-org-springframework-ui-velocity-VelocityEngineFactory\"><a href=\"#11-1-java-lang-NoClassDefFoundError-org-springframework-ui-velocity-VelocityEngineFactory\" class=\"headerlink\" title=\"11.1 java.lang.NoClassDefFoundError: org/springframework/ui/velocity/VelocityEngineFactory\"></a>11.1 java.lang.NoClassDefFoundError: org/springframework/ui/velocity/VelocityEngineFactory</h4><p>这个原因是spring把相关的类放到了spring-context-support里面.如果你用spring的声明式cache,也会遇到找不到类,都加入下面的依赖.</p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre><h4 id=\"11-2-velocity报错\"><a href=\"#11-2-velocity报错\" class=\"headerlink\" title=\"11.2 velocity报错\"></a>11.2 velocity报错</h4><pre><code>java.lang.IllegalStateException: Cannot convert value of type     [org.springframework.web.servlet.view.velocity.VelocityConfigurer] to required type [org.apache.velocity.app.VelocityEngine] for property &apos;velocityEngine&apos;: no matching editors or conversion strategy found\nat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:267)\n</code></pre><p>报错是因为配置的bean <code>org.springframework.web.servlet.view.velocity.VelocityConfigurer</code> id为<code>velocityEngine</code>.此id覆盖了默认的velocityEngine,把这个id改为<code>velocityConfigurer</code>就ok</p>\n<h4 id=\"11-3-net-sf-ehcache-util-UpdateChecker-Update-check-failed\"><a href=\"#11-3-net-sf-ehcache-util-UpdateChecker-Update-check-failed\" class=\"headerlink\" title=\"11.3  net.sf.ehcache.util.UpdateChecker - Update check failed:\"></a>11.3  net.sf.ehcache.util.UpdateChecker - Update check failed:</h4><p>关闭ehcache启动时检查版本,在ehcache配置根元素上添加属性<code>updateCheck=&quot;false&quot;</code> </p>\n<h4 id=\"11-4-BeanCopier报错\"><a href=\"#11-4-BeanCopier报错\" class=\"headerlink\" title=\"11.4 BeanCopier报错\"></a>11.4 <code>BeanCopier</code>报错</h4><p>‘net.sf.cglib.core.TypeUtils.parseType(Ljava/lang/String;)Lorg/objectweb/asm/Type;’<br>这是以为spring 3.2对asm有改动<a href=\"http://docs.spring.io/spring/docs/3.2.6.RELEASE/spring-framework-reference/htmlsingle/#migration-3.2\" target=\"_blank\" rel=\"noopener\">Migrating to Spring Framework 3.2</a>(D.3和D.4讲了这些东东),咱也得跟着改动,遇到这个错误,去掉cglib-nodep的依赖就ok</p>\n<p>加入下面的依赖:</p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;cglib&lt;/groupId&gt;\n    &lt;artifactId&gt;cglib&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.ow2.asm&lt;/groupId&gt;\n    &lt;artifactId&gt;asm-util&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre><h4 id=\"11-5-Spring-MVC-controller-处理ajax请求报错-406-Not-Acceptable\"><a href=\"#11-5-Spring-MVC-controller-处理ajax请求报错-406-Not-Acceptable\" class=\"headerlink\" title=\"11.5 Spring MVC controller 处理ajax请求报错 406 Not Acceptable\"></a>11.5 <code>Spring MVC controller</code> 处理ajax请求报错 <code>406 Not Acceptable</code></h4><p><code>spring 3.2</code>引入了内容协商的概念,此概念很REST,资源输出格式由客户端来定义.目前支持三种:</p>\n<ul>\n<li>请求后缀名<br>比如getUser.html getUser.xml  getUser.json 分别代表请求输出为html/xml/json</li>\n<li>参数<br>比如请求为getUser?type=xml getUser?type=json</li>\n<li>http header<br>在http请求中设置<code>Accept</code> header,由客户端编程定义接收什么格式的返回.</li>\n</ul>\n<p>这三种方式,我个人觉得第三种最优雅,很适合编程实现对资源的访问.第一种很直观,第二种有点破坏REST的味道了.参考<a href=\"http://spring.io/blog/2013/05/11/content-negotiation-using-spring-mvc\" target=\"_blank\" rel=\"noopener\">Content Negotiation using Spring MVC</a></p>\n<p>遇到这个错误,很可能是因为我们在<code>Controller</code>中定义<code>@RequestMapping</code>的<code>value</code>带有html后缀,但是我们在方法上也加上了<code>@ResponseBody</code>,这让spring很困惑,你请求为html,返回输出又要去解析为json.</p>\n<h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置:\"></a>配置:</h5><p>1.引入正确的schema<br>把schemaLocation中spring mvc schema版本去掉</p>\n<pre><code>http://www.springframework.org/schema/mvc\n  http://www.springframework.org/schema/mvc/spring-mvc.xsd\n</code></pre><p>2.配置<code>contentNegotiationManager</code></p>\n<pre><code>&lt;bean id=&quot;contentNegotiationManager&quot;\n      class=&quot;org.springframework.web.accept.ContentNegotiationManagerFactoryBean&quot;&gt;\n    &lt;property name=&quot;favorPathExtension&quot; value=&quot;false&quot;/&gt;\n    &lt;property name=&quot;favorParameter&quot; value=&quot;false&quot;/&gt;\n    &lt;property name=&quot;ignoreAcceptHeader&quot; value=&quot;true&quot;/&gt;\n    &lt;property name=&quot;useJaf&quot; value=&quot;false&quot;/&gt;\n    &lt;property name=&quot;defaultContentType&quot; value=&quot;application/json&quot;/&gt;\n&lt;/bean&gt;\n</code></pre><p>3.配置json转换器</p>\n<pre><code>&lt;mvc:annotation-driven\n         content-negotiation-manager=&quot;contentNegotiationManager&quot;&gt;\n    &lt;mvc:message-converters register-defaults=&quot;true&quot;&gt;\n        &lt;bean id=&quot;fastJsonHttpMessageConverter&quot;\n              class=&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&quot;&gt;\n            &lt;property name=&quot;supportedMediaTypes&quot;&gt;\n                &lt;list&gt;\n                    &lt;value&gt;application/json;charset=UTF-8&lt;/value&gt;\n                &lt;/list&gt;\n            &lt;/property&gt;\n            &lt;property name=&quot;features&quot; value=&quot;WriteDateUseDateFormat&quot;/&gt;\n        &lt;/bean&gt;\n    &lt;/mvc:message-converters&gt;\n&lt;/mvc:annotation-driven&gt;\n</code></pre><p>我们很多童鞋spring mvc用得很不地道,建议看看官方demo <a href=\"http://s3.springsource.org/MVC/mvc-showcase-screencast.mov\" target=\"_blank\" rel=\"noopener\">mvc-showcase-screencast</a></p>\n<h4 id=\"11-6-使用com-yjf-common-web-CrossScriptingFilter报找不到ESAPI\"><a href=\"#11-6-使用com-yjf-common-web-CrossScriptingFilter报找不到ESAPI\" class=\"headerlink\" title=\"11.6 使用com.yjf.common.web.CrossScriptingFilter报找不到ESAPI\"></a>11.6 使用<code>com.yjf.common.web.CrossScriptingFilter</code>报找不到ESAPI</h4><p>添加依赖.</p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.owasp.esapi&lt;/groupId&gt;\n    &lt;artifactId&gt;esapi&lt;/artifactId&gt;\n    &lt;exclusions&gt;\n        &lt;exclusion&gt;\n            &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n            &lt;groupId&gt;log4j&lt;/groupId&gt;\n        &lt;/exclusion&gt;\n        &lt;exclusion&gt;\n            &lt;groupId&gt;xerces&lt;/groupId&gt;\n            &lt;artifactId&gt;xercesImpl&lt;/artifactId&gt;\n        &lt;/exclusion&gt;\n     &lt;/exclusions&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;xerces&lt;/groupId&gt;\n    &lt;artifactId&gt;xercesImpl&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"依赖管理\"><a href=\"#依赖管理\" class=\"headerlink\" title=\"依赖管理\"></a>依赖管理</h1><p>项目依赖问题很让人头痛，也出了很多事故，线上线下都很闹心。本着让大家都能开心的原则😄，在<strong>@培根</strong>童鞋的要求下，刚好我对maven很熟，刚好我对公司遇到的依赖问题也很了解，写了此文档。</p>\n<p>请您带着一个大大的问号<strong>?</strong>阅读此文档.您可以把您遇到的依赖问题(此文档没有包含的)发给我,丰富案例库.您可以补充依赖检查中的不足之处,毕竟我个人的能力有限.您可以分享一些灰常有用的插件,方便大家.您可以谈谈您对依赖风险控制的想法.<strong>Help Me Help You!</strong></p>\n<h2 id=\"一-依赖管理目标\"><a href=\"#一-依赖管理目标\" class=\"headerlink\" title=\"一.依赖管理目标\"></a>一.依赖管理目标</h2><ol>\n<li>此规范更新后,使用方不需要修改代码</li>\n<li>规范开源jar包版本</li>\n<li>检查传递依赖</li>\n<li>检查项目classpath中是否有类名相同的依赖jar包</li>\n<li>检查已知不能使用的jar包</li>\n<li>定义常用插件</li>\n<li>优化yjf-common-util依赖,不是每个项目都使用的包定义为provided,由项目自己引入</li>\n</ol>\n<h2 id=\"二-如何实现目标\"><a href=\"#二-如何实现目标\" class=\"headerlink\" title=\"二.如何实现目标\"></a>二.如何实现目标</h2><h3 id=\"1-创建公共父pom\"><a href=\"#1-创建公共父pom\" class=\"headerlink\" title=\"1.创建公共父pom\"></a>1.创建公共父pom</h3><ul>\n<li>定义所有易极付项目都依赖的父pom <code>com.yiji.yiji-parent</code></li>\n<li>此pom为SNAPSHOT</li>\n<li>此pom在<code>dependencyManagement</code>中定义常用jar包的版本</li>\n<li>此pom显示依赖<code>yjf-common-util</code> <code>guava</code> <code>log</code></li>\n<li>此pom使用<code>maven-enforcer-plugin</code>来规范传递依赖,要求当前依赖的版本和传递依赖版本一样或者比传递依赖版本高(比如A-&gt;Cv1 ,A-&gt;D-&gt;Cv2,如果<code>v1&lt;v2</code>,则打包失败)</li>\n<li>此pom使用<code>maven-enforcer-plugin</code>来规范引入会导致已知问题的包(比如我们的项目都使用<code>slf4j</code>和<code>logback</code>,那我们的依赖中不能出现<code>org.slf4j:slf4j-log4j12</code>)</li>\n<li>此pom使用<code>com.yiji.maven.yiji-maven-plugin</code>来检查classpath中是否有类名相同的jar包出现.如果有,在<code>console</code>中也会提示警告,在执行打包命令的目录生成<code>dependency-check.log</code>文件,此文件中会记录检查了哪些包.同时,以后我们也可以通过此日志文件来了解我们项目间的依赖情况.</li>\n<li>此pom包含常用maven插件<code>maven-compiler-plugin</code> <code>maven-source-plugin</code> <code>maven-eclipse-plugin</code> <code>findbugs-maven-plugin</code> <code>maven-pmd-plugin</code>方便大家日常使用</li>\n<li>此pom中的开源依赖,我会定期check是否有更新,是否有bug修复</li>\n</ul>\n<h3 id=\"2-开发com-yiji-maven-yiji-maven-plugin\"><a href=\"#2-开发com-yiji-maven-yiji-maven-plugin\" class=\"headerlink\" title=\"2.开发com.yiji.maven.yiji-maven-plugin\"></a>2.开发<code>com.yiji.maven.yiji-maven-plugin</code></h3><p>此插件已开发完毕,代码也很简单,可以发现一些类加载顺序不一致导致的潜在的问题.</p>\n<p>目前此插件只检查不同的jar包中是否有相同的类名.还可以增加对资源文件的检查,文件名相同还可以增加对内容的检查.这些需求如有必要,以后在加上.此插件也是SNAPSHOT的,以后我升级了,大家不用改动任何代码.</p>\n<h3 id=\"3-定制settings-xml\"><a href=\"#3-定制settings-xml\" class=\"headerlink\" title=\"3.定制settings.xml\"></a>3.定制<code>settings.xml</code></h3><ul>\n<li>此文件定义<code>snapshot</code>依赖为每次打包检查</li>\n<li>其他大多人不需要关心的东东</li>\n</ul>\n<h2 id=\"三-如何实施\"><a href=\"#三-如何实施\" class=\"headerlink\" title=\"三.如何实施\"></a>三.如何实施</h2><p>目前已完成cs项目的改造,使用上面的东东,cs的pom文件还廋身不少.</p>\n<p>由于传递依赖,不敢贸然大规模推广,先选择被依赖较少的项目使用.和<strong>@培根</strong>商量,先选择<strong>boss项目\\易融通项目\\易房保项目</strong>使用,使用过程中出现任何问题,请联系我(也可以顺带请我喝茶)</p>\n<p>如果这几个项目把雷踩完了,需要找一个统一的时间点,大家一起修改\\测试\\上线</p>\n<h2 id=\"四-如何搞\"><a href=\"#四-如何搞\" class=\"headerlink\" title=\"四.如何搞\"></a>四.如何搞</h2><h3 id=\"1-替换setting-xml\"><a href=\"#1-替换setting-xml\" class=\"headerlink\" title=\"1.替换setting.xml\"></a>1.替换<code>setting.xml</code></h3><p>下载<code>svn://192.168.45.206/common/yiji-parent/settings.xml</code>,替换maven安装目录中的<code>setting.xml</code></p>\n<h3 id=\"2-配置项目父pom\"><a href=\"#2-配置项目父pom\" class=\"headerlink\" title=\"2.配置项目父pom\"></a>2.配置项目父pom</h3><p>拿cs为例，在cs的父pom中加入</p>\n<pre><code>&lt;parent&gt;\n    &lt;groupId&gt;com.yiji&lt;/groupId&gt;\n    &lt;artifactId&gt;yiji-parent&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n&lt;/parent&gt;\n</code></pre><p>去掉dependencyManagement中的开源jar依赖(公司内部的依赖不要去掉， <code>com.yiji.yiji-parent</code>中没有定义这些东东)。检查项目中的开源依赖是否有版本号，如果有并且IDE提示重复的定义，去掉此版本号；如果没有提示，应该是在 <code>com.yiji.yiji-parent</code>里没有加入此依赖，请联系我。</p>\n<h3 id=\"3-测试打包\"><a href=\"#3-测试打包\" class=\"headerlink\" title=\"3.测试打包\"></a>3.测试打包</h3><p>执行<code>mvnp</code>试试，如果有传递依赖问题，打包会失败，请先联系我。如果打包成功，请检查<code>dependency-check.log</code>文件中有没有警告</p>\n<h3 id=\"4-测试项目\"><a href=\"#4-测试项目\" class=\"headerlink\" title=\"4.测试项目\"></a>4.测试项目</h3><p>运行单元测试用例，看会不会出现问题，最好找<strong>@翼德</strong>同学全量回归下。</p>\n<h2 id=\"五-FAQ\"><a href=\"#五-FAQ\" class=\"headerlink\" title=\"五.FAQ\"></a>五.FAQ</h2><h3 id=\"1-为什么不提供方便发布的东东\"><a href=\"#1-为什么不提供方便发布的东东\" class=\"headerlink\" title=\"1.为什么不提供方便发布的东东\"></a>1.为什么不提供方便发布的东东</h3><h5 id=\"原因有：\"><a href=\"#原因有：\" class=\"headerlink\" title=\"原因有：\"></a>原因有：</h5><ul>\n<li>容易出错，命令很简单，容易把发往生产的包发到测试环境，除非你很了解</li>\n<li>setting.xml里不支持定义<code>distributionManagement</code>，只能在pom里面定义。因为我们有多套nexus，需要通过profile来定义不同环境对应不同的nexus，但是profile不能继承(我测试是这样的)</li>\n<li>我们大多数项目，只能把facade发布到nexus，即便profile支持继承，我也不敢把这玩意儿加到<code>com.yiji.yiji-parent</code>中。万一某童鞋在项目根目录执行了mvn deploy，<strong>@培根</strong>会不开心的…😠</li>\n</ul>\n<h5 id=\"如何解决：\"><a href=\"#如何解决：\" class=\"headerlink\" title=\"如何解决：\"></a>如何解决：</h5><p>可以参考<code>com.yiji.yiji-parent</code>中的profiles部分，请在facade中定义这个玩意儿，然后执行命令</p>\n<h3 id=\"2-有哪些常用的mvn命令，可以方便大家使用\"><a href=\"#2-有哪些常用的mvn命令，可以方便大家使用\" class=\"headerlink\" title=\"2.有哪些常用的mvn命令，可以方便大家使用\"></a>2.有哪些常用的mvn命令，可以方便大家使用</h3><p>非window用户，请在~/.bash_profile中加入</p>\n<pre><code>alias mvni=&apos;mvn -T 1C clean install -Dmaven.test.skip=true&apos;\nalias mvnp=&apos;mvn -T 1C clean package -Dmaven.test.skip=true&apos;\nalias mvnv=&apos;mvn versions:set -DgenerateBackupPoms=false&apos;\nalias mvnd=&apos;mvn -T 1C clean deploy -Dmaven.test.skip=true&apos;\nalias mvndd=&apos;mvn -T 1C clean deploy -P dev  -Dmaven.test.skip=true&apos;\nalias mvndo=&apos;mvn -T 1C clean deploy -P online -Dmaven.test.skip=true&apos;\nalias mvnc=&apos;mvn -T 1C clean eclipse:clean idea:clean&apos;\nalias mvne=&apos;mvn -T 1C clean eclipse:clean eclipse:eclipse  -DdownloadSources=true&apos;\n</code></pre><p>不知道各命令啥意思的童鞋请google.</p>\n<p>window用户请把<code>svn://192.168.45.206/common/yiji-parent/script</code>中的脚本添加到PATH中，have a try.</p>\n<h3 id=\"3-为毛不加入自动生成doc文档插件\"><a href=\"#3-为毛不加入自动生成doc文档插件\" class=\"headerlink\" title=\"3.为毛不加入自动生成doc文档插件\"></a>3.为毛不加入自动生成doc文档插件</h3><p><code>yjf-common-util</code>里面用<code>maven-javadoc-plugin</code>来生成doc文档并在发布时上传到nexus。不过这很费时，而且我们以前使用的<code>codetemplates</code>里面有很多javadoc不认识的东东，警告一大堆，看着惨不忍睹。</p>\n<h3 id=\"4-IDE里面安装maven插件有什么好处\"><a href=\"#4-IDE里面安装maven插件有什么好处\" class=\"headerlink\" title=\"4.IDE里面安装maven插件有什么好处\"></a>4.IDE里面安装maven插件有什么好处</h3><p>好处很多，它可以检查一些pom编写错误，也可以方便看依赖树。eclipse对maven支持很牛，依赖树看着会很爽，简单的依赖问题，用它就可以搞定。IDEA的智能提示很牛，添加依赖快捷键就可以搞定。</p>\n<p>以后有依赖问题的童鞋，先用IDE提供的依赖树功能发现问题。找我也可以，但别让我给你安装maven插件，生命是短暂的啊。</p>\n<h3 id=\"5-maven我不熟怎么办\"><a href=\"#5-maven我不熟怎么办\" class=\"headerlink\" title=\"5.maven我不熟怎么办\"></a>5.maven我不熟怎么办</h3><p>肯定不是凉拌，可以先看看<code>http://www.infoq.com/cn/minibooks/maven-in-action</code> <code>http://www.juvenxu.com/category/maven/</code><br>后面我会给大家分享maven一些基本的东东。</p>\n<h3 id=\"6-依赖问题除了maven导致的-还有其他导致的-如何解决\"><a href=\"#6-依赖问题除了maven导致的-还有其他导致的-如何解决\" class=\"headerlink\" title=\"6.依赖问题除了maven导致的,还有其他导致的,如何解决?\"></a>6.依赖问题除了maven导致的,还有其他导致的,如何解决?</h3><p>主要是把场景找出来,然后分析这些问题,我们自己来添加些防御手段.比如今天<strong>@周洋</strong>同学遇到的两个spring bean id配置一样了,导致本地开发测试ok,199启动确不正常.我们可以给spring添加点东东来检查重复id的问题.</p>\n<h3 id=\"7-我依赖的某jar版本就是不一样\"><a href=\"#7-我依赖的某jar版本就是不一样\" class=\"headerlink\" title=\"7.我依赖的某jar版本就是不一样\"></a>7.我依赖的某jar版本就是不一样</h3><p>有这样的的需求,现在问题比较突出的应该是金融这块.金融依赖很多银行提供的jar包,这些包可能会冲突.比如金融某项目,既依赖<code>httpclient3</code>又依赖<code>httpclient4</code>.</p>\n<p>这种情况只能在项目里面指定版本了,使用<code>com.yiji.maven.yiji-maven-plugin</code>里提供的版本不是强制约束.但是建议大家都别这样做,除非没办法.</p>\n<h3 id=\"8-spring4-0都发布了-我们是不是该升级了\"><a href=\"#8-spring4-0都发布了-我们是不是该升级了\" class=\"headerlink\" title=\"8.spring4.0都发布了,我们是不是该升级了.\"></a>8.spring4.0都发布了,我们是不是该升级了.</h3><p>我们现在用的是spring 3.1,可能有项目用的spring3.2.</p>\n<p><a href=\"http://docs.spring.io/spring/docs/3.2.6.RELEASE/spring-framework-reference/htmlsingle/#new-in-3.2\" target=\"_blank\" rel=\"noopener\">spring3.2</a> 有很多新特性,比如test framework,此次升级也把spring升级到3.2.6.</p>\n<p><a href=\"http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#spring-whats-new\" target=\"_blank\" rel=\"noopener\">spring 4.0</a>改动太大,暂时不考虑</p>\n<h3 id=\"9-在公共父pom中升级一个版本-风险怎么把控\"><a href=\"#9-在公共父pom中升级一个版本-风险怎么把控\" class=\"headerlink\" title=\"9.在公共父pom中升级一个版本,风险怎么把控\"></a>9.在公共父pom中升级一个版本,风险怎么把控</h3><p>以后大家都继承此父pom,升级一个版本意味着大家都升级了.风险确实很大.</p>\n<p>首先,我们会去分析此依赖的<code>release notes</code>,评估升级的必要性和影响面.</p>\n<p>然后,我们会找bops这样的大杂烩项目来做测试,测试相关特性是否受影响.  </p>\n<h3 id=\"10-为什么不把setting-xml的配置移到pom中\"><a href=\"#10-为什么不把setting-xml的配置移到pom中\" class=\"headerlink\" title=\"10.为什么不把setting.xml的配置移到pom中\"></a>10.为什么不把<code>setting.xml</code>的配置移到pom中</h3><p>这样做的目的是为了做到环境感知,不同环境的maven <code>setting.xml</code>会不一样,这是信息中心和我需要做的事情.对于大家,只需要使用svn repos中的<code>setting.xml</code>.放到pom中,这个pom需要定义不同的profile,还需要修改我们现有的各个环境的打包脚本.</p>\n<h3 id=\"11-常见踩雷问题\"><a href=\"#11-常见踩雷问题\" class=\"headerlink\" title=\"11.常见踩雷问题\"></a>11.常见踩雷问题</h3><h4 id=\"11-1-java-lang-NoClassDefFoundError-org-springframework-ui-velocity-VelocityEngineFactory\"><a href=\"#11-1-java-lang-NoClassDefFoundError-org-springframework-ui-velocity-VelocityEngineFactory\" class=\"headerlink\" title=\"11.1 java.lang.NoClassDefFoundError: org/springframework/ui/velocity/VelocityEngineFactory\"></a>11.1 java.lang.NoClassDefFoundError: org/springframework/ui/velocity/VelocityEngineFactory</h4><p>这个原因是spring把相关的类放到了spring-context-support里面.如果你用spring的声明式cache,也会遇到找不到类,都加入下面的依赖.</p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre><h4 id=\"11-2-velocity报错\"><a href=\"#11-2-velocity报错\" class=\"headerlink\" title=\"11.2 velocity报错\"></a>11.2 velocity报错</h4><pre><code>java.lang.IllegalStateException: Cannot convert value of type     [org.springframework.web.servlet.view.velocity.VelocityConfigurer] to required type [org.apache.velocity.app.VelocityEngine] for property &apos;velocityEngine&apos;: no matching editors or conversion strategy found\nat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:267)\n</code></pre><p>报错是因为配置的bean <code>org.springframework.web.servlet.view.velocity.VelocityConfigurer</code> id为<code>velocityEngine</code>.此id覆盖了默认的velocityEngine,把这个id改为<code>velocityConfigurer</code>就ok</p>\n<h4 id=\"11-3-net-sf-ehcache-util-UpdateChecker-Update-check-failed\"><a href=\"#11-3-net-sf-ehcache-util-UpdateChecker-Update-check-failed\" class=\"headerlink\" title=\"11.3  net.sf.ehcache.util.UpdateChecker - Update check failed:\"></a>11.3  net.sf.ehcache.util.UpdateChecker - Update check failed:</h4><p>关闭ehcache启动时检查版本,在ehcache配置根元素上添加属性<code>updateCheck=&quot;false&quot;</code> </p>\n<h4 id=\"11-4-BeanCopier报错\"><a href=\"#11-4-BeanCopier报错\" class=\"headerlink\" title=\"11.4 BeanCopier报错\"></a>11.4 <code>BeanCopier</code>报错</h4><p>‘net.sf.cglib.core.TypeUtils.parseType(Ljava/lang/String;)Lorg/objectweb/asm/Type;’<br>这是以为spring 3.2对asm有改动<a href=\"http://docs.spring.io/spring/docs/3.2.6.RELEASE/spring-framework-reference/htmlsingle/#migration-3.2\" target=\"_blank\" rel=\"noopener\">Migrating to Spring Framework 3.2</a>(D.3和D.4讲了这些东东),咱也得跟着改动,遇到这个错误,去掉cglib-nodep的依赖就ok</p>\n<p>加入下面的依赖:</p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;cglib&lt;/groupId&gt;\n    &lt;artifactId&gt;cglib&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.ow2.asm&lt;/groupId&gt;\n    &lt;artifactId&gt;asm-util&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre><h4 id=\"11-5-Spring-MVC-controller-处理ajax请求报错-406-Not-Acceptable\"><a href=\"#11-5-Spring-MVC-controller-处理ajax请求报错-406-Not-Acceptable\" class=\"headerlink\" title=\"11.5 Spring MVC controller 处理ajax请求报错 406 Not Acceptable\"></a>11.5 <code>Spring MVC controller</code> 处理ajax请求报错 <code>406 Not Acceptable</code></h4><p><code>spring 3.2</code>引入了内容协商的概念,此概念很REST,资源输出格式由客户端来定义.目前支持三种:</p>\n<ul>\n<li>请求后缀名<br>比如getUser.html getUser.xml  getUser.json 分别代表请求输出为html/xml/json</li>\n<li>参数<br>比如请求为getUser?type=xml getUser?type=json</li>\n<li>http header<br>在http请求中设置<code>Accept</code> header,由客户端编程定义接收什么格式的返回.</li>\n</ul>\n<p>这三种方式,我个人觉得第三种最优雅,很适合编程实现对资源的访问.第一种很直观,第二种有点破坏REST的味道了.参考<a href=\"http://spring.io/blog/2013/05/11/content-negotiation-using-spring-mvc\" target=\"_blank\" rel=\"noopener\">Content Negotiation using Spring MVC</a></p>\n<p>遇到这个错误,很可能是因为我们在<code>Controller</code>中定义<code>@RequestMapping</code>的<code>value</code>带有html后缀,但是我们在方法上也加上了<code>@ResponseBody</code>,这让spring很困惑,你请求为html,返回输出又要去解析为json.</p>\n<h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置:\"></a>配置:</h5><p>1.引入正确的schema<br>把schemaLocation中spring mvc schema版本去掉</p>\n<pre><code>http://www.springframework.org/schema/mvc\n  http://www.springframework.org/schema/mvc/spring-mvc.xsd\n</code></pre><p>2.配置<code>contentNegotiationManager</code></p>\n<pre><code>&lt;bean id=&quot;contentNegotiationManager&quot;\n      class=&quot;org.springframework.web.accept.ContentNegotiationManagerFactoryBean&quot;&gt;\n    &lt;property name=&quot;favorPathExtension&quot; value=&quot;false&quot;/&gt;\n    &lt;property name=&quot;favorParameter&quot; value=&quot;false&quot;/&gt;\n    &lt;property name=&quot;ignoreAcceptHeader&quot; value=&quot;true&quot;/&gt;\n    &lt;property name=&quot;useJaf&quot; value=&quot;false&quot;/&gt;\n    &lt;property name=&quot;defaultContentType&quot; value=&quot;application/json&quot;/&gt;\n&lt;/bean&gt;\n</code></pre><p>3.配置json转换器</p>\n<pre><code>&lt;mvc:annotation-driven\n         content-negotiation-manager=&quot;contentNegotiationManager&quot;&gt;\n    &lt;mvc:message-converters register-defaults=&quot;true&quot;&gt;\n        &lt;bean id=&quot;fastJsonHttpMessageConverter&quot;\n              class=&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&quot;&gt;\n            &lt;property name=&quot;supportedMediaTypes&quot;&gt;\n                &lt;list&gt;\n                    &lt;value&gt;application/json;charset=UTF-8&lt;/value&gt;\n                &lt;/list&gt;\n            &lt;/property&gt;\n            &lt;property name=&quot;features&quot; value=&quot;WriteDateUseDateFormat&quot;/&gt;\n        &lt;/bean&gt;\n    &lt;/mvc:message-converters&gt;\n&lt;/mvc:annotation-driven&gt;\n</code></pre><p>我们很多童鞋spring mvc用得很不地道,建议看看官方demo <a href=\"http://s3.springsource.org/MVC/mvc-showcase-screencast.mov\" target=\"_blank\" rel=\"noopener\">mvc-showcase-screencast</a></p>\n<h4 id=\"11-6-使用com-yjf-common-web-CrossScriptingFilter报找不到ESAPI\"><a href=\"#11-6-使用com-yjf-common-web-CrossScriptingFilter报找不到ESAPI\" class=\"headerlink\" title=\"11.6 使用com.yjf.common.web.CrossScriptingFilter报找不到ESAPI\"></a>11.6 使用<code>com.yjf.common.web.CrossScriptingFilter</code>报找不到ESAPI</h4><p>添加依赖.</p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.owasp.esapi&lt;/groupId&gt;\n    &lt;artifactId&gt;esapi&lt;/artifactId&gt;\n    &lt;exclusions&gt;\n        &lt;exclusion&gt;\n            &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n            &lt;groupId&gt;log4j&lt;/groupId&gt;\n        &lt;/exclusion&gt;\n        &lt;exclusion&gt;\n            &lt;groupId&gt;xerces&lt;/groupId&gt;\n            &lt;artifactId&gt;xercesImpl&lt;/artifactId&gt;\n        &lt;/exclusion&gt;\n     &lt;/exclusions&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;xerces&lt;/groupId&gt;\n    &lt;artifactId&gt;xercesImpl&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"title":"docker","date":"2016-01-01T13:52:17.000Z","_content":"\n### 1. docker配置\n\n在mac osx中，docker deamon运行在virtualbox虚拟机中，docker client和虚拟机中的docker deamon交互。\n\n#### 1.1 环境配置\n\n\t#配置docker环境变量\n\teval \"$(docker-machine env default)\"\n\t#配置docker启动alias\t\n\talias docker-start='docker-machine start default'\n\t#配置docker关闭alias\n\talias docker-stop=\"docker-machine stop default\"\n\t\n启动命令如下：\n\t\n\tdocker-start\n\tdocker-stop\n\n#### 1.2 配置镜像私服\n\n测试环境中私服提供服务如下：\n\n\t#docker registry ui\n\thttp://192.168.46.21:10005/\n\t#docker registry restful api\n\thttp://192.168.46.21:5000/v2/_catalog\n\n下面配置docker registry私服为192.168.46.21：\n\n\t#登陆到server\n\tdocker-machine ssh default\n\n\t#修改/var/lib/boot2docker/profile\n\t--insecure-registry 192.168.46.21:5000\n\t--registry-mirror http://192.168.46.21:5000\n\t\n国内docker mirror：\n\n\thttps://lug.ustc.edu.cn/wiki/mirrors/help/docker\n\thttp://0b929cdf.m.daocloud.io\n\t\n### 2. docker 常用命令\n\n![](docker/docker-command.jpg)\n\t\n\t#拉取镜像\n\tdocker pull yiji/java8:1.0\n\t\n\t#查看镜像历史,能看到docker镜像层的细节\n\tdocker history  yiji/java8:1.0\n\t\n\t#删除镜像\n\tdocker rmi -f yiji/centos7:latest\n\t\n\t#删除容器\n\tdocker rm\n\t\n\t#执行命令\t\n\tdocker run yiji/centos7 /bin/echo 'hello world'\n\t\n\t#交互运行：\n\tdocker run -it yiji/centos7 /bin/bash\n\t\n\t#查看容器运行状态\n\tdocker ps -a\n\t\t\n\t#查看指定容器状态\n\tdocker inspect f46935242662\n\t\n\t#查看端口隐射，通过inspect结果过滤\n\tdocker inspect --format='{{.NetworkSettings.Ports}}' 8f4a179a0647\n\t\n\t#查看容器资源占用\n\tdocker stats 92202cc1c3f0\n\t\n\t#查看docker deamon运行ip\n\techo $DOCKER_HOST\n\t\n\t#清理后台停止的容器\n\tdocker rm $( docker ps -a -q)\n\n\t#查看镜像的环境变量\n\tdocker run  yiji/java8:2.0  env\n\n\t\n### 3. F.A.Q\n\n#### 3.1. docker文件系统\n\ndocker镜像的文件系统采用多层存储，镜像中全是只读层，便于分发和共享(pull镜像时，会在本地拉已经存在的层)。运行时建立读写层，对于应用来说，需要把文件系统mount到docker中(这样性能最好)，device mapper对性能有影响。\n\n>>Data volumes provide the best and most predictable performance. This is because they bypass the storage driver and do not incur any of the potential overheads introduced by thin provisioning and copy-on-write. For this reason, you may want to place heavy write workloads on data volumes.\n\n#### 3.2. 关于基础镜像\n\n制作基础镜像时权衡镜像大小(虽然可以在主机上缓存基础镜像，也需要考虑首次分发的大小)。我们最开始使用centos7来制作基础镜像，发现镜像300多M，如果在加上java8，基础镜像有600多M了。\n\t\n可以参考[frolvlad/alpine-oraclejdk8](https://hub.docker.com/r/frolvlad/alpine-oraclejdk8/)来制作基础镜像。\n\t\n\t\tREPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\n\t\tyiji/java8          2.0                 1d58b31d19a0        4 days ago          166.5 MB\n\njava8的基础镜像只有不到200m。\n\n#### 3.3. 制作docker镜像并运行\n\n1. 编写Dockerfile\n \n\t\tFROM yiji/java8:2.0\n\t\tCOPY  yiji-boot-test-1.1-SNAPSHOT.jar /opt/yiji-boot-test-1.1-SNAPSHOT.jar\n\t\tWORKDIR /opt\n\t\tENTRYPOINT java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=4004 -jar /opt/yiji-boot-test-1.1-SNAPSHOT.jar\n\n2. build   \n    \n\t\tdocker build -t  yiji-boot-test:1.0 .\n\n3. run\n    \n        docker run -p 8081:8081 -p 4004:4004  yiji-boot-test:1.0\n\n    其中8081是应用web端口，4004端口是远程调试端口\n\t\n4. 在容器内执行命令\n\n\t在容器运行起来后，我们需要去容器内check下情况。\n\t\n\t\tdocker exec -it 92202cc1c3f0  sh\n\t\t\n#### 3.4 docker本地存储\n\ndocker 容器运行的文件存储在本地。下面来看看这些文件：\n\n查看docker container id\n\n\tCONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS                   PORTS                                            NAMES\n\t8f4a179a0647        yiji-boot-test:1.0   \"/bin/sh -c 'java -ag\"   2 hours ago         Up 2 hours               0.0.0.0:4004->4004/tcp, 0.0.0.0:8081->8081/tcp   silly_northcutt\n\t\n登陆到虚拟机，在mac和windows下，docker在虚拟机中运行\n\n\tdocker-machine ssh default\n\t\n切换到docker运行目录\n\n\tsudo su -\n\tcd /var/lib/docker/aufs/mnt/\n\t\n\n`ls |grep 8f4a179a0647`发现两个目录\n\n\t8f4a179a064737658b4055fb785c432c843f473a9d5fc40fba445017bd5b7e2e\n\t8f4a179a064737658b4055fb785c432c843f473a9d5fc40fba445017bd5b7e2e-init\n\t\n进入到第一个目录的opt子目录下，会找到我们打包的jar文件(chroot的魔力所在)\n\n\troot@default:/mnt/sda1/var/lib/docker/aufs/mnt/8f4a179a064737658b4055fb785c432c843f473a9d5fc40fba445017bd5b7e2e/opt# ls -l\n\ttotal 67168\n\t-rw-r--r--    1 root     root      68777433 Dec 28 08:26 yiji-boot-test-1.1-SNAPSHOT.jar\n\t\n#### 3.5 <a name=\"docker-security\">关于docker的安全</a>\n\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/key/vhMhelcV6Z9rXr\" width=\"595\" height=\"485\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/jpetazzo/docker-linux-containers-lxc-and-security\" title=\"Docker, Linux Containers (LXC), and security\" target=\"_blank\">Docker, Linux Containers (LXC), and security</a> </strong> from <strong><a href=\"//www.slideshare.net/jpetazzo\" target=\"_blank\">Jérôme Petazzoni</a></strong> </div>\n\n我们需要做两件事情，\n\n1. 不要使用root in docker\n\n\t参考[Running app inside Docker as non-root user](http://stackoverflow.com/questions/24308760/running-app-inside-docker-as-non-root-user)\n\t\n2. 经常升级内核\n\n做安全的同学可以看看更多关于docker 安全的文章:\n\n[docker-bench-security](https://github.com/docker/docker-bench-security)\n\n[Security CheatSheet](https://github.com/konstruktoid/Docker/blob/master/Security/CheatSheet.md)\n\n[CIS Docker 1.6 Benchmark](https://benchmarks.cisecurity.org/tools2/docker/CIS_Docker_1.6_Benchmark_v1.0.0.pdf)\n\n最后引用[David Mortman](https://twitter.com/mortman)在2015年[Defcon](https://www.defcon.org/)的一句话：\n\n>> a year ago, [docker and security] was pretty horrible,six months ago it wasn't so bad, and now it's pretty usable.\n\n#### 3.6 docker run vm?\n\n一些观点：\n\n[2016年六大OpenStack & Docker发展趋势预测](http://dockone.io/article/935)\n\n>>由原本的虚拟机管理程序为核心转变为容器加裸机组合模式\n\n\n[Hypernetes实现多租户CaaS，且无需客户操作系统](http://www.infoq.com/cn/news/2015/12/hypernetes-caas)\n\n>>OpenStack是一个用于构建和管理云的IaaS框架，Hypernetes使用了它的部分组件。它使用OpenStack的身份和服务目录提供程序Keystone进行身份验证和授权。它还使用了其他的OpenStack组件，如用于存储的Cinder和Ceph，用于网络管理的Neutron。对于OpenStack而言，这是一个独特的用法，因为其组件通常都不在OpenStack部署之外使用。\n>>\n\n\n#### 3.7 docker api\n\n##### 3.7.1 unix-socket api\n\n查看docker信息:\n\n\tcurl --unix-socket /var/run/docker.sock http:/info |jq\n\napi文档:\n\n\thttps://docs.docker.com/engine/reference/api/docker_remote_api/\n\n##### 3.7.2 java api\n\n依赖：\n\n\t<dependency>\n            <groupId>com.github.docker-java</groupId>\n            <artifactId>docker-java</artifactId>\n            <version>3.0.1</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>de.gesellix</groupId>\n                    <artifactId>unix-socket-factory</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>com.kohlschutter.junixsocket</groupId>\n            <artifactId>junixsocket-common</artifactId>\n            <version>2.0.4</version>\n        </dependency>\n        <dependency>\n            <groupId>com.kohlschutter.junixsocket</groupId>\n            <artifactId>junixsocket-native-common</artifactId>\n            <version>2.0.4</version>\n        </dependency>\n        \n 使用：\n \n \t\n \tDockerClient dockerClient = DockerClientBuilder.getInstance(\"unix:///var/run/docker.sock\").build();\n\tInfo info = dockerClient.infoCmd().exec();\n\tSystem.out.print(info);\n\t\napi文档:\n\n\thttps://github.com/docker-java/docker-java/\n\t\n\n#### 3.8 docker on centos7配置\n\ncentos7使用systemd来管理服务，docker配置文件`/lib/systemd/system/docker.service`。比如增加tcp api端口，修改\n\n\tExecStart=/usr/bin/dockerd\n\tExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --insecure-registry catalog.shurenyun.com","source":"_posts/docker.md","raw":"---\ntitle: docker\ndate: 2016-01-01 21:52:17\ncategories: java\ntags:\n  - docker\n---\n\n### 1. docker配置\n\n在mac osx中，docker deamon运行在virtualbox虚拟机中，docker client和虚拟机中的docker deamon交互。\n\n#### 1.1 环境配置\n\n\t#配置docker环境变量\n\teval \"$(docker-machine env default)\"\n\t#配置docker启动alias\t\n\talias docker-start='docker-machine start default'\n\t#配置docker关闭alias\n\talias docker-stop=\"docker-machine stop default\"\n\t\n启动命令如下：\n\t\n\tdocker-start\n\tdocker-stop\n\n#### 1.2 配置镜像私服\n\n测试环境中私服提供服务如下：\n\n\t#docker registry ui\n\thttp://192.168.46.21:10005/\n\t#docker registry restful api\n\thttp://192.168.46.21:5000/v2/_catalog\n\n下面配置docker registry私服为192.168.46.21：\n\n\t#登陆到server\n\tdocker-machine ssh default\n\n\t#修改/var/lib/boot2docker/profile\n\t--insecure-registry 192.168.46.21:5000\n\t--registry-mirror http://192.168.46.21:5000\n\t\n国内docker mirror：\n\n\thttps://lug.ustc.edu.cn/wiki/mirrors/help/docker\n\thttp://0b929cdf.m.daocloud.io\n\t\n### 2. docker 常用命令\n\n![](docker/docker-command.jpg)\n\t\n\t#拉取镜像\n\tdocker pull yiji/java8:1.0\n\t\n\t#查看镜像历史,能看到docker镜像层的细节\n\tdocker history  yiji/java8:1.0\n\t\n\t#删除镜像\n\tdocker rmi -f yiji/centos7:latest\n\t\n\t#删除容器\n\tdocker rm\n\t\n\t#执行命令\t\n\tdocker run yiji/centos7 /bin/echo 'hello world'\n\t\n\t#交互运行：\n\tdocker run -it yiji/centos7 /bin/bash\n\t\n\t#查看容器运行状态\n\tdocker ps -a\n\t\t\n\t#查看指定容器状态\n\tdocker inspect f46935242662\n\t\n\t#查看端口隐射，通过inspect结果过滤\n\tdocker inspect --format='{{.NetworkSettings.Ports}}' 8f4a179a0647\n\t\n\t#查看容器资源占用\n\tdocker stats 92202cc1c3f0\n\t\n\t#查看docker deamon运行ip\n\techo $DOCKER_HOST\n\t\n\t#清理后台停止的容器\n\tdocker rm $( docker ps -a -q)\n\n\t#查看镜像的环境变量\n\tdocker run  yiji/java8:2.0  env\n\n\t\n### 3. F.A.Q\n\n#### 3.1. docker文件系统\n\ndocker镜像的文件系统采用多层存储，镜像中全是只读层，便于分发和共享(pull镜像时，会在本地拉已经存在的层)。运行时建立读写层，对于应用来说，需要把文件系统mount到docker中(这样性能最好)，device mapper对性能有影响。\n\n>>Data volumes provide the best and most predictable performance. This is because they bypass the storage driver and do not incur any of the potential overheads introduced by thin provisioning and copy-on-write. For this reason, you may want to place heavy write workloads on data volumes.\n\n#### 3.2. 关于基础镜像\n\n制作基础镜像时权衡镜像大小(虽然可以在主机上缓存基础镜像，也需要考虑首次分发的大小)。我们最开始使用centos7来制作基础镜像，发现镜像300多M，如果在加上java8，基础镜像有600多M了。\n\t\n可以参考[frolvlad/alpine-oraclejdk8](https://hub.docker.com/r/frolvlad/alpine-oraclejdk8/)来制作基础镜像。\n\t\n\t\tREPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\n\t\tyiji/java8          2.0                 1d58b31d19a0        4 days ago          166.5 MB\n\njava8的基础镜像只有不到200m。\n\n#### 3.3. 制作docker镜像并运行\n\n1. 编写Dockerfile\n \n\t\tFROM yiji/java8:2.0\n\t\tCOPY  yiji-boot-test-1.1-SNAPSHOT.jar /opt/yiji-boot-test-1.1-SNAPSHOT.jar\n\t\tWORKDIR /opt\n\t\tENTRYPOINT java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=4004 -jar /opt/yiji-boot-test-1.1-SNAPSHOT.jar\n\n2. build   \n    \n\t\tdocker build -t  yiji-boot-test:1.0 .\n\n3. run\n    \n        docker run -p 8081:8081 -p 4004:4004  yiji-boot-test:1.0\n\n    其中8081是应用web端口，4004端口是远程调试端口\n\t\n4. 在容器内执行命令\n\n\t在容器运行起来后，我们需要去容器内check下情况。\n\t\n\t\tdocker exec -it 92202cc1c3f0  sh\n\t\t\n#### 3.4 docker本地存储\n\ndocker 容器运行的文件存储在本地。下面来看看这些文件：\n\n查看docker container id\n\n\tCONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS                   PORTS                                            NAMES\n\t8f4a179a0647        yiji-boot-test:1.0   \"/bin/sh -c 'java -ag\"   2 hours ago         Up 2 hours               0.0.0.0:4004->4004/tcp, 0.0.0.0:8081->8081/tcp   silly_northcutt\n\t\n登陆到虚拟机，在mac和windows下，docker在虚拟机中运行\n\n\tdocker-machine ssh default\n\t\n切换到docker运行目录\n\n\tsudo su -\n\tcd /var/lib/docker/aufs/mnt/\n\t\n\n`ls |grep 8f4a179a0647`发现两个目录\n\n\t8f4a179a064737658b4055fb785c432c843f473a9d5fc40fba445017bd5b7e2e\n\t8f4a179a064737658b4055fb785c432c843f473a9d5fc40fba445017bd5b7e2e-init\n\t\n进入到第一个目录的opt子目录下，会找到我们打包的jar文件(chroot的魔力所在)\n\n\troot@default:/mnt/sda1/var/lib/docker/aufs/mnt/8f4a179a064737658b4055fb785c432c843f473a9d5fc40fba445017bd5b7e2e/opt# ls -l\n\ttotal 67168\n\t-rw-r--r--    1 root     root      68777433 Dec 28 08:26 yiji-boot-test-1.1-SNAPSHOT.jar\n\t\n#### 3.5 <a name=\"docker-security\">关于docker的安全</a>\n\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/key/vhMhelcV6Z9rXr\" width=\"595\" height=\"485\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/jpetazzo/docker-linux-containers-lxc-and-security\" title=\"Docker, Linux Containers (LXC), and security\" target=\"_blank\">Docker, Linux Containers (LXC), and security</a> </strong> from <strong><a href=\"//www.slideshare.net/jpetazzo\" target=\"_blank\">Jérôme Petazzoni</a></strong> </div>\n\n我们需要做两件事情，\n\n1. 不要使用root in docker\n\n\t参考[Running app inside Docker as non-root user](http://stackoverflow.com/questions/24308760/running-app-inside-docker-as-non-root-user)\n\t\n2. 经常升级内核\n\n做安全的同学可以看看更多关于docker 安全的文章:\n\n[docker-bench-security](https://github.com/docker/docker-bench-security)\n\n[Security CheatSheet](https://github.com/konstruktoid/Docker/blob/master/Security/CheatSheet.md)\n\n[CIS Docker 1.6 Benchmark](https://benchmarks.cisecurity.org/tools2/docker/CIS_Docker_1.6_Benchmark_v1.0.0.pdf)\n\n最后引用[David Mortman](https://twitter.com/mortman)在2015年[Defcon](https://www.defcon.org/)的一句话：\n\n>> a year ago, [docker and security] was pretty horrible,six months ago it wasn't so bad, and now it's pretty usable.\n\n#### 3.6 docker run vm?\n\n一些观点：\n\n[2016年六大OpenStack & Docker发展趋势预测](http://dockone.io/article/935)\n\n>>由原本的虚拟机管理程序为核心转变为容器加裸机组合模式\n\n\n[Hypernetes实现多租户CaaS，且无需客户操作系统](http://www.infoq.com/cn/news/2015/12/hypernetes-caas)\n\n>>OpenStack是一个用于构建和管理云的IaaS框架，Hypernetes使用了它的部分组件。它使用OpenStack的身份和服务目录提供程序Keystone进行身份验证和授权。它还使用了其他的OpenStack组件，如用于存储的Cinder和Ceph，用于网络管理的Neutron。对于OpenStack而言，这是一个独特的用法，因为其组件通常都不在OpenStack部署之外使用。\n>>\n\n\n#### 3.7 docker api\n\n##### 3.7.1 unix-socket api\n\n查看docker信息:\n\n\tcurl --unix-socket /var/run/docker.sock http:/info |jq\n\napi文档:\n\n\thttps://docs.docker.com/engine/reference/api/docker_remote_api/\n\n##### 3.7.2 java api\n\n依赖：\n\n\t<dependency>\n            <groupId>com.github.docker-java</groupId>\n            <artifactId>docker-java</artifactId>\n            <version>3.0.1</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>de.gesellix</groupId>\n                    <artifactId>unix-socket-factory</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>com.kohlschutter.junixsocket</groupId>\n            <artifactId>junixsocket-common</artifactId>\n            <version>2.0.4</version>\n        </dependency>\n        <dependency>\n            <groupId>com.kohlschutter.junixsocket</groupId>\n            <artifactId>junixsocket-native-common</artifactId>\n            <version>2.0.4</version>\n        </dependency>\n        \n 使用：\n \n \t\n \tDockerClient dockerClient = DockerClientBuilder.getInstance(\"unix:///var/run/docker.sock\").build();\n\tInfo info = dockerClient.infoCmd().exec();\n\tSystem.out.print(info);\n\t\napi文档:\n\n\thttps://github.com/docker-java/docker-java/\n\t\n\n#### 3.8 docker on centos7配置\n\ncentos7使用systemd来管理服务，docker配置文件`/lib/systemd/system/docker.service`。比如增加tcp api端口，修改\n\n\tExecStart=/usr/bin/dockerd\n\tExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --insecure-registry catalog.shurenyun.com","slug":"docker","published":1,"updated":"2018-04-01T16:53:17.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2kshg002hp0ugiomsvcij","content":"<h3 id=\"1-docker配置\"><a href=\"#1-docker配置\" class=\"headerlink\" title=\"1. docker配置\"></a>1. docker配置</h3><p>在mac osx中，docker deamon运行在virtualbox虚拟机中，docker client和虚拟机中的docker deamon交互。</p>\n<h4 id=\"1-1-环境配置\"><a href=\"#1-1-环境配置\" class=\"headerlink\" title=\"1.1 环境配置\"></a>1.1 环境配置</h4><pre><code>#配置docker环境变量\neval &quot;$(docker-machine env default)&quot;\n#配置docker启动alias    \nalias docker-start=&apos;docker-machine start default&apos;\n#配置docker关闭alias\nalias docker-stop=&quot;docker-machine stop default&quot;\n</code></pre><p>启动命令如下：</p>\n<pre><code>docker-start\ndocker-stop\n</code></pre><h4 id=\"1-2-配置镜像私服\"><a href=\"#1-2-配置镜像私服\" class=\"headerlink\" title=\"1.2 配置镜像私服\"></a>1.2 配置镜像私服</h4><p>测试环境中私服提供服务如下：</p>\n<pre><code>#docker registry ui\nhttp://192.168.46.21:10005/\n#docker registry restful api\nhttp://192.168.46.21:5000/v2/_catalog\n</code></pre><p>下面配置docker registry私服为192.168.46.21：</p>\n<pre><code>#登陆到server\ndocker-machine ssh default\n\n#修改/var/lib/boot2docker/profile\n--insecure-registry 192.168.46.21:5000\n--registry-mirror http://192.168.46.21:5000\n</code></pre><p>国内docker mirror：</p>\n<pre><code>https://lug.ustc.edu.cn/wiki/mirrors/help/docker\nhttp://0b929cdf.m.daocloud.io\n</code></pre><h3 id=\"2-docker-常用命令\"><a href=\"#2-docker-常用命令\" class=\"headerlink\" title=\"2. docker 常用命令\"></a>2. docker 常用命令</h3><p><img src=\"/docker/docker-command.jpg\" alt=\"\"></p>\n<pre><code>#拉取镜像\ndocker pull yiji/java8:1.0\n\n#查看镜像历史,能看到docker镜像层的细节\ndocker history  yiji/java8:1.0\n\n#删除镜像\ndocker rmi -f yiji/centos7:latest\n\n#删除容器\ndocker rm\n\n#执行命令    \ndocker run yiji/centos7 /bin/echo &apos;hello world&apos;\n\n#交互运行：\ndocker run -it yiji/centos7 /bin/bash\n\n#查看容器运行状态\ndocker ps -a\n\n#查看指定容器状态\ndocker inspect f46935242662\n\n#查看端口隐射，通过inspect结果过滤\ndocker inspect --format=&apos;{{.NetworkSettings.Ports}}&apos; 8f4a179a0647\n\n#查看容器资源占用\ndocker stats 92202cc1c3f0\n\n#查看docker deamon运行ip\necho $DOCKER_HOST\n\n#清理后台停止的容器\ndocker rm $( docker ps -a -q)\n\n#查看镜像的环境变量\ndocker run  yiji/java8:2.0  env\n</code></pre><h3 id=\"3-F-A-Q\"><a href=\"#3-F-A-Q\" class=\"headerlink\" title=\"3. F.A.Q\"></a>3. F.A.Q</h3><h4 id=\"3-1-docker文件系统\"><a href=\"#3-1-docker文件系统\" class=\"headerlink\" title=\"3.1. docker文件系统\"></a>3.1. docker文件系统</h4><p>docker镜像的文件系统采用多层存储，镜像中全是只读层，便于分发和共享(pull镜像时，会在本地拉已经存在的层)。运行时建立读写层，对于应用来说，需要把文件系统mount到docker中(这样性能最好)，device mapper对性能有影响。</p>\n<blockquote>\n<blockquote>\n<p>Data volumes provide the best and most predictable performance. This is because they bypass the storage driver and do not incur any of the potential overheads introduced by thin provisioning and copy-on-write. For this reason, you may want to place heavy write workloads on data volumes.</p>\n</blockquote>\n</blockquote>\n<h4 id=\"3-2-关于基础镜像\"><a href=\"#3-2-关于基础镜像\" class=\"headerlink\" title=\"3.2. 关于基础镜像\"></a>3.2. 关于基础镜像</h4><p>制作基础镜像时权衡镜像大小(虽然可以在主机上缓存基础镜像，也需要考虑首次分发的大小)。我们最开始使用centos7来制作基础镜像，发现镜像300多M，如果在加上java8，基础镜像有600多M了。</p>\n<p>可以参考<a href=\"https://hub.docker.com/r/frolvlad/alpine-oraclejdk8/\" target=\"_blank\" rel=\"noopener\">frolvlad/alpine-oraclejdk8</a>来制作基础镜像。</p>\n<pre><code>REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nyiji/java8          2.0                 1d58b31d19a0        4 days ago          166.5 MB\n</code></pre><p>java8的基础镜像只有不到200m。</p>\n<h4 id=\"3-3-制作docker镜像并运行\"><a href=\"#3-3-制作docker镜像并运行\" class=\"headerlink\" title=\"3.3. 制作docker镜像并运行\"></a>3.3. 制作docker镜像并运行</h4><ol>\n<li><p>编写Dockerfile</p>\n<pre><code>FROM yiji/java8:2.0\nCOPY  yiji-boot-test-1.1-SNAPSHOT.jar /opt/yiji-boot-test-1.1-SNAPSHOT.jar\nWORKDIR /opt\nENTRYPOINT java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=4004 -jar /opt/yiji-boot-test-1.1-SNAPSHOT.jar\n</code></pre></li>\n<li><p>build   </p>\n<pre><code>docker build -t  yiji-boot-test:1.0 .\n</code></pre></li>\n<li><p>run</p>\n<pre><code>docker run -p 8081:8081 -p 4004:4004  yiji-boot-test:1.0\n</code></pre><p> 其中8081是应用web端口，4004端口是远程调试端口</p>\n</li>\n<li><p>在容器内执行命令</p>\n<p> 在容器运行起来后，我们需要去容器内check下情况。</p>\n<pre><code>docker exec -it 92202cc1c3f0  sh\n</code></pre></li>\n</ol>\n<h4 id=\"3-4-docker本地存储\"><a href=\"#3-4-docker本地存储\" class=\"headerlink\" title=\"3.4 docker本地存储\"></a>3.4 docker本地存储</h4><p>docker 容器运行的文件存储在本地。下面来看看这些文件：</p>\n<p>查看docker container id</p>\n<pre><code>CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS                   PORTS                                            NAMES\n8f4a179a0647        yiji-boot-test:1.0   &quot;/bin/sh -c &apos;java -ag&quot;   2 hours ago         Up 2 hours               0.0.0.0:4004-&gt;4004/tcp, 0.0.0.0:8081-&gt;8081/tcp   silly_northcutt\n</code></pre><p>登陆到虚拟机，在mac和windows下，docker在虚拟机中运行</p>\n<pre><code>docker-machine ssh default\n</code></pre><p>切换到docker运行目录</p>\n<pre><code>sudo su -\ncd /var/lib/docker/aufs/mnt/\n</code></pre><p><code>ls |grep 8f4a179a0647</code>发现两个目录</p>\n<pre><code>8f4a179a064737658b4055fb785c432c843f473a9d5fc40fba445017bd5b7e2e\n8f4a179a064737658b4055fb785c432c843f473a9d5fc40fba445017bd5b7e2e-init\n</code></pre><p>进入到第一个目录的opt子目录下，会找到我们打包的jar文件(chroot的魔力所在)</p>\n<pre><code>root@default:/mnt/sda1/var/lib/docker/aufs/mnt/8f4a179a064737658b4055fb785c432c843f473a9d5fc40fba445017bd5b7e2e/opt# ls -l\ntotal 67168\n-rw-r--r--    1 root     root      68777433 Dec 28 08:26 yiji-boot-test-1.1-SNAPSHOT.jar\n</code></pre><h4 id=\"3-5-关于docker的安全\"><a href=\"#3-5-关于docker的安全\" class=\"headerlink\" title=\"3.5 关于docker的安全\"></a>3.5 <a name=\"docker-security\">关于docker的安全</a></h4><p><iframe src=\"//www.slideshare.net/slideshow/embed_code/key/vhMhelcV6Z9rXr\" width=\"595\" height=\"485\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/jpetazzo/docker-linux-containers-lxc-and-security\" title=\"Docker, Linux Containers (LXC), and security\" target=\"_blank\">Docker, Linux Containers (LXC), and security</a> </strong> from <strong><a href=\"//www.slideshare.net/jpetazzo\" target=\"_blank\">Jérôme Petazzoni</a></strong> </div></p>\n<p>我们需要做两件事情，</p>\n<ol>\n<li><p>不要使用root in docker</p>\n<p> 参考<a href=\"http://stackoverflow.com/questions/24308760/running-app-inside-docker-as-non-root-user\" target=\"_blank\" rel=\"noopener\">Running app inside Docker as non-root user</a></p>\n</li>\n<li><p>经常升级内核</p>\n</li>\n</ol>\n<p>做安全的同学可以看看更多关于docker 安全的文章:</p>\n<p><a href=\"https://github.com/docker/docker-bench-security\" target=\"_blank\" rel=\"noopener\">docker-bench-security</a></p>\n<p><a href=\"https://github.com/konstruktoid/Docker/blob/master/Security/CheatSheet.md\" target=\"_blank\" rel=\"noopener\">Security CheatSheet</a></p>\n<p><a href=\"https://benchmarks.cisecurity.org/tools2/docker/CIS_Docker_1.6_Benchmark_v1.0.0.pdf\" target=\"_blank\" rel=\"noopener\">CIS Docker 1.6 Benchmark</a></p>\n<p>最后引用<a href=\"https://twitter.com/mortman\" target=\"_blank\" rel=\"noopener\">David Mortman</a>在2015年<a href=\"https://www.defcon.org/\" target=\"_blank\" rel=\"noopener\">Defcon</a>的一句话：</p>\n<blockquote>\n<blockquote>\n<p>a year ago, [docker and security] was pretty horrible,six months ago it wasn’t so bad, and now it’s pretty usable.</p>\n</blockquote>\n</blockquote>\n<h4 id=\"3-6-docker-run-vm\"><a href=\"#3-6-docker-run-vm\" class=\"headerlink\" title=\"3.6 docker run vm?\"></a>3.6 docker run vm?</h4><p>一些观点：</p>\n<p><a href=\"http://dockone.io/article/935\" target=\"_blank\" rel=\"noopener\">2016年六大OpenStack &amp; Docker发展趋势预测</a></p>\n<blockquote>\n<blockquote>\n<p>由原本的虚拟机管理程序为核心转变为容器加裸机组合模式</p>\n</blockquote>\n</blockquote>\n<p><a href=\"http://www.infoq.com/cn/news/2015/12/hypernetes-caas\" target=\"_blank\" rel=\"noopener\">Hypernetes实现多租户CaaS，且无需客户操作系统</a></p>\n<blockquote>\n<blockquote>\n<p>OpenStack是一个用于构建和管理云的IaaS框架，Hypernetes使用了它的部分组件。它使用OpenStack的身份和服务目录提供程序Keystone进行身份验证和授权。它还使用了其他的OpenStack组件，如用于存储的Cinder和Ceph，用于网络管理的Neutron。对于OpenStack而言，这是一个独特的用法，因为其组件通常都不在OpenStack部署之外使用。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"3-7-docker-api\"><a href=\"#3-7-docker-api\" class=\"headerlink\" title=\"3.7 docker api\"></a>3.7 docker api</h4><h5 id=\"3-7-1-unix-socket-api\"><a href=\"#3-7-1-unix-socket-api\" class=\"headerlink\" title=\"3.7.1 unix-socket api\"></a>3.7.1 unix-socket api</h5><p>查看docker信息:</p>\n<pre><code>curl --unix-socket /var/run/docker.sock http:/info |jq\n</code></pre><p>api文档:</p>\n<pre><code>https://docs.docker.com/engine/reference/api/docker_remote_api/\n</code></pre><h5 id=\"3-7-2-java-api\"><a href=\"#3-7-2-java-api\" class=\"headerlink\" title=\"3.7.2 java api\"></a>3.7.2 java api</h5><p>依赖：</p>\n<pre><code>&lt;dependency&gt;\n        &lt;groupId&gt;com.github.docker-java&lt;/groupId&gt;\n        &lt;artifactId&gt;docker-java&lt;/artifactId&gt;\n        &lt;version&gt;3.0.1&lt;/version&gt;\n        &lt;exclusions&gt;\n            &lt;exclusion&gt;\n                &lt;groupId&gt;de.gesellix&lt;/groupId&gt;\n                &lt;artifactId&gt;unix-socket-factory&lt;/artifactId&gt;\n            &lt;/exclusion&gt;\n        &lt;/exclusions&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.kohlschutter.junixsocket&lt;/groupId&gt;\n        &lt;artifactId&gt;junixsocket-common&lt;/artifactId&gt;\n        &lt;version&gt;2.0.4&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.kohlschutter.junixsocket&lt;/groupId&gt;\n        &lt;artifactId&gt;junixsocket-native-common&lt;/artifactId&gt;\n        &lt;version&gt;2.0.4&lt;/version&gt;\n    &lt;/dependency&gt;\n</code></pre><p> 使用：</p>\n<pre><code> DockerClient dockerClient = DockerClientBuilder.getInstance(&quot;unix:///var/run/docker.sock&quot;).build();\nInfo info = dockerClient.infoCmd().exec();\nSystem.out.print(info);\n</code></pre><p>api文档:</p>\n<pre><code>https://github.com/docker-java/docker-java/\n</code></pre><h4 id=\"3-8-docker-on-centos7配置\"><a href=\"#3-8-docker-on-centos7配置\" class=\"headerlink\" title=\"3.8 docker on centos7配置\"></a>3.8 docker on centos7配置</h4><p>centos7使用systemd来管理服务，docker配置文件<code>/lib/systemd/system/docker.service</code>。比如增加tcp api端口，修改</p>\n<pre><code>ExecStart=/usr/bin/dockerd\nExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --insecure-registry catalog.shurenyun.com\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-docker配置\"><a href=\"#1-docker配置\" class=\"headerlink\" title=\"1. docker配置\"></a>1. docker配置</h3><p>在mac osx中，docker deamon运行在virtualbox虚拟机中，docker client和虚拟机中的docker deamon交互。</p>\n<h4 id=\"1-1-环境配置\"><a href=\"#1-1-环境配置\" class=\"headerlink\" title=\"1.1 环境配置\"></a>1.1 环境配置</h4><pre><code>#配置docker环境变量\neval &quot;$(docker-machine env default)&quot;\n#配置docker启动alias    \nalias docker-start=&apos;docker-machine start default&apos;\n#配置docker关闭alias\nalias docker-stop=&quot;docker-machine stop default&quot;\n</code></pre><p>启动命令如下：</p>\n<pre><code>docker-start\ndocker-stop\n</code></pre><h4 id=\"1-2-配置镜像私服\"><a href=\"#1-2-配置镜像私服\" class=\"headerlink\" title=\"1.2 配置镜像私服\"></a>1.2 配置镜像私服</h4><p>测试环境中私服提供服务如下：</p>\n<pre><code>#docker registry ui\nhttp://192.168.46.21:10005/\n#docker registry restful api\nhttp://192.168.46.21:5000/v2/_catalog\n</code></pre><p>下面配置docker registry私服为192.168.46.21：</p>\n<pre><code>#登陆到server\ndocker-machine ssh default\n\n#修改/var/lib/boot2docker/profile\n--insecure-registry 192.168.46.21:5000\n--registry-mirror http://192.168.46.21:5000\n</code></pre><p>国内docker mirror：</p>\n<pre><code>https://lug.ustc.edu.cn/wiki/mirrors/help/docker\nhttp://0b929cdf.m.daocloud.io\n</code></pre><h3 id=\"2-docker-常用命令\"><a href=\"#2-docker-常用命令\" class=\"headerlink\" title=\"2. docker 常用命令\"></a>2. docker 常用命令</h3><p><img src=\"/docker/docker-command.jpg\" alt=\"\"></p>\n<pre><code>#拉取镜像\ndocker pull yiji/java8:1.0\n\n#查看镜像历史,能看到docker镜像层的细节\ndocker history  yiji/java8:1.0\n\n#删除镜像\ndocker rmi -f yiji/centos7:latest\n\n#删除容器\ndocker rm\n\n#执行命令    \ndocker run yiji/centos7 /bin/echo &apos;hello world&apos;\n\n#交互运行：\ndocker run -it yiji/centos7 /bin/bash\n\n#查看容器运行状态\ndocker ps -a\n\n#查看指定容器状态\ndocker inspect f46935242662\n\n#查看端口隐射，通过inspect结果过滤\ndocker inspect --format=&apos;{{.NetworkSettings.Ports}}&apos; 8f4a179a0647\n\n#查看容器资源占用\ndocker stats 92202cc1c3f0\n\n#查看docker deamon运行ip\necho $DOCKER_HOST\n\n#清理后台停止的容器\ndocker rm $( docker ps -a -q)\n\n#查看镜像的环境变量\ndocker run  yiji/java8:2.0  env\n</code></pre><h3 id=\"3-F-A-Q\"><a href=\"#3-F-A-Q\" class=\"headerlink\" title=\"3. F.A.Q\"></a>3. F.A.Q</h3><h4 id=\"3-1-docker文件系统\"><a href=\"#3-1-docker文件系统\" class=\"headerlink\" title=\"3.1. docker文件系统\"></a>3.1. docker文件系统</h4><p>docker镜像的文件系统采用多层存储，镜像中全是只读层，便于分发和共享(pull镜像时，会在本地拉已经存在的层)。运行时建立读写层，对于应用来说，需要把文件系统mount到docker中(这样性能最好)，device mapper对性能有影响。</p>\n<blockquote>\n<blockquote>\n<p>Data volumes provide the best and most predictable performance. This is because they bypass the storage driver and do not incur any of the potential overheads introduced by thin provisioning and copy-on-write. For this reason, you may want to place heavy write workloads on data volumes.</p>\n</blockquote>\n</blockquote>\n<h4 id=\"3-2-关于基础镜像\"><a href=\"#3-2-关于基础镜像\" class=\"headerlink\" title=\"3.2. 关于基础镜像\"></a>3.2. 关于基础镜像</h4><p>制作基础镜像时权衡镜像大小(虽然可以在主机上缓存基础镜像，也需要考虑首次分发的大小)。我们最开始使用centos7来制作基础镜像，发现镜像300多M，如果在加上java8，基础镜像有600多M了。</p>\n<p>可以参考<a href=\"https://hub.docker.com/r/frolvlad/alpine-oraclejdk8/\" target=\"_blank\" rel=\"noopener\">frolvlad/alpine-oraclejdk8</a>来制作基础镜像。</p>\n<pre><code>REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nyiji/java8          2.0                 1d58b31d19a0        4 days ago          166.5 MB\n</code></pre><p>java8的基础镜像只有不到200m。</p>\n<h4 id=\"3-3-制作docker镜像并运行\"><a href=\"#3-3-制作docker镜像并运行\" class=\"headerlink\" title=\"3.3. 制作docker镜像并运行\"></a>3.3. 制作docker镜像并运行</h4><ol>\n<li><p>编写Dockerfile</p>\n<pre><code>FROM yiji/java8:2.0\nCOPY  yiji-boot-test-1.1-SNAPSHOT.jar /opt/yiji-boot-test-1.1-SNAPSHOT.jar\nWORKDIR /opt\nENTRYPOINT java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=4004 -jar /opt/yiji-boot-test-1.1-SNAPSHOT.jar\n</code></pre></li>\n<li><p>build   </p>\n<pre><code>docker build -t  yiji-boot-test:1.0 .\n</code></pre></li>\n<li><p>run</p>\n<pre><code>docker run -p 8081:8081 -p 4004:4004  yiji-boot-test:1.0\n</code></pre><p> 其中8081是应用web端口，4004端口是远程调试端口</p>\n</li>\n<li><p>在容器内执行命令</p>\n<p> 在容器运行起来后，我们需要去容器内check下情况。</p>\n<pre><code>docker exec -it 92202cc1c3f0  sh\n</code></pre></li>\n</ol>\n<h4 id=\"3-4-docker本地存储\"><a href=\"#3-4-docker本地存储\" class=\"headerlink\" title=\"3.4 docker本地存储\"></a>3.4 docker本地存储</h4><p>docker 容器运行的文件存储在本地。下面来看看这些文件：</p>\n<p>查看docker container id</p>\n<pre><code>CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS                   PORTS                                            NAMES\n8f4a179a0647        yiji-boot-test:1.0   &quot;/bin/sh -c &apos;java -ag&quot;   2 hours ago         Up 2 hours               0.0.0.0:4004-&gt;4004/tcp, 0.0.0.0:8081-&gt;8081/tcp   silly_northcutt\n</code></pre><p>登陆到虚拟机，在mac和windows下，docker在虚拟机中运行</p>\n<pre><code>docker-machine ssh default\n</code></pre><p>切换到docker运行目录</p>\n<pre><code>sudo su -\ncd /var/lib/docker/aufs/mnt/\n</code></pre><p><code>ls |grep 8f4a179a0647</code>发现两个目录</p>\n<pre><code>8f4a179a064737658b4055fb785c432c843f473a9d5fc40fba445017bd5b7e2e\n8f4a179a064737658b4055fb785c432c843f473a9d5fc40fba445017bd5b7e2e-init\n</code></pre><p>进入到第一个目录的opt子目录下，会找到我们打包的jar文件(chroot的魔力所在)</p>\n<pre><code>root@default:/mnt/sda1/var/lib/docker/aufs/mnt/8f4a179a064737658b4055fb785c432c843f473a9d5fc40fba445017bd5b7e2e/opt# ls -l\ntotal 67168\n-rw-r--r--    1 root     root      68777433 Dec 28 08:26 yiji-boot-test-1.1-SNAPSHOT.jar\n</code></pre><h4 id=\"3-5-关于docker的安全\"><a href=\"#3-5-关于docker的安全\" class=\"headerlink\" title=\"3.5 关于docker的安全\"></a>3.5 <a name=\"docker-security\">关于docker的安全</a></h4><p><iframe src=\"//www.slideshare.net/slideshow/embed_code/key/vhMhelcV6Z9rXr\" width=\"595\" height=\"485\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/jpetazzo/docker-linux-containers-lxc-and-security\" title=\"Docker, Linux Containers (LXC), and security\" target=\"_blank\">Docker, Linux Containers (LXC), and security</a> </strong> from <strong><a href=\"//www.slideshare.net/jpetazzo\" target=\"_blank\">Jérôme Petazzoni</a></strong> </div></p>\n<p>我们需要做两件事情，</p>\n<ol>\n<li><p>不要使用root in docker</p>\n<p> 参考<a href=\"http://stackoverflow.com/questions/24308760/running-app-inside-docker-as-non-root-user\" target=\"_blank\" rel=\"noopener\">Running app inside Docker as non-root user</a></p>\n</li>\n<li><p>经常升级内核</p>\n</li>\n</ol>\n<p>做安全的同学可以看看更多关于docker 安全的文章:</p>\n<p><a href=\"https://github.com/docker/docker-bench-security\" target=\"_blank\" rel=\"noopener\">docker-bench-security</a></p>\n<p><a href=\"https://github.com/konstruktoid/Docker/blob/master/Security/CheatSheet.md\" target=\"_blank\" rel=\"noopener\">Security CheatSheet</a></p>\n<p><a href=\"https://benchmarks.cisecurity.org/tools2/docker/CIS_Docker_1.6_Benchmark_v1.0.0.pdf\" target=\"_blank\" rel=\"noopener\">CIS Docker 1.6 Benchmark</a></p>\n<p>最后引用<a href=\"https://twitter.com/mortman\" target=\"_blank\" rel=\"noopener\">David Mortman</a>在2015年<a href=\"https://www.defcon.org/\" target=\"_blank\" rel=\"noopener\">Defcon</a>的一句话：</p>\n<blockquote>\n<blockquote>\n<p>a year ago, [docker and security] was pretty horrible,six months ago it wasn’t so bad, and now it’s pretty usable.</p>\n</blockquote>\n</blockquote>\n<h4 id=\"3-6-docker-run-vm\"><a href=\"#3-6-docker-run-vm\" class=\"headerlink\" title=\"3.6 docker run vm?\"></a>3.6 docker run vm?</h4><p>一些观点：</p>\n<p><a href=\"http://dockone.io/article/935\" target=\"_blank\" rel=\"noopener\">2016年六大OpenStack &amp; Docker发展趋势预测</a></p>\n<blockquote>\n<blockquote>\n<p>由原本的虚拟机管理程序为核心转变为容器加裸机组合模式</p>\n</blockquote>\n</blockquote>\n<p><a href=\"http://www.infoq.com/cn/news/2015/12/hypernetes-caas\" target=\"_blank\" rel=\"noopener\">Hypernetes实现多租户CaaS，且无需客户操作系统</a></p>\n<blockquote>\n<blockquote>\n<p>OpenStack是一个用于构建和管理云的IaaS框架，Hypernetes使用了它的部分组件。它使用OpenStack的身份和服务目录提供程序Keystone进行身份验证和授权。它还使用了其他的OpenStack组件，如用于存储的Cinder和Ceph，用于网络管理的Neutron。对于OpenStack而言，这是一个独特的用法，因为其组件通常都不在OpenStack部署之外使用。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"3-7-docker-api\"><a href=\"#3-7-docker-api\" class=\"headerlink\" title=\"3.7 docker api\"></a>3.7 docker api</h4><h5 id=\"3-7-1-unix-socket-api\"><a href=\"#3-7-1-unix-socket-api\" class=\"headerlink\" title=\"3.7.1 unix-socket api\"></a>3.7.1 unix-socket api</h5><p>查看docker信息:</p>\n<pre><code>curl --unix-socket /var/run/docker.sock http:/info |jq\n</code></pre><p>api文档:</p>\n<pre><code>https://docs.docker.com/engine/reference/api/docker_remote_api/\n</code></pre><h5 id=\"3-7-2-java-api\"><a href=\"#3-7-2-java-api\" class=\"headerlink\" title=\"3.7.2 java api\"></a>3.7.2 java api</h5><p>依赖：</p>\n<pre><code>&lt;dependency&gt;\n        &lt;groupId&gt;com.github.docker-java&lt;/groupId&gt;\n        &lt;artifactId&gt;docker-java&lt;/artifactId&gt;\n        &lt;version&gt;3.0.1&lt;/version&gt;\n        &lt;exclusions&gt;\n            &lt;exclusion&gt;\n                &lt;groupId&gt;de.gesellix&lt;/groupId&gt;\n                &lt;artifactId&gt;unix-socket-factory&lt;/artifactId&gt;\n            &lt;/exclusion&gt;\n        &lt;/exclusions&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.kohlschutter.junixsocket&lt;/groupId&gt;\n        &lt;artifactId&gt;junixsocket-common&lt;/artifactId&gt;\n        &lt;version&gt;2.0.4&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.kohlschutter.junixsocket&lt;/groupId&gt;\n        &lt;artifactId&gt;junixsocket-native-common&lt;/artifactId&gt;\n        &lt;version&gt;2.0.4&lt;/version&gt;\n    &lt;/dependency&gt;\n</code></pre><p> 使用：</p>\n<pre><code> DockerClient dockerClient = DockerClientBuilder.getInstance(&quot;unix:///var/run/docker.sock&quot;).build();\nInfo info = dockerClient.infoCmd().exec();\nSystem.out.print(info);\n</code></pre><p>api文档:</p>\n<pre><code>https://github.com/docker-java/docker-java/\n</code></pre><h4 id=\"3-8-docker-on-centos7配置\"><a href=\"#3-8-docker-on-centos7配置\" class=\"headerlink\" title=\"3.8 docker on centos7配置\"></a>3.8 docker on centos7配置</h4><p>centos7使用systemd来管理服务，docker配置文件<code>/lib/systemd/system/docker.service</code>。比如增加tcp api端口，修改</p>\n<pre><code>ExecStart=/usr/bin/dockerd\nExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --insecure-registry catalog.shurenyun.com\n</code></pre>"},{"title":"dubbo线程任务\"不均衡\"问题分析","date":"2014-09-23T13:52:17.000Z","_content":"\ndubbo应用使用的线程池为`com.alibaba.dubbo.common.threadpool.support.fixed.FixedThreadPool`,如果当queue设置为0时,会使用`SynchronousQueue`,这个东东导致了任务线程执行\"不均衡\"(满足了大家的心理预期,其实这种不均衡方式减少了上下文切换,但是`SynchronousQueue`没有大小,不能起到任务缓冲的作用).\n\n\n请在dubbo:protocol上加上queues大小(参考tomcat默认配置).\n\n\t    <dubbo:protocol name=\"dubbo\" port=\"${dubbo.provider.port}\" threads=\"200\" queues=\"100\"/>\n\n\n测试:\n\n修改前:\n\n\tgrep DubboServerHandler dubbo-demo.log |awk  -F '-'  '{print $6}' |awk  -F ']'  '{print $1}' |sort -n |uniq -c\n         1 150\n      1 151\n      1 152\n      1 153\n      1 154\n      1 168\n      1 169\n      1 170\n    117 171\n   \t5386 172\n    714 173\n   \t2646 174\n   \t3738 175\n   \t3105 180\n   \t6332 194\n   \t2483 195\n   \t4940 196\n   \t1211 197\n   \t5661 198\n   \t5428 199\n   \t1393 200\n\n修改后:\n\n\tgrep DubboServerHandler dubbo-demo.log |awk  -F '-'  '{print $6}' |awk  -F ']'  '{print $1}' |sort -n |uniq -c\n    507 1\n    498 2\n    496 3\n    501 15\n    488 16\n    494 17\n    523 18\n    502 19\n    494 20\n    503 21\n    491 22\n    507 23\n \t\t...\n     507 133\n    495 134\n    498 135\n    494 136\n    507 137\n    508 151\n    490 152\n    494 195\n    496 196\n    496 197\n    506 198\n    493 199\n    489 200\n\n","source":"_posts/dubbo-imbalance.md","raw":"---\ntitle: dubbo线程任务\"不均衡\"问题分析\ndate: 2014-09-23 21:52:17\ncategories: java\ntags:\n  - dubbo\n---\n\ndubbo应用使用的线程池为`com.alibaba.dubbo.common.threadpool.support.fixed.FixedThreadPool`,如果当queue设置为0时,会使用`SynchronousQueue`,这个东东导致了任务线程执行\"不均衡\"(满足了大家的心理预期,其实这种不均衡方式减少了上下文切换,但是`SynchronousQueue`没有大小,不能起到任务缓冲的作用).\n\n\n请在dubbo:protocol上加上queues大小(参考tomcat默认配置).\n\n\t    <dubbo:protocol name=\"dubbo\" port=\"${dubbo.provider.port}\" threads=\"200\" queues=\"100\"/>\n\n\n测试:\n\n修改前:\n\n\tgrep DubboServerHandler dubbo-demo.log |awk  -F '-'  '{print $6}' |awk  -F ']'  '{print $1}' |sort -n |uniq -c\n         1 150\n      1 151\n      1 152\n      1 153\n      1 154\n      1 168\n      1 169\n      1 170\n    117 171\n   \t5386 172\n    714 173\n   \t2646 174\n   \t3738 175\n   \t3105 180\n   \t6332 194\n   \t2483 195\n   \t4940 196\n   \t1211 197\n   \t5661 198\n   \t5428 199\n   \t1393 200\n\n修改后:\n\n\tgrep DubboServerHandler dubbo-demo.log |awk  -F '-'  '{print $6}' |awk  -F ']'  '{print $1}' |sort -n |uniq -c\n    507 1\n    498 2\n    496 3\n    501 15\n    488 16\n    494 17\n    523 18\n    502 19\n    494 20\n    503 21\n    491 22\n    507 23\n \t\t...\n     507 133\n    495 134\n    498 135\n    494 136\n    507 137\n    508 151\n    490 152\n    494 195\n    496 196\n    496 197\n    506 198\n    493 199\n    489 200\n\n","slug":"dubbo-imbalance","published":1,"updated":"2018-04-01T16:53:17.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2kshj002lp0ug2o8lzkq3","content":"<p>dubbo应用使用的线程池为<code>com.alibaba.dubbo.common.threadpool.support.fixed.FixedThreadPool</code>,如果当queue设置为0时,会使用<code>SynchronousQueue</code>,这个东东导致了任务线程执行”不均衡”(满足了大家的心理预期,其实这种不均衡方式减少了上下文切换,但是<code>SynchronousQueue</code>没有大小,不能起到任务缓冲的作用).</p>\n<p>请在dubbo:protocol上加上queues大小(参考tomcat默认配置).</p>\n<pre><code>&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;${dubbo.provider.port}&quot; threads=&quot;200&quot; queues=&quot;100&quot;/&gt;\n</code></pre><p>测试:</p>\n<p>修改前:</p>\n<pre><code>grep DubboServerHandler dubbo-demo.log |awk  -F &apos;-&apos;  &apos;{print $6}&apos; |awk  -F &apos;]&apos;  &apos;{print $1}&apos; |sort -n |uniq -c\n     1 150\n  1 151\n  1 152\n  1 153\n  1 154\n  1 168\n  1 169\n  1 170\n117 171\n   5386 172\n714 173\n   2646 174\n   3738 175\n   3105 180\n   6332 194\n   2483 195\n   4940 196\n   1211 197\n   5661 198\n   5428 199\n   1393 200\n</code></pre><p>修改后:</p>\n<pre><code>grep DubboServerHandler dubbo-demo.log |awk  -F &apos;-&apos;  &apos;{print $6}&apos; |awk  -F &apos;]&apos;  &apos;{print $1}&apos; |sort -n |uniq -c\n507 1\n498 2\n496 3\n501 15\n488 16\n494 17\n523 18\n502 19\n494 20\n503 21\n491 22\n507 23\n     ...\n 507 133\n495 134\n498 135\n494 136\n507 137\n508 151\n490 152\n494 195\n496 196\n496 197\n506 198\n493 199\n489 200\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>dubbo应用使用的线程池为<code>com.alibaba.dubbo.common.threadpool.support.fixed.FixedThreadPool</code>,如果当queue设置为0时,会使用<code>SynchronousQueue</code>,这个东东导致了任务线程执行”不均衡”(满足了大家的心理预期,其实这种不均衡方式减少了上下文切换,但是<code>SynchronousQueue</code>没有大小,不能起到任务缓冲的作用).</p>\n<p>请在dubbo:protocol上加上queues大小(参考tomcat默认配置).</p>\n<pre><code>&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;${dubbo.provider.port}&quot; threads=&quot;200&quot; queues=&quot;100&quot;/&gt;\n</code></pre><p>测试:</p>\n<p>修改前:</p>\n<pre><code>grep DubboServerHandler dubbo-demo.log |awk  -F &apos;-&apos;  &apos;{print $6}&apos; |awk  -F &apos;]&apos;  &apos;{print $1}&apos; |sort -n |uniq -c\n     1 150\n  1 151\n  1 152\n  1 153\n  1 154\n  1 168\n  1 169\n  1 170\n117 171\n   5386 172\n714 173\n   2646 174\n   3738 175\n   3105 180\n   6332 194\n   2483 195\n   4940 196\n   1211 197\n   5661 198\n   5428 199\n   1393 200\n</code></pre><p>修改后:</p>\n<pre><code>grep DubboServerHandler dubbo-demo.log |awk  -F &apos;-&apos;  &apos;{print $6}&apos; |awk  -F &apos;]&apos;  &apos;{print $1}&apos; |sort -n |uniq -c\n507 1\n498 2\n496 3\n501 15\n488 16\n494 17\n523 18\n502 19\n494 20\n503 21\n491 22\n507 23\n     ...\n 507 133\n495 134\n498 135\n494 136\n507 137\n508 151\n490 152\n494 195\n496 196\n496 197\n506 198\n493 199\n489 200\n</code></pre>"},{"title":"打造环境感知的应用","date":"2014-01-15T13:52:17.000Z","_content":"\n## 打造环境感知的应用\n\n这里说的`环境感知的应用`是指,应用放在不同的环境,就可以使用不同环境的配置,不需要重新打包.\n\n### 1.我眼中理想的环境和应用\n\n* 应用不用管环境配置\n* 参数配置在配置管理系统中的\n* 框架从配置管理中加载配置\n* 只有操作系统或者应用服务器知道环境的概念\n\n理想很丰满,现实很惨...,揉醒了,继续面对现实.要实现这个目标,还有很多需要做的.现在我们尽可能要做的是,开发童鞋自己把环境搞定,不给其他童鞋添堵.\n\n### 2.适合我们的`环境感知`的应用\n\n我们的系统大多数用的是tomcat作为应用服务器,最好是让应用服务器来提供环境标识,在应用中结合spring profile机制来实现环境感知\n\n### 3.如何操作\n\n#### 3.1在操作系统中添加环境变量\n\n比如在10测试环境,在`/etc/profile`中增加如下东东:\n\n\texport CATALINA_OPTS=' -Dspring.profiles.active=dev '\n\n然后执行`. /etc/profile`解析\n\n#### 3.2配置日志\n\n并不是所有系统都会针对不同环境启用不同的日志配置文件,即便有logback可以很方便的来解决这些问题.\n\n##### 3.2.1 在logback配置内区分环境\n\n比如我们在本地测试的时候,把日志输出到console,便于我们查问题.\n可以在logback.xml中加入:\n\t\n\t<if condition='property(\"os.name\").toUpperCase().contains(\"WINDOWS\")||property(\"os.name\").toUpperCase().contains(\"MAC\")'>\n\t\t<then>\n\t\t\t<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t\t\t<encoder>\n\t\t\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{0}:%L-%X{ID}- %msg%n</pattern>\n\t\t\t\t</encoder>\n\t\t\t</appender>\n\t\t\t<root>\n\t\t\t\t<appender-ref ref=\"STDOUT\" />\n\t\t\t</root>\n\t\t</then>\n\t</if>\n\n上面的配置会在windows和mac中启用console日志输出\n\n在logback中引入外部配置文件,也可以区分不同的环境\n\t\n\t<property resource=\"spring/log/log-${spring.profiles.active}.properties\" />\n\n上面会根据`spring.profiles.active`的配置读取不同的配置文件\n\n##### 3.2.2 不同环境区分不同的日志配置文件\n\n如果您有针对不同环境不同的日志文件,`com.yjf.common.log.LogbackConfigListener`提供了支持.\n\t\n\t<context-param>\n  \t\t<param-name>logbackConfigLocation</param-name>\n  \t\t<param-value>WEB-INF/logback-${spring.profiles.active}.xml</param-value>\n  \t</context-param>\n\n#### 3.3 配置应用\n\n数据库和外部资源配置,一般会放入到单独的配置文件中,我们可以使用spring提供的能力来实现环境感知\n\n##### 3.3.1 使用properties文件\n\n\t<bean id=\"propertyConfigurerForJDBC\"\n\t\tclass=\"com.yjf.common.dal.EncryptablePropertyPlaceholderConfigurer\">\n\t\t<property name=\"order\" value=\"1\" />\n\t\t<property name=\"ignoreUnresolvablePlaceholders\" value=\"true\" />\n\t\t<property name=\"location\"\n\t\t\tvalue=\"classpath:jdbc-${spring.profiles.active}.properties\" />\n\t</bean>\n\t\n上面会根据`spring.profiles.active`的配置读取不同jdbc配置文件\n\n##### 3.3.2 使用spring profile\n\n\t<beans profile=\"production\">\n     \t<bean id=\"xxx\" class=\"xxxxBEAN\" />  \n    </beans>\n    <beans profile=\"test\">\n     \t<bean id=\"xxx\" class=\"xxxxBEAN\" />  \n    </beans>\n    \nspring profile通过读取系统或者环境变量`spring.profiles.active`来启用不同的bean.\n\n##### 3.3.2 硬编码实现\n\n`com.yjf.common.env.Env`提供了在编写java code时,区分不同的环境\n\n\t    private void doIt() {\n        \tif (Env.isOnline()) {\n        \t\t//do anything you like.\n            }\n    \t}\n\n上面的代码只在生成环境运行,`com.yjf.common.env.Env`通过读取`spring.profiles.active`来判断环境\n\n#### 3.4 配置测试\n\n通过上面的一些列配置,环境都由`spring.profiles.active`控制.在本地测试时,也需要启用此环境变量.\n\n##### 3.4.1 tomcat/jetty 启动类\n\n`TomcatBootstrapHelper`启动时,默认会在系统变量里增加`spring.profiles.active=dev`\n\t\n\tnew TomcatBootstrapHelper(11111).start();\n上面的代码会使用`dev`环境配置.如果您按照3.3.1配置,此时会读取`jdbc-dev.properties`\n\n我没有写jetty的启动帮助类,主要原因是为了和线上保持一致,减少一些不可预知的问题.如果要使用jetty,请增加如下代码:\n\n\tstatic{\n\t\tSystem.setProperty(\"spring.profiles.active\", \"dev\");\n\t}\n\t\n##### 3.4.1 单元测试\n\n在测试类或者测试父类中增加:\n\n\tstatic{\n\t\tSystem.setProperty(\"spring.profiles.active\", \"dev\");\n\t}\n\n\n","source":"_posts/env-aware.md","raw":"---\ntitle: 打造环境感知的应用\ndate: 2014-01-15 21:52:17\ncategories: java\ntags:\n  - 环境感知\n---\n\n## 打造环境感知的应用\n\n这里说的`环境感知的应用`是指,应用放在不同的环境,就可以使用不同环境的配置,不需要重新打包.\n\n### 1.我眼中理想的环境和应用\n\n* 应用不用管环境配置\n* 参数配置在配置管理系统中的\n* 框架从配置管理中加载配置\n* 只有操作系统或者应用服务器知道环境的概念\n\n理想很丰满,现实很惨...,揉醒了,继续面对现实.要实现这个目标,还有很多需要做的.现在我们尽可能要做的是,开发童鞋自己把环境搞定,不给其他童鞋添堵.\n\n### 2.适合我们的`环境感知`的应用\n\n我们的系统大多数用的是tomcat作为应用服务器,最好是让应用服务器来提供环境标识,在应用中结合spring profile机制来实现环境感知\n\n### 3.如何操作\n\n#### 3.1在操作系统中添加环境变量\n\n比如在10测试环境,在`/etc/profile`中增加如下东东:\n\n\texport CATALINA_OPTS=' -Dspring.profiles.active=dev '\n\n然后执行`. /etc/profile`解析\n\n#### 3.2配置日志\n\n并不是所有系统都会针对不同环境启用不同的日志配置文件,即便有logback可以很方便的来解决这些问题.\n\n##### 3.2.1 在logback配置内区分环境\n\n比如我们在本地测试的时候,把日志输出到console,便于我们查问题.\n可以在logback.xml中加入:\n\t\n\t<if condition='property(\"os.name\").toUpperCase().contains(\"WINDOWS\")||property(\"os.name\").toUpperCase().contains(\"MAC\")'>\n\t\t<then>\n\t\t\t<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t\t\t<encoder>\n\t\t\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{0}:%L-%X{ID}- %msg%n</pattern>\n\t\t\t\t</encoder>\n\t\t\t</appender>\n\t\t\t<root>\n\t\t\t\t<appender-ref ref=\"STDOUT\" />\n\t\t\t</root>\n\t\t</then>\n\t</if>\n\n上面的配置会在windows和mac中启用console日志输出\n\n在logback中引入外部配置文件,也可以区分不同的环境\n\t\n\t<property resource=\"spring/log/log-${spring.profiles.active}.properties\" />\n\n上面会根据`spring.profiles.active`的配置读取不同的配置文件\n\n##### 3.2.2 不同环境区分不同的日志配置文件\n\n如果您有针对不同环境不同的日志文件,`com.yjf.common.log.LogbackConfigListener`提供了支持.\n\t\n\t<context-param>\n  \t\t<param-name>logbackConfigLocation</param-name>\n  \t\t<param-value>WEB-INF/logback-${spring.profiles.active}.xml</param-value>\n  \t</context-param>\n\n#### 3.3 配置应用\n\n数据库和外部资源配置,一般会放入到单独的配置文件中,我们可以使用spring提供的能力来实现环境感知\n\n##### 3.3.1 使用properties文件\n\n\t<bean id=\"propertyConfigurerForJDBC\"\n\t\tclass=\"com.yjf.common.dal.EncryptablePropertyPlaceholderConfigurer\">\n\t\t<property name=\"order\" value=\"1\" />\n\t\t<property name=\"ignoreUnresolvablePlaceholders\" value=\"true\" />\n\t\t<property name=\"location\"\n\t\t\tvalue=\"classpath:jdbc-${spring.profiles.active}.properties\" />\n\t</bean>\n\t\n上面会根据`spring.profiles.active`的配置读取不同jdbc配置文件\n\n##### 3.3.2 使用spring profile\n\n\t<beans profile=\"production\">\n     \t<bean id=\"xxx\" class=\"xxxxBEAN\" />  \n    </beans>\n    <beans profile=\"test\">\n     \t<bean id=\"xxx\" class=\"xxxxBEAN\" />  \n    </beans>\n    \nspring profile通过读取系统或者环境变量`spring.profiles.active`来启用不同的bean.\n\n##### 3.3.2 硬编码实现\n\n`com.yjf.common.env.Env`提供了在编写java code时,区分不同的环境\n\n\t    private void doIt() {\n        \tif (Env.isOnline()) {\n        \t\t//do anything you like.\n            }\n    \t}\n\n上面的代码只在生成环境运行,`com.yjf.common.env.Env`通过读取`spring.profiles.active`来判断环境\n\n#### 3.4 配置测试\n\n通过上面的一些列配置,环境都由`spring.profiles.active`控制.在本地测试时,也需要启用此环境变量.\n\n##### 3.4.1 tomcat/jetty 启动类\n\n`TomcatBootstrapHelper`启动时,默认会在系统变量里增加`spring.profiles.active=dev`\n\t\n\tnew TomcatBootstrapHelper(11111).start();\n上面的代码会使用`dev`环境配置.如果您按照3.3.1配置,此时会读取`jdbc-dev.properties`\n\n我没有写jetty的启动帮助类,主要原因是为了和线上保持一致,减少一些不可预知的问题.如果要使用jetty,请增加如下代码:\n\n\tstatic{\n\t\tSystem.setProperty(\"spring.profiles.active\", \"dev\");\n\t}\n\t\n##### 3.4.1 单元测试\n\n在测试类或者测试父类中增加:\n\n\tstatic{\n\t\tSystem.setProperty(\"spring.profiles.active\", \"dev\");\n\t}\n\n\n","slug":"env-aware","published":1,"updated":"2018-04-01T16:53:17.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2kshk002op0ugo0vdjgpb","content":"<h2 id=\"打造环境感知的应用\"><a href=\"#打造环境感知的应用\" class=\"headerlink\" title=\"打造环境感知的应用\"></a>打造环境感知的应用</h2><p>这里说的<code>环境感知的应用</code>是指,应用放在不同的环境,就可以使用不同环境的配置,不需要重新打包.</p>\n<h3 id=\"1-我眼中理想的环境和应用\"><a href=\"#1-我眼中理想的环境和应用\" class=\"headerlink\" title=\"1.我眼中理想的环境和应用\"></a>1.我眼中理想的环境和应用</h3><ul>\n<li>应用不用管环境配置</li>\n<li>参数配置在配置管理系统中的</li>\n<li>框架从配置管理中加载配置</li>\n<li>只有操作系统或者应用服务器知道环境的概念</li>\n</ul>\n<p>理想很丰满,现实很惨…,揉醒了,继续面对现实.要实现这个目标,还有很多需要做的.现在我们尽可能要做的是,开发童鞋自己把环境搞定,不给其他童鞋添堵.</p>\n<h3 id=\"2-适合我们的环境感知的应用\"><a href=\"#2-适合我们的环境感知的应用\" class=\"headerlink\" title=\"2.适合我们的环境感知的应用\"></a>2.适合我们的<code>环境感知</code>的应用</h3><p>我们的系统大多数用的是tomcat作为应用服务器,最好是让应用服务器来提供环境标识,在应用中结合spring profile机制来实现环境感知</p>\n<h3 id=\"3-如何操作\"><a href=\"#3-如何操作\" class=\"headerlink\" title=\"3.如何操作\"></a>3.如何操作</h3><h4 id=\"3-1在操作系统中添加环境变量\"><a href=\"#3-1在操作系统中添加环境变量\" class=\"headerlink\" title=\"3.1在操作系统中添加环境变量\"></a>3.1在操作系统中添加环境变量</h4><p>比如在10测试环境,在<code>/etc/profile</code>中增加如下东东:</p>\n<pre><code>export CATALINA_OPTS=&apos; -Dspring.profiles.active=dev &apos;\n</code></pre><p>然后执行<code>. /etc/profile</code>解析</p>\n<h4 id=\"3-2配置日志\"><a href=\"#3-2配置日志\" class=\"headerlink\" title=\"3.2配置日志\"></a>3.2配置日志</h4><p>并不是所有系统都会针对不同环境启用不同的日志配置文件,即便有logback可以很方便的来解决这些问题.</p>\n<h5 id=\"3-2-1-在logback配置内区分环境\"><a href=\"#3-2-1-在logback配置内区分环境\" class=\"headerlink\" title=\"3.2.1 在logback配置内区分环境\"></a>3.2.1 在logback配置内区分环境</h5><p>比如我们在本地测试的时候,把日志输出到console,便于我们查问题.<br>可以在logback.xml中加入:</p>\n<pre><code>&lt;if condition=&apos;property(&quot;os.name&quot;).toUpperCase().contains(&quot;WINDOWS&quot;)||property(&quot;os.name&quot;).toUpperCase().contains(&quot;MAC&quot;)&apos;&gt;\n    &lt;then&gt;\n        &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;\n            &lt;encoder&gt;\n                &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{0}:%L-%X{ID}- %msg%n&lt;/pattern&gt;\n            &lt;/encoder&gt;\n        &lt;/appender&gt;\n        &lt;root&gt;\n            &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;\n        &lt;/root&gt;\n    &lt;/then&gt;\n&lt;/if&gt;\n</code></pre><p>上面的配置会在windows和mac中启用console日志输出</p>\n<p>在logback中引入外部配置文件,也可以区分不同的环境</p>\n<pre><code>&lt;property resource=&quot;spring/log/log-${spring.profiles.active}.properties&quot; /&gt;\n</code></pre><p>上面会根据<code>spring.profiles.active</code>的配置读取不同的配置文件</p>\n<h5 id=\"3-2-2-不同环境区分不同的日志配置文件\"><a href=\"#3-2-2-不同环境区分不同的日志配置文件\" class=\"headerlink\" title=\"3.2.2 不同环境区分不同的日志配置文件\"></a>3.2.2 不同环境区分不同的日志配置文件</h5><p>如果您有针对不同环境不同的日志文件,<code>com.yjf.common.log.LogbackConfigListener</code>提供了支持.</p>\n<pre><code>&lt;context-param&gt;\n      &lt;param-name&gt;logbackConfigLocation&lt;/param-name&gt;\n      &lt;param-value&gt;WEB-INF/logback-${spring.profiles.active}.xml&lt;/param-value&gt;\n  &lt;/context-param&gt;\n</code></pre><h4 id=\"3-3-配置应用\"><a href=\"#3-3-配置应用\" class=\"headerlink\" title=\"3.3 配置应用\"></a>3.3 配置应用</h4><p>数据库和外部资源配置,一般会放入到单独的配置文件中,我们可以使用spring提供的能力来实现环境感知</p>\n<h5 id=\"3-3-1-使用properties文件\"><a href=\"#3-3-1-使用properties文件\" class=\"headerlink\" title=\"3.3.1 使用properties文件\"></a>3.3.1 使用properties文件</h5><pre><code>&lt;bean id=&quot;propertyConfigurerForJDBC&quot;\n    class=&quot;com.yjf.common.dal.EncryptablePropertyPlaceholderConfigurer&quot;&gt;\n    &lt;property name=&quot;order&quot; value=&quot;1&quot; /&gt;\n    &lt;property name=&quot;ignoreUnresolvablePlaceholders&quot; value=&quot;true&quot; /&gt;\n    &lt;property name=&quot;location&quot;\n        value=&quot;classpath:jdbc-${spring.profiles.active}.properties&quot; /&gt;\n&lt;/bean&gt;\n</code></pre><p>上面会根据<code>spring.profiles.active</code>的配置读取不同jdbc配置文件</p>\n<h5 id=\"3-3-2-使用spring-profile\"><a href=\"#3-3-2-使用spring-profile\" class=\"headerlink\" title=\"3.3.2 使用spring profile\"></a>3.3.2 使用spring profile</h5><pre><code>&lt;beans profile=&quot;production&quot;&gt;\n     &lt;bean id=&quot;xxx&quot; class=&quot;xxxxBEAN&quot; /&gt;  \n&lt;/beans&gt;\n&lt;beans profile=&quot;test&quot;&gt;\n     &lt;bean id=&quot;xxx&quot; class=&quot;xxxxBEAN&quot; /&gt;  \n&lt;/beans&gt;\n</code></pre><p>spring profile通过读取系统或者环境变量<code>spring.profiles.active</code>来启用不同的bean.</p>\n<h5 id=\"3-3-2-硬编码实现\"><a href=\"#3-3-2-硬编码实现\" class=\"headerlink\" title=\"3.3.2 硬编码实现\"></a>3.3.2 硬编码实现</h5><p><code>com.yjf.common.env.Env</code>提供了在编写java code时,区分不同的环境</p>\n<pre><code>private void doIt() {\n    if (Env.isOnline()) {\n        //do anything you like.\n    }\n}\n</code></pre><p>上面的代码只在生成环境运行,<code>com.yjf.common.env.Env</code>通过读取<code>spring.profiles.active</code>来判断环境</p>\n<h4 id=\"3-4-配置测试\"><a href=\"#3-4-配置测试\" class=\"headerlink\" title=\"3.4 配置测试\"></a>3.4 配置测试</h4><p>通过上面的一些列配置,环境都由<code>spring.profiles.active</code>控制.在本地测试时,也需要启用此环境变量.</p>\n<h5 id=\"3-4-1-tomcat-jetty-启动类\"><a href=\"#3-4-1-tomcat-jetty-启动类\" class=\"headerlink\" title=\"3.4.1 tomcat/jetty 启动类\"></a>3.4.1 tomcat/jetty 启动类</h5><p><code>TomcatBootstrapHelper</code>启动时,默认会在系统变量里增加<code>spring.profiles.active=dev</code></p>\n<pre><code>new TomcatBootstrapHelper(11111).start();\n</code></pre><p>上面的代码会使用<code>dev</code>环境配置.如果您按照3.3.1配置,此时会读取<code>jdbc-dev.properties</code></p>\n<p>我没有写jetty的启动帮助类,主要原因是为了和线上保持一致,减少一些不可预知的问题.如果要使用jetty,请增加如下代码:</p>\n<pre><code>static{\n    System.setProperty(&quot;spring.profiles.active&quot;, &quot;dev&quot;);\n}\n</code></pre><h5 id=\"3-4-1-单元测试\"><a href=\"#3-4-1-单元测试\" class=\"headerlink\" title=\"3.4.1 单元测试\"></a>3.4.1 单元测试</h5><p>在测试类或者测试父类中增加:</p>\n<pre><code>static{\n    System.setProperty(&quot;spring.profiles.active&quot;, &quot;dev&quot;);\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"打造环境感知的应用\"><a href=\"#打造环境感知的应用\" class=\"headerlink\" title=\"打造环境感知的应用\"></a>打造环境感知的应用</h2><p>这里说的<code>环境感知的应用</code>是指,应用放在不同的环境,就可以使用不同环境的配置,不需要重新打包.</p>\n<h3 id=\"1-我眼中理想的环境和应用\"><a href=\"#1-我眼中理想的环境和应用\" class=\"headerlink\" title=\"1.我眼中理想的环境和应用\"></a>1.我眼中理想的环境和应用</h3><ul>\n<li>应用不用管环境配置</li>\n<li>参数配置在配置管理系统中的</li>\n<li>框架从配置管理中加载配置</li>\n<li>只有操作系统或者应用服务器知道环境的概念</li>\n</ul>\n<p>理想很丰满,现实很惨…,揉醒了,继续面对现实.要实现这个目标,还有很多需要做的.现在我们尽可能要做的是,开发童鞋自己把环境搞定,不给其他童鞋添堵.</p>\n<h3 id=\"2-适合我们的环境感知的应用\"><a href=\"#2-适合我们的环境感知的应用\" class=\"headerlink\" title=\"2.适合我们的环境感知的应用\"></a>2.适合我们的<code>环境感知</code>的应用</h3><p>我们的系统大多数用的是tomcat作为应用服务器,最好是让应用服务器来提供环境标识,在应用中结合spring profile机制来实现环境感知</p>\n<h3 id=\"3-如何操作\"><a href=\"#3-如何操作\" class=\"headerlink\" title=\"3.如何操作\"></a>3.如何操作</h3><h4 id=\"3-1在操作系统中添加环境变量\"><a href=\"#3-1在操作系统中添加环境变量\" class=\"headerlink\" title=\"3.1在操作系统中添加环境变量\"></a>3.1在操作系统中添加环境变量</h4><p>比如在10测试环境,在<code>/etc/profile</code>中增加如下东东:</p>\n<pre><code>export CATALINA_OPTS=&apos; -Dspring.profiles.active=dev &apos;\n</code></pre><p>然后执行<code>. /etc/profile</code>解析</p>\n<h4 id=\"3-2配置日志\"><a href=\"#3-2配置日志\" class=\"headerlink\" title=\"3.2配置日志\"></a>3.2配置日志</h4><p>并不是所有系统都会针对不同环境启用不同的日志配置文件,即便有logback可以很方便的来解决这些问题.</p>\n<h5 id=\"3-2-1-在logback配置内区分环境\"><a href=\"#3-2-1-在logback配置内区分环境\" class=\"headerlink\" title=\"3.2.1 在logback配置内区分环境\"></a>3.2.1 在logback配置内区分环境</h5><p>比如我们在本地测试的时候,把日志输出到console,便于我们查问题.<br>可以在logback.xml中加入:</p>\n<pre><code>&lt;if condition=&apos;property(&quot;os.name&quot;).toUpperCase().contains(&quot;WINDOWS&quot;)||property(&quot;os.name&quot;).toUpperCase().contains(&quot;MAC&quot;)&apos;&gt;\n    &lt;then&gt;\n        &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;\n            &lt;encoder&gt;\n                &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{0}:%L-%X{ID}- %msg%n&lt;/pattern&gt;\n            &lt;/encoder&gt;\n        &lt;/appender&gt;\n        &lt;root&gt;\n            &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;\n        &lt;/root&gt;\n    &lt;/then&gt;\n&lt;/if&gt;\n</code></pre><p>上面的配置会在windows和mac中启用console日志输出</p>\n<p>在logback中引入外部配置文件,也可以区分不同的环境</p>\n<pre><code>&lt;property resource=&quot;spring/log/log-${spring.profiles.active}.properties&quot; /&gt;\n</code></pre><p>上面会根据<code>spring.profiles.active</code>的配置读取不同的配置文件</p>\n<h5 id=\"3-2-2-不同环境区分不同的日志配置文件\"><a href=\"#3-2-2-不同环境区分不同的日志配置文件\" class=\"headerlink\" title=\"3.2.2 不同环境区分不同的日志配置文件\"></a>3.2.2 不同环境区分不同的日志配置文件</h5><p>如果您有针对不同环境不同的日志文件,<code>com.yjf.common.log.LogbackConfigListener</code>提供了支持.</p>\n<pre><code>&lt;context-param&gt;\n      &lt;param-name&gt;logbackConfigLocation&lt;/param-name&gt;\n      &lt;param-value&gt;WEB-INF/logback-${spring.profiles.active}.xml&lt;/param-value&gt;\n  &lt;/context-param&gt;\n</code></pre><h4 id=\"3-3-配置应用\"><a href=\"#3-3-配置应用\" class=\"headerlink\" title=\"3.3 配置应用\"></a>3.3 配置应用</h4><p>数据库和外部资源配置,一般会放入到单独的配置文件中,我们可以使用spring提供的能力来实现环境感知</p>\n<h5 id=\"3-3-1-使用properties文件\"><a href=\"#3-3-1-使用properties文件\" class=\"headerlink\" title=\"3.3.1 使用properties文件\"></a>3.3.1 使用properties文件</h5><pre><code>&lt;bean id=&quot;propertyConfigurerForJDBC&quot;\n    class=&quot;com.yjf.common.dal.EncryptablePropertyPlaceholderConfigurer&quot;&gt;\n    &lt;property name=&quot;order&quot; value=&quot;1&quot; /&gt;\n    &lt;property name=&quot;ignoreUnresolvablePlaceholders&quot; value=&quot;true&quot; /&gt;\n    &lt;property name=&quot;location&quot;\n        value=&quot;classpath:jdbc-${spring.profiles.active}.properties&quot; /&gt;\n&lt;/bean&gt;\n</code></pre><p>上面会根据<code>spring.profiles.active</code>的配置读取不同jdbc配置文件</p>\n<h5 id=\"3-3-2-使用spring-profile\"><a href=\"#3-3-2-使用spring-profile\" class=\"headerlink\" title=\"3.3.2 使用spring profile\"></a>3.3.2 使用spring profile</h5><pre><code>&lt;beans profile=&quot;production&quot;&gt;\n     &lt;bean id=&quot;xxx&quot; class=&quot;xxxxBEAN&quot; /&gt;  \n&lt;/beans&gt;\n&lt;beans profile=&quot;test&quot;&gt;\n     &lt;bean id=&quot;xxx&quot; class=&quot;xxxxBEAN&quot; /&gt;  \n&lt;/beans&gt;\n</code></pre><p>spring profile通过读取系统或者环境变量<code>spring.profiles.active</code>来启用不同的bean.</p>\n<h5 id=\"3-3-2-硬编码实现\"><a href=\"#3-3-2-硬编码实现\" class=\"headerlink\" title=\"3.3.2 硬编码实现\"></a>3.3.2 硬编码实现</h5><p><code>com.yjf.common.env.Env</code>提供了在编写java code时,区分不同的环境</p>\n<pre><code>private void doIt() {\n    if (Env.isOnline()) {\n        //do anything you like.\n    }\n}\n</code></pre><p>上面的代码只在生成环境运行,<code>com.yjf.common.env.Env</code>通过读取<code>spring.profiles.active</code>来判断环境</p>\n<h4 id=\"3-4-配置测试\"><a href=\"#3-4-配置测试\" class=\"headerlink\" title=\"3.4 配置测试\"></a>3.4 配置测试</h4><p>通过上面的一些列配置,环境都由<code>spring.profiles.active</code>控制.在本地测试时,也需要启用此环境变量.</p>\n<h5 id=\"3-4-1-tomcat-jetty-启动类\"><a href=\"#3-4-1-tomcat-jetty-启动类\" class=\"headerlink\" title=\"3.4.1 tomcat/jetty 启动类\"></a>3.4.1 tomcat/jetty 启动类</h5><p><code>TomcatBootstrapHelper</code>启动时,默认会在系统变量里增加<code>spring.profiles.active=dev</code></p>\n<pre><code>new TomcatBootstrapHelper(11111).start();\n</code></pre><p>上面的代码会使用<code>dev</code>环境配置.如果您按照3.3.1配置,此时会读取<code>jdbc-dev.properties</code></p>\n<p>我没有写jetty的启动帮助类,主要原因是为了和线上保持一致,减少一些不可预知的问题.如果要使用jetty,请增加如下代码:</p>\n<pre><code>static{\n    System.setProperty(&quot;spring.profiles.active&quot;, &quot;dev&quot;);\n}\n</code></pre><h5 id=\"3-4-1-单元测试\"><a href=\"#3-4-1-单元测试\" class=\"headerlink\" title=\"3.4.1 单元测试\"></a>3.4.1 单元测试</h5><p>在测试类或者测试父类中增加:</p>\n<pre><code>static{\n    System.setProperty(&quot;spring.profiles.active&quot;, &quot;dev&quot;);\n}\n</code></pre>"},{"title":"hessian反序列化field值丢失bug","date":"2013-11-29T13:52:17.000Z","_content":"\n\n### bug说明\n---\n子类和父类中有同名的字段时，hessian反序列化会丢失字段值。\n<!--more-->\n父类`Person`：\n\n\tpublic class Person implements Serializable {\n\t    private static final long serialVersionUID = 1L;\n\t    private String name;\n\t    private int age;\n\t    public String getName() {\n\t        return name;\n\t    }\n\t    public void setName(String name) {\n\t        this.name = name;\n\t    }\n\t    public int getAge() {\n\t        return age;\n\t    }\n\t    public void setAge(int age) {\n\t        this.age = age;\n\t    }\n\t    @Override\n\t    public String toString() {\n\t        final StringBuilder sb = new StringBuilder(\"Person{\");\n\t        sb.append(\"name='\").append(name).append('\\'');\n\t        sb.append(\", age=\").append(age);\n\t        sb.append('}');\n\t        return sb.toString();\n\t    }\n\t}\n\n子类`PersonEx`：\n\n\tpublic class PersonEx  extends  Person{\n\t    private static final long\tserialVersionUID\t= 1L;\n\t    private String\tname;\n\t    public String getName() {\n\t        return name;\n\t    }\n\t    public void setName(String name) {\n\t        this.name = name;\n\t    }\n\t    @Override\n\t    public String toString() {\n\t        final StringBuilder sb = new StringBuilder(\"PersonEx{\");\n\t        sb.append(\"name='\").append(name).append('\\'');\n\t        sb.append('}');\n\t        sb.append(super.toString());\n\t        return sb.toString();\n\t    }\n\t}\n\n当我们序列化如下对象后\n\n\t  PersonEx p = new PersonEx();\n      p.setName(\"XXX\");\n      p.setAge(28);\n\n后，反序列化回来的`PersonEx`对象`getName()==null`.\n\n### 原因分析\n---\n\n造成这个问题的原因如下：\nhessian序列化机制，他通过反射把所有字段名和值(整个传输对象图)读取出来,见`JavaSerializer#writeObject`:\n\n\t   \tif (ref == -1) {\n\t\t//写入需要反射的字段名\n\t      writeDefinition20(out);\n\t      out.writeObjectBegin(cl.getName());\n\t   \t}\n\t\t//写入值\n\t\twriteInstance(obj, out);\n\n按照此规则，现在序列化结构如下(忽略其他映射关系)：\n\t\n\tname|age|name|Person|XXX|28|null\n\n反序列化时，读取字段名，在set字段值：\n\n1. 读取到name字段，调用`setName(\"XXX\")`\n2. 再次读取name字段，调用`setName(null)`\n\n结果就囧了。。。。\n\n### 解决办法\n--- \n\n#### 1.修改hessian代码\n\n修改了hessian的序列化机制，当类的父对象出现相同的字段名时，跳过对此字段的处理。\n\n\t //添加成员变量propertiesNameSet\t \n   \t private HashSet<String> propertiesNameSet = Sets.newHashSet();\n\t //在JavaSerializer构造器里，遍历字段时，添加检查\n\t if (propertiesNameSet.contains(field.getName())) {\n           continue;\n     } else {\n          propertiesNameSet.add(field.getName());\n     }\n\t\n\nhessian在反序列化时有同名字段的判断`com.caucho.hessian.io.JavaDeserializer#getFieldMap`保证`fieldMap`中不出现同名的字段。\n\n#### 2.修改同名字段问题\n\n出现了同名字段，也可以认为是我们代码设计出问题了，没有理解清楚继承结构。在子类中删除同名的字段，就避免这个bug。\n\n### 小结\n\n现在的序列化框架基本上都会遇到此问题,`Kryo`中的`com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer`也没有对此问题进行处理.作为框架开发者,要尽量减少框架使用者犯错误的机会,也就是所谓的防御性编程吧.\n\n给`Kryo` [pull request](https://github.com/EsotericSoftware/kryo/pull/187) ,防止因为子类和父类中有同名field name而导致的问题.","source":"_posts/hessian-java-serialization.md","raw":"---\ntitle: hessian反序列化field值丢失bug\ndate: 2013-11-29 21:52:17\ncategories: java\ntags:\n  - hessian\n---\n\n\n### bug说明\n---\n子类和父类中有同名的字段时，hessian反序列化会丢失字段值。\n<!--more-->\n父类`Person`：\n\n\tpublic class Person implements Serializable {\n\t    private static final long serialVersionUID = 1L;\n\t    private String name;\n\t    private int age;\n\t    public String getName() {\n\t        return name;\n\t    }\n\t    public void setName(String name) {\n\t        this.name = name;\n\t    }\n\t    public int getAge() {\n\t        return age;\n\t    }\n\t    public void setAge(int age) {\n\t        this.age = age;\n\t    }\n\t    @Override\n\t    public String toString() {\n\t        final StringBuilder sb = new StringBuilder(\"Person{\");\n\t        sb.append(\"name='\").append(name).append('\\'');\n\t        sb.append(\", age=\").append(age);\n\t        sb.append('}');\n\t        return sb.toString();\n\t    }\n\t}\n\n子类`PersonEx`：\n\n\tpublic class PersonEx  extends  Person{\n\t    private static final long\tserialVersionUID\t= 1L;\n\t    private String\tname;\n\t    public String getName() {\n\t        return name;\n\t    }\n\t    public void setName(String name) {\n\t        this.name = name;\n\t    }\n\t    @Override\n\t    public String toString() {\n\t        final StringBuilder sb = new StringBuilder(\"PersonEx{\");\n\t        sb.append(\"name='\").append(name).append('\\'');\n\t        sb.append('}');\n\t        sb.append(super.toString());\n\t        return sb.toString();\n\t    }\n\t}\n\n当我们序列化如下对象后\n\n\t  PersonEx p = new PersonEx();\n      p.setName(\"XXX\");\n      p.setAge(28);\n\n后，反序列化回来的`PersonEx`对象`getName()==null`.\n\n### 原因分析\n---\n\n造成这个问题的原因如下：\nhessian序列化机制，他通过反射把所有字段名和值(整个传输对象图)读取出来,见`JavaSerializer#writeObject`:\n\n\t   \tif (ref == -1) {\n\t\t//写入需要反射的字段名\n\t      writeDefinition20(out);\n\t      out.writeObjectBegin(cl.getName());\n\t   \t}\n\t\t//写入值\n\t\twriteInstance(obj, out);\n\n按照此规则，现在序列化结构如下(忽略其他映射关系)：\n\t\n\tname|age|name|Person|XXX|28|null\n\n反序列化时，读取字段名，在set字段值：\n\n1. 读取到name字段，调用`setName(\"XXX\")`\n2. 再次读取name字段，调用`setName(null)`\n\n结果就囧了。。。。\n\n### 解决办法\n--- \n\n#### 1.修改hessian代码\n\n修改了hessian的序列化机制，当类的父对象出现相同的字段名时，跳过对此字段的处理。\n\n\t //添加成员变量propertiesNameSet\t \n   \t private HashSet<String> propertiesNameSet = Sets.newHashSet();\n\t //在JavaSerializer构造器里，遍历字段时，添加检查\n\t if (propertiesNameSet.contains(field.getName())) {\n           continue;\n     } else {\n          propertiesNameSet.add(field.getName());\n     }\n\t\n\nhessian在反序列化时有同名字段的判断`com.caucho.hessian.io.JavaDeserializer#getFieldMap`保证`fieldMap`中不出现同名的字段。\n\n#### 2.修改同名字段问题\n\n出现了同名字段，也可以认为是我们代码设计出问题了，没有理解清楚继承结构。在子类中删除同名的字段，就避免这个bug。\n\n### 小结\n\n现在的序列化框架基本上都会遇到此问题,`Kryo`中的`com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer`也没有对此问题进行处理.作为框架开发者,要尽量减少框架使用者犯错误的机会,也就是所谓的防御性编程吧.\n\n给`Kryo` [pull request](https://github.com/EsotericSoftware/kryo/pull/187) ,防止因为子类和父类中有同名field name而导致的问题.","slug":"hessian-java-serialization","published":1,"updated":"2018-04-01T16:53:17.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2kshm002sp0ugowvh7z8t","content":"<h3 id=\"bug说明\"><a href=\"#bug说明\" class=\"headerlink\" title=\"bug说明\"></a>bug说明</h3><hr>\n<p>子类和父类中有同名的字段时，hessian反序列化会丢失字段值。<br><a id=\"more\"></a><br>父类<code>Person</code>：</p>\n<pre><code>public class Person implements Serializable {\n    private static final long serialVersionUID = 1L;\n    private String name;\n    private int age;\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public int getAge() {\n        return age;\n    }\n    public void setAge(int age) {\n        this.age = age;\n    }\n    @Override\n    public String toString() {\n        final StringBuilder sb = new StringBuilder(&quot;Person{&quot;);\n        sb.append(&quot;name=&apos;&quot;).append(name).append(&apos;\\&apos;&apos;);\n        sb.append(&quot;, age=&quot;).append(age);\n        sb.append(&apos;}&apos;);\n        return sb.toString();\n    }\n}\n</code></pre><p>子类<code>PersonEx</code>：</p>\n<pre><code>public class PersonEx  extends  Person{\n    private static final long    serialVersionUID    = 1L;\n    private String    name;\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    @Override\n    public String toString() {\n        final StringBuilder sb = new StringBuilder(&quot;PersonEx{&quot;);\n        sb.append(&quot;name=&apos;&quot;).append(name).append(&apos;\\&apos;&apos;);\n        sb.append(&apos;}&apos;);\n        sb.append(super.toString());\n        return sb.toString();\n    }\n}\n</code></pre><p>当我们序列化如下对象后</p>\n<pre><code>PersonEx p = new PersonEx();\np.setName(&quot;XXX&quot;);\np.setAge(28);\n</code></pre><p>后，反序列化回来的<code>PersonEx</code>对象<code>getName()==null</code>.</p>\n<h3 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h3><hr>\n<p>造成这个问题的原因如下：<br>hessian序列化机制，他通过反射把所有字段名和值(整个传输对象图)读取出来,见<code>JavaSerializer#writeObject</code>:</p>\n<pre><code>   if (ref == -1) {\n//写入需要反射的字段名\n  writeDefinition20(out);\n  out.writeObjectBegin(cl.getName());\n   }\n//写入值\nwriteInstance(obj, out);\n</code></pre><p>按照此规则，现在序列化结构如下(忽略其他映射关系)：</p>\n<pre><code>name|age|name|Person|XXX|28|null\n</code></pre><p>反序列化时，读取字段名，在set字段值：</p>\n<ol>\n<li>读取到name字段，调用<code>setName(&quot;XXX&quot;)</code></li>\n<li>再次读取name字段，调用<code>setName(null)</code></li>\n</ol>\n<p>结果就囧了。。。。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><hr>\n<h4 id=\"1-修改hessian代码\"><a href=\"#1-修改hessian代码\" class=\"headerlink\" title=\"1.修改hessian代码\"></a>1.修改hessian代码</h4><p>修改了hessian的序列化机制，当类的父对象出现相同的字段名时，跳过对此字段的处理。</p>\n<pre><code>//添加成员变量propertiesNameSet     \n   private HashSet&lt;String&gt; propertiesNameSet = Sets.newHashSet();\n//在JavaSerializer构造器里，遍历字段时，添加检查\nif (propertiesNameSet.contains(field.getName())) {\n      continue;\n} else {\n     propertiesNameSet.add(field.getName());\n}\n</code></pre><p>hessian在反序列化时有同名字段的判断<code>com.caucho.hessian.io.JavaDeserializer#getFieldMap</code>保证<code>fieldMap</code>中不出现同名的字段。</p>\n<h4 id=\"2-修改同名字段问题\"><a href=\"#2-修改同名字段问题\" class=\"headerlink\" title=\"2.修改同名字段问题\"></a>2.修改同名字段问题</h4><p>出现了同名字段，也可以认为是我们代码设计出问题了，没有理解清楚继承结构。在子类中删除同名的字段，就避免这个bug。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>现在的序列化框架基本上都会遇到此问题,<code>Kryo</code>中的<code>com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer</code>也没有对此问题进行处理.作为框架开发者,要尽量减少框架使用者犯错误的机会,也就是所谓的防御性编程吧.</p>\n<p>给<code>Kryo</code> <a href=\"https://github.com/EsotericSoftware/kryo/pull/187\" target=\"_blank\" rel=\"noopener\">pull request</a> ,防止因为子类和父类中有同名field name而导致的问题.</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"bug说明\"><a href=\"#bug说明\" class=\"headerlink\" title=\"bug说明\"></a>bug说明</h3><hr>\n<p>子类和父类中有同名的字段时，hessian反序列化会丢失字段值。<br></p>","more":"<br>父类<code>Person</code>：<p></p>\n<pre><code>public class Person implements Serializable {\n    private static final long serialVersionUID = 1L;\n    private String name;\n    private int age;\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public int getAge() {\n        return age;\n    }\n    public void setAge(int age) {\n        this.age = age;\n    }\n    @Override\n    public String toString() {\n        final StringBuilder sb = new StringBuilder(&quot;Person{&quot;);\n        sb.append(&quot;name=&apos;&quot;).append(name).append(&apos;\\&apos;&apos;);\n        sb.append(&quot;, age=&quot;).append(age);\n        sb.append(&apos;}&apos;);\n        return sb.toString();\n    }\n}\n</code></pre><p>子类<code>PersonEx</code>：</p>\n<pre><code>public class PersonEx  extends  Person{\n    private static final long    serialVersionUID    = 1L;\n    private String    name;\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    @Override\n    public String toString() {\n        final StringBuilder sb = new StringBuilder(&quot;PersonEx{&quot;);\n        sb.append(&quot;name=&apos;&quot;).append(name).append(&apos;\\&apos;&apos;);\n        sb.append(&apos;}&apos;);\n        sb.append(super.toString());\n        return sb.toString();\n    }\n}\n</code></pre><p>当我们序列化如下对象后</p>\n<pre><code>PersonEx p = new PersonEx();\np.setName(&quot;XXX&quot;);\np.setAge(28);\n</code></pre><p>后，反序列化回来的<code>PersonEx</code>对象<code>getName()==null</code>.</p>\n<h3 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h3><hr>\n<p>造成这个问题的原因如下：<br>hessian序列化机制，他通过反射把所有字段名和值(整个传输对象图)读取出来,见<code>JavaSerializer#writeObject</code>:</p>\n<pre><code>   if (ref == -1) {\n//写入需要反射的字段名\n  writeDefinition20(out);\n  out.writeObjectBegin(cl.getName());\n   }\n//写入值\nwriteInstance(obj, out);\n</code></pre><p>按照此规则，现在序列化结构如下(忽略其他映射关系)：</p>\n<pre><code>name|age|name|Person|XXX|28|null\n</code></pre><p>反序列化时，读取字段名，在set字段值：</p>\n<ol>\n<li>读取到name字段，调用<code>setName(&quot;XXX&quot;)</code></li>\n<li>再次读取name字段，调用<code>setName(null)</code></li>\n</ol>\n<p>结果就囧了。。。。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><hr>\n<h4 id=\"1-修改hessian代码\"><a href=\"#1-修改hessian代码\" class=\"headerlink\" title=\"1.修改hessian代码\"></a>1.修改hessian代码</h4><p>修改了hessian的序列化机制，当类的父对象出现相同的字段名时，跳过对此字段的处理。</p>\n<pre><code>//添加成员变量propertiesNameSet     \n   private HashSet&lt;String&gt; propertiesNameSet = Sets.newHashSet();\n//在JavaSerializer构造器里，遍历字段时，添加检查\nif (propertiesNameSet.contains(field.getName())) {\n      continue;\n} else {\n     propertiesNameSet.add(field.getName());\n}\n</code></pre><p>hessian在反序列化时有同名字段的判断<code>com.caucho.hessian.io.JavaDeserializer#getFieldMap</code>保证<code>fieldMap</code>中不出现同名的字段。</p>\n<h4 id=\"2-修改同名字段问题\"><a href=\"#2-修改同名字段问题\" class=\"headerlink\" title=\"2.修改同名字段问题\"></a>2.修改同名字段问题</h4><p>出现了同名字段，也可以认为是我们代码设计出问题了，没有理解清楚继承结构。在子类中删除同名的字段，就避免这个bug。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>现在的序列化框架基本上都会遇到此问题,<code>Kryo</code>中的<code>com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer</code>也没有对此问题进行处理.作为框架开发者,要尽量减少框架使用者犯错误的机会,也就是所谓的防御性编程吧.</p>\n<p>给<code>Kryo</code> <a href=\"https://github.com/EsotericSoftware/kryo/pull/187\" target=\"_blank\" rel=\"noopener\">pull request</a> ,防止因为子类和父类中有同名field name而导致的问题.</p>"},{"title":"Google Java编程风格指南","date":"2015-02-02T13:52:17.000Z","_content":"\n\n作者：Hawstein\n\n出处：[http://hawstein.com/posts/google-java-style.html](http://hawstein.com/posts/google-java-style.html)\n\n转载说明：N个月前看到[Google Java Style](http://google-styleguide.googlecode.com/svn/trunk/javaguide.html),大致扫了下，自认为命名都比较规范了。今天在整理依赖时，看到junit最新版本的release note中提到junit的代码按照[Google Java Style](http://google-styleguide.googlecode.com/svn/trunk/javaguide.html) fix了一遍。无意中感觉可能我也做得不够好，仔细看看文档，发现有个地方写的非常明确，值得参考。转载这篇中文翻译文章方便大家查看。\n\n\n\n## 目录\n\n1. [前言](#Intro)\n1. [源文件基础](#SFBasic)\n1. [源文件结构](#SFStruct)\n1. [格式](#Format)\n1. [命名约定](#Naming)\n1. [编程实践](#Practice)\n1. [Javadoc](#Javadoc)\n1. [后记](#End)\n\n## <a id=\"Intro\">前言</a>\n\n这份文档是Google Java编程风格规范的完整定义。当且仅当一个Java源文件符合此文档中的规则，\n我们才认为它符合Google的Java编程风格。\n\n与其它的编程风格指南一样，这里所讨论的不仅仅是编码格式美不美观的问题，\n同时也讨论一些约定及编码标准。然而，这份文档主要侧重于我们所普遍遵循的规则，\n对于那些不是明确强制要求的，我们尽量避免提供意见。\n\n### 1.1 术语说明\n\n在本文档中，除非另有说明：\n\n1. 术语class可表示一个普通类，枚举类，接口或是annotation类型(`@interface`)\n1. 术语comment只用来指代实现的注释(implementation comments)，我们不使用“documentation comments”一词，而是用Javadoc。\n\n其他的术语说明会偶尔在后面的文档出现。\n\n### 1.2 指南说明\n\n本文档中的示例代码并不作为规范。也就是说，虽然示例代码是遵循Google编程风格，但并不意味着这是展现这些代码的唯一方式。\n示例中的格式选择不应该被强制定为规则。\n\n## <a id=\"SFBasic\">源文件基础</a>\n\n### 2.1 文件名\n\n源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为`.java`。\n\n### 2.2 文件编码：UTF-8\n\n源文件编码格式为UTF-8。\n\n### 2.3 特殊字符\n\n#### 2.3.1 空白字符\n\n除了行结束符序列，ASCII水平空格字符(0x20，即空格)是源文件中唯一允许出现的空白字符，这意味着：\n\n1. 所有其它字符串中的空白字符都要进行转义。\n1. 制表符不用于缩进。\n\n#### 2.3.2 特殊转义序列\n\n对于具有特殊[转义序列](http://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97)的任何字符(\\b, \\t, \\n, \\f, \\r, \\\", \\'及\\\\)，我们使用它的转义序列，而不是相应的八进制(比如`\\012`)或Unicode(比如`\\u000a`)转义。\n\n#### 2.3.3 非ASCII字符\n\n对于剩余的非ASCII字符，是使用实际的Unicode字符(比如∞)，还是使用等价的Unicode转义符(比如\\u221e)，取决于哪个能让代码更易于阅读和理解。\n\n>> Tip: 在使用Unicode转义符或是一些实际的Unicode字符时，建议做些注释给出解释，这有助于别人阅读和理解。\n\n例如：\n\n\tString unitAbbrev = \"μs\";                                 | 赞，即使没有注释也非常清晰\n\tString unitAbbrev = \"\\u03bcs\"; // \"μs\"                    | 允许，但没有理由要这样做\n\tString unitAbbrev = \"\\u03bcs\"; // Greek letter mu, \"s\"    | 允许，但这样做显得笨拙还容易出错\n\tString unitAbbrev = \"\\u03bcs\";                            | 很糟，读者根本看不出这是什么\n\treturn '\\ufeff' + content; // byte order mark             | Good，对于非打印字符，使用转义，并在必要时写上注释\n\n>> Tip: 永远不要由于害怕某些程序可能无法正确处理非ASCII字符而让你的代码可读性变差。当程序无法正确处理非ASCII字符时，它自然无法正确运行，\n你就会去fix这些问题的了。(言下之意就是大胆去用非ASCII字符，如果真的有需要的话)\n\n## <a id=\"SFStruct\">源文件结构</a>\n\n一个源文件包含(按顺序地)：\n\n1. 许可证或版权信息(如有需要)\n1. package语句\n1. import语句\n1. 一个顶级类(**只有一个**)\n\n以上每个部分之间用一个空行隔开。\n\n### 3.1 许可证或版权信息\n\n如果一个文件包含许可证或版权信息，那么它应当被放在文件最前面。\n\n### 3.2 package语句\n\npackage语句不换行，列限制(4.4节)并不适用于package语句。(即package语句写在一行里)\n\n### 3.3 import语句\n\n#### 3.3.1 import不要使用通配符\n\n即，不要出现类似这样的import语句：`import java.util.*;`\n\n#### 3.3.2 不要换行\n\nimport语句不换行，列限制(4.4节)并不适用于import语句。(每个import语句独立成行)\n\n#### 3.3.3 顺序和间距\n\nimport语句可分为以下几组，按照这个顺序，每组由一个空行分隔：\n\n1. 所有的静态导入独立成组\n1. `com.google` imports(仅当这个源文件是在`com.google`包下)\n1. 第三方的包。每个顶级包为一组，字典序。例如：android, com, junit, org, sun\n1. `java` imports\n1. `javax` imports\n\n组内不空行，按字典序排列。\n\n### 3.4 类声明\n\n#### 3.4.1 只有一个顶级类声明\n\n每个顶级类都在一个与它同名的源文件中(当然，还包含`.java`后缀)。\n\n例外：`package-info.java`，该文件中可没有`package-info`类。\n\n#### 3.4.2 类成员顺序\n\n类的成员顺序对易学性有很大的影响，但这也不存在唯一的通用法则。不同的类对成员的排序可能是不同的。\n最重要的一点，每个类应该以某种逻辑去排序它的成员，维护者应该要能解释这种排序逻辑。比如，\n新的方法不能总是习惯性地添加到类的结尾，因为这样就是按时间顺序而非某种逻辑来排序的。\n\n##### 3.4.2.1 重载：永不分离\n\n当一个类有多个构造函数，或是多个同名方法，这些函数/方法应该按顺序出现在一起，中间不要放进其它函数/方法。\n\n## <a id=\"Format\">格式</a>\n\n**术语说明**：块状结构(block-like construct)指的是一个类，方法或构造函数的主体。需要注意的是，数组初始化中的初始值可被选择性地视为块状结构(4.8.3.1节)。\n\n### 4.1 大括号\n\n#### 4.1.1 使用大括号(即使是可选的)\n\n大括号与`if, else, for, do, while`语句一起使用，即使只有一条语句(或是空)，也应该把大括号写上。\n\n#### 4.1.2 非空块：K & R 风格\n\n对于非空块和块状结构，大括号遵循Kernighan和Ritchie风格\n([Egyptian brackets](http://www.codinghorror.com/blog/2012/07/new-programming-jargon.html)):\n\n* 左大括号前不换行\n* 左大括号后换行\n* 右大括号前换行\n* 如果右大括号是一个语句、函数体或类的终止，则右大括号后换行; 否则不换行。例如，如果右大括号后面是else或逗号，则不换行。\n\n示例：\n\n\n\treturn new MyClass() {\n\t  @Override public void method() {\n\t    if (condition()) {\n\t      try {\n\t        something();\n\t      } catch (ProblemException e) {\n\t        recover();\n\t      }\n\t    }\n\t  }\n\t};\n\n\n4.8.1节给出了enum类的一些例外。\n\n#### 4.1.3 空块：可以用简洁版本\n\n一个空的块状结构里什么也不包含，大括号可以简洁地写成`{}`，不需要换行。例外：如果它是一个多块语句的一部分(if/else 或 try/catch/finally)\n，即使大括号内没内容，右大括号也要换行。\n\n示例：\n\n\n\tvoid doNothing() {}\n\n\n### 4.2 块缩进：2个空格\n\n每当开始一个新的块，缩进增加2个空格，当块结束时，缩进返回先前的缩进级别。缩进级别适用于代码和注释。(见4.1.2节中的代码示例)\n\n### 4.3 一行一个语句\n\n每个语句后要换行。\n\n### 4.4 列限制：80或100\n\n一个项目可以选择一行80个字符或100个字符的列限制，除了下述例外，任何一行如果超过这个字符数限制，必须自动换行。\n\n例外：\n\n1. 不可能满足列限制的行(例如，Javadoc中的一个长URL，或是一个长的JSNI方法参考)。\n1. `package`和`import`语句(见3.2节和3.3节)。\n1. 注释中那些可能被剪切并粘贴到shell中的命令行。\n\n### 4.5 自动换行\n\n**术语说明**：一般情况下，一行长代码为了避免超出列限制(80或100个字符)而被分为多行，我们称之为自动换行(line-wrapping)。\n\n我们并没有全面，确定性的准则来决定在每一种情况下如何自动换行。很多时候，对于同一段代码会有好几种有效的自动换行方式。\n\n>> Tip: 提取方法或局部变量可以在不换行的情况下解决代码过长的问题(是合理缩短命名长度吧)\n\n#### 4.5.1 从哪里断开\n\n自动换行的基本准则是：更倾向于在更高的语法级别处断开。\n\n1. 如果在`非赋值运算符`处断开，那么在该符号前断开(比如+，它将位于下一行)。注意：这一点与Google其它语言的编程风格不同(如C++和JavaScript)。\n这条规则也适用于以下“类运算符”符号：点分隔符(.)，类型界限中的&（`<T extends Foo & Bar>`)，catch块中的管道符号(`catch (FooException | BarException e`)\n1. 如果在`赋值运算符`处断开，通常的做法是在该符号后断开(比如=，它与前面的内容留在同一行)。这条规则也适用于`foreach`语句中的分号。\n1. 方法名或构造函数名与左括号留在同一行。\n1. 逗号(,)与其前面的内容留在同一行。\n\n#### 4.5.2 自动换行时缩进至少+4个空格\n\n自动换行时，第一行后的每一行至少比第一行多缩进4个空格(注意：制表符不用于缩进。见2.3.1节)。\n\n当存在连续自动换行时，缩进可能会多缩进不只4个空格(语法元素存在多级时)。一般而言，两个连续行使用相同的缩进当且仅当它们开始于同级语法元素。\n\n第4.6.3水平对齐一节中指出，不鼓励使用可变数目的空格来对齐前面行的符号。\n\n### 4.6 空白\n\n#### 4.6.1 垂直空白\n\n以下情况需要使用一个空行：\n\n1. 类内连续的成员之间：字段，构造函数，方法，嵌套类，静态初始化块，实例初始化块。\n    - **例外**：两个连续字段之间的空行是可选的，用于字段的空行主要用来对字段进行逻辑分组。\n1. 在函数体内，语句的逻辑分组间使用空行。\n1. 类内的第一个成员前或最后一个成员后的空行是可选的(既不鼓励也不反对这样做，视个人喜好而定)。\n1. 要满足本文档中其他节的空行要求(比如3.3节：import语句)\n\n多个连续的空行是允许的，但没有必要这样做(我们也不鼓励这样做)。\n\n#### 4.6.2 水平空白\n\n除了语言需求和其它规则，并且除了文字，注释和Javadoc用到单个空格，单个ASCII空格也出现在以下几个地方：\n\n1. 分隔任何保留字与紧随其后的左括号(`(`)(如`if, for catch`等)。\n1. 分隔任何保留字与其前面的右大括号(`}`)(如`else, catch`)。\n1. 在任何左大括号前(`{`)，两个例外：\n    - `@SomeAnnotation({a, b})`(不使用空格)。\n    - `String[][] x = {{\"foo\"}};`(大括号间没有空格，见下面的Note)。\n1. 在任何二元或三元运算符的两侧。这也适用于以下“类运算符”符号：\n    - 类型界限中的&(`<T extends Foo & Bar>`)。\n    - catch块中的管道符号(`catch (FooException | BarException e`)。\n    - `foreach`语句中的分号。\n1. 在`, : ;`及右括号(`)`)后\n1. 如果在一条语句后做注释，则双斜杠(//)两边都要空格。这里可以允许多个空格，但没有必要。\n1. 类型和变量之间：List<String> list。\n1. 数组初始化中，大括号内的空格是可选的，即`new int[] {5, 6}`和`new int[] { 5, 6 }`都是可以的。\n\n>> Note：这个规则并不要求或禁止一行的开关或结尾需要额外的空格，只对内部空格做要求。\n\n#### 4.6.3 水平对齐：不做要求\n\n**术语说明**：水平对齐指的是通过增加可变数量的空格来使某一行的字符与上一行的相应字符对齐。\n\n这是允许的(而且在不少地方可以看到这样的代码)，但Google编程风格对此不做要求。即使对于已经使用水平对齐的代码，我们也不需要去保持这种风格。\n\n以下示例先展示未对齐的代码，然后是对齐的代码：\n\n\nprivate int x; // this is fine\nprivate Color color; // this too\n\nprivate int   x;      // permitted, but future edits\nprivate Color color;  // may leave it unaligned\n\n\n>> Tip：对齐可增加代码可读性，但它为日后的维护带来问题。考虑未来某个时候，我们需要修改一堆对齐的代码中的一行。\n这可能导致原本很漂亮的对齐代码变得错位。很可能它会提示你调整周围代码的空白来使这一堆代码重新水平对齐(比如程序员想保持这种水平对齐的风格)，\n这就会让你做许多的无用功，增加了reviewer的工作并且可能导致更多的合并冲突。\n\n### 4.7 用小括号来限定组：推荐\n\n除非作者和reviewer都认为去掉小括号也不会使代码被误解，或是去掉小括号能让代码更易于阅读，否则我们不应该去掉小括号。\n我们没有理由假设读者能记住整个Java运算符优先级表。\n\n### 4.8 具体结构\n\n#### 4.8.1 枚举类\n\n枚举常量间用逗号隔开，换行可选。\n\n没有方法和文档的枚举类可写成数组初始化的格式：\n\n\n\tprivate enum Suit { CLUBS, HEARTS, SPADES, DIAMONDS }\n\n\n由于枚举类也是一个类，因此所有适用于其它类的格式规则也适用于枚举类。\n\n#### 4.8.2 变量声明\n\n##### 4.8.2.1 每次只声明一个变量\n\n不要使用组合声明，比如`int a, b;`。\n\n##### 4.8.2.2 需要时才声明，并尽快进行初始化\n\n不要在一个代码块的开头把局部变量一次性都声明了(这是c语言的做法)，而是在第一次需要使用它时才声明。\n局部变量在声明时最好就进行初始化，或者声明后尽快进行初始化。\n\n#### 4.8.3 数组\n\n##### 4.8.3.1 数组初始化：可写成块状结构\n\n数组初始化可以写成块状结构，比如，下面的写法都是OK的：\n\n\n\tnew int[] {\n\t  0, 1, 2, 3\n\t}\n\t\n\tnew int[] {\n\t  0,\n\t  1,\n\t  2,\n\t  3\n\t}\n\t\n\tnew int[] {\n\t  0, 1,\n\t  2, 3\n\t}\n\t\n\tnew int[]\n\t    {0, 1, 2, 3}\n\n\n##### 4.8.3.2 非C风格的数组声明\n\n中括号是类型的一部分：`String[] args`， 而非`String args[]`。\n\n#### 4.8.4 switch语句\n\n**术语说明**：switch块的大括号内是一个或多个语句组。每个语句组包含一个或多个switch标签(`case FOO:`或`default:`)，后面跟着一条或多条语句。\n\n##### 4.8.4.1 缩进\n\n与其它块状结构一致，switch块中的内容缩进为2个空格。\n\n每个switch标签后新起一行，再缩进2个空格，写下一条或多条语句。\n\n##### 4.8.4.2 Fall-through：注释\n\n在一个switch块内，每个语句组要么通过`break, continue, return`或抛出异常来终止，要么通过一条注释来说明程序将继续执行到下一个语句组，\n任何能表达这个意思的注释都是OK的(典型的是用`// fall through`)。这个特殊的注释并不需要在最后一个语句组(一般是`default`)中出现。示例：\n\n\n\tswitch (input) {\n\t  case 1:\n\t  case 2:\n\t    prepareOneOrTwo();\n\t    // fall through\n\t  case 3:\n\t    handleOneTwoOrThree();\n\t    break;\n\t  default:\n\t    handleLargeNumber(input);\n\t}\n\n\n##### 4.8.4.3 default的情况要写出来\n\n每个switch语句都包含一个`default`语句组，即使它什么代码也不包含。\n\n#### 4.8.5 注解(Annotations)\n\n注解紧跟在文档块后面，应用于类、方法和构造函数，一个注解独占一行。这些换行不属于自动换行(第4.5节，自动换行)，因此缩进级别不变。例如：\n\n\t\n\t@Override\n\t@Nullable\n\tpublic String getNameIfPresent() { ... }\n\n\n**例外**：单个的注解可以和签名的第一行出现在同一行。例如：\n\n\t\n\t@Override public int hashCode() { ... }\n\n\n应用于字段的注解紧随文档块出现，应用于字段的多个注解允许与字段出现在同一行。例如：\n\n\n\t@Partial @Mock DataLoader loader;\n\n\n参数和局部变量注解没有特定规则。\n\n#### 4.8.6 注释\n\n##### 4.8.6.1 块注释风格\n\n块注释与其周围的代码在同一缩进级别。它们可以是`/* ... */`风格，也可以是`// ...`风格。对于多行的`/* ... */`注释，后续行必须从`*`开始，\n并且与前一行的`*`对齐。以下示例注释都是OK的。\n\n\t\n\t/*\n\t * This is          // And so           /* Or you can\n\t * okay.            // is this.          * even do this. */\n\t */\n\n\n注释不要封闭在由星号或其它字符绘制的框架里。\n\n>> Tip：在写多行注释时，如果你希望在必要时能重新换行(即注释像段落风格一样)，那么使用`/* ... */`。\n\n#### 4.8.7 Modifiers\n\n类和成员的modifiers如果存在，则按Java语言规范中推荐的顺序出现。\n\n\npublic protected private abstract static final transient volatile synchronized native strictfp\n\n\n## <a id=\"Naming\">命名约定</a>\n\n### 5.1 对所有标识符都通用的规则\n\n标识符只能使用ASCII字母和数字，因此每个有效的标识符名称都能匹配正则表达式`\\w+`。\n\n在Google其它编程语言风格中使用的特殊前缀或后缀，如`name_`, `mName`, `s_name`和`kName`，在Java编程风格中都不再使用。\n\n### 5.2 标识符类型的规则\n\n#### 5.2.1 包名\n\n包名全部小写，连续的单词只是简单地连接起来，不使用下划线。\n\n#### 5.2.2 类名\n\n类名都以`UpperCamelCase`风格编写。\n\n类名通常是名词或名词短语，接口名称有时可能是形容词或形容词短语。现在还没有特定的规则或行之有效的约定来命名注解类型。\n\n测试类的命名以它要测试的类的名称开始，以`Test`结束。例如，`HashTest`或`HashIntegrationTest`。\n\n#### 5.2.3 方法名\n\n方法名都以`lowerCamelCase`风格编写。\n\n方法名通常是动词或动词短语。\n\n下划线可能出现在JUnit测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：`test<MethodUnderTest>_<state>`，例如`testPop_emptyStack`。\n并不存在唯一正确的方式来命名测试方法。\n\n#### 5.2.4 常量名\n\n常量名命名模式为`CONSTANT_CASE`，全部字母大写，用下划线分隔单词。那，到底什么算是一个常量？\n\n每个常量都是一个静态final字段，但不是所有静态final字段都是常量。在决定一个字段是否是一个常量时，\n考虑它是否真的感觉像是一个常量。例如，如果任何一个该实例的观测状态是可变的，则它几乎肯定不会是一个常量。\n只是永远不`打算`改变对象一般是不够的，它要真的一直不变才能将它示为常量。\n\n\n\t// Constants\n\tstatic final int NUMBER = 5;\n\tstatic final ImmutableList<String> NAMES = ImmutableList.of(\"Ed\", \"Ann\");\n\tstatic final Joiner COMMA_JOINER = Joiner.on(',');  // because Joiner is immutable\n\tstatic final SomeMutableType[] EMPTY_ARRAY = {};\n\tenum SomeEnum { ENUM_CONSTANT }\n\t\n\t// Not constants\n\tstatic String nonFinal = \"non-final\";\n\tfinal String nonStatic = \"non-static\";\n\tstatic final Set<String> mutableCollection = new HashSet<String>();\n\tstatic final ImmutableSet<SomeMutableType> mutableElements = ImmutableSet.of(mutable);\n\tstatic final Logger logger = Logger.getLogger(MyClass.getName());\n\tstatic final String[] nonEmptyArray = {\"these\", \"can\", \"change\"};\n\n\n这些名字通常是名词或名词短语。\n\n#### 5.2.5 非常量字段名\n\n非常量字段名以`lowerCamelCase`风格编写。\n\n这些名字通常是名词或名词短语。\n\n#### 5.2.6 参数名\n\n参数名以`lowerCamelCase`风格编写。\n\n参数应该避免用单个字符命名。\n\n#### 5.2.7 局部变量名\n\n局部变量名以`lowerCamelCase`风格编写，比起其它类型的名称，局部变量名可以有更为宽松的缩写。\n\n虽然缩写更宽松，但还是要避免用单字符进行命名，除了临时变量和循环变量。\n\n即使局部变量是final和不可改变的，也不应该把它示为常量，自然也不能用常量的规则去命名它。\n\n#### 5.2.8 类型变量名\n\n类型变量可用以下两种风格之一进行命名：\n\n* 单个的大写字母，后面可以跟一个数字(如：E, T, X, T2)。\n* 以类命名方式(5.2.2节)，后面加个大写的T(如：RequestT, FooBarT)。\n\n### 5.3 驼峰式命名法(CamelCase)\n\n[驼峰式命名法](http://zh.wikipedia.org/wiki/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB)分大驼峰式命名法(`UpperCamelCase`)和小驼峰式命名法(`lowerCamelCase`)。\n有时，我们有不只一种合理的方式将一个英语词组转换成驼峰形式，如缩略语或不寻常的结构(例如\"IPv6\"或\"iOS\")。Google指定了以下的转换方案。\n\n名字从`散文形式`(prose form)开始:\n\n1. 把短语转换为纯ASCII码，并且移除任何单引号。例如：\"Müller's algorithm\"将变成\"Muellers algorithm\"。\n1. 把这个结果切分成单词，在空格或其它标点符号(通常是连字符)处分割开。\n    - 推荐：如果某个单词已经有了常用的驼峰表示形式，按它的组成将它分割开(如\"AdWords\"将分割成\"ad words\")。\n    需要注意的是\"iOS\"并不是一个真正的驼峰表示形式，因此该推荐对它并不适用。\n1. 现在将所有字母都小写(包括缩写)，然后将单词的第一个字母大写：\n    - 每个单词的第一个字母都大写，来得到大驼峰式命名。\n    - 除了第一个单词，每个单词的第一个字母都大写，来得到小驼峰式命名。\n1. 最后将所有的单词连接起来得到一个标识符。\n\n示例：\n\n    Prose form                Correct               Incorrect\n    ------------------------------------------------------------------\n    \"XML HTTP request\"        XmlHttpRequest        XMLHTTPRequest\n    \"new customer ID\"         newCustomerId         newCustomerID\n    \"inner stopwatch\"         innerStopwatch        innerStopWatch\n    \"supports IPv6 on iOS?\"   supportsIpv6OnIos     supportsIPv6OnIOS\n    \"YouTube importer\"        YouTubeImporter\n                              YoutubeImporter*\n\n加星号处表示可以，但不推荐。\n\n>> Note：在英语中，某些带有连字符的单词形式不唯一。例如：\"nonempty\"和\"non-empty\"都是正确的，因此方法名`checkNonempty`和`checkNonEmpty`也都是正确的。\n\n## <a id=\"Practice\">编程实践</a>\n\n### 6.1 @Override：能用则用\n\n只要是合法的，就把`@Override`注解给用上。\n\n### 6.2 捕获的异常：不能忽视\n\n除了下面的例子，对捕获的异常不做响应是极少正确的。(典型的响应方式是打印日志，或者如果它被认为是不可能的，则把它当作一个`AssertionError`重新抛出。)\n\n如果它确实是不需要在catch块中做任何响应，需要做注释加以说明(如下面的例子)。\n\n\t\n\ttry {\n\t  int i = Integer.parseInt(response);\n\t  return handleNumericResponse(i);\n\t} catch (NumberFormatException ok) {\n\t  // it's not numeric; that's fine, just continue\n\t}\n\treturn handleTextResponse(response);\n\n\n**例外**：在测试中，如果一个捕获的异常被命名为`expected`，则它可以被不加注释地忽略。下面是一种非常常见的情形，用以确保所测试的方法会抛出一个期望中的异常，\n因此在这里就没有必要加注释。\n\n\n\ttry {\n\t  emptyStack.pop();\n\t  fail();\n\t} catch (NoSuchElementException expected) {\n\t}\n\n\n### 6.3 静态成员：使用类进行调用\n\n使用类名调用静态的类成员，而不是具体某个对象或表达式。\n\n\t\n\tFoo aFoo = ...;\n\tFoo.aStaticMethod(); // good\n\taFoo.aStaticMethod(); // bad\n\tsomethingThatYieldsAFoo().aStaticMethod(); // very bad\n\n\n### 6.4 Finalizers: 禁用\n\n极少会去重载`Object.finalize`。\n\n>> Tip：不要使用finalize。如果你非要使用它，请先仔细阅读和理解[Effective Java](http://books.google.com/books?isbn=8131726592)\n第7条款：“Avoid Finalizers”，然后不要使用它。\n\n## <a id=\"Javadoc\">Javadoc</a>\n\n### 7.1 格式\n\n#### 7.1.1 一般形式\n\nJavadoc块的基本格式如下所示：\n\n\t\n\t/**\n\t * Multiple lines of Javadoc text are written here,\n\t * wrapped normally...\n\t */\n\tpublic int method(String p1) { ... }\n\n\n或者是以下单行形式：\n\n\n\t/** An especially short bit of Javadoc. */\n\n\n基本格式总是OK的。当整个Javadoc块能容纳于一行时(且没有Javadoc标记@XXX)，可以使用单行形式。\n\n#### 7.1.2 段落\n\n空行(即，只包含最左侧星号的行)会出现在段落之间和Javadoc标记(@XXX)之前(如果有的话)。\n除了第一个段落，每个段落第一个单词前都有标签`<p>`，并且它和第一个单词间没有空格。\n\n#### 7.1.3 Javadoc标记\n\n标准的Javadoc标记按以下顺序出现：`@param`, `@return`, `@throws`, `@deprecated`, 前面这4种标记如果出现，描述都不能为空。\n当描述无法在一行中容纳，连续行需要至少再缩进4个空格。\n\n### 7.2 摘要片段\n\n每个类或成员的Javadoc以一个简短的摘要片段开始。这个片段是非常重要的，在某些情况下，它是唯一出现的文本，比如在类和方法索引中。\n\n这只是一个小片段，可以是一个名词短语或动词短语，但不是一个完整的句子。它不会以`A {@code Foo} is a...`或`This method returns...`开头,\n它也不会是一个完整的祈使句，如`Save the record...`。然而，由于开头大写及被加了标点，它看起来就像是个完整的句子。\n\n>> Tip：一个常见的错误是把简单的Javadoc写成`/** @return the customer ID */`，这是不正确的。它应该写成`/** Returns the customer ID. */`。\n\n### 7.3 哪里需要使用Javadoc\n\n至少在每个public类及它的每个public和protected成员处使用Javadoc，以下是一些例外：\n\n#### 7.3.1 例外：不言自明的方法\n\n对于简单明显的方法如`getFoo`，Javadoc是可选的(即，是可以不写的)。这种情况下除了写“Returns the foo”，确实也没有什么值得写了。\n\n单元测试类中的测试方法可能是不言自明的最常见例子了，我们通常可以从这些方法的描述性命名中知道它是干什么的，因此不需要额外的文档说明。\n\n>> Tip：如果有一些相关信息是需要读者了解的，那么以上的例外不应作为忽视这些信息的理由。例如，对于方法名`getCanonicalName`，\n就不应该忽视文档说明，因为读者很可能不知道词语`canonical name`指的是什么。\n\n#### 7.3.2 例外：重载\n\n如果一个方法重载了超类中的方法，那么Javadoc并非必需的。\n\n#### 7.3.3 可选的Javadoc\n\n对于包外不可见的类和方法，如有需要，也是要使用Javadoc的。如果一个注释是用来定义一个类，方法，字段的整体目的或行为，\n那么这个注释应该写成Javadoc，这样更统一更友好。\n\n## <a id=\"End\">后记</a>\n\n本文档翻译自[Google Java Style](http://google-styleguide.googlecode.com/svn/trunk/javaguide.html)，\n译者[@Hawstein](http://weibo.com/hawstein)。\n\n## 补充\n\ncheckstyle https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml\n","source":"_posts/google-java-style.md","raw":"---\ntitle: Google Java编程风格指南\ndate: 2015-02-02 21:52:17\ncategories: java\ntags:\n  - Google Java编程风格指南\n---\n\n\n作者：Hawstein\n\n出处：[http://hawstein.com/posts/google-java-style.html](http://hawstein.com/posts/google-java-style.html)\n\n转载说明：N个月前看到[Google Java Style](http://google-styleguide.googlecode.com/svn/trunk/javaguide.html),大致扫了下，自认为命名都比较规范了。今天在整理依赖时，看到junit最新版本的release note中提到junit的代码按照[Google Java Style](http://google-styleguide.googlecode.com/svn/trunk/javaguide.html) fix了一遍。无意中感觉可能我也做得不够好，仔细看看文档，发现有个地方写的非常明确，值得参考。转载这篇中文翻译文章方便大家查看。\n\n\n\n## 目录\n\n1. [前言](#Intro)\n1. [源文件基础](#SFBasic)\n1. [源文件结构](#SFStruct)\n1. [格式](#Format)\n1. [命名约定](#Naming)\n1. [编程实践](#Practice)\n1. [Javadoc](#Javadoc)\n1. [后记](#End)\n\n## <a id=\"Intro\">前言</a>\n\n这份文档是Google Java编程风格规范的完整定义。当且仅当一个Java源文件符合此文档中的规则，\n我们才认为它符合Google的Java编程风格。\n\n与其它的编程风格指南一样，这里所讨论的不仅仅是编码格式美不美观的问题，\n同时也讨论一些约定及编码标准。然而，这份文档主要侧重于我们所普遍遵循的规则，\n对于那些不是明确强制要求的，我们尽量避免提供意见。\n\n### 1.1 术语说明\n\n在本文档中，除非另有说明：\n\n1. 术语class可表示一个普通类，枚举类，接口或是annotation类型(`@interface`)\n1. 术语comment只用来指代实现的注释(implementation comments)，我们不使用“documentation comments”一词，而是用Javadoc。\n\n其他的术语说明会偶尔在后面的文档出现。\n\n### 1.2 指南说明\n\n本文档中的示例代码并不作为规范。也就是说，虽然示例代码是遵循Google编程风格，但并不意味着这是展现这些代码的唯一方式。\n示例中的格式选择不应该被强制定为规则。\n\n## <a id=\"SFBasic\">源文件基础</a>\n\n### 2.1 文件名\n\n源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为`.java`。\n\n### 2.2 文件编码：UTF-8\n\n源文件编码格式为UTF-8。\n\n### 2.3 特殊字符\n\n#### 2.3.1 空白字符\n\n除了行结束符序列，ASCII水平空格字符(0x20，即空格)是源文件中唯一允许出现的空白字符，这意味着：\n\n1. 所有其它字符串中的空白字符都要进行转义。\n1. 制表符不用于缩进。\n\n#### 2.3.2 特殊转义序列\n\n对于具有特殊[转义序列](http://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97)的任何字符(\\b, \\t, \\n, \\f, \\r, \\\", \\'及\\\\)，我们使用它的转义序列，而不是相应的八进制(比如`\\012`)或Unicode(比如`\\u000a`)转义。\n\n#### 2.3.3 非ASCII字符\n\n对于剩余的非ASCII字符，是使用实际的Unicode字符(比如∞)，还是使用等价的Unicode转义符(比如\\u221e)，取决于哪个能让代码更易于阅读和理解。\n\n>> Tip: 在使用Unicode转义符或是一些实际的Unicode字符时，建议做些注释给出解释，这有助于别人阅读和理解。\n\n例如：\n\n\tString unitAbbrev = \"μs\";                                 | 赞，即使没有注释也非常清晰\n\tString unitAbbrev = \"\\u03bcs\"; // \"μs\"                    | 允许，但没有理由要这样做\n\tString unitAbbrev = \"\\u03bcs\"; // Greek letter mu, \"s\"    | 允许，但这样做显得笨拙还容易出错\n\tString unitAbbrev = \"\\u03bcs\";                            | 很糟，读者根本看不出这是什么\n\treturn '\\ufeff' + content; // byte order mark             | Good，对于非打印字符，使用转义，并在必要时写上注释\n\n>> Tip: 永远不要由于害怕某些程序可能无法正确处理非ASCII字符而让你的代码可读性变差。当程序无法正确处理非ASCII字符时，它自然无法正确运行，\n你就会去fix这些问题的了。(言下之意就是大胆去用非ASCII字符，如果真的有需要的话)\n\n## <a id=\"SFStruct\">源文件结构</a>\n\n一个源文件包含(按顺序地)：\n\n1. 许可证或版权信息(如有需要)\n1. package语句\n1. import语句\n1. 一个顶级类(**只有一个**)\n\n以上每个部分之间用一个空行隔开。\n\n### 3.1 许可证或版权信息\n\n如果一个文件包含许可证或版权信息，那么它应当被放在文件最前面。\n\n### 3.2 package语句\n\npackage语句不换行，列限制(4.4节)并不适用于package语句。(即package语句写在一行里)\n\n### 3.3 import语句\n\n#### 3.3.1 import不要使用通配符\n\n即，不要出现类似这样的import语句：`import java.util.*;`\n\n#### 3.3.2 不要换行\n\nimport语句不换行，列限制(4.4节)并不适用于import语句。(每个import语句独立成行)\n\n#### 3.3.3 顺序和间距\n\nimport语句可分为以下几组，按照这个顺序，每组由一个空行分隔：\n\n1. 所有的静态导入独立成组\n1. `com.google` imports(仅当这个源文件是在`com.google`包下)\n1. 第三方的包。每个顶级包为一组，字典序。例如：android, com, junit, org, sun\n1. `java` imports\n1. `javax` imports\n\n组内不空行，按字典序排列。\n\n### 3.4 类声明\n\n#### 3.4.1 只有一个顶级类声明\n\n每个顶级类都在一个与它同名的源文件中(当然，还包含`.java`后缀)。\n\n例外：`package-info.java`，该文件中可没有`package-info`类。\n\n#### 3.4.2 类成员顺序\n\n类的成员顺序对易学性有很大的影响，但这也不存在唯一的通用法则。不同的类对成员的排序可能是不同的。\n最重要的一点，每个类应该以某种逻辑去排序它的成员，维护者应该要能解释这种排序逻辑。比如，\n新的方法不能总是习惯性地添加到类的结尾，因为这样就是按时间顺序而非某种逻辑来排序的。\n\n##### 3.4.2.1 重载：永不分离\n\n当一个类有多个构造函数，或是多个同名方法，这些函数/方法应该按顺序出现在一起，中间不要放进其它函数/方法。\n\n## <a id=\"Format\">格式</a>\n\n**术语说明**：块状结构(block-like construct)指的是一个类，方法或构造函数的主体。需要注意的是，数组初始化中的初始值可被选择性地视为块状结构(4.8.3.1节)。\n\n### 4.1 大括号\n\n#### 4.1.1 使用大括号(即使是可选的)\n\n大括号与`if, else, for, do, while`语句一起使用，即使只有一条语句(或是空)，也应该把大括号写上。\n\n#### 4.1.2 非空块：K & R 风格\n\n对于非空块和块状结构，大括号遵循Kernighan和Ritchie风格\n([Egyptian brackets](http://www.codinghorror.com/blog/2012/07/new-programming-jargon.html)):\n\n* 左大括号前不换行\n* 左大括号后换行\n* 右大括号前换行\n* 如果右大括号是一个语句、函数体或类的终止，则右大括号后换行; 否则不换行。例如，如果右大括号后面是else或逗号，则不换行。\n\n示例：\n\n\n\treturn new MyClass() {\n\t  @Override public void method() {\n\t    if (condition()) {\n\t      try {\n\t        something();\n\t      } catch (ProblemException e) {\n\t        recover();\n\t      }\n\t    }\n\t  }\n\t};\n\n\n4.8.1节给出了enum类的一些例外。\n\n#### 4.1.3 空块：可以用简洁版本\n\n一个空的块状结构里什么也不包含，大括号可以简洁地写成`{}`，不需要换行。例外：如果它是一个多块语句的一部分(if/else 或 try/catch/finally)\n，即使大括号内没内容，右大括号也要换行。\n\n示例：\n\n\n\tvoid doNothing() {}\n\n\n### 4.2 块缩进：2个空格\n\n每当开始一个新的块，缩进增加2个空格，当块结束时，缩进返回先前的缩进级别。缩进级别适用于代码和注释。(见4.1.2节中的代码示例)\n\n### 4.3 一行一个语句\n\n每个语句后要换行。\n\n### 4.4 列限制：80或100\n\n一个项目可以选择一行80个字符或100个字符的列限制，除了下述例外，任何一行如果超过这个字符数限制，必须自动换行。\n\n例外：\n\n1. 不可能满足列限制的行(例如，Javadoc中的一个长URL，或是一个长的JSNI方法参考)。\n1. `package`和`import`语句(见3.2节和3.3节)。\n1. 注释中那些可能被剪切并粘贴到shell中的命令行。\n\n### 4.5 自动换行\n\n**术语说明**：一般情况下，一行长代码为了避免超出列限制(80或100个字符)而被分为多行，我们称之为自动换行(line-wrapping)。\n\n我们并没有全面，确定性的准则来决定在每一种情况下如何自动换行。很多时候，对于同一段代码会有好几种有效的自动换行方式。\n\n>> Tip: 提取方法或局部变量可以在不换行的情况下解决代码过长的问题(是合理缩短命名长度吧)\n\n#### 4.5.1 从哪里断开\n\n自动换行的基本准则是：更倾向于在更高的语法级别处断开。\n\n1. 如果在`非赋值运算符`处断开，那么在该符号前断开(比如+，它将位于下一行)。注意：这一点与Google其它语言的编程风格不同(如C++和JavaScript)。\n这条规则也适用于以下“类运算符”符号：点分隔符(.)，类型界限中的&（`<T extends Foo & Bar>`)，catch块中的管道符号(`catch (FooException | BarException e`)\n1. 如果在`赋值运算符`处断开，通常的做法是在该符号后断开(比如=，它与前面的内容留在同一行)。这条规则也适用于`foreach`语句中的分号。\n1. 方法名或构造函数名与左括号留在同一行。\n1. 逗号(,)与其前面的内容留在同一行。\n\n#### 4.5.2 自动换行时缩进至少+4个空格\n\n自动换行时，第一行后的每一行至少比第一行多缩进4个空格(注意：制表符不用于缩进。见2.3.1节)。\n\n当存在连续自动换行时，缩进可能会多缩进不只4个空格(语法元素存在多级时)。一般而言，两个连续行使用相同的缩进当且仅当它们开始于同级语法元素。\n\n第4.6.3水平对齐一节中指出，不鼓励使用可变数目的空格来对齐前面行的符号。\n\n### 4.6 空白\n\n#### 4.6.1 垂直空白\n\n以下情况需要使用一个空行：\n\n1. 类内连续的成员之间：字段，构造函数，方法，嵌套类，静态初始化块，实例初始化块。\n    - **例外**：两个连续字段之间的空行是可选的，用于字段的空行主要用来对字段进行逻辑分组。\n1. 在函数体内，语句的逻辑分组间使用空行。\n1. 类内的第一个成员前或最后一个成员后的空行是可选的(既不鼓励也不反对这样做，视个人喜好而定)。\n1. 要满足本文档中其他节的空行要求(比如3.3节：import语句)\n\n多个连续的空行是允许的，但没有必要这样做(我们也不鼓励这样做)。\n\n#### 4.6.2 水平空白\n\n除了语言需求和其它规则，并且除了文字，注释和Javadoc用到单个空格，单个ASCII空格也出现在以下几个地方：\n\n1. 分隔任何保留字与紧随其后的左括号(`(`)(如`if, for catch`等)。\n1. 分隔任何保留字与其前面的右大括号(`}`)(如`else, catch`)。\n1. 在任何左大括号前(`{`)，两个例外：\n    - `@SomeAnnotation({a, b})`(不使用空格)。\n    - `String[][] x = {{\"foo\"}};`(大括号间没有空格，见下面的Note)。\n1. 在任何二元或三元运算符的两侧。这也适用于以下“类运算符”符号：\n    - 类型界限中的&(`<T extends Foo & Bar>`)。\n    - catch块中的管道符号(`catch (FooException | BarException e`)。\n    - `foreach`语句中的分号。\n1. 在`, : ;`及右括号(`)`)后\n1. 如果在一条语句后做注释，则双斜杠(//)两边都要空格。这里可以允许多个空格，但没有必要。\n1. 类型和变量之间：List<String> list。\n1. 数组初始化中，大括号内的空格是可选的，即`new int[] {5, 6}`和`new int[] { 5, 6 }`都是可以的。\n\n>> Note：这个规则并不要求或禁止一行的开关或结尾需要额外的空格，只对内部空格做要求。\n\n#### 4.6.3 水平对齐：不做要求\n\n**术语说明**：水平对齐指的是通过增加可变数量的空格来使某一行的字符与上一行的相应字符对齐。\n\n这是允许的(而且在不少地方可以看到这样的代码)，但Google编程风格对此不做要求。即使对于已经使用水平对齐的代码，我们也不需要去保持这种风格。\n\n以下示例先展示未对齐的代码，然后是对齐的代码：\n\n\nprivate int x; // this is fine\nprivate Color color; // this too\n\nprivate int   x;      // permitted, but future edits\nprivate Color color;  // may leave it unaligned\n\n\n>> Tip：对齐可增加代码可读性，但它为日后的维护带来问题。考虑未来某个时候，我们需要修改一堆对齐的代码中的一行。\n这可能导致原本很漂亮的对齐代码变得错位。很可能它会提示你调整周围代码的空白来使这一堆代码重新水平对齐(比如程序员想保持这种水平对齐的风格)，\n这就会让你做许多的无用功，增加了reviewer的工作并且可能导致更多的合并冲突。\n\n### 4.7 用小括号来限定组：推荐\n\n除非作者和reviewer都认为去掉小括号也不会使代码被误解，或是去掉小括号能让代码更易于阅读，否则我们不应该去掉小括号。\n我们没有理由假设读者能记住整个Java运算符优先级表。\n\n### 4.8 具体结构\n\n#### 4.8.1 枚举类\n\n枚举常量间用逗号隔开，换行可选。\n\n没有方法和文档的枚举类可写成数组初始化的格式：\n\n\n\tprivate enum Suit { CLUBS, HEARTS, SPADES, DIAMONDS }\n\n\n由于枚举类也是一个类，因此所有适用于其它类的格式规则也适用于枚举类。\n\n#### 4.8.2 变量声明\n\n##### 4.8.2.1 每次只声明一个变量\n\n不要使用组合声明，比如`int a, b;`。\n\n##### 4.8.2.2 需要时才声明，并尽快进行初始化\n\n不要在一个代码块的开头把局部变量一次性都声明了(这是c语言的做法)，而是在第一次需要使用它时才声明。\n局部变量在声明时最好就进行初始化，或者声明后尽快进行初始化。\n\n#### 4.8.3 数组\n\n##### 4.8.3.1 数组初始化：可写成块状结构\n\n数组初始化可以写成块状结构，比如，下面的写法都是OK的：\n\n\n\tnew int[] {\n\t  0, 1, 2, 3\n\t}\n\t\n\tnew int[] {\n\t  0,\n\t  1,\n\t  2,\n\t  3\n\t}\n\t\n\tnew int[] {\n\t  0, 1,\n\t  2, 3\n\t}\n\t\n\tnew int[]\n\t    {0, 1, 2, 3}\n\n\n##### 4.8.3.2 非C风格的数组声明\n\n中括号是类型的一部分：`String[] args`， 而非`String args[]`。\n\n#### 4.8.4 switch语句\n\n**术语说明**：switch块的大括号内是一个或多个语句组。每个语句组包含一个或多个switch标签(`case FOO:`或`default:`)，后面跟着一条或多条语句。\n\n##### 4.8.4.1 缩进\n\n与其它块状结构一致，switch块中的内容缩进为2个空格。\n\n每个switch标签后新起一行，再缩进2个空格，写下一条或多条语句。\n\n##### 4.8.4.2 Fall-through：注释\n\n在一个switch块内，每个语句组要么通过`break, continue, return`或抛出异常来终止，要么通过一条注释来说明程序将继续执行到下一个语句组，\n任何能表达这个意思的注释都是OK的(典型的是用`// fall through`)。这个特殊的注释并不需要在最后一个语句组(一般是`default`)中出现。示例：\n\n\n\tswitch (input) {\n\t  case 1:\n\t  case 2:\n\t    prepareOneOrTwo();\n\t    // fall through\n\t  case 3:\n\t    handleOneTwoOrThree();\n\t    break;\n\t  default:\n\t    handleLargeNumber(input);\n\t}\n\n\n##### 4.8.4.3 default的情况要写出来\n\n每个switch语句都包含一个`default`语句组，即使它什么代码也不包含。\n\n#### 4.8.5 注解(Annotations)\n\n注解紧跟在文档块后面，应用于类、方法和构造函数，一个注解独占一行。这些换行不属于自动换行(第4.5节，自动换行)，因此缩进级别不变。例如：\n\n\t\n\t@Override\n\t@Nullable\n\tpublic String getNameIfPresent() { ... }\n\n\n**例外**：单个的注解可以和签名的第一行出现在同一行。例如：\n\n\t\n\t@Override public int hashCode() { ... }\n\n\n应用于字段的注解紧随文档块出现，应用于字段的多个注解允许与字段出现在同一行。例如：\n\n\n\t@Partial @Mock DataLoader loader;\n\n\n参数和局部变量注解没有特定规则。\n\n#### 4.8.6 注释\n\n##### 4.8.6.1 块注释风格\n\n块注释与其周围的代码在同一缩进级别。它们可以是`/* ... */`风格，也可以是`// ...`风格。对于多行的`/* ... */`注释，后续行必须从`*`开始，\n并且与前一行的`*`对齐。以下示例注释都是OK的。\n\n\t\n\t/*\n\t * This is          // And so           /* Or you can\n\t * okay.            // is this.          * even do this. */\n\t */\n\n\n注释不要封闭在由星号或其它字符绘制的框架里。\n\n>> Tip：在写多行注释时，如果你希望在必要时能重新换行(即注释像段落风格一样)，那么使用`/* ... */`。\n\n#### 4.8.7 Modifiers\n\n类和成员的modifiers如果存在，则按Java语言规范中推荐的顺序出现。\n\n\npublic protected private abstract static final transient volatile synchronized native strictfp\n\n\n## <a id=\"Naming\">命名约定</a>\n\n### 5.1 对所有标识符都通用的规则\n\n标识符只能使用ASCII字母和数字，因此每个有效的标识符名称都能匹配正则表达式`\\w+`。\n\n在Google其它编程语言风格中使用的特殊前缀或后缀，如`name_`, `mName`, `s_name`和`kName`，在Java编程风格中都不再使用。\n\n### 5.2 标识符类型的规则\n\n#### 5.2.1 包名\n\n包名全部小写，连续的单词只是简单地连接起来，不使用下划线。\n\n#### 5.2.2 类名\n\n类名都以`UpperCamelCase`风格编写。\n\n类名通常是名词或名词短语，接口名称有时可能是形容词或形容词短语。现在还没有特定的规则或行之有效的约定来命名注解类型。\n\n测试类的命名以它要测试的类的名称开始，以`Test`结束。例如，`HashTest`或`HashIntegrationTest`。\n\n#### 5.2.3 方法名\n\n方法名都以`lowerCamelCase`风格编写。\n\n方法名通常是动词或动词短语。\n\n下划线可能出现在JUnit测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：`test<MethodUnderTest>_<state>`，例如`testPop_emptyStack`。\n并不存在唯一正确的方式来命名测试方法。\n\n#### 5.2.4 常量名\n\n常量名命名模式为`CONSTANT_CASE`，全部字母大写，用下划线分隔单词。那，到底什么算是一个常量？\n\n每个常量都是一个静态final字段，但不是所有静态final字段都是常量。在决定一个字段是否是一个常量时，\n考虑它是否真的感觉像是一个常量。例如，如果任何一个该实例的观测状态是可变的，则它几乎肯定不会是一个常量。\n只是永远不`打算`改变对象一般是不够的，它要真的一直不变才能将它示为常量。\n\n\n\t// Constants\n\tstatic final int NUMBER = 5;\n\tstatic final ImmutableList<String> NAMES = ImmutableList.of(\"Ed\", \"Ann\");\n\tstatic final Joiner COMMA_JOINER = Joiner.on(',');  // because Joiner is immutable\n\tstatic final SomeMutableType[] EMPTY_ARRAY = {};\n\tenum SomeEnum { ENUM_CONSTANT }\n\t\n\t// Not constants\n\tstatic String nonFinal = \"non-final\";\n\tfinal String nonStatic = \"non-static\";\n\tstatic final Set<String> mutableCollection = new HashSet<String>();\n\tstatic final ImmutableSet<SomeMutableType> mutableElements = ImmutableSet.of(mutable);\n\tstatic final Logger logger = Logger.getLogger(MyClass.getName());\n\tstatic final String[] nonEmptyArray = {\"these\", \"can\", \"change\"};\n\n\n这些名字通常是名词或名词短语。\n\n#### 5.2.5 非常量字段名\n\n非常量字段名以`lowerCamelCase`风格编写。\n\n这些名字通常是名词或名词短语。\n\n#### 5.2.6 参数名\n\n参数名以`lowerCamelCase`风格编写。\n\n参数应该避免用单个字符命名。\n\n#### 5.2.7 局部变量名\n\n局部变量名以`lowerCamelCase`风格编写，比起其它类型的名称，局部变量名可以有更为宽松的缩写。\n\n虽然缩写更宽松，但还是要避免用单字符进行命名，除了临时变量和循环变量。\n\n即使局部变量是final和不可改变的，也不应该把它示为常量，自然也不能用常量的规则去命名它。\n\n#### 5.2.8 类型变量名\n\n类型变量可用以下两种风格之一进行命名：\n\n* 单个的大写字母，后面可以跟一个数字(如：E, T, X, T2)。\n* 以类命名方式(5.2.2节)，后面加个大写的T(如：RequestT, FooBarT)。\n\n### 5.3 驼峰式命名法(CamelCase)\n\n[驼峰式命名法](http://zh.wikipedia.org/wiki/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB)分大驼峰式命名法(`UpperCamelCase`)和小驼峰式命名法(`lowerCamelCase`)。\n有时，我们有不只一种合理的方式将一个英语词组转换成驼峰形式，如缩略语或不寻常的结构(例如\"IPv6\"或\"iOS\")。Google指定了以下的转换方案。\n\n名字从`散文形式`(prose form)开始:\n\n1. 把短语转换为纯ASCII码，并且移除任何单引号。例如：\"Müller's algorithm\"将变成\"Muellers algorithm\"。\n1. 把这个结果切分成单词，在空格或其它标点符号(通常是连字符)处分割开。\n    - 推荐：如果某个单词已经有了常用的驼峰表示形式，按它的组成将它分割开(如\"AdWords\"将分割成\"ad words\")。\n    需要注意的是\"iOS\"并不是一个真正的驼峰表示形式，因此该推荐对它并不适用。\n1. 现在将所有字母都小写(包括缩写)，然后将单词的第一个字母大写：\n    - 每个单词的第一个字母都大写，来得到大驼峰式命名。\n    - 除了第一个单词，每个单词的第一个字母都大写，来得到小驼峰式命名。\n1. 最后将所有的单词连接起来得到一个标识符。\n\n示例：\n\n    Prose form                Correct               Incorrect\n    ------------------------------------------------------------------\n    \"XML HTTP request\"        XmlHttpRequest        XMLHTTPRequest\n    \"new customer ID\"         newCustomerId         newCustomerID\n    \"inner stopwatch\"         innerStopwatch        innerStopWatch\n    \"supports IPv6 on iOS?\"   supportsIpv6OnIos     supportsIPv6OnIOS\n    \"YouTube importer\"        YouTubeImporter\n                              YoutubeImporter*\n\n加星号处表示可以，但不推荐。\n\n>> Note：在英语中，某些带有连字符的单词形式不唯一。例如：\"nonempty\"和\"non-empty\"都是正确的，因此方法名`checkNonempty`和`checkNonEmpty`也都是正确的。\n\n## <a id=\"Practice\">编程实践</a>\n\n### 6.1 @Override：能用则用\n\n只要是合法的，就把`@Override`注解给用上。\n\n### 6.2 捕获的异常：不能忽视\n\n除了下面的例子，对捕获的异常不做响应是极少正确的。(典型的响应方式是打印日志，或者如果它被认为是不可能的，则把它当作一个`AssertionError`重新抛出。)\n\n如果它确实是不需要在catch块中做任何响应，需要做注释加以说明(如下面的例子)。\n\n\t\n\ttry {\n\t  int i = Integer.parseInt(response);\n\t  return handleNumericResponse(i);\n\t} catch (NumberFormatException ok) {\n\t  // it's not numeric; that's fine, just continue\n\t}\n\treturn handleTextResponse(response);\n\n\n**例外**：在测试中，如果一个捕获的异常被命名为`expected`，则它可以被不加注释地忽略。下面是一种非常常见的情形，用以确保所测试的方法会抛出一个期望中的异常，\n因此在这里就没有必要加注释。\n\n\n\ttry {\n\t  emptyStack.pop();\n\t  fail();\n\t} catch (NoSuchElementException expected) {\n\t}\n\n\n### 6.3 静态成员：使用类进行调用\n\n使用类名调用静态的类成员，而不是具体某个对象或表达式。\n\n\t\n\tFoo aFoo = ...;\n\tFoo.aStaticMethod(); // good\n\taFoo.aStaticMethod(); // bad\n\tsomethingThatYieldsAFoo().aStaticMethod(); // very bad\n\n\n### 6.4 Finalizers: 禁用\n\n极少会去重载`Object.finalize`。\n\n>> Tip：不要使用finalize。如果你非要使用它，请先仔细阅读和理解[Effective Java](http://books.google.com/books?isbn=8131726592)\n第7条款：“Avoid Finalizers”，然后不要使用它。\n\n## <a id=\"Javadoc\">Javadoc</a>\n\n### 7.1 格式\n\n#### 7.1.1 一般形式\n\nJavadoc块的基本格式如下所示：\n\n\t\n\t/**\n\t * Multiple lines of Javadoc text are written here,\n\t * wrapped normally...\n\t */\n\tpublic int method(String p1) { ... }\n\n\n或者是以下单行形式：\n\n\n\t/** An especially short bit of Javadoc. */\n\n\n基本格式总是OK的。当整个Javadoc块能容纳于一行时(且没有Javadoc标记@XXX)，可以使用单行形式。\n\n#### 7.1.2 段落\n\n空行(即，只包含最左侧星号的行)会出现在段落之间和Javadoc标记(@XXX)之前(如果有的话)。\n除了第一个段落，每个段落第一个单词前都有标签`<p>`，并且它和第一个单词间没有空格。\n\n#### 7.1.3 Javadoc标记\n\n标准的Javadoc标记按以下顺序出现：`@param`, `@return`, `@throws`, `@deprecated`, 前面这4种标记如果出现，描述都不能为空。\n当描述无法在一行中容纳，连续行需要至少再缩进4个空格。\n\n### 7.2 摘要片段\n\n每个类或成员的Javadoc以一个简短的摘要片段开始。这个片段是非常重要的，在某些情况下，它是唯一出现的文本，比如在类和方法索引中。\n\n这只是一个小片段，可以是一个名词短语或动词短语，但不是一个完整的句子。它不会以`A {@code Foo} is a...`或`This method returns...`开头,\n它也不会是一个完整的祈使句，如`Save the record...`。然而，由于开头大写及被加了标点，它看起来就像是个完整的句子。\n\n>> Tip：一个常见的错误是把简单的Javadoc写成`/** @return the customer ID */`，这是不正确的。它应该写成`/** Returns the customer ID. */`。\n\n### 7.3 哪里需要使用Javadoc\n\n至少在每个public类及它的每个public和protected成员处使用Javadoc，以下是一些例外：\n\n#### 7.3.1 例外：不言自明的方法\n\n对于简单明显的方法如`getFoo`，Javadoc是可选的(即，是可以不写的)。这种情况下除了写“Returns the foo”，确实也没有什么值得写了。\n\n单元测试类中的测试方法可能是不言自明的最常见例子了，我们通常可以从这些方法的描述性命名中知道它是干什么的，因此不需要额外的文档说明。\n\n>> Tip：如果有一些相关信息是需要读者了解的，那么以上的例外不应作为忽视这些信息的理由。例如，对于方法名`getCanonicalName`，\n就不应该忽视文档说明，因为读者很可能不知道词语`canonical name`指的是什么。\n\n#### 7.3.2 例外：重载\n\n如果一个方法重载了超类中的方法，那么Javadoc并非必需的。\n\n#### 7.3.3 可选的Javadoc\n\n对于包外不可见的类和方法，如有需要，也是要使用Javadoc的。如果一个注释是用来定义一个类，方法，字段的整体目的或行为，\n那么这个注释应该写成Javadoc，这样更统一更友好。\n\n## <a id=\"End\">后记</a>\n\n本文档翻译自[Google Java Style](http://google-styleguide.googlecode.com/svn/trunk/javaguide.html)，\n译者[@Hawstein](http://weibo.com/hawstein)。\n\n## 补充\n\ncheckstyle https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml\n","slug":"google-java-style","published":1,"updated":"2018-04-01T16:53:17.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2kshn002vp0ugtl71o3rv","content":"<p>作者：Hawstein</p>\n<p>出处：<a href=\"http://hawstein.com/posts/google-java-style.html\" target=\"_blank\" rel=\"noopener\">http://hawstein.com/posts/google-java-style.html</a></p>\n<p>转载说明：N个月前看到<a href=\"http://google-styleguide.googlecode.com/svn/trunk/javaguide.html\" target=\"_blank\" rel=\"noopener\">Google Java Style</a>,大致扫了下，自认为命名都比较规范了。今天在整理依赖时，看到junit最新版本的release note中提到junit的代码按照<a href=\"http://google-styleguide.googlecode.com/svn/trunk/javaguide.html\" target=\"_blank\" rel=\"noopener\">Google Java Style</a> fix了一遍。无意中感觉可能我也做得不够好，仔细看看文档，发现有个地方写的非常明确，值得参考。转载这篇中文翻译文章方便大家查看。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#Intro\">前言</a></li>\n<li><a href=\"#SFBasic\">源文件基础</a></li>\n<li><a href=\"#SFStruct\">源文件结构</a></li>\n<li><a href=\"#Format\">格式</a></li>\n<li><a href=\"#Naming\">命名约定</a></li>\n<li><a href=\"#Practice\">编程实践</a></li>\n<li><a href=\"#Javadoc\">Javadoc</a></li>\n<li><a href=\"#End\">后记</a></li>\n</ol>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><a id=\"Intro\">前言</a></h2><p>这份文档是Google Java编程风格规范的完整定义。当且仅当一个Java源文件符合此文档中的规则，<br>我们才认为它符合Google的Java编程风格。</p>\n<p>与其它的编程风格指南一样，这里所讨论的不仅仅是编码格式美不美观的问题，<br>同时也讨论一些约定及编码标准。然而，这份文档主要侧重于我们所普遍遵循的规则，<br>对于那些不是明确强制要求的，我们尽量避免提供意见。</p>\n<h3 id=\"1-1-术语说明\"><a href=\"#1-1-术语说明\" class=\"headerlink\" title=\"1.1 术语说明\"></a>1.1 术语说明</h3><p>在本文档中，除非另有说明：</p>\n<ol>\n<li>术语class可表示一个普通类，枚举类，接口或是annotation类型(<code>@interface</code>)</li>\n<li>术语comment只用来指代实现的注释(implementation comments)，我们不使用“documentation comments”一词，而是用Javadoc。</li>\n</ol>\n<p>其他的术语说明会偶尔在后面的文档出现。</p>\n<h3 id=\"1-2-指南说明\"><a href=\"#1-2-指南说明\" class=\"headerlink\" title=\"1.2 指南说明\"></a>1.2 指南说明</h3><p>本文档中的示例代码并不作为规范。也就是说，虽然示例代码是遵循Google编程风格，但并不意味着这是展现这些代码的唯一方式。<br>示例中的格式选择不应该被强制定为规则。</p>\n<h2 id=\"源文件基础\"><a href=\"#源文件基础\" class=\"headerlink\" title=\"源文件基础\"></a><a id=\"SFBasic\">源文件基础</a></h2><h3 id=\"2-1-文件名\"><a href=\"#2-1-文件名\" class=\"headerlink\" title=\"2.1 文件名\"></a>2.1 文件名</h3><p>源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为<code>.java</code>。</p>\n<h3 id=\"2-2-文件编码：UTF-8\"><a href=\"#2-2-文件编码：UTF-8\" class=\"headerlink\" title=\"2.2 文件编码：UTF-8\"></a>2.2 文件编码：UTF-8</h3><p>源文件编码格式为UTF-8。</p>\n<h3 id=\"2-3-特殊字符\"><a href=\"#2-3-特殊字符\" class=\"headerlink\" title=\"2.3 特殊字符\"></a>2.3 特殊字符</h3><h4 id=\"2-3-1-空白字符\"><a href=\"#2-3-1-空白字符\" class=\"headerlink\" title=\"2.3.1 空白字符\"></a>2.3.1 空白字符</h4><p>除了行结束符序列，ASCII水平空格字符(0x20，即空格)是源文件中唯一允许出现的空白字符，这意味着：</p>\n<ol>\n<li>所有其它字符串中的空白字符都要进行转义。</li>\n<li>制表符不用于缩进。</li>\n</ol>\n<h4 id=\"2-3-2-特殊转义序列\"><a href=\"#2-3-2-特殊转义序列\" class=\"headerlink\" title=\"2.3.2 特殊转义序列\"></a>2.3.2 特殊转义序列</h4><p>对于具有特殊<a href=\"http://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97\" target=\"_blank\" rel=\"noopener\">转义序列</a>的任何字符(\\b, \\t, \\n, \\f, \\r, \\”, \\’及\\)，我们使用它的转义序列，而不是相应的八进制(比如<code>\\012</code>)或Unicode(比如<code>\\u000a</code>)转义。</p>\n<h4 id=\"2-3-3-非ASCII字符\"><a href=\"#2-3-3-非ASCII字符\" class=\"headerlink\" title=\"2.3.3 非ASCII字符\"></a>2.3.3 非ASCII字符</h4><p>对于剩余的非ASCII字符，是使用实际的Unicode字符(比如∞)，还是使用等价的Unicode转义符(比如\\u221e)，取决于哪个能让代码更易于阅读和理解。</p>\n<blockquote>\n<blockquote>\n<p>Tip: 在使用Unicode转义符或是一些实际的Unicode字符时，建议做些注释给出解释，这有助于别人阅读和理解。</p>\n</blockquote>\n</blockquote>\n<p>例如：</p>\n<pre><code>String unitAbbrev = &quot;μs&quot;;                                 | 赞，即使没有注释也非常清晰\nString unitAbbrev = &quot;\\u03bcs&quot;; // &quot;μs&quot;                    | 允许，但没有理由要这样做\nString unitAbbrev = &quot;\\u03bcs&quot;; // Greek letter mu, &quot;s&quot;    | 允许，但这样做显得笨拙还容易出错\nString unitAbbrev = &quot;\\u03bcs&quot;;                            | 很糟，读者根本看不出这是什么\nreturn &apos;\\ufeff&apos; + content; // byte order mark             | Good，对于非打印字符，使用转义，并在必要时写上注释\n</code></pre><blockquote>\n<blockquote>\n<p>Tip: 永远不要由于害怕某些程序可能无法正确处理非ASCII字符而让你的代码可读性变差。当程序无法正确处理非ASCII字符时，它自然无法正确运行，<br>你就会去fix这些问题的了。(言下之意就是大胆去用非ASCII字符，如果真的有需要的话)</p>\n</blockquote>\n</blockquote>\n<h2 id=\"源文件结构\"><a href=\"#源文件结构\" class=\"headerlink\" title=\"源文件结构\"></a><a id=\"SFStruct\">源文件结构</a></h2><p>一个源文件包含(按顺序地)：</p>\n<ol>\n<li>许可证或版权信息(如有需要)</li>\n<li>package语句</li>\n<li>import语句</li>\n<li>一个顶级类(<strong>只有一个</strong>)</li>\n</ol>\n<p>以上每个部分之间用一个空行隔开。</p>\n<h3 id=\"3-1-许可证或版权信息\"><a href=\"#3-1-许可证或版权信息\" class=\"headerlink\" title=\"3.1 许可证或版权信息\"></a>3.1 许可证或版权信息</h3><p>如果一个文件包含许可证或版权信息，那么它应当被放在文件最前面。</p>\n<h3 id=\"3-2-package语句\"><a href=\"#3-2-package语句\" class=\"headerlink\" title=\"3.2 package语句\"></a>3.2 package语句</h3><p>package语句不换行，列限制(4.4节)并不适用于package语句。(即package语句写在一行里)</p>\n<h3 id=\"3-3-import语句\"><a href=\"#3-3-import语句\" class=\"headerlink\" title=\"3.3 import语句\"></a>3.3 import语句</h3><h4 id=\"3-3-1-import不要使用通配符\"><a href=\"#3-3-1-import不要使用通配符\" class=\"headerlink\" title=\"3.3.1 import不要使用通配符\"></a>3.3.1 import不要使用通配符</h4><p>即，不要出现类似这样的import语句：<code>import java.util.*;</code></p>\n<h4 id=\"3-3-2-不要换行\"><a href=\"#3-3-2-不要换行\" class=\"headerlink\" title=\"3.3.2 不要换行\"></a>3.3.2 不要换行</h4><p>import语句不换行，列限制(4.4节)并不适用于import语句。(每个import语句独立成行)</p>\n<h4 id=\"3-3-3-顺序和间距\"><a href=\"#3-3-3-顺序和间距\" class=\"headerlink\" title=\"3.3.3 顺序和间距\"></a>3.3.3 顺序和间距</h4><p>import语句可分为以下几组，按照这个顺序，每组由一个空行分隔：</p>\n<ol>\n<li>所有的静态导入独立成组</li>\n<li><code>com.google</code> imports(仅当这个源文件是在<code>com.google</code>包下)</li>\n<li>第三方的包。每个顶级包为一组，字典序。例如：android, com, junit, org, sun</li>\n<li><code>java</code> imports</li>\n<li><code>javax</code> imports</li>\n</ol>\n<p>组内不空行，按字典序排列。</p>\n<h3 id=\"3-4-类声明\"><a href=\"#3-4-类声明\" class=\"headerlink\" title=\"3.4 类声明\"></a>3.4 类声明</h3><h4 id=\"3-4-1-只有一个顶级类声明\"><a href=\"#3-4-1-只有一个顶级类声明\" class=\"headerlink\" title=\"3.4.1 只有一个顶级类声明\"></a>3.4.1 只有一个顶级类声明</h4><p>每个顶级类都在一个与它同名的源文件中(当然，还包含<code>.java</code>后缀)。</p>\n<p>例外：<code>package-info.java</code>，该文件中可没有<code>package-info</code>类。</p>\n<h4 id=\"3-4-2-类成员顺序\"><a href=\"#3-4-2-类成员顺序\" class=\"headerlink\" title=\"3.4.2 类成员顺序\"></a>3.4.2 类成员顺序</h4><p>类的成员顺序对易学性有很大的影响，但这也不存在唯一的通用法则。不同的类对成员的排序可能是不同的。<br>最重要的一点，每个类应该以某种逻辑去排序它的成员，维护者应该要能解释这种排序逻辑。比如，<br>新的方法不能总是习惯性地添加到类的结尾，因为这样就是按时间顺序而非某种逻辑来排序的。</p>\n<h5 id=\"3-4-2-1-重载：永不分离\"><a href=\"#3-4-2-1-重载：永不分离\" class=\"headerlink\" title=\"3.4.2.1 重载：永不分离\"></a>3.4.2.1 重载：永不分离</h5><p>当一个类有多个构造函数，或是多个同名方法，这些函数/方法应该按顺序出现在一起，中间不要放进其它函数/方法。</p>\n<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a><a id=\"Format\">格式</a></h2><p><strong>术语说明</strong>：块状结构(block-like construct)指的是一个类，方法或构造函数的主体。需要注意的是，数组初始化中的初始值可被选择性地视为块状结构(4.8.3.1节)。</p>\n<h3 id=\"4-1-大括号\"><a href=\"#4-1-大括号\" class=\"headerlink\" title=\"4.1 大括号\"></a>4.1 大括号</h3><h4 id=\"4-1-1-使用大括号-即使是可选的\"><a href=\"#4-1-1-使用大括号-即使是可选的\" class=\"headerlink\" title=\"4.1.1 使用大括号(即使是可选的)\"></a>4.1.1 使用大括号(即使是可选的)</h4><p>大括号与<code>if, else, for, do, while</code>语句一起使用，即使只有一条语句(或是空)，也应该把大括号写上。</p>\n<h4 id=\"4-1-2-非空块：K-amp-R-风格\"><a href=\"#4-1-2-非空块：K-amp-R-风格\" class=\"headerlink\" title=\"4.1.2 非空块：K &amp; R 风格\"></a>4.1.2 非空块：K &amp; R 风格</h4><p>对于非空块和块状结构，大括号遵循Kernighan和Ritchie风格<br>(<a href=\"http://www.codinghorror.com/blog/2012/07/new-programming-jargon.html\" target=\"_blank\" rel=\"noopener\">Egyptian brackets</a>):</p>\n<ul>\n<li>左大括号前不换行</li>\n<li>左大括号后换行</li>\n<li>右大括号前换行</li>\n<li>如果右大括号是一个语句、函数体或类的终止，则右大括号后换行; 否则不换行。例如，如果右大括号后面是else或逗号，则不换行。</li>\n</ul>\n<p>示例：</p>\n<pre><code>return new MyClass() {\n  @Override public void method() {\n    if (condition()) {\n      try {\n        something();\n      } catch (ProblemException e) {\n        recover();\n      }\n    }\n  }\n};\n</code></pre><p>4.8.1节给出了enum类的一些例外。</p>\n<h4 id=\"4-1-3-空块：可以用简洁版本\"><a href=\"#4-1-3-空块：可以用简洁版本\" class=\"headerlink\" title=\"4.1.3 空块：可以用简洁版本\"></a>4.1.3 空块：可以用简洁版本</h4><p>一个空的块状结构里什么也不包含，大括号可以简洁地写成<code>{}</code>，不需要换行。例外：如果它是一个多块语句的一部分(if/else 或 try/catch/finally)<br>，即使大括号内没内容，右大括号也要换行。</p>\n<p>示例：</p>\n<pre><code>void doNothing() {}\n</code></pre><h3 id=\"4-2-块缩进：2个空格\"><a href=\"#4-2-块缩进：2个空格\" class=\"headerlink\" title=\"4.2 块缩进：2个空格\"></a>4.2 块缩进：2个空格</h3><p>每当开始一个新的块，缩进增加2个空格，当块结束时，缩进返回先前的缩进级别。缩进级别适用于代码和注释。(见4.1.2节中的代码示例)</p>\n<h3 id=\"4-3-一行一个语句\"><a href=\"#4-3-一行一个语句\" class=\"headerlink\" title=\"4.3 一行一个语句\"></a>4.3 一行一个语句</h3><p>每个语句后要换行。</p>\n<h3 id=\"4-4-列限制：80或100\"><a href=\"#4-4-列限制：80或100\" class=\"headerlink\" title=\"4.4 列限制：80或100\"></a>4.4 列限制：80或100</h3><p>一个项目可以选择一行80个字符或100个字符的列限制，除了下述例外，任何一行如果超过这个字符数限制，必须自动换行。</p>\n<p>例外：</p>\n<ol>\n<li>不可能满足列限制的行(例如，Javadoc中的一个长URL，或是一个长的JSNI方法参考)。</li>\n<li><code>package</code>和<code>import</code>语句(见3.2节和3.3节)。</li>\n<li>注释中那些可能被剪切并粘贴到shell中的命令行。</li>\n</ol>\n<h3 id=\"4-5-自动换行\"><a href=\"#4-5-自动换行\" class=\"headerlink\" title=\"4.5 自动换行\"></a>4.5 自动换行</h3><p><strong>术语说明</strong>：一般情况下，一行长代码为了避免超出列限制(80或100个字符)而被分为多行，我们称之为自动换行(line-wrapping)。</p>\n<p>我们并没有全面，确定性的准则来决定在每一种情况下如何自动换行。很多时候，对于同一段代码会有好几种有效的自动换行方式。</p>\n<blockquote>\n<blockquote>\n<p>Tip: 提取方法或局部变量可以在不换行的情况下解决代码过长的问题(是合理缩短命名长度吧)</p>\n</blockquote>\n</blockquote>\n<h4 id=\"4-5-1-从哪里断开\"><a href=\"#4-5-1-从哪里断开\" class=\"headerlink\" title=\"4.5.1 从哪里断开\"></a>4.5.1 从哪里断开</h4><p>自动换行的基本准则是：更倾向于在更高的语法级别处断开。</p>\n<ol>\n<li>如果在<code>非赋值运算符</code>处断开，那么在该符号前断开(比如+，它将位于下一行)。注意：这一点与Google其它语言的编程风格不同(如C++和JavaScript)。<br>这条规则也适用于以下“类运算符”符号：点分隔符(.)，类型界限中的&amp;（<code>&lt;T extends Foo &amp; Bar&gt;</code>)，catch块中的管道符号(<code>catch (FooException | BarException e</code>)</li>\n<li>如果在<code>赋值运算符</code>处断开，通常的做法是在该符号后断开(比如=，它与前面的内容留在同一行)。这条规则也适用于<code>foreach</code>语句中的分号。</li>\n<li>方法名或构造函数名与左括号留在同一行。</li>\n<li>逗号(,)与其前面的内容留在同一行。</li>\n</ol>\n<h4 id=\"4-5-2-自动换行时缩进至少-4个空格\"><a href=\"#4-5-2-自动换行时缩进至少-4个空格\" class=\"headerlink\" title=\"4.5.2 自动换行时缩进至少+4个空格\"></a>4.5.2 自动换行时缩进至少+4个空格</h4><p>自动换行时，第一行后的每一行至少比第一行多缩进4个空格(注意：制表符不用于缩进。见2.3.1节)。</p>\n<p>当存在连续自动换行时，缩进可能会多缩进不只4个空格(语法元素存在多级时)。一般而言，两个连续行使用相同的缩进当且仅当它们开始于同级语法元素。</p>\n<p>第4.6.3水平对齐一节中指出，不鼓励使用可变数目的空格来对齐前面行的符号。</p>\n<h3 id=\"4-6-空白\"><a href=\"#4-6-空白\" class=\"headerlink\" title=\"4.6 空白\"></a>4.6 空白</h3><h4 id=\"4-6-1-垂直空白\"><a href=\"#4-6-1-垂直空白\" class=\"headerlink\" title=\"4.6.1 垂直空白\"></a>4.6.1 垂直空白</h4><p>以下情况需要使用一个空行：</p>\n<ol>\n<li>类内连续的成员之间：字段，构造函数，方法，嵌套类，静态初始化块，实例初始化块。<ul>\n<li><strong>例外</strong>：两个连续字段之间的空行是可选的，用于字段的空行主要用来对字段进行逻辑分组。</li>\n</ul>\n</li>\n<li>在函数体内，语句的逻辑分组间使用空行。</li>\n<li>类内的第一个成员前或最后一个成员后的空行是可选的(既不鼓励也不反对这样做，视个人喜好而定)。</li>\n<li>要满足本文档中其他节的空行要求(比如3.3节：import语句)</li>\n</ol>\n<p>多个连续的空行是允许的，但没有必要这样做(我们也不鼓励这样做)。</p>\n<h4 id=\"4-6-2-水平空白\"><a href=\"#4-6-2-水平空白\" class=\"headerlink\" title=\"4.6.2 水平空白\"></a>4.6.2 水平空白</h4><p>除了语言需求和其它规则，并且除了文字，注释和Javadoc用到单个空格，单个ASCII空格也出现在以下几个地方：</p>\n<ol>\n<li>分隔任何保留字与紧随其后的左括号(<code>(</code>)(如<code>if, for catch</code>等)。</li>\n<li>分隔任何保留字与其前面的右大括号(<code>}</code>)(如<code>else, catch</code>)。</li>\n<li>在任何左大括号前(<code>{</code>)，两个例外：<ul>\n<li><code>@SomeAnnotation({a, b})</code>(不使用空格)。</li>\n<li><code>String[][] x = foo;</code>(大括号间没有空格，见下面的Note)。</li>\n</ul>\n</li>\n<li>在任何二元或三元运算符的两侧。这也适用于以下“类运算符”符号：<ul>\n<li>类型界限中的&amp;(<code>&lt;T extends Foo &amp; Bar&gt;</code>)。</li>\n<li>catch块中的管道符号(<code>catch (FooException | BarException e</code>)。</li>\n<li><code>foreach</code>语句中的分号。</li>\n</ul>\n</li>\n<li>在<code>, : ;</code>及右括号(<code>)</code>)后</li>\n<li>如果在一条语句后做注释，则双斜杠(//)两边都要空格。这里可以允许多个空格，但没有必要。</li>\n<li>类型和变量之间：List<string> list。</string></li>\n<li>数组初始化中，大括号内的空格是可选的，即<code>new int[] {5, 6}</code>和<code>new int[] { 5, 6 }</code>都是可以的。</li>\n</ol>\n<blockquote>\n<blockquote>\n<p>Note：这个规则并不要求或禁止一行的开关或结尾需要额外的空格，只对内部空格做要求。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"4-6-3-水平对齐：不做要求\"><a href=\"#4-6-3-水平对齐：不做要求\" class=\"headerlink\" title=\"4.6.3 水平对齐：不做要求\"></a>4.6.3 水平对齐：不做要求</h4><p><strong>术语说明</strong>：水平对齐指的是通过增加可变数量的空格来使某一行的字符与上一行的相应字符对齐。</p>\n<p>这是允许的(而且在不少地方可以看到这样的代码)，但Google编程风格对此不做要求。即使对于已经使用水平对齐的代码，我们也不需要去保持这种风格。</p>\n<p>以下示例先展示未对齐的代码，然后是对齐的代码：</p>\n<p>private int x; // this is fine<br>private Color color; // this too</p>\n<p>private int   x;      // permitted, but future edits<br>private Color color;  // may leave it unaligned</p>\n<blockquote>\n<blockquote>\n<p>Tip：对齐可增加代码可读性，但它为日后的维护带来问题。考虑未来某个时候，我们需要修改一堆对齐的代码中的一行。<br>这可能导致原本很漂亮的对齐代码变得错位。很可能它会提示你调整周围代码的空白来使这一堆代码重新水平对齐(比如程序员想保持这种水平对齐的风格)，<br>这就会让你做许多的无用功，增加了reviewer的工作并且可能导致更多的合并冲突。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"4-7-用小括号来限定组：推荐\"><a href=\"#4-7-用小括号来限定组：推荐\" class=\"headerlink\" title=\"4.7 用小括号来限定组：推荐\"></a>4.7 用小括号来限定组：推荐</h3><p>除非作者和reviewer都认为去掉小括号也不会使代码被误解，或是去掉小括号能让代码更易于阅读，否则我们不应该去掉小括号。<br>我们没有理由假设读者能记住整个Java运算符优先级表。</p>\n<h3 id=\"4-8-具体结构\"><a href=\"#4-8-具体结构\" class=\"headerlink\" title=\"4.8 具体结构\"></a>4.8 具体结构</h3><h4 id=\"4-8-1-枚举类\"><a href=\"#4-8-1-枚举类\" class=\"headerlink\" title=\"4.8.1 枚举类\"></a>4.8.1 枚举类</h4><p>枚举常量间用逗号隔开，换行可选。</p>\n<p>没有方法和文档的枚举类可写成数组初始化的格式：</p>\n<pre><code>private enum Suit { CLUBS, HEARTS, SPADES, DIAMONDS }\n</code></pre><p>由于枚举类也是一个类，因此所有适用于其它类的格式规则也适用于枚举类。</p>\n<h4 id=\"4-8-2-变量声明\"><a href=\"#4-8-2-变量声明\" class=\"headerlink\" title=\"4.8.2 变量声明\"></a>4.8.2 变量声明</h4><h5 id=\"4-8-2-1-每次只声明一个变量\"><a href=\"#4-8-2-1-每次只声明一个变量\" class=\"headerlink\" title=\"4.8.2.1 每次只声明一个变量\"></a>4.8.2.1 每次只声明一个变量</h5><p>不要使用组合声明，比如<code>int a, b;</code>。</p>\n<h5 id=\"4-8-2-2-需要时才声明，并尽快进行初始化\"><a href=\"#4-8-2-2-需要时才声明，并尽快进行初始化\" class=\"headerlink\" title=\"4.8.2.2 需要时才声明，并尽快进行初始化\"></a>4.8.2.2 需要时才声明，并尽快进行初始化</h5><p>不要在一个代码块的开头把局部变量一次性都声明了(这是c语言的做法)，而是在第一次需要使用它时才声明。<br>局部变量在声明时最好就进行初始化，或者声明后尽快进行初始化。</p>\n<h4 id=\"4-8-3-数组\"><a href=\"#4-8-3-数组\" class=\"headerlink\" title=\"4.8.3 数组\"></a>4.8.3 数组</h4><h5 id=\"4-8-3-1-数组初始化：可写成块状结构\"><a href=\"#4-8-3-1-数组初始化：可写成块状结构\" class=\"headerlink\" title=\"4.8.3.1 数组初始化：可写成块状结构\"></a>4.8.3.1 数组初始化：可写成块状结构</h5><p>数组初始化可以写成块状结构，比如，下面的写法都是OK的：</p>\n<pre><code>new int[] {\n  0, 1, 2, 3\n}\n\nnew int[] {\n  0,\n  1,\n  2,\n  3\n}\n\nnew int[] {\n  0, 1,\n  2, 3\n}\n\nnew int[]\n    {0, 1, 2, 3}\n</code></pre><h5 id=\"4-8-3-2-非C风格的数组声明\"><a href=\"#4-8-3-2-非C风格的数组声明\" class=\"headerlink\" title=\"4.8.3.2 非C风格的数组声明\"></a>4.8.3.2 非C风格的数组声明</h5><p>中括号是类型的一部分：<code>String[] args</code>， 而非<code>String args[]</code>。</p>\n<h4 id=\"4-8-4-switch语句\"><a href=\"#4-8-4-switch语句\" class=\"headerlink\" title=\"4.8.4 switch语句\"></a>4.8.4 switch语句</h4><p><strong>术语说明</strong>：switch块的大括号内是一个或多个语句组。每个语句组包含一个或多个switch标签(<code>case FOO:</code>或<code>default:</code>)，后面跟着一条或多条语句。</p>\n<h5 id=\"4-8-4-1-缩进\"><a href=\"#4-8-4-1-缩进\" class=\"headerlink\" title=\"4.8.4.1 缩进\"></a>4.8.4.1 缩进</h5><p>与其它块状结构一致，switch块中的内容缩进为2个空格。</p>\n<p>每个switch标签后新起一行，再缩进2个空格，写下一条或多条语句。</p>\n<h5 id=\"4-8-4-2-Fall-through：注释\"><a href=\"#4-8-4-2-Fall-through：注释\" class=\"headerlink\" title=\"4.8.4.2 Fall-through：注释\"></a>4.8.4.2 Fall-through：注释</h5><p>在一个switch块内，每个语句组要么通过<code>break, continue, return</code>或抛出异常来终止，要么通过一条注释来说明程序将继续执行到下一个语句组，<br>任何能表达这个意思的注释都是OK的(典型的是用<code>// fall through</code>)。这个特殊的注释并不需要在最后一个语句组(一般是<code>default</code>)中出现。示例：</p>\n<pre><code>switch (input) {\n  case 1:\n  case 2:\n    prepareOneOrTwo();\n    // fall through\n  case 3:\n    handleOneTwoOrThree();\n    break;\n  default:\n    handleLargeNumber(input);\n}\n</code></pre><h5 id=\"4-8-4-3-default的情况要写出来\"><a href=\"#4-8-4-3-default的情况要写出来\" class=\"headerlink\" title=\"4.8.4.3 default的情况要写出来\"></a>4.8.4.3 default的情况要写出来</h5><p>每个switch语句都包含一个<code>default</code>语句组，即使它什么代码也不包含。</p>\n<h4 id=\"4-8-5-注解-Annotations\"><a href=\"#4-8-5-注解-Annotations\" class=\"headerlink\" title=\"4.8.5 注解(Annotations)\"></a>4.8.5 注解(Annotations)</h4><p>注解紧跟在文档块后面，应用于类、方法和构造函数，一个注解独占一行。这些换行不属于自动换行(第4.5节，自动换行)，因此缩进级别不变。例如：</p>\n<pre><code>@Override\n@Nullable\npublic String getNameIfPresent() { ... }\n</code></pre><p><strong>例外</strong>：单个的注解可以和签名的第一行出现在同一行。例如：</p>\n<pre><code>@Override public int hashCode() { ... }\n</code></pre><p>应用于字段的注解紧随文档块出现，应用于字段的多个注解允许与字段出现在同一行。例如：</p>\n<pre><code>@Partial @Mock DataLoader loader;\n</code></pre><p>参数和局部变量注解没有特定规则。</p>\n<h4 id=\"4-8-6-注释\"><a href=\"#4-8-6-注释\" class=\"headerlink\" title=\"4.8.6 注释\"></a>4.8.6 注释</h4><h5 id=\"4-8-6-1-块注释风格\"><a href=\"#4-8-6-1-块注释风格\" class=\"headerlink\" title=\"4.8.6.1 块注释风格\"></a>4.8.6.1 块注释风格</h5><p>块注释与其周围的代码在同一缩进级别。它们可以是<code>/* ... */</code>风格，也可以是<code>// ...</code>风格。对于多行的<code>/* ... */</code>注释，后续行必须从<code>*</code>开始，<br>并且与前一行的<code>*</code>对齐。以下示例注释都是OK的。</p>\n<pre><code>/*\n * This is          // And so           /* Or you can\n * okay.            // is this.          * even do this. */\n */\n</code></pre><p>注释不要封闭在由星号或其它字符绘制的框架里。</p>\n<blockquote>\n<blockquote>\n<p>Tip：在写多行注释时，如果你希望在必要时能重新换行(即注释像段落风格一样)，那么使用<code>/* ... */</code>。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"4-8-7-Modifiers\"><a href=\"#4-8-7-Modifiers\" class=\"headerlink\" title=\"4.8.7 Modifiers\"></a>4.8.7 Modifiers</h4><p>类和成员的modifiers如果存在，则按Java语言规范中推荐的顺序出现。</p>\n<p>public protected private abstract static final transient volatile synchronized native strictfp</p>\n<h2 id=\"命名约定\"><a href=\"#命名约定\" class=\"headerlink\" title=\"命名约定\"></a><a id=\"Naming\">命名约定</a></h2><h3 id=\"5-1-对所有标识符都通用的规则\"><a href=\"#5-1-对所有标识符都通用的规则\" class=\"headerlink\" title=\"5.1 对所有标识符都通用的规则\"></a>5.1 对所有标识符都通用的规则</h3><p>标识符只能使用ASCII字母和数字，因此每个有效的标识符名称都能匹配正则表达式<code>\\w+</code>。</p>\n<p>在Google其它编程语言风格中使用的特殊前缀或后缀，如<code>name_</code>, <code>mName</code>, <code>s_name</code>和<code>kName</code>，在Java编程风格中都不再使用。</p>\n<h3 id=\"5-2-标识符类型的规则\"><a href=\"#5-2-标识符类型的规则\" class=\"headerlink\" title=\"5.2 标识符类型的规则\"></a>5.2 标识符类型的规则</h3><h4 id=\"5-2-1-包名\"><a href=\"#5-2-1-包名\" class=\"headerlink\" title=\"5.2.1 包名\"></a>5.2.1 包名</h4><p>包名全部小写，连续的单词只是简单地连接起来，不使用下划线。</p>\n<h4 id=\"5-2-2-类名\"><a href=\"#5-2-2-类名\" class=\"headerlink\" title=\"5.2.2 类名\"></a>5.2.2 类名</h4><p>类名都以<code>UpperCamelCase</code>风格编写。</p>\n<p>类名通常是名词或名词短语，接口名称有时可能是形容词或形容词短语。现在还没有特定的规则或行之有效的约定来命名注解类型。</p>\n<p>测试类的命名以它要测试的类的名称开始，以<code>Test</code>结束。例如，<code>HashTest</code>或<code>HashIntegrationTest</code>。</p>\n<h4 id=\"5-2-3-方法名\"><a href=\"#5-2-3-方法名\" class=\"headerlink\" title=\"5.2.3 方法名\"></a>5.2.3 方法名</h4><p>方法名都以<code>lowerCamelCase</code>风格编写。</p>\n<p>方法名通常是动词或动词短语。</p>\n<p>下划线可能出现在JUnit测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：<code>test&lt;MethodUnderTest&gt;_&lt;state&gt;</code>，例如<code>testPop_emptyStack</code>。<br>并不存在唯一正确的方式来命名测试方法。</p>\n<h4 id=\"5-2-4-常量名\"><a href=\"#5-2-4-常量名\" class=\"headerlink\" title=\"5.2.4 常量名\"></a>5.2.4 常量名</h4><p>常量名命名模式为<code>CONSTANT_CASE</code>，全部字母大写，用下划线分隔单词。那，到底什么算是一个常量？</p>\n<p>每个常量都是一个静态final字段，但不是所有静态final字段都是常量。在决定一个字段是否是一个常量时，<br>考虑它是否真的感觉像是一个常量。例如，如果任何一个该实例的观测状态是可变的，则它几乎肯定不会是一个常量。<br>只是永远不<code>打算</code>改变对象一般是不够的，它要真的一直不变才能将它示为常量。</p>\n<pre><code>// Constants\nstatic final int NUMBER = 5;\nstatic final ImmutableList&lt;String&gt; NAMES = ImmutableList.of(&quot;Ed&quot;, &quot;Ann&quot;);\nstatic final Joiner COMMA_JOINER = Joiner.on(&apos;,&apos;);  // because Joiner is immutable\nstatic final SomeMutableType[] EMPTY_ARRAY = {};\nenum SomeEnum { ENUM_CONSTANT }\n\n// Not constants\nstatic String nonFinal = &quot;non-final&quot;;\nfinal String nonStatic = &quot;non-static&quot;;\nstatic final Set&lt;String&gt; mutableCollection = new HashSet&lt;String&gt;();\nstatic final ImmutableSet&lt;SomeMutableType&gt; mutableElements = ImmutableSet.of(mutable);\nstatic final Logger logger = Logger.getLogger(MyClass.getName());\nstatic final String[] nonEmptyArray = {&quot;these&quot;, &quot;can&quot;, &quot;change&quot;};\n</code></pre><p>这些名字通常是名词或名词短语。</p>\n<h4 id=\"5-2-5-非常量字段名\"><a href=\"#5-2-5-非常量字段名\" class=\"headerlink\" title=\"5.2.5 非常量字段名\"></a>5.2.5 非常量字段名</h4><p>非常量字段名以<code>lowerCamelCase</code>风格编写。</p>\n<p>这些名字通常是名词或名词短语。</p>\n<h4 id=\"5-2-6-参数名\"><a href=\"#5-2-6-参数名\" class=\"headerlink\" title=\"5.2.6 参数名\"></a>5.2.6 参数名</h4><p>参数名以<code>lowerCamelCase</code>风格编写。</p>\n<p>参数应该避免用单个字符命名。</p>\n<h4 id=\"5-2-7-局部变量名\"><a href=\"#5-2-7-局部变量名\" class=\"headerlink\" title=\"5.2.7 局部变量名\"></a>5.2.7 局部变量名</h4><p>局部变量名以<code>lowerCamelCase</code>风格编写，比起其它类型的名称，局部变量名可以有更为宽松的缩写。</p>\n<p>虽然缩写更宽松，但还是要避免用单字符进行命名，除了临时变量和循环变量。</p>\n<p>即使局部变量是final和不可改变的，也不应该把它示为常量，自然也不能用常量的规则去命名它。</p>\n<h4 id=\"5-2-8-类型变量名\"><a href=\"#5-2-8-类型变量名\" class=\"headerlink\" title=\"5.2.8 类型变量名\"></a>5.2.8 类型变量名</h4><p>类型变量可用以下两种风格之一进行命名：</p>\n<ul>\n<li>单个的大写字母，后面可以跟一个数字(如：E, T, X, T2)。</li>\n<li>以类命名方式(5.2.2节)，后面加个大写的T(如：RequestT, FooBarT)。</li>\n</ul>\n<h3 id=\"5-3-驼峰式命名法-CamelCase\"><a href=\"#5-3-驼峰式命名法-CamelCase\" class=\"headerlink\" title=\"5.3 驼峰式命名法(CamelCase)\"></a>5.3 驼峰式命名法(CamelCase)</h3><p><a href=\"http://zh.wikipedia.org/wiki/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB\" target=\"_blank\" rel=\"noopener\">驼峰式命名法</a>分大驼峰式命名法(<code>UpperCamelCase</code>)和小驼峰式命名法(<code>lowerCamelCase</code>)。<br>有时，我们有不只一种合理的方式将一个英语词组转换成驼峰形式，如缩略语或不寻常的结构(例如”IPv6”或”iOS”)。Google指定了以下的转换方案。</p>\n<p>名字从<code>散文形式</code>(prose form)开始:</p>\n<ol>\n<li>把短语转换为纯ASCII码，并且移除任何单引号。例如：”Müller’s algorithm”将变成”Muellers algorithm”。</li>\n<li>把这个结果切分成单词，在空格或其它标点符号(通常是连字符)处分割开。<ul>\n<li>推荐：如果某个单词已经有了常用的驼峰表示形式，按它的组成将它分割开(如”AdWords”将分割成”ad words”)。<br>需要注意的是”iOS”并不是一个真正的驼峰表示形式，因此该推荐对它并不适用。</li>\n</ul>\n</li>\n<li>现在将所有字母都小写(包括缩写)，然后将单词的第一个字母大写：<ul>\n<li>每个单词的第一个字母都大写，来得到大驼峰式命名。</li>\n<li>除了第一个单词，每个单词的第一个字母都大写，来得到小驼峰式命名。</li>\n</ul>\n</li>\n<li>最后将所有的单词连接起来得到一个标识符。</li>\n</ol>\n<p>示例：</p>\n<pre><code>Prose form                Correct               Incorrect\n------------------------------------------------------------------\n&quot;XML HTTP request&quot;        XmlHttpRequest        XMLHTTPRequest\n&quot;new customer ID&quot;         newCustomerId         newCustomerID\n&quot;inner stopwatch&quot;         innerStopwatch        innerStopWatch\n&quot;supports IPv6 on iOS?&quot;   supportsIpv6OnIos     supportsIPv6OnIOS\n&quot;YouTube importer&quot;        YouTubeImporter\n                          YoutubeImporter*\n</code></pre><p>加星号处表示可以，但不推荐。</p>\n<blockquote>\n<blockquote>\n<p>Note：在英语中，某些带有连字符的单词形式不唯一。例如：”nonempty”和”non-empty”都是正确的，因此方法名<code>checkNonempty</code>和<code>checkNonEmpty</code>也都是正确的。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"编程实践\"><a href=\"#编程实践\" class=\"headerlink\" title=\"编程实践\"></a><a id=\"Practice\">编程实践</a></h2><h3 id=\"6-1-Override：能用则用\"><a href=\"#6-1-Override：能用则用\" class=\"headerlink\" title=\"6.1 @Override：能用则用\"></a>6.1 @Override：能用则用</h3><p>只要是合法的，就把<code>@Override</code>注解给用上。</p>\n<h3 id=\"6-2-捕获的异常：不能忽视\"><a href=\"#6-2-捕获的异常：不能忽视\" class=\"headerlink\" title=\"6.2 捕获的异常：不能忽视\"></a>6.2 捕获的异常：不能忽视</h3><p>除了下面的例子，对捕获的异常不做响应是极少正确的。(典型的响应方式是打印日志，或者如果它被认为是不可能的，则把它当作一个<code>AssertionError</code>重新抛出。)</p>\n<p>如果它确实是不需要在catch块中做任何响应，需要做注释加以说明(如下面的例子)。</p>\n<pre><code>try {\n  int i = Integer.parseInt(response);\n  return handleNumericResponse(i);\n} catch (NumberFormatException ok) {\n  // it&apos;s not numeric; that&apos;s fine, just continue\n}\nreturn handleTextResponse(response);\n</code></pre><p><strong>例外</strong>：在测试中，如果一个捕获的异常被命名为<code>expected</code>，则它可以被不加注释地忽略。下面是一种非常常见的情形，用以确保所测试的方法会抛出一个期望中的异常，<br>因此在这里就没有必要加注释。</p>\n<pre><code>try {\n  emptyStack.pop();\n  fail();\n} catch (NoSuchElementException expected) {\n}\n</code></pre><h3 id=\"6-3-静态成员：使用类进行调用\"><a href=\"#6-3-静态成员：使用类进行调用\" class=\"headerlink\" title=\"6.3 静态成员：使用类进行调用\"></a>6.3 静态成员：使用类进行调用</h3><p>使用类名调用静态的类成员，而不是具体某个对象或表达式。</p>\n<pre><code>Foo aFoo = ...;\nFoo.aStaticMethod(); // good\naFoo.aStaticMethod(); // bad\nsomethingThatYieldsAFoo().aStaticMethod(); // very bad\n</code></pre><h3 id=\"6-4-Finalizers-禁用\"><a href=\"#6-4-Finalizers-禁用\" class=\"headerlink\" title=\"6.4 Finalizers: 禁用\"></a>6.4 Finalizers: 禁用</h3><p>极少会去重载<code>Object.finalize</code>。</p>\n<blockquote>\n<blockquote>\n<p>Tip：不要使用finalize。如果你非要使用它，请先仔细阅读和理解<a href=\"http://books.google.com/books?isbn=8131726592\" target=\"_blank\" rel=\"noopener\">Effective Java</a><br>第7条款：“Avoid Finalizers”，然后不要使用它。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"Javadoc\"><a href=\"#Javadoc\" class=\"headerlink\" title=\"Javadoc\"></a><a id=\"Javadoc\">Javadoc</a></h2><h3 id=\"7-1-格式\"><a href=\"#7-1-格式\" class=\"headerlink\" title=\"7.1 格式\"></a>7.1 格式</h3><h4 id=\"7-1-1-一般形式\"><a href=\"#7-1-1-一般形式\" class=\"headerlink\" title=\"7.1.1 一般形式\"></a>7.1.1 一般形式</h4><p>Javadoc块的基本格式如下所示：</p>\n<pre><code>/**\n * Multiple lines of Javadoc text are written here,\n * wrapped normally...\n */\npublic int method(String p1) { ... }\n</code></pre><p>或者是以下单行形式：</p>\n<pre><code>/** An especially short bit of Javadoc. */\n</code></pre><p>基本格式总是OK的。当整个Javadoc块能容纳于一行时(且没有Javadoc标记@XXX)，可以使用单行形式。</p>\n<h4 id=\"7-1-2-段落\"><a href=\"#7-1-2-段落\" class=\"headerlink\" title=\"7.1.2 段落\"></a>7.1.2 段落</h4><p>空行(即，只包含最左侧星号的行)会出现在段落之间和Javadoc标记(@XXX)之前(如果有的话)。<br>除了第一个段落，每个段落第一个单词前都有标签<code>&lt;p&gt;</code>，并且它和第一个单词间没有空格。</p>\n<h4 id=\"7-1-3-Javadoc标记\"><a href=\"#7-1-3-Javadoc标记\" class=\"headerlink\" title=\"7.1.3 Javadoc标记\"></a>7.1.3 Javadoc标记</h4><p>标准的Javadoc标记按以下顺序出现：<code>@param</code>, <code>@return</code>, <code>@throws</code>, <code>@deprecated</code>, 前面这4种标记如果出现，描述都不能为空。<br>当描述无法在一行中容纳，连续行需要至少再缩进4个空格。</p>\n<h3 id=\"7-2-摘要片段\"><a href=\"#7-2-摘要片段\" class=\"headerlink\" title=\"7.2 摘要片段\"></a>7.2 摘要片段</h3><p>每个类或成员的Javadoc以一个简短的摘要片段开始。这个片段是非常重要的，在某些情况下，它是唯一出现的文本，比如在类和方法索引中。</p>\n<p>这只是一个小片段，可以是一个名词短语或动词短语，但不是一个完整的句子。它不会以<code>A {@code Foo} is a...</code>或<code>This method returns...</code>开头,<br>它也不会是一个完整的祈使句，如<code>Save the record...</code>。然而，由于开头大写及被加了标点，它看起来就像是个完整的句子。</p>\n<blockquote>\n<blockquote>\n<p>Tip：一个常见的错误是把简单的Javadoc写成<code>/** @return the customer ID */</code>，这是不正确的。它应该写成<code>/** Returns the customer ID. */</code>。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"7-3-哪里需要使用Javadoc\"><a href=\"#7-3-哪里需要使用Javadoc\" class=\"headerlink\" title=\"7.3 哪里需要使用Javadoc\"></a>7.3 哪里需要使用Javadoc</h3><p>至少在每个public类及它的每个public和protected成员处使用Javadoc，以下是一些例外：</p>\n<h4 id=\"7-3-1-例外：不言自明的方法\"><a href=\"#7-3-1-例外：不言自明的方法\" class=\"headerlink\" title=\"7.3.1 例外：不言自明的方法\"></a>7.3.1 例外：不言自明的方法</h4><p>对于简单明显的方法如<code>getFoo</code>，Javadoc是可选的(即，是可以不写的)。这种情况下除了写“Returns the foo”，确实也没有什么值得写了。</p>\n<p>单元测试类中的测试方法可能是不言自明的最常见例子了，我们通常可以从这些方法的描述性命名中知道它是干什么的，因此不需要额外的文档说明。</p>\n<blockquote>\n<blockquote>\n<p>Tip：如果有一些相关信息是需要读者了解的，那么以上的例外不应作为忽视这些信息的理由。例如，对于方法名<code>getCanonicalName</code>，<br>就不应该忽视文档说明，因为读者很可能不知道词语<code>canonical name</code>指的是什么。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"7-3-2-例外：重载\"><a href=\"#7-3-2-例外：重载\" class=\"headerlink\" title=\"7.3.2 例外：重载\"></a>7.3.2 例外：重载</h4><p>如果一个方法重载了超类中的方法，那么Javadoc并非必需的。</p>\n<h4 id=\"7-3-3-可选的Javadoc\"><a href=\"#7-3-3-可选的Javadoc\" class=\"headerlink\" title=\"7.3.3 可选的Javadoc\"></a>7.3.3 可选的Javadoc</h4><p>对于包外不可见的类和方法，如有需要，也是要使用Javadoc的。如果一个注释是用来定义一个类，方法，字段的整体目的或行为，<br>那么这个注释应该写成Javadoc，这样更统一更友好。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a><a id=\"End\">后记</a></h2><p>本文档翻译自<a href=\"http://google-styleguide.googlecode.com/svn/trunk/javaguide.html\" target=\"_blank\" rel=\"noopener\">Google Java Style</a>，<br>译者<a href=\"http://weibo.com/hawstein\" target=\"_blank\" rel=\"noopener\">@Hawstein</a>。</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>checkstyle <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml\" target=\"_blank\" rel=\"noopener\">https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>作者：Hawstein</p>\n<p>出处：<a href=\"http://hawstein.com/posts/google-java-style.html\" target=\"_blank\" rel=\"noopener\">http://hawstein.com/posts/google-java-style.html</a></p>\n<p>转载说明：N个月前看到<a href=\"http://google-styleguide.googlecode.com/svn/trunk/javaguide.html\" target=\"_blank\" rel=\"noopener\">Google Java Style</a>,大致扫了下，自认为命名都比较规范了。今天在整理依赖时，看到junit最新版本的release note中提到junit的代码按照<a href=\"http://google-styleguide.googlecode.com/svn/trunk/javaguide.html\" target=\"_blank\" rel=\"noopener\">Google Java Style</a> fix了一遍。无意中感觉可能我也做得不够好，仔细看看文档，发现有个地方写的非常明确，值得参考。转载这篇中文翻译文章方便大家查看。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#Intro\">前言</a></li>\n<li><a href=\"#SFBasic\">源文件基础</a></li>\n<li><a href=\"#SFStruct\">源文件结构</a></li>\n<li><a href=\"#Format\">格式</a></li>\n<li><a href=\"#Naming\">命名约定</a></li>\n<li><a href=\"#Practice\">编程实践</a></li>\n<li><a href=\"#Javadoc\">Javadoc</a></li>\n<li><a href=\"#End\">后记</a></li>\n</ol>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><a id=\"Intro\">前言</a></h2><p>这份文档是Google Java编程风格规范的完整定义。当且仅当一个Java源文件符合此文档中的规则，<br>我们才认为它符合Google的Java编程风格。</p>\n<p>与其它的编程风格指南一样，这里所讨论的不仅仅是编码格式美不美观的问题，<br>同时也讨论一些约定及编码标准。然而，这份文档主要侧重于我们所普遍遵循的规则，<br>对于那些不是明确强制要求的，我们尽量避免提供意见。</p>\n<h3 id=\"1-1-术语说明\"><a href=\"#1-1-术语说明\" class=\"headerlink\" title=\"1.1 术语说明\"></a>1.1 术语说明</h3><p>在本文档中，除非另有说明：</p>\n<ol>\n<li>术语class可表示一个普通类，枚举类，接口或是annotation类型(<code>@interface</code>)</li>\n<li>术语comment只用来指代实现的注释(implementation comments)，我们不使用“documentation comments”一词，而是用Javadoc。</li>\n</ol>\n<p>其他的术语说明会偶尔在后面的文档出现。</p>\n<h3 id=\"1-2-指南说明\"><a href=\"#1-2-指南说明\" class=\"headerlink\" title=\"1.2 指南说明\"></a>1.2 指南说明</h3><p>本文档中的示例代码并不作为规范。也就是说，虽然示例代码是遵循Google编程风格，但并不意味着这是展现这些代码的唯一方式。<br>示例中的格式选择不应该被强制定为规则。</p>\n<h2 id=\"源文件基础\"><a href=\"#源文件基础\" class=\"headerlink\" title=\"源文件基础\"></a><a id=\"SFBasic\">源文件基础</a></h2><h3 id=\"2-1-文件名\"><a href=\"#2-1-文件名\" class=\"headerlink\" title=\"2.1 文件名\"></a>2.1 文件名</h3><p>源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为<code>.java</code>。</p>\n<h3 id=\"2-2-文件编码：UTF-8\"><a href=\"#2-2-文件编码：UTF-8\" class=\"headerlink\" title=\"2.2 文件编码：UTF-8\"></a>2.2 文件编码：UTF-8</h3><p>源文件编码格式为UTF-8。</p>\n<h3 id=\"2-3-特殊字符\"><a href=\"#2-3-特殊字符\" class=\"headerlink\" title=\"2.3 特殊字符\"></a>2.3 特殊字符</h3><h4 id=\"2-3-1-空白字符\"><a href=\"#2-3-1-空白字符\" class=\"headerlink\" title=\"2.3.1 空白字符\"></a>2.3.1 空白字符</h4><p>除了行结束符序列，ASCII水平空格字符(0x20，即空格)是源文件中唯一允许出现的空白字符，这意味着：</p>\n<ol>\n<li>所有其它字符串中的空白字符都要进行转义。</li>\n<li>制表符不用于缩进。</li>\n</ol>\n<h4 id=\"2-3-2-特殊转义序列\"><a href=\"#2-3-2-特殊转义序列\" class=\"headerlink\" title=\"2.3.2 特殊转义序列\"></a>2.3.2 特殊转义序列</h4><p>对于具有特殊<a href=\"http://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97\" target=\"_blank\" rel=\"noopener\">转义序列</a>的任何字符(\\b, \\t, \\n, \\f, \\r, \\”, \\’及\\)，我们使用它的转义序列，而不是相应的八进制(比如<code>\\012</code>)或Unicode(比如<code>\\u000a</code>)转义。</p>\n<h4 id=\"2-3-3-非ASCII字符\"><a href=\"#2-3-3-非ASCII字符\" class=\"headerlink\" title=\"2.3.3 非ASCII字符\"></a>2.3.3 非ASCII字符</h4><p>对于剩余的非ASCII字符，是使用实际的Unicode字符(比如∞)，还是使用等价的Unicode转义符(比如\\u221e)，取决于哪个能让代码更易于阅读和理解。</p>\n<blockquote>\n<blockquote>\n<p>Tip: 在使用Unicode转义符或是一些实际的Unicode字符时，建议做些注释给出解释，这有助于别人阅读和理解。</p>\n</blockquote>\n</blockquote>\n<p>例如：</p>\n<pre><code>String unitAbbrev = &quot;μs&quot;;                                 | 赞，即使没有注释也非常清晰\nString unitAbbrev = &quot;\\u03bcs&quot;; // &quot;μs&quot;                    | 允许，但没有理由要这样做\nString unitAbbrev = &quot;\\u03bcs&quot;; // Greek letter mu, &quot;s&quot;    | 允许，但这样做显得笨拙还容易出错\nString unitAbbrev = &quot;\\u03bcs&quot;;                            | 很糟，读者根本看不出这是什么\nreturn &apos;\\ufeff&apos; + content; // byte order mark             | Good，对于非打印字符，使用转义，并在必要时写上注释\n</code></pre><blockquote>\n<blockquote>\n<p>Tip: 永远不要由于害怕某些程序可能无法正确处理非ASCII字符而让你的代码可读性变差。当程序无法正确处理非ASCII字符时，它自然无法正确运行，<br>你就会去fix这些问题的了。(言下之意就是大胆去用非ASCII字符，如果真的有需要的话)</p>\n</blockquote>\n</blockquote>\n<h2 id=\"源文件结构\"><a href=\"#源文件结构\" class=\"headerlink\" title=\"源文件结构\"></a><a id=\"SFStruct\">源文件结构</a></h2><p>一个源文件包含(按顺序地)：</p>\n<ol>\n<li>许可证或版权信息(如有需要)</li>\n<li>package语句</li>\n<li>import语句</li>\n<li>一个顶级类(<strong>只有一个</strong>)</li>\n</ol>\n<p>以上每个部分之间用一个空行隔开。</p>\n<h3 id=\"3-1-许可证或版权信息\"><a href=\"#3-1-许可证或版权信息\" class=\"headerlink\" title=\"3.1 许可证或版权信息\"></a>3.1 许可证或版权信息</h3><p>如果一个文件包含许可证或版权信息，那么它应当被放在文件最前面。</p>\n<h3 id=\"3-2-package语句\"><a href=\"#3-2-package语句\" class=\"headerlink\" title=\"3.2 package语句\"></a>3.2 package语句</h3><p>package语句不换行，列限制(4.4节)并不适用于package语句。(即package语句写在一行里)</p>\n<h3 id=\"3-3-import语句\"><a href=\"#3-3-import语句\" class=\"headerlink\" title=\"3.3 import语句\"></a>3.3 import语句</h3><h4 id=\"3-3-1-import不要使用通配符\"><a href=\"#3-3-1-import不要使用通配符\" class=\"headerlink\" title=\"3.3.1 import不要使用通配符\"></a>3.3.1 import不要使用通配符</h4><p>即，不要出现类似这样的import语句：<code>import java.util.*;</code></p>\n<h4 id=\"3-3-2-不要换行\"><a href=\"#3-3-2-不要换行\" class=\"headerlink\" title=\"3.3.2 不要换行\"></a>3.3.2 不要换行</h4><p>import语句不换行，列限制(4.4节)并不适用于import语句。(每个import语句独立成行)</p>\n<h4 id=\"3-3-3-顺序和间距\"><a href=\"#3-3-3-顺序和间距\" class=\"headerlink\" title=\"3.3.3 顺序和间距\"></a>3.3.3 顺序和间距</h4><p>import语句可分为以下几组，按照这个顺序，每组由一个空行分隔：</p>\n<ol>\n<li>所有的静态导入独立成组</li>\n<li><code>com.google</code> imports(仅当这个源文件是在<code>com.google</code>包下)</li>\n<li>第三方的包。每个顶级包为一组，字典序。例如：android, com, junit, org, sun</li>\n<li><code>java</code> imports</li>\n<li><code>javax</code> imports</li>\n</ol>\n<p>组内不空行，按字典序排列。</p>\n<h3 id=\"3-4-类声明\"><a href=\"#3-4-类声明\" class=\"headerlink\" title=\"3.4 类声明\"></a>3.4 类声明</h3><h4 id=\"3-4-1-只有一个顶级类声明\"><a href=\"#3-4-1-只有一个顶级类声明\" class=\"headerlink\" title=\"3.4.1 只有一个顶级类声明\"></a>3.4.1 只有一个顶级类声明</h4><p>每个顶级类都在一个与它同名的源文件中(当然，还包含<code>.java</code>后缀)。</p>\n<p>例外：<code>package-info.java</code>，该文件中可没有<code>package-info</code>类。</p>\n<h4 id=\"3-4-2-类成员顺序\"><a href=\"#3-4-2-类成员顺序\" class=\"headerlink\" title=\"3.4.2 类成员顺序\"></a>3.4.2 类成员顺序</h4><p>类的成员顺序对易学性有很大的影响，但这也不存在唯一的通用法则。不同的类对成员的排序可能是不同的。<br>最重要的一点，每个类应该以某种逻辑去排序它的成员，维护者应该要能解释这种排序逻辑。比如，<br>新的方法不能总是习惯性地添加到类的结尾，因为这样就是按时间顺序而非某种逻辑来排序的。</p>\n<h5 id=\"3-4-2-1-重载：永不分离\"><a href=\"#3-4-2-1-重载：永不分离\" class=\"headerlink\" title=\"3.4.2.1 重载：永不分离\"></a>3.4.2.1 重载：永不分离</h5><p>当一个类有多个构造函数，或是多个同名方法，这些函数/方法应该按顺序出现在一起，中间不要放进其它函数/方法。</p>\n<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a><a id=\"Format\">格式</a></h2><p><strong>术语说明</strong>：块状结构(block-like construct)指的是一个类，方法或构造函数的主体。需要注意的是，数组初始化中的初始值可被选择性地视为块状结构(4.8.3.1节)。</p>\n<h3 id=\"4-1-大括号\"><a href=\"#4-1-大括号\" class=\"headerlink\" title=\"4.1 大括号\"></a>4.1 大括号</h3><h4 id=\"4-1-1-使用大括号-即使是可选的\"><a href=\"#4-1-1-使用大括号-即使是可选的\" class=\"headerlink\" title=\"4.1.1 使用大括号(即使是可选的)\"></a>4.1.1 使用大括号(即使是可选的)</h4><p>大括号与<code>if, else, for, do, while</code>语句一起使用，即使只有一条语句(或是空)，也应该把大括号写上。</p>\n<h4 id=\"4-1-2-非空块：K-amp-R-风格\"><a href=\"#4-1-2-非空块：K-amp-R-风格\" class=\"headerlink\" title=\"4.1.2 非空块：K &amp; R 风格\"></a>4.1.2 非空块：K &amp; R 风格</h4><p>对于非空块和块状结构，大括号遵循Kernighan和Ritchie风格<br>(<a href=\"http://www.codinghorror.com/blog/2012/07/new-programming-jargon.html\" target=\"_blank\" rel=\"noopener\">Egyptian brackets</a>):</p>\n<ul>\n<li>左大括号前不换行</li>\n<li>左大括号后换行</li>\n<li>右大括号前换行</li>\n<li>如果右大括号是一个语句、函数体或类的终止，则右大括号后换行; 否则不换行。例如，如果右大括号后面是else或逗号，则不换行。</li>\n</ul>\n<p>示例：</p>\n<pre><code>return new MyClass() {\n  @Override public void method() {\n    if (condition()) {\n      try {\n        something();\n      } catch (ProblemException e) {\n        recover();\n      }\n    }\n  }\n};\n</code></pre><p>4.8.1节给出了enum类的一些例外。</p>\n<h4 id=\"4-1-3-空块：可以用简洁版本\"><a href=\"#4-1-3-空块：可以用简洁版本\" class=\"headerlink\" title=\"4.1.3 空块：可以用简洁版本\"></a>4.1.3 空块：可以用简洁版本</h4><p>一个空的块状结构里什么也不包含，大括号可以简洁地写成<code>{}</code>，不需要换行。例外：如果它是一个多块语句的一部分(if/else 或 try/catch/finally)<br>，即使大括号内没内容，右大括号也要换行。</p>\n<p>示例：</p>\n<pre><code>void doNothing() {}\n</code></pre><h3 id=\"4-2-块缩进：2个空格\"><a href=\"#4-2-块缩进：2个空格\" class=\"headerlink\" title=\"4.2 块缩进：2个空格\"></a>4.2 块缩进：2个空格</h3><p>每当开始一个新的块，缩进增加2个空格，当块结束时，缩进返回先前的缩进级别。缩进级别适用于代码和注释。(见4.1.2节中的代码示例)</p>\n<h3 id=\"4-3-一行一个语句\"><a href=\"#4-3-一行一个语句\" class=\"headerlink\" title=\"4.3 一行一个语句\"></a>4.3 一行一个语句</h3><p>每个语句后要换行。</p>\n<h3 id=\"4-4-列限制：80或100\"><a href=\"#4-4-列限制：80或100\" class=\"headerlink\" title=\"4.4 列限制：80或100\"></a>4.4 列限制：80或100</h3><p>一个项目可以选择一行80个字符或100个字符的列限制，除了下述例外，任何一行如果超过这个字符数限制，必须自动换行。</p>\n<p>例外：</p>\n<ol>\n<li>不可能满足列限制的行(例如，Javadoc中的一个长URL，或是一个长的JSNI方法参考)。</li>\n<li><code>package</code>和<code>import</code>语句(见3.2节和3.3节)。</li>\n<li>注释中那些可能被剪切并粘贴到shell中的命令行。</li>\n</ol>\n<h3 id=\"4-5-自动换行\"><a href=\"#4-5-自动换行\" class=\"headerlink\" title=\"4.5 自动换行\"></a>4.5 自动换行</h3><p><strong>术语说明</strong>：一般情况下，一行长代码为了避免超出列限制(80或100个字符)而被分为多行，我们称之为自动换行(line-wrapping)。</p>\n<p>我们并没有全面，确定性的准则来决定在每一种情况下如何自动换行。很多时候，对于同一段代码会有好几种有效的自动换行方式。</p>\n<blockquote>\n<blockquote>\n<p>Tip: 提取方法或局部变量可以在不换行的情况下解决代码过长的问题(是合理缩短命名长度吧)</p>\n</blockquote>\n</blockquote>\n<h4 id=\"4-5-1-从哪里断开\"><a href=\"#4-5-1-从哪里断开\" class=\"headerlink\" title=\"4.5.1 从哪里断开\"></a>4.5.1 从哪里断开</h4><p>自动换行的基本准则是：更倾向于在更高的语法级别处断开。</p>\n<ol>\n<li>如果在<code>非赋值运算符</code>处断开，那么在该符号前断开(比如+，它将位于下一行)。注意：这一点与Google其它语言的编程风格不同(如C++和JavaScript)。<br>这条规则也适用于以下“类运算符”符号：点分隔符(.)，类型界限中的&amp;（<code>&lt;T extends Foo &amp; Bar&gt;</code>)，catch块中的管道符号(<code>catch (FooException | BarException e</code>)</li>\n<li>如果在<code>赋值运算符</code>处断开，通常的做法是在该符号后断开(比如=，它与前面的内容留在同一行)。这条规则也适用于<code>foreach</code>语句中的分号。</li>\n<li>方法名或构造函数名与左括号留在同一行。</li>\n<li>逗号(,)与其前面的内容留在同一行。</li>\n</ol>\n<h4 id=\"4-5-2-自动换行时缩进至少-4个空格\"><a href=\"#4-5-2-自动换行时缩进至少-4个空格\" class=\"headerlink\" title=\"4.5.2 自动换行时缩进至少+4个空格\"></a>4.5.2 自动换行时缩进至少+4个空格</h4><p>自动换行时，第一行后的每一行至少比第一行多缩进4个空格(注意：制表符不用于缩进。见2.3.1节)。</p>\n<p>当存在连续自动换行时，缩进可能会多缩进不只4个空格(语法元素存在多级时)。一般而言，两个连续行使用相同的缩进当且仅当它们开始于同级语法元素。</p>\n<p>第4.6.3水平对齐一节中指出，不鼓励使用可变数目的空格来对齐前面行的符号。</p>\n<h3 id=\"4-6-空白\"><a href=\"#4-6-空白\" class=\"headerlink\" title=\"4.6 空白\"></a>4.6 空白</h3><h4 id=\"4-6-1-垂直空白\"><a href=\"#4-6-1-垂直空白\" class=\"headerlink\" title=\"4.6.1 垂直空白\"></a>4.6.1 垂直空白</h4><p>以下情况需要使用一个空行：</p>\n<ol>\n<li>类内连续的成员之间：字段，构造函数，方法，嵌套类，静态初始化块，实例初始化块。<ul>\n<li><strong>例外</strong>：两个连续字段之间的空行是可选的，用于字段的空行主要用来对字段进行逻辑分组。</li>\n</ul>\n</li>\n<li>在函数体内，语句的逻辑分组间使用空行。</li>\n<li>类内的第一个成员前或最后一个成员后的空行是可选的(既不鼓励也不反对这样做，视个人喜好而定)。</li>\n<li>要满足本文档中其他节的空行要求(比如3.3节：import语句)</li>\n</ol>\n<p>多个连续的空行是允许的，但没有必要这样做(我们也不鼓励这样做)。</p>\n<h4 id=\"4-6-2-水平空白\"><a href=\"#4-6-2-水平空白\" class=\"headerlink\" title=\"4.6.2 水平空白\"></a>4.6.2 水平空白</h4><p>除了语言需求和其它规则，并且除了文字，注释和Javadoc用到单个空格，单个ASCII空格也出现在以下几个地方：</p>\n<ol>\n<li>分隔任何保留字与紧随其后的左括号(<code>(</code>)(如<code>if, for catch</code>等)。</li>\n<li>分隔任何保留字与其前面的右大括号(<code>}</code>)(如<code>else, catch</code>)。</li>\n<li>在任何左大括号前(<code>{</code>)，两个例外：<ul>\n<li><code>@SomeAnnotation({a, b})</code>(不使用空格)。</li>\n<li><code>String[][] x = foo;</code>(大括号间没有空格，见下面的Note)。</li>\n</ul>\n</li>\n<li>在任何二元或三元运算符的两侧。这也适用于以下“类运算符”符号：<ul>\n<li>类型界限中的&amp;(<code>&lt;T extends Foo &amp; Bar&gt;</code>)。</li>\n<li>catch块中的管道符号(<code>catch (FooException | BarException e</code>)。</li>\n<li><code>foreach</code>语句中的分号。</li>\n</ul>\n</li>\n<li>在<code>, : ;</code>及右括号(<code>)</code>)后</li>\n<li>如果在一条语句后做注释，则双斜杠(//)两边都要空格。这里可以允许多个空格，但没有必要。</li>\n<li>类型和变量之间：List<string> list。</string></li>\n<li>数组初始化中，大括号内的空格是可选的，即<code>new int[] {5, 6}</code>和<code>new int[] { 5, 6 }</code>都是可以的。</li>\n</ol>\n<blockquote>\n<blockquote>\n<p>Note：这个规则并不要求或禁止一行的开关或结尾需要额外的空格，只对内部空格做要求。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"4-6-3-水平对齐：不做要求\"><a href=\"#4-6-3-水平对齐：不做要求\" class=\"headerlink\" title=\"4.6.3 水平对齐：不做要求\"></a>4.6.3 水平对齐：不做要求</h4><p><strong>术语说明</strong>：水平对齐指的是通过增加可变数量的空格来使某一行的字符与上一行的相应字符对齐。</p>\n<p>这是允许的(而且在不少地方可以看到这样的代码)，但Google编程风格对此不做要求。即使对于已经使用水平对齐的代码，我们也不需要去保持这种风格。</p>\n<p>以下示例先展示未对齐的代码，然后是对齐的代码：</p>\n<p>private int x; // this is fine<br>private Color color; // this too</p>\n<p>private int   x;      // permitted, but future edits<br>private Color color;  // may leave it unaligned</p>\n<blockquote>\n<blockquote>\n<p>Tip：对齐可增加代码可读性，但它为日后的维护带来问题。考虑未来某个时候，我们需要修改一堆对齐的代码中的一行。<br>这可能导致原本很漂亮的对齐代码变得错位。很可能它会提示你调整周围代码的空白来使这一堆代码重新水平对齐(比如程序员想保持这种水平对齐的风格)，<br>这就会让你做许多的无用功，增加了reviewer的工作并且可能导致更多的合并冲突。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"4-7-用小括号来限定组：推荐\"><a href=\"#4-7-用小括号来限定组：推荐\" class=\"headerlink\" title=\"4.7 用小括号来限定组：推荐\"></a>4.7 用小括号来限定组：推荐</h3><p>除非作者和reviewer都认为去掉小括号也不会使代码被误解，或是去掉小括号能让代码更易于阅读，否则我们不应该去掉小括号。<br>我们没有理由假设读者能记住整个Java运算符优先级表。</p>\n<h3 id=\"4-8-具体结构\"><a href=\"#4-8-具体结构\" class=\"headerlink\" title=\"4.8 具体结构\"></a>4.8 具体结构</h3><h4 id=\"4-8-1-枚举类\"><a href=\"#4-8-1-枚举类\" class=\"headerlink\" title=\"4.8.1 枚举类\"></a>4.8.1 枚举类</h4><p>枚举常量间用逗号隔开，换行可选。</p>\n<p>没有方法和文档的枚举类可写成数组初始化的格式：</p>\n<pre><code>private enum Suit { CLUBS, HEARTS, SPADES, DIAMONDS }\n</code></pre><p>由于枚举类也是一个类，因此所有适用于其它类的格式规则也适用于枚举类。</p>\n<h4 id=\"4-8-2-变量声明\"><a href=\"#4-8-2-变量声明\" class=\"headerlink\" title=\"4.8.2 变量声明\"></a>4.8.2 变量声明</h4><h5 id=\"4-8-2-1-每次只声明一个变量\"><a href=\"#4-8-2-1-每次只声明一个变量\" class=\"headerlink\" title=\"4.8.2.1 每次只声明一个变量\"></a>4.8.2.1 每次只声明一个变量</h5><p>不要使用组合声明，比如<code>int a, b;</code>。</p>\n<h5 id=\"4-8-2-2-需要时才声明，并尽快进行初始化\"><a href=\"#4-8-2-2-需要时才声明，并尽快进行初始化\" class=\"headerlink\" title=\"4.8.2.2 需要时才声明，并尽快进行初始化\"></a>4.8.2.2 需要时才声明，并尽快进行初始化</h5><p>不要在一个代码块的开头把局部变量一次性都声明了(这是c语言的做法)，而是在第一次需要使用它时才声明。<br>局部变量在声明时最好就进行初始化，或者声明后尽快进行初始化。</p>\n<h4 id=\"4-8-3-数组\"><a href=\"#4-8-3-数组\" class=\"headerlink\" title=\"4.8.3 数组\"></a>4.8.3 数组</h4><h5 id=\"4-8-3-1-数组初始化：可写成块状结构\"><a href=\"#4-8-3-1-数组初始化：可写成块状结构\" class=\"headerlink\" title=\"4.8.3.1 数组初始化：可写成块状结构\"></a>4.8.3.1 数组初始化：可写成块状结构</h5><p>数组初始化可以写成块状结构，比如，下面的写法都是OK的：</p>\n<pre><code>new int[] {\n  0, 1, 2, 3\n}\n\nnew int[] {\n  0,\n  1,\n  2,\n  3\n}\n\nnew int[] {\n  0, 1,\n  2, 3\n}\n\nnew int[]\n    {0, 1, 2, 3}\n</code></pre><h5 id=\"4-8-3-2-非C风格的数组声明\"><a href=\"#4-8-3-2-非C风格的数组声明\" class=\"headerlink\" title=\"4.8.3.2 非C风格的数组声明\"></a>4.8.3.2 非C风格的数组声明</h5><p>中括号是类型的一部分：<code>String[] args</code>， 而非<code>String args[]</code>。</p>\n<h4 id=\"4-8-4-switch语句\"><a href=\"#4-8-4-switch语句\" class=\"headerlink\" title=\"4.8.4 switch语句\"></a>4.8.4 switch语句</h4><p><strong>术语说明</strong>：switch块的大括号内是一个或多个语句组。每个语句组包含一个或多个switch标签(<code>case FOO:</code>或<code>default:</code>)，后面跟着一条或多条语句。</p>\n<h5 id=\"4-8-4-1-缩进\"><a href=\"#4-8-4-1-缩进\" class=\"headerlink\" title=\"4.8.4.1 缩进\"></a>4.8.4.1 缩进</h5><p>与其它块状结构一致，switch块中的内容缩进为2个空格。</p>\n<p>每个switch标签后新起一行，再缩进2个空格，写下一条或多条语句。</p>\n<h5 id=\"4-8-4-2-Fall-through：注释\"><a href=\"#4-8-4-2-Fall-through：注释\" class=\"headerlink\" title=\"4.8.4.2 Fall-through：注释\"></a>4.8.4.2 Fall-through：注释</h5><p>在一个switch块内，每个语句组要么通过<code>break, continue, return</code>或抛出异常来终止，要么通过一条注释来说明程序将继续执行到下一个语句组，<br>任何能表达这个意思的注释都是OK的(典型的是用<code>// fall through</code>)。这个特殊的注释并不需要在最后一个语句组(一般是<code>default</code>)中出现。示例：</p>\n<pre><code>switch (input) {\n  case 1:\n  case 2:\n    prepareOneOrTwo();\n    // fall through\n  case 3:\n    handleOneTwoOrThree();\n    break;\n  default:\n    handleLargeNumber(input);\n}\n</code></pre><h5 id=\"4-8-4-3-default的情况要写出来\"><a href=\"#4-8-4-3-default的情况要写出来\" class=\"headerlink\" title=\"4.8.4.3 default的情况要写出来\"></a>4.8.4.3 default的情况要写出来</h5><p>每个switch语句都包含一个<code>default</code>语句组，即使它什么代码也不包含。</p>\n<h4 id=\"4-8-5-注解-Annotations\"><a href=\"#4-8-5-注解-Annotations\" class=\"headerlink\" title=\"4.8.5 注解(Annotations)\"></a>4.8.5 注解(Annotations)</h4><p>注解紧跟在文档块后面，应用于类、方法和构造函数，一个注解独占一行。这些换行不属于自动换行(第4.5节，自动换行)，因此缩进级别不变。例如：</p>\n<pre><code>@Override\n@Nullable\npublic String getNameIfPresent() { ... }\n</code></pre><p><strong>例外</strong>：单个的注解可以和签名的第一行出现在同一行。例如：</p>\n<pre><code>@Override public int hashCode() { ... }\n</code></pre><p>应用于字段的注解紧随文档块出现，应用于字段的多个注解允许与字段出现在同一行。例如：</p>\n<pre><code>@Partial @Mock DataLoader loader;\n</code></pre><p>参数和局部变量注解没有特定规则。</p>\n<h4 id=\"4-8-6-注释\"><a href=\"#4-8-6-注释\" class=\"headerlink\" title=\"4.8.6 注释\"></a>4.8.6 注释</h4><h5 id=\"4-8-6-1-块注释风格\"><a href=\"#4-8-6-1-块注释风格\" class=\"headerlink\" title=\"4.8.6.1 块注释风格\"></a>4.8.6.1 块注释风格</h5><p>块注释与其周围的代码在同一缩进级别。它们可以是<code>/* ... */</code>风格，也可以是<code>// ...</code>风格。对于多行的<code>/* ... */</code>注释，后续行必须从<code>*</code>开始，<br>并且与前一行的<code>*</code>对齐。以下示例注释都是OK的。</p>\n<pre><code>/*\n * This is          // And so           /* Or you can\n * okay.            // is this.          * even do this. */\n */\n</code></pre><p>注释不要封闭在由星号或其它字符绘制的框架里。</p>\n<blockquote>\n<blockquote>\n<p>Tip：在写多行注释时，如果你希望在必要时能重新换行(即注释像段落风格一样)，那么使用<code>/* ... */</code>。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"4-8-7-Modifiers\"><a href=\"#4-8-7-Modifiers\" class=\"headerlink\" title=\"4.8.7 Modifiers\"></a>4.8.7 Modifiers</h4><p>类和成员的modifiers如果存在，则按Java语言规范中推荐的顺序出现。</p>\n<p>public protected private abstract static final transient volatile synchronized native strictfp</p>\n<h2 id=\"命名约定\"><a href=\"#命名约定\" class=\"headerlink\" title=\"命名约定\"></a><a id=\"Naming\">命名约定</a></h2><h3 id=\"5-1-对所有标识符都通用的规则\"><a href=\"#5-1-对所有标识符都通用的规则\" class=\"headerlink\" title=\"5.1 对所有标识符都通用的规则\"></a>5.1 对所有标识符都通用的规则</h3><p>标识符只能使用ASCII字母和数字，因此每个有效的标识符名称都能匹配正则表达式<code>\\w+</code>。</p>\n<p>在Google其它编程语言风格中使用的特殊前缀或后缀，如<code>name_</code>, <code>mName</code>, <code>s_name</code>和<code>kName</code>，在Java编程风格中都不再使用。</p>\n<h3 id=\"5-2-标识符类型的规则\"><a href=\"#5-2-标识符类型的规则\" class=\"headerlink\" title=\"5.2 标识符类型的规则\"></a>5.2 标识符类型的规则</h3><h4 id=\"5-2-1-包名\"><a href=\"#5-2-1-包名\" class=\"headerlink\" title=\"5.2.1 包名\"></a>5.2.1 包名</h4><p>包名全部小写，连续的单词只是简单地连接起来，不使用下划线。</p>\n<h4 id=\"5-2-2-类名\"><a href=\"#5-2-2-类名\" class=\"headerlink\" title=\"5.2.2 类名\"></a>5.2.2 类名</h4><p>类名都以<code>UpperCamelCase</code>风格编写。</p>\n<p>类名通常是名词或名词短语，接口名称有时可能是形容词或形容词短语。现在还没有特定的规则或行之有效的约定来命名注解类型。</p>\n<p>测试类的命名以它要测试的类的名称开始，以<code>Test</code>结束。例如，<code>HashTest</code>或<code>HashIntegrationTest</code>。</p>\n<h4 id=\"5-2-3-方法名\"><a href=\"#5-2-3-方法名\" class=\"headerlink\" title=\"5.2.3 方法名\"></a>5.2.3 方法名</h4><p>方法名都以<code>lowerCamelCase</code>风格编写。</p>\n<p>方法名通常是动词或动词短语。</p>\n<p>下划线可能出现在JUnit测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：<code>test&lt;MethodUnderTest&gt;_&lt;state&gt;</code>，例如<code>testPop_emptyStack</code>。<br>并不存在唯一正确的方式来命名测试方法。</p>\n<h4 id=\"5-2-4-常量名\"><a href=\"#5-2-4-常量名\" class=\"headerlink\" title=\"5.2.4 常量名\"></a>5.2.4 常量名</h4><p>常量名命名模式为<code>CONSTANT_CASE</code>，全部字母大写，用下划线分隔单词。那，到底什么算是一个常量？</p>\n<p>每个常量都是一个静态final字段，但不是所有静态final字段都是常量。在决定一个字段是否是一个常量时，<br>考虑它是否真的感觉像是一个常量。例如，如果任何一个该实例的观测状态是可变的，则它几乎肯定不会是一个常量。<br>只是永远不<code>打算</code>改变对象一般是不够的，它要真的一直不变才能将它示为常量。</p>\n<pre><code>// Constants\nstatic final int NUMBER = 5;\nstatic final ImmutableList&lt;String&gt; NAMES = ImmutableList.of(&quot;Ed&quot;, &quot;Ann&quot;);\nstatic final Joiner COMMA_JOINER = Joiner.on(&apos;,&apos;);  // because Joiner is immutable\nstatic final SomeMutableType[] EMPTY_ARRAY = {};\nenum SomeEnum { ENUM_CONSTANT }\n\n// Not constants\nstatic String nonFinal = &quot;non-final&quot;;\nfinal String nonStatic = &quot;non-static&quot;;\nstatic final Set&lt;String&gt; mutableCollection = new HashSet&lt;String&gt;();\nstatic final ImmutableSet&lt;SomeMutableType&gt; mutableElements = ImmutableSet.of(mutable);\nstatic final Logger logger = Logger.getLogger(MyClass.getName());\nstatic final String[] nonEmptyArray = {&quot;these&quot;, &quot;can&quot;, &quot;change&quot;};\n</code></pre><p>这些名字通常是名词或名词短语。</p>\n<h4 id=\"5-2-5-非常量字段名\"><a href=\"#5-2-5-非常量字段名\" class=\"headerlink\" title=\"5.2.5 非常量字段名\"></a>5.2.5 非常量字段名</h4><p>非常量字段名以<code>lowerCamelCase</code>风格编写。</p>\n<p>这些名字通常是名词或名词短语。</p>\n<h4 id=\"5-2-6-参数名\"><a href=\"#5-2-6-参数名\" class=\"headerlink\" title=\"5.2.6 参数名\"></a>5.2.6 参数名</h4><p>参数名以<code>lowerCamelCase</code>风格编写。</p>\n<p>参数应该避免用单个字符命名。</p>\n<h4 id=\"5-2-7-局部变量名\"><a href=\"#5-2-7-局部变量名\" class=\"headerlink\" title=\"5.2.7 局部变量名\"></a>5.2.7 局部变量名</h4><p>局部变量名以<code>lowerCamelCase</code>风格编写，比起其它类型的名称，局部变量名可以有更为宽松的缩写。</p>\n<p>虽然缩写更宽松，但还是要避免用单字符进行命名，除了临时变量和循环变量。</p>\n<p>即使局部变量是final和不可改变的，也不应该把它示为常量，自然也不能用常量的规则去命名它。</p>\n<h4 id=\"5-2-8-类型变量名\"><a href=\"#5-2-8-类型变量名\" class=\"headerlink\" title=\"5.2.8 类型变量名\"></a>5.2.8 类型变量名</h4><p>类型变量可用以下两种风格之一进行命名：</p>\n<ul>\n<li>单个的大写字母，后面可以跟一个数字(如：E, T, X, T2)。</li>\n<li>以类命名方式(5.2.2节)，后面加个大写的T(如：RequestT, FooBarT)。</li>\n</ul>\n<h3 id=\"5-3-驼峰式命名法-CamelCase\"><a href=\"#5-3-驼峰式命名法-CamelCase\" class=\"headerlink\" title=\"5.3 驼峰式命名法(CamelCase)\"></a>5.3 驼峰式命名法(CamelCase)</h3><p><a href=\"http://zh.wikipedia.org/wiki/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB\" target=\"_blank\" rel=\"noopener\">驼峰式命名法</a>分大驼峰式命名法(<code>UpperCamelCase</code>)和小驼峰式命名法(<code>lowerCamelCase</code>)。<br>有时，我们有不只一种合理的方式将一个英语词组转换成驼峰形式，如缩略语或不寻常的结构(例如”IPv6”或”iOS”)。Google指定了以下的转换方案。</p>\n<p>名字从<code>散文形式</code>(prose form)开始:</p>\n<ol>\n<li>把短语转换为纯ASCII码，并且移除任何单引号。例如：”Müller’s algorithm”将变成”Muellers algorithm”。</li>\n<li>把这个结果切分成单词，在空格或其它标点符号(通常是连字符)处分割开。<ul>\n<li>推荐：如果某个单词已经有了常用的驼峰表示形式，按它的组成将它分割开(如”AdWords”将分割成”ad words”)。<br>需要注意的是”iOS”并不是一个真正的驼峰表示形式，因此该推荐对它并不适用。</li>\n</ul>\n</li>\n<li>现在将所有字母都小写(包括缩写)，然后将单词的第一个字母大写：<ul>\n<li>每个单词的第一个字母都大写，来得到大驼峰式命名。</li>\n<li>除了第一个单词，每个单词的第一个字母都大写，来得到小驼峰式命名。</li>\n</ul>\n</li>\n<li>最后将所有的单词连接起来得到一个标识符。</li>\n</ol>\n<p>示例：</p>\n<pre><code>Prose form                Correct               Incorrect\n------------------------------------------------------------------\n&quot;XML HTTP request&quot;        XmlHttpRequest        XMLHTTPRequest\n&quot;new customer ID&quot;         newCustomerId         newCustomerID\n&quot;inner stopwatch&quot;         innerStopwatch        innerStopWatch\n&quot;supports IPv6 on iOS?&quot;   supportsIpv6OnIos     supportsIPv6OnIOS\n&quot;YouTube importer&quot;        YouTubeImporter\n                          YoutubeImporter*\n</code></pre><p>加星号处表示可以，但不推荐。</p>\n<blockquote>\n<blockquote>\n<p>Note：在英语中，某些带有连字符的单词形式不唯一。例如：”nonempty”和”non-empty”都是正确的，因此方法名<code>checkNonempty</code>和<code>checkNonEmpty</code>也都是正确的。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"编程实践\"><a href=\"#编程实践\" class=\"headerlink\" title=\"编程实践\"></a><a id=\"Practice\">编程实践</a></h2><h3 id=\"6-1-Override：能用则用\"><a href=\"#6-1-Override：能用则用\" class=\"headerlink\" title=\"6.1 @Override：能用则用\"></a>6.1 @Override：能用则用</h3><p>只要是合法的，就把<code>@Override</code>注解给用上。</p>\n<h3 id=\"6-2-捕获的异常：不能忽视\"><a href=\"#6-2-捕获的异常：不能忽视\" class=\"headerlink\" title=\"6.2 捕获的异常：不能忽视\"></a>6.2 捕获的异常：不能忽视</h3><p>除了下面的例子，对捕获的异常不做响应是极少正确的。(典型的响应方式是打印日志，或者如果它被认为是不可能的，则把它当作一个<code>AssertionError</code>重新抛出。)</p>\n<p>如果它确实是不需要在catch块中做任何响应，需要做注释加以说明(如下面的例子)。</p>\n<pre><code>try {\n  int i = Integer.parseInt(response);\n  return handleNumericResponse(i);\n} catch (NumberFormatException ok) {\n  // it&apos;s not numeric; that&apos;s fine, just continue\n}\nreturn handleTextResponse(response);\n</code></pre><p><strong>例外</strong>：在测试中，如果一个捕获的异常被命名为<code>expected</code>，则它可以被不加注释地忽略。下面是一种非常常见的情形，用以确保所测试的方法会抛出一个期望中的异常，<br>因此在这里就没有必要加注释。</p>\n<pre><code>try {\n  emptyStack.pop();\n  fail();\n} catch (NoSuchElementException expected) {\n}\n</code></pre><h3 id=\"6-3-静态成员：使用类进行调用\"><a href=\"#6-3-静态成员：使用类进行调用\" class=\"headerlink\" title=\"6.3 静态成员：使用类进行调用\"></a>6.3 静态成员：使用类进行调用</h3><p>使用类名调用静态的类成员，而不是具体某个对象或表达式。</p>\n<pre><code>Foo aFoo = ...;\nFoo.aStaticMethod(); // good\naFoo.aStaticMethod(); // bad\nsomethingThatYieldsAFoo().aStaticMethod(); // very bad\n</code></pre><h3 id=\"6-4-Finalizers-禁用\"><a href=\"#6-4-Finalizers-禁用\" class=\"headerlink\" title=\"6.4 Finalizers: 禁用\"></a>6.4 Finalizers: 禁用</h3><p>极少会去重载<code>Object.finalize</code>。</p>\n<blockquote>\n<blockquote>\n<p>Tip：不要使用finalize。如果你非要使用它，请先仔细阅读和理解<a href=\"http://books.google.com/books?isbn=8131726592\" target=\"_blank\" rel=\"noopener\">Effective Java</a><br>第7条款：“Avoid Finalizers”，然后不要使用它。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"Javadoc\"><a href=\"#Javadoc\" class=\"headerlink\" title=\"Javadoc\"></a><a id=\"Javadoc\">Javadoc</a></h2><h3 id=\"7-1-格式\"><a href=\"#7-1-格式\" class=\"headerlink\" title=\"7.1 格式\"></a>7.1 格式</h3><h4 id=\"7-1-1-一般形式\"><a href=\"#7-1-1-一般形式\" class=\"headerlink\" title=\"7.1.1 一般形式\"></a>7.1.1 一般形式</h4><p>Javadoc块的基本格式如下所示：</p>\n<pre><code>/**\n * Multiple lines of Javadoc text are written here,\n * wrapped normally...\n */\npublic int method(String p1) { ... }\n</code></pre><p>或者是以下单行形式：</p>\n<pre><code>/** An especially short bit of Javadoc. */\n</code></pre><p>基本格式总是OK的。当整个Javadoc块能容纳于一行时(且没有Javadoc标记@XXX)，可以使用单行形式。</p>\n<h4 id=\"7-1-2-段落\"><a href=\"#7-1-2-段落\" class=\"headerlink\" title=\"7.1.2 段落\"></a>7.1.2 段落</h4><p>空行(即，只包含最左侧星号的行)会出现在段落之间和Javadoc标记(@XXX)之前(如果有的话)。<br>除了第一个段落，每个段落第一个单词前都有标签<code>&lt;p&gt;</code>，并且它和第一个单词间没有空格。</p>\n<h4 id=\"7-1-3-Javadoc标记\"><a href=\"#7-1-3-Javadoc标记\" class=\"headerlink\" title=\"7.1.3 Javadoc标记\"></a>7.1.3 Javadoc标记</h4><p>标准的Javadoc标记按以下顺序出现：<code>@param</code>, <code>@return</code>, <code>@throws</code>, <code>@deprecated</code>, 前面这4种标记如果出现，描述都不能为空。<br>当描述无法在一行中容纳，连续行需要至少再缩进4个空格。</p>\n<h3 id=\"7-2-摘要片段\"><a href=\"#7-2-摘要片段\" class=\"headerlink\" title=\"7.2 摘要片段\"></a>7.2 摘要片段</h3><p>每个类或成员的Javadoc以一个简短的摘要片段开始。这个片段是非常重要的，在某些情况下，它是唯一出现的文本，比如在类和方法索引中。</p>\n<p>这只是一个小片段，可以是一个名词短语或动词短语，但不是一个完整的句子。它不会以<code>A {@code Foo} is a...</code>或<code>This method returns...</code>开头,<br>它也不会是一个完整的祈使句，如<code>Save the record...</code>。然而，由于开头大写及被加了标点，它看起来就像是个完整的句子。</p>\n<blockquote>\n<blockquote>\n<p>Tip：一个常见的错误是把简单的Javadoc写成<code>/** @return the customer ID */</code>，这是不正确的。它应该写成<code>/** Returns the customer ID. */</code>。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"7-3-哪里需要使用Javadoc\"><a href=\"#7-3-哪里需要使用Javadoc\" class=\"headerlink\" title=\"7.3 哪里需要使用Javadoc\"></a>7.3 哪里需要使用Javadoc</h3><p>至少在每个public类及它的每个public和protected成员处使用Javadoc，以下是一些例外：</p>\n<h4 id=\"7-3-1-例外：不言自明的方法\"><a href=\"#7-3-1-例外：不言自明的方法\" class=\"headerlink\" title=\"7.3.1 例外：不言自明的方法\"></a>7.3.1 例外：不言自明的方法</h4><p>对于简单明显的方法如<code>getFoo</code>，Javadoc是可选的(即，是可以不写的)。这种情况下除了写“Returns the foo”，确实也没有什么值得写了。</p>\n<p>单元测试类中的测试方法可能是不言自明的最常见例子了，我们通常可以从这些方法的描述性命名中知道它是干什么的，因此不需要额外的文档说明。</p>\n<blockquote>\n<blockquote>\n<p>Tip：如果有一些相关信息是需要读者了解的，那么以上的例外不应作为忽视这些信息的理由。例如，对于方法名<code>getCanonicalName</code>，<br>就不应该忽视文档说明，因为读者很可能不知道词语<code>canonical name</code>指的是什么。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"7-3-2-例外：重载\"><a href=\"#7-3-2-例外：重载\" class=\"headerlink\" title=\"7.3.2 例外：重载\"></a>7.3.2 例外：重载</h4><p>如果一个方法重载了超类中的方法，那么Javadoc并非必需的。</p>\n<h4 id=\"7-3-3-可选的Javadoc\"><a href=\"#7-3-3-可选的Javadoc\" class=\"headerlink\" title=\"7.3.3 可选的Javadoc\"></a>7.3.3 可选的Javadoc</h4><p>对于包外不可见的类和方法，如有需要，也是要使用Javadoc的。如果一个注释是用来定义一个类，方法，字段的整体目的或行为，<br>那么这个注释应该写成Javadoc，这样更统一更友好。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a><a id=\"End\">后记</a></h2><p>本文档翻译自<a href=\"http://google-styleguide.googlecode.com/svn/trunk/javaguide.html\" target=\"_blank\" rel=\"noopener\">Google Java Style</a>，<br>译者<a href=\"http://weibo.com/hawstein\" target=\"_blank\" rel=\"noopener\">@Hawstein</a>。</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>checkstyle <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml\" target=\"_blank\" rel=\"noopener\">https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml</a></p>\n"},{"title":"hibernate应用报could not initialize proxy - no Session分析","date":"2014-07-17T13:52:17.000Z","_content":"\n\n### 1.场景描述:\n\t\t\n某项目使用hibernate,在切换到dubbo后,在构造结果对象时从延迟加载对象中获取数据时,报`org.hibernate.LazyInitializationException: could not initialize proxy - no Session`\n\t\n构造结果对象的操作没有在事务环境下执行.\n\t\n### 2.原因分析:\n\t\ncxf不报错是因为在web.xml中配置了`org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter`,在请求到达web filter后,创建了`EntityManager`,请求结束后关闭`EntityManager`.在请求线程处理过程中,都可以拿到`EntityManager`,所以不会报错(至少可以从ThreadLocal中拿到).\n\t\n切换为dubbo后,请求不会经过web filter,在事务模版代码中执行业务操作,可以正确的拿到`EntityManager`,不会报错.但是执行到构造结果对象时,就悲剧了.\n\t\n\t\n### 3.解决办法:\n\t\n1.修改模版方法,把构造结果对象部分的代码也放到事务中执行.\n\t\t\n2.编写支持dubbo的OpenEntityManagerInViewFilter\n\t\t\n  可以通过`TransactionSynchronizationManager`做到如果`EntityManagerFactory`在线程变量中不存在则创建`EntityManager`,服务处理结束时,关闭`EntityManager`.\n\t\t\n\t\n### 4.优劣分析\n\t\n1. 性能考虑\n\t\n\t`open session in veiw`模式还是不怎么优雅,事务执行链路太长了,会影响性能.而且对于我们提供的服务接口来说,构造结果对象已经是最后一步了,后面再也不需要延迟加载对象,不需要在filter里面来做此操作.\n\t\n\tweb应用有在渲染模版时读取延迟加载对象的场景,这种场景使用还有意义.\n\t\n2. 功能角度\n\t\n\t如果遇到应用内的两个dubbo服务调用,dubbo会走injvm协议.此时请求不会经过io栈,但是会执行所有的dubbo filter.\n\t\t\n\t比如外部请求调用服务A,服务A调用内部服务B.\n\t\t\n\t外部请求调A时,filter创建`EntityManager`,然后调用服务B时,filter不创建`EntityManager`,但是在请求B结束时,filter关闭了`EntityManager`.在请求A中处理剩下的业务逻辑,如果遇到要操作数据库,就只有哭了.\n\t\t\n\t为什么web请求就不怕这种filter重入呢?web请求在forward时,你必须把request对象带进去,所以可以在request对象的attribute里面记录是否进过了这个filter.可以参考`org.springframework.web.filter.OncePerRequestFilter`.但是调用dubbo时,你只需要拿到服务代理对象就ok了,没有办法来知道整个请求链的情况.\n\t\t\n\t\t\n### 5.最后结论\n\n还是修改下我们自己的代码,把构造结果对象部分的代码也放到事务中执行.\n\t\n\n\t","source":"_posts/hibernate-no-session-in-dubbo.md","raw":"---\ntitle: hibernate应用报could not initialize proxy - no Session分析\ndate: 2014-07-17 21:52:17\ncategories: java\ntags:\n  - hibernate\n---\n\n\n### 1.场景描述:\n\t\t\n某项目使用hibernate,在切换到dubbo后,在构造结果对象时从延迟加载对象中获取数据时,报`org.hibernate.LazyInitializationException: could not initialize proxy - no Session`\n\t\n构造结果对象的操作没有在事务环境下执行.\n\t\n### 2.原因分析:\n\t\ncxf不报错是因为在web.xml中配置了`org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter`,在请求到达web filter后,创建了`EntityManager`,请求结束后关闭`EntityManager`.在请求线程处理过程中,都可以拿到`EntityManager`,所以不会报错(至少可以从ThreadLocal中拿到).\n\t\n切换为dubbo后,请求不会经过web filter,在事务模版代码中执行业务操作,可以正确的拿到`EntityManager`,不会报错.但是执行到构造结果对象时,就悲剧了.\n\t\n\t\n### 3.解决办法:\n\t\n1.修改模版方法,把构造结果对象部分的代码也放到事务中执行.\n\t\t\n2.编写支持dubbo的OpenEntityManagerInViewFilter\n\t\t\n  可以通过`TransactionSynchronizationManager`做到如果`EntityManagerFactory`在线程变量中不存在则创建`EntityManager`,服务处理结束时,关闭`EntityManager`.\n\t\t\n\t\n### 4.优劣分析\n\t\n1. 性能考虑\n\t\n\t`open session in veiw`模式还是不怎么优雅,事务执行链路太长了,会影响性能.而且对于我们提供的服务接口来说,构造结果对象已经是最后一步了,后面再也不需要延迟加载对象,不需要在filter里面来做此操作.\n\t\n\tweb应用有在渲染模版时读取延迟加载对象的场景,这种场景使用还有意义.\n\t\n2. 功能角度\n\t\n\t如果遇到应用内的两个dubbo服务调用,dubbo会走injvm协议.此时请求不会经过io栈,但是会执行所有的dubbo filter.\n\t\t\n\t比如外部请求调用服务A,服务A调用内部服务B.\n\t\t\n\t外部请求调A时,filter创建`EntityManager`,然后调用服务B时,filter不创建`EntityManager`,但是在请求B结束时,filter关闭了`EntityManager`.在请求A中处理剩下的业务逻辑,如果遇到要操作数据库,就只有哭了.\n\t\t\n\t为什么web请求就不怕这种filter重入呢?web请求在forward时,你必须把request对象带进去,所以可以在request对象的attribute里面记录是否进过了这个filter.可以参考`org.springframework.web.filter.OncePerRequestFilter`.但是调用dubbo时,你只需要拿到服务代理对象就ok了,没有办法来知道整个请求链的情况.\n\t\t\n\t\t\n### 5.最后结论\n\n还是修改下我们自己的代码,把构造结果对象部分的代码也放到事务中执行.\n\t\n\n\t","slug":"hibernate-no-session-in-dubbo","published":1,"updated":"2018-04-01T16:53:17.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2kshp002yp0ugv602z9bz","content":"<h3 id=\"1-场景描述\"><a href=\"#1-场景描述\" class=\"headerlink\" title=\"1.场景描述:\"></a>1.场景描述:</h3><p>某项目使用hibernate,在切换到dubbo后,在构造结果对象时从延迟加载对象中获取数据时,报<code>org.hibernate.LazyInitializationException: could not initialize proxy - no Session</code></p>\n<p>构造结果对象的操作没有在事务环境下执行.</p>\n<h3 id=\"2-原因分析\"><a href=\"#2-原因分析\" class=\"headerlink\" title=\"2.原因分析:\"></a>2.原因分析:</h3><p>cxf不报错是因为在web.xml中配置了<code>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</code>,在请求到达web filter后,创建了<code>EntityManager</code>,请求结束后关闭<code>EntityManager</code>.在请求线程处理过程中,都可以拿到<code>EntityManager</code>,所以不会报错(至少可以从ThreadLocal中拿到).</p>\n<p>切换为dubbo后,请求不会经过web filter,在事务模版代码中执行业务操作,可以正确的拿到<code>EntityManager</code>,不会报错.但是执行到构造结果对象时,就悲剧了.</p>\n<h3 id=\"3-解决办法\"><a href=\"#3-解决办法\" class=\"headerlink\" title=\"3.解决办法:\"></a>3.解决办法:</h3><p>1.修改模版方法,把构造结果对象部分的代码也放到事务中执行.</p>\n<p>2.编写支持dubbo的OpenEntityManagerInViewFilter</p>\n<p>  可以通过<code>TransactionSynchronizationManager</code>做到如果<code>EntityManagerFactory</code>在线程变量中不存在则创建<code>EntityManager</code>,服务处理结束时,关闭<code>EntityManager</code>.</p>\n<h3 id=\"4-优劣分析\"><a href=\"#4-优劣分析\" class=\"headerlink\" title=\"4.优劣分析\"></a>4.优劣分析</h3><ol>\n<li><p>性能考虑</p>\n<p> <code>open session in veiw</code>模式还是不怎么优雅,事务执行链路太长了,会影响性能.而且对于我们提供的服务接口来说,构造结果对象已经是最后一步了,后面再也不需要延迟加载对象,不需要在filter里面来做此操作.</p>\n<p> web应用有在渲染模版时读取延迟加载对象的场景,这种场景使用还有意义.</p>\n</li>\n<li><p>功能角度</p>\n<p> 如果遇到应用内的两个dubbo服务调用,dubbo会走injvm协议.此时请求不会经过io栈,但是会执行所有的dubbo filter.</p>\n<p> 比如外部请求调用服务A,服务A调用内部服务B.</p>\n<p> 外部请求调A时,filter创建<code>EntityManager</code>,然后调用服务B时,filter不创建<code>EntityManager</code>,但是在请求B结束时,filter关闭了<code>EntityManager</code>.在请求A中处理剩下的业务逻辑,如果遇到要操作数据库,就只有哭了.</p>\n<p> 为什么web请求就不怕这种filter重入呢?web请求在forward时,你必须把request对象带进去,所以可以在request对象的attribute里面记录是否进过了这个filter.可以参考<code>org.springframework.web.filter.OncePerRequestFilter</code>.但是调用dubbo时,你只需要拿到服务代理对象就ok了,没有办法来知道整个请求链的情况.</p>\n</li>\n</ol>\n<h3 id=\"5-最后结论\"><a href=\"#5-最后结论\" class=\"headerlink\" title=\"5.最后结论\"></a>5.最后结论</h3><p>还是修改下我们自己的代码,把构造结果对象部分的代码也放到事务中执行.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-场景描述\"><a href=\"#1-场景描述\" class=\"headerlink\" title=\"1.场景描述:\"></a>1.场景描述:</h3><p>某项目使用hibernate,在切换到dubbo后,在构造结果对象时从延迟加载对象中获取数据时,报<code>org.hibernate.LazyInitializationException: could not initialize proxy - no Session</code></p>\n<p>构造结果对象的操作没有在事务环境下执行.</p>\n<h3 id=\"2-原因分析\"><a href=\"#2-原因分析\" class=\"headerlink\" title=\"2.原因分析:\"></a>2.原因分析:</h3><p>cxf不报错是因为在web.xml中配置了<code>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</code>,在请求到达web filter后,创建了<code>EntityManager</code>,请求结束后关闭<code>EntityManager</code>.在请求线程处理过程中,都可以拿到<code>EntityManager</code>,所以不会报错(至少可以从ThreadLocal中拿到).</p>\n<p>切换为dubbo后,请求不会经过web filter,在事务模版代码中执行业务操作,可以正确的拿到<code>EntityManager</code>,不会报错.但是执行到构造结果对象时,就悲剧了.</p>\n<h3 id=\"3-解决办法\"><a href=\"#3-解决办法\" class=\"headerlink\" title=\"3.解决办法:\"></a>3.解决办法:</h3><p>1.修改模版方法,把构造结果对象部分的代码也放到事务中执行.</p>\n<p>2.编写支持dubbo的OpenEntityManagerInViewFilter</p>\n<p>  可以通过<code>TransactionSynchronizationManager</code>做到如果<code>EntityManagerFactory</code>在线程变量中不存在则创建<code>EntityManager</code>,服务处理结束时,关闭<code>EntityManager</code>.</p>\n<h3 id=\"4-优劣分析\"><a href=\"#4-优劣分析\" class=\"headerlink\" title=\"4.优劣分析\"></a>4.优劣分析</h3><ol>\n<li><p>性能考虑</p>\n<p> <code>open session in veiw</code>模式还是不怎么优雅,事务执行链路太长了,会影响性能.而且对于我们提供的服务接口来说,构造结果对象已经是最后一步了,后面再也不需要延迟加载对象,不需要在filter里面来做此操作.</p>\n<p> web应用有在渲染模版时读取延迟加载对象的场景,这种场景使用还有意义.</p>\n</li>\n<li><p>功能角度</p>\n<p> 如果遇到应用内的两个dubbo服务调用,dubbo会走injvm协议.此时请求不会经过io栈,但是会执行所有的dubbo filter.</p>\n<p> 比如外部请求调用服务A,服务A调用内部服务B.</p>\n<p> 外部请求调A时,filter创建<code>EntityManager</code>,然后调用服务B时,filter不创建<code>EntityManager</code>,但是在请求B结束时,filter关闭了<code>EntityManager</code>.在请求A中处理剩下的业务逻辑,如果遇到要操作数据库,就只有哭了.</p>\n<p> 为什么web请求就不怕这种filter重入呢?web请求在forward时,你必须把request对象带进去,所以可以在request对象的attribute里面记录是否进过了这个filter.可以参考<code>org.springframework.web.filter.OncePerRequestFilter</code>.但是调用dubbo时,你只需要拿到服务代理对象就ok了,没有办法来知道整个请求链的情况.</p>\n</li>\n</ol>\n<h3 id=\"5-最后结论\"><a href=\"#5-最后结论\" class=\"headerlink\" title=\"5.最后结论\"></a>5.最后结论</h3><p>还是修改下我们自己的代码,把构造结果对象部分的代码也放到事务中执行.</p>\n"},{"title":"java序列化","date":"2012-04-02T13:52:17.000Z","_content":"\n## 什么是序列化\n\nserialization is the process of converting a data structure or object state into a format that can be stored (for example, in a file or memory buffer, or transmitted across a network connection link) and \"resurrected\" later in the same or another computer environment.\n<!--more-->\n## JAVA内置序列化介绍\n\n### 基本介绍\n\n由于Java提供了良好的默认支持，实现基本的对象序列化是件比较简单的事。待序列化的Java类只需要实现Serializable接口即可。Serializable仅是一个标记接口，并不包含任何需要实现的具体方法。实现该接口只是为了声明该Java类的对象是可以被序列化的。实际的序列化和反序列化工作是通过ObjectOuputStream和ObjectInputStream来完成的。ObjectOutputStream的writeObject方法可以把一个Java对象写入到流中，ObjectInputStream的readObject方法可以从流中读取一个Java对象。\n\n在写入和读取的时候，虽然用的参数或返回值是单个对象，但实际上操纵的是一个对象图，包括该对象所引用的其它对象，以及这些对象所引用的另外的对象。Java会自动帮你遍历对象图并逐个序列化。除了对象之外，Java中的基本类型和数组也是可以通过 ObjectOutputStream和ObjectInputStream来序列化的。\n\n序列化:\n\n\ttry {\n\t    User user = new User(\"Bohr\", \"QIU\");\n\t    ObjectOutputStream output = new ObjectOutputStream(new FileOutputStream(\"user.bin\"));\n\t    output.writeObject(user);\n\t    output.close();\n\t} catch (IOException e) {\n\t    e.printStackTrace();\n\t}\n\n反序列化:\n \n\ttry {\n\t    ObjectInputStream input = new ObjectInputStream(new FileInputStream(\"user.bin\"));\n\t    User user = (User) input.readObject();\n\t    System.out.println(user);\t\n\t} catch (Exception e) {\t\n\t    e.printStackTrace();\t\n\t}\n\n User类实现了Serializable接口。\n\n### FAQ\n\n#### 哪些东东会被序列化\n\n序列化只保存状态，不保存行为。在默认的序列化实现中，Java对象中的非静态和非瞬时域都会被序列化。\n\n#### 如何控制序列化字段\n\n1、把域声明为瞬时的，即使用transient关键词。\n\n2、添加一个serialPersistentFields域来声明序列化时要包含的域。\n\n\n\tprivate static final ObjectStreamField[] serialPersistentFields = { \n\t    new ObjectStreamField(\"firstName\", String.class) \n\t};  \n上面的代码给出了 serialPersistentFields的声明示例，即只有firstName这个域是要被序列化的。\n\n#### 为什么反序列化时不成功\n\n虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，一个非常重要的一点是两个类的序列化 ID 是否一致（就是 private static final long serialVersionUID = 1L）。\n\n如果类没有serialVersionUID静态字段，jvm在反序列化时会根据field情况生成serialVersionUID，类字段增减时，就会出现版本不一致的问题，最好添加一个默认的版本，当然也可以通过这种方式来控制类的不同版本。\n\n#### 实现了Serializable接口为什么还是序列化不成功？\n\n如果类中的域包含不可序列化的对象，序列化就会失败，抛出NotSerializableException。\n\n#### 父类实现了Serializable接口，子类不想序列化怎么办？\n\n子类可以重载writeObject () 或者 readObject ()方法，在方法体中throw NotSerializableException \n\n#### 什么是compatible changes and incompatible changes\n\n增减字段或者方法属于compatible changes，只要serialVersionUID相同，还可以成功的反序列化。但是如果修改类层次，或者不实现Serializable接口，就属于incompatible changes。参考java 序列化规范\n\n#### 反序列化后的对象和new 的对象有什么区别\n\n在通过ObjectInputStream的readObject方法读取到一个对象之后，这个对象是一个新的实例，但是其构造方法是没有被调用的，其中的域的初始化代码也没有被执行。对于那些没有被序列化的域，在新创建出来的对象中的值都是默认的。也就是说，这个对象从某种角度上来说是不完备的。这有可能会造成一些隐含的错误。调用者并不知道对象是通过一般的new操作符来创建的，还是通过反序列化所得到的。解决的办法就是在类的readObject方法里面，再执行所需的对象初始化逻辑。对于一般的Java类来说，构造方法中包含了初始化的逻辑。可以把这些逻辑提取到一个方法中，在readObject方法中调用此方法。\n\n#### 序列化安全性\n\nJava对象序列化之后的内容格式是公开的。所以可以很容易的从中提取出各种信息。从实现的角度来说，可以从不同的层次来加强序列化的安全性。\n\n对序列化之后的流进行加密。这可以通过CipherOutputStream来实现。\n实现自己的writeObject和readObject方法，在调用defaultWriteObject之前，先对要序列化的域的值进行加密处理。\n使用一个SignedObject或SealedObject来封装当前对象，用SignedObject或SealedObject进行序列化。\n在从流中进行反序列化的时候，可以通过ObjectInputStream的registerValidation方法添加ObjectInputValidation接口的实现，用来验证反序列化之后得到的对象是否合法。\n \n\n#### 自定义对象序列化\n\n##### Serializable接口\n\n`Serializable`接口是一个标记接口，接口内没有任何方法，但是在实际的序列化和反序列化过程中，jvm通过一些契约规则来满足用户自定义需求。\n\n基本的对象序列化机制让开发人员可以在包含哪些域上进行定制。如果想对序列化的过程进行更加细粒度的控制，就需要在类中添加writeObject和对应的 readObject方法。这两个方法属于前面提到的序列化机制的隐含契约的一部分。在通过ObjectOutputStream的 writeObject方法写入对象的时候，如果这个对象的类中定义了writeObject方法，就会调用该方法，并把当前 ObjectOutputStream对象作为参数传递进去。writeObject方法中一般会包含自定义的序列化逻辑，比如在写入之前修改域的值，或是写入额外的数据等。对于writeObject中添加的逻辑，在对应的readObject中都需要反转过来，与之对应。\n\n在添加自己的逻辑之前，推荐的做法是先调用Java的默认实现。在writeObject方法中通过ObjectOutputStream的defaultWriteObject来完成，在readObject方法则通过ObjectInputStream的defaultReadObject来实现。下面的代码在对象的序列化流中写入了一个额外的字符串。\n\n\t\n\tprivate void writeObject(ObjectOutputStream output) throws IOException {\n\t    output.defaultWriteObject();\n\t    output.writeUTF(\"Hello World\");\n\t}\n\t\n\tprivate void readObject(ObjectInputStream input) throws IOException, ClassNotFoundException {\n\t    input.defaultReadObject();\n\t    String value = input.readUTF();\t\n\t    System.out.println(value);\n\t\n\t} \n \n##### Externalizable接口\n\n`Externalizable` 是一个包含方法签名的接口,包括writeExternal和readExternal: \n\n\t public void readExternal(ObjectInput arg0) throws IOException,  \n\t            ClassNotFoundException {  \n\t        Object obj = arg0.readObject();       \n\t }  \n\t\n\t public void writeExternal(ObjectOutput arg0) throws IOException {   \n\t        arg0.writeObject(\"Hello world\");  \n\t }  \n\n\n参考:\n[http://www.infoq.com/cn/articles/cf-java-object-serialization-rmi](http://www.infoq.com/cn/articles/cf-java-object-serialization-rmi)","source":"_posts/java-serialization.md","raw":"---\ntitle: java序列化\ndate: 2012-04-02 21:52:17\ncategories: java\ntags:\n  - java序列化\n---\n\n## 什么是序列化\n\nserialization is the process of converting a data structure or object state into a format that can be stored (for example, in a file or memory buffer, or transmitted across a network connection link) and \"resurrected\" later in the same or another computer environment.\n<!--more-->\n## JAVA内置序列化介绍\n\n### 基本介绍\n\n由于Java提供了良好的默认支持，实现基本的对象序列化是件比较简单的事。待序列化的Java类只需要实现Serializable接口即可。Serializable仅是一个标记接口，并不包含任何需要实现的具体方法。实现该接口只是为了声明该Java类的对象是可以被序列化的。实际的序列化和反序列化工作是通过ObjectOuputStream和ObjectInputStream来完成的。ObjectOutputStream的writeObject方法可以把一个Java对象写入到流中，ObjectInputStream的readObject方法可以从流中读取一个Java对象。\n\n在写入和读取的时候，虽然用的参数或返回值是单个对象，但实际上操纵的是一个对象图，包括该对象所引用的其它对象，以及这些对象所引用的另外的对象。Java会自动帮你遍历对象图并逐个序列化。除了对象之外，Java中的基本类型和数组也是可以通过 ObjectOutputStream和ObjectInputStream来序列化的。\n\n序列化:\n\n\ttry {\n\t    User user = new User(\"Bohr\", \"QIU\");\n\t    ObjectOutputStream output = new ObjectOutputStream(new FileOutputStream(\"user.bin\"));\n\t    output.writeObject(user);\n\t    output.close();\n\t} catch (IOException e) {\n\t    e.printStackTrace();\n\t}\n\n反序列化:\n \n\ttry {\n\t    ObjectInputStream input = new ObjectInputStream(new FileInputStream(\"user.bin\"));\n\t    User user = (User) input.readObject();\n\t    System.out.println(user);\t\n\t} catch (Exception e) {\t\n\t    e.printStackTrace();\t\n\t}\n\n User类实现了Serializable接口。\n\n### FAQ\n\n#### 哪些东东会被序列化\n\n序列化只保存状态，不保存行为。在默认的序列化实现中，Java对象中的非静态和非瞬时域都会被序列化。\n\n#### 如何控制序列化字段\n\n1、把域声明为瞬时的，即使用transient关键词。\n\n2、添加一个serialPersistentFields域来声明序列化时要包含的域。\n\n\n\tprivate static final ObjectStreamField[] serialPersistentFields = { \n\t    new ObjectStreamField(\"firstName\", String.class) \n\t};  \n上面的代码给出了 serialPersistentFields的声明示例，即只有firstName这个域是要被序列化的。\n\n#### 为什么反序列化时不成功\n\n虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，一个非常重要的一点是两个类的序列化 ID 是否一致（就是 private static final long serialVersionUID = 1L）。\n\n如果类没有serialVersionUID静态字段，jvm在反序列化时会根据field情况生成serialVersionUID，类字段增减时，就会出现版本不一致的问题，最好添加一个默认的版本，当然也可以通过这种方式来控制类的不同版本。\n\n#### 实现了Serializable接口为什么还是序列化不成功？\n\n如果类中的域包含不可序列化的对象，序列化就会失败，抛出NotSerializableException。\n\n#### 父类实现了Serializable接口，子类不想序列化怎么办？\n\n子类可以重载writeObject () 或者 readObject ()方法，在方法体中throw NotSerializableException \n\n#### 什么是compatible changes and incompatible changes\n\n增减字段或者方法属于compatible changes，只要serialVersionUID相同，还可以成功的反序列化。但是如果修改类层次，或者不实现Serializable接口，就属于incompatible changes。参考java 序列化规范\n\n#### 反序列化后的对象和new 的对象有什么区别\n\n在通过ObjectInputStream的readObject方法读取到一个对象之后，这个对象是一个新的实例，但是其构造方法是没有被调用的，其中的域的初始化代码也没有被执行。对于那些没有被序列化的域，在新创建出来的对象中的值都是默认的。也就是说，这个对象从某种角度上来说是不完备的。这有可能会造成一些隐含的错误。调用者并不知道对象是通过一般的new操作符来创建的，还是通过反序列化所得到的。解决的办法就是在类的readObject方法里面，再执行所需的对象初始化逻辑。对于一般的Java类来说，构造方法中包含了初始化的逻辑。可以把这些逻辑提取到一个方法中，在readObject方法中调用此方法。\n\n#### 序列化安全性\n\nJava对象序列化之后的内容格式是公开的。所以可以很容易的从中提取出各种信息。从实现的角度来说，可以从不同的层次来加强序列化的安全性。\n\n对序列化之后的流进行加密。这可以通过CipherOutputStream来实现。\n实现自己的writeObject和readObject方法，在调用defaultWriteObject之前，先对要序列化的域的值进行加密处理。\n使用一个SignedObject或SealedObject来封装当前对象，用SignedObject或SealedObject进行序列化。\n在从流中进行反序列化的时候，可以通过ObjectInputStream的registerValidation方法添加ObjectInputValidation接口的实现，用来验证反序列化之后得到的对象是否合法。\n \n\n#### 自定义对象序列化\n\n##### Serializable接口\n\n`Serializable`接口是一个标记接口，接口内没有任何方法，但是在实际的序列化和反序列化过程中，jvm通过一些契约规则来满足用户自定义需求。\n\n基本的对象序列化机制让开发人员可以在包含哪些域上进行定制。如果想对序列化的过程进行更加细粒度的控制，就需要在类中添加writeObject和对应的 readObject方法。这两个方法属于前面提到的序列化机制的隐含契约的一部分。在通过ObjectOutputStream的 writeObject方法写入对象的时候，如果这个对象的类中定义了writeObject方法，就会调用该方法，并把当前 ObjectOutputStream对象作为参数传递进去。writeObject方法中一般会包含自定义的序列化逻辑，比如在写入之前修改域的值，或是写入额外的数据等。对于writeObject中添加的逻辑，在对应的readObject中都需要反转过来，与之对应。\n\n在添加自己的逻辑之前，推荐的做法是先调用Java的默认实现。在writeObject方法中通过ObjectOutputStream的defaultWriteObject来完成，在readObject方法则通过ObjectInputStream的defaultReadObject来实现。下面的代码在对象的序列化流中写入了一个额外的字符串。\n\n\t\n\tprivate void writeObject(ObjectOutputStream output) throws IOException {\n\t    output.defaultWriteObject();\n\t    output.writeUTF(\"Hello World\");\n\t}\n\t\n\tprivate void readObject(ObjectInputStream input) throws IOException, ClassNotFoundException {\n\t    input.defaultReadObject();\n\t    String value = input.readUTF();\t\n\t    System.out.println(value);\n\t\n\t} \n \n##### Externalizable接口\n\n`Externalizable` 是一个包含方法签名的接口,包括writeExternal和readExternal: \n\n\t public void readExternal(ObjectInput arg0) throws IOException,  \n\t            ClassNotFoundException {  \n\t        Object obj = arg0.readObject();       \n\t }  \n\t\n\t public void writeExternal(ObjectOutput arg0) throws IOException {   \n\t        arg0.writeObject(\"Hello world\");  \n\t }  \n\n\n参考:\n[http://www.infoq.com/cn/articles/cf-java-object-serialization-rmi](http://www.infoq.com/cn/articles/cf-java-object-serialization-rmi)","slug":"java-serialization","published":1,"updated":"2018-04-01T16:53:17.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2kshq0031p0ug38qgapd8","content":"<h2 id=\"什么是序列化\"><a href=\"#什么是序列化\" class=\"headerlink\" title=\"什么是序列化\"></a>什么是序列化</h2><p>serialization is the process of converting a data structure or object state into a format that can be stored (for example, in a file or memory buffer, or transmitted across a network connection link) and “resurrected” later in the same or another computer environment.<br><a id=\"more\"></a></p>\n<h2 id=\"JAVA内置序列化介绍\"><a href=\"#JAVA内置序列化介绍\" class=\"headerlink\" title=\"JAVA内置序列化介绍\"></a>JAVA内置序列化介绍</h2><h3 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>由于Java提供了良好的默认支持，实现基本的对象序列化是件比较简单的事。待序列化的Java类只需要实现Serializable接口即可。Serializable仅是一个标记接口，并不包含任何需要实现的具体方法。实现该接口只是为了声明该Java类的对象是可以被序列化的。实际的序列化和反序列化工作是通过ObjectOuputStream和ObjectInputStream来完成的。ObjectOutputStream的writeObject方法可以把一个Java对象写入到流中，ObjectInputStream的readObject方法可以从流中读取一个Java对象。</p>\n<p>在写入和读取的时候，虽然用的参数或返回值是单个对象，但实际上操纵的是一个对象图，包括该对象所引用的其它对象，以及这些对象所引用的另外的对象。Java会自动帮你遍历对象图并逐个序列化。除了对象之外，Java中的基本类型和数组也是可以通过 ObjectOutputStream和ObjectInputStream来序列化的。</p>\n<p>序列化:</p>\n<pre><code>try {\n    User user = new User(&quot;Bohr&quot;, &quot;QIU&quot;);\n    ObjectOutputStream output = new ObjectOutputStream(new FileOutputStream(&quot;user.bin&quot;));\n    output.writeObject(user);\n    output.close();\n} catch (IOException e) {\n    e.printStackTrace();\n}\n</code></pre><p>反序列化:</p>\n<pre><code>try {\n    ObjectInputStream input = new ObjectInputStream(new FileInputStream(&quot;user.bin&quot;));\n    User user = (User) input.readObject();\n    System.out.println(user);    \n} catch (Exception e) {    \n    e.printStackTrace();    \n}\n</code></pre><p> User类实现了Serializable接口。</p>\n<h3 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h3><h4 id=\"哪些东东会被序列化\"><a href=\"#哪些东东会被序列化\" class=\"headerlink\" title=\"哪些东东会被序列化\"></a>哪些东东会被序列化</h4><p>序列化只保存状态，不保存行为。在默认的序列化实现中，Java对象中的非静态和非瞬时域都会被序列化。</p>\n<h4 id=\"如何控制序列化字段\"><a href=\"#如何控制序列化字段\" class=\"headerlink\" title=\"如何控制序列化字段\"></a>如何控制序列化字段</h4><p>1、把域声明为瞬时的，即使用transient关键词。</p>\n<p>2、添加一个serialPersistentFields域来声明序列化时要包含的域。</p>\n<pre><code>private static final ObjectStreamField[] serialPersistentFields = { \n    new ObjectStreamField(&quot;firstName&quot;, String.class) \n};  \n</code></pre><p>上面的代码给出了 serialPersistentFields的声明示例，即只有firstName这个域是要被序列化的。</p>\n<h4 id=\"为什么反序列化时不成功\"><a href=\"#为什么反序列化时不成功\" class=\"headerlink\" title=\"为什么反序列化时不成功\"></a>为什么反序列化时不成功</h4><p>虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，一个非常重要的一点是两个类的序列化 ID 是否一致（就是 private static final long serialVersionUID = 1L）。</p>\n<p>如果类没有serialVersionUID静态字段，jvm在反序列化时会根据field情况生成serialVersionUID，类字段增减时，就会出现版本不一致的问题，最好添加一个默认的版本，当然也可以通过这种方式来控制类的不同版本。</p>\n<h4 id=\"实现了Serializable接口为什么还是序列化不成功？\"><a href=\"#实现了Serializable接口为什么还是序列化不成功？\" class=\"headerlink\" title=\"实现了Serializable接口为什么还是序列化不成功？\"></a>实现了Serializable接口为什么还是序列化不成功？</h4><p>如果类中的域包含不可序列化的对象，序列化就会失败，抛出NotSerializableException。</p>\n<h4 id=\"父类实现了Serializable接口，子类不想序列化怎么办？\"><a href=\"#父类实现了Serializable接口，子类不想序列化怎么办？\" class=\"headerlink\" title=\"父类实现了Serializable接口，子类不想序列化怎么办？\"></a>父类实现了Serializable接口，子类不想序列化怎么办？</h4><p>子类可以重载writeObject () 或者 readObject ()方法，在方法体中throw NotSerializableException </p>\n<h4 id=\"什么是compatible-changes-and-incompatible-changes\"><a href=\"#什么是compatible-changes-and-incompatible-changes\" class=\"headerlink\" title=\"什么是compatible changes and incompatible changes\"></a>什么是compatible changes and incompatible changes</h4><p>增减字段或者方法属于compatible changes，只要serialVersionUID相同，还可以成功的反序列化。但是如果修改类层次，或者不实现Serializable接口，就属于incompatible changes。参考java 序列化规范</p>\n<h4 id=\"反序列化后的对象和new-的对象有什么区别\"><a href=\"#反序列化后的对象和new-的对象有什么区别\" class=\"headerlink\" title=\"反序列化后的对象和new 的对象有什么区别\"></a>反序列化后的对象和new 的对象有什么区别</h4><p>在通过ObjectInputStream的readObject方法读取到一个对象之后，这个对象是一个新的实例，但是其构造方法是没有被调用的，其中的域的初始化代码也没有被执行。对于那些没有被序列化的域，在新创建出来的对象中的值都是默认的。也就是说，这个对象从某种角度上来说是不完备的。这有可能会造成一些隐含的错误。调用者并不知道对象是通过一般的new操作符来创建的，还是通过反序列化所得到的。解决的办法就是在类的readObject方法里面，再执行所需的对象初始化逻辑。对于一般的Java类来说，构造方法中包含了初始化的逻辑。可以把这些逻辑提取到一个方法中，在readObject方法中调用此方法。</p>\n<h4 id=\"序列化安全性\"><a href=\"#序列化安全性\" class=\"headerlink\" title=\"序列化安全性\"></a>序列化安全性</h4><p>Java对象序列化之后的内容格式是公开的。所以可以很容易的从中提取出各种信息。从实现的角度来说，可以从不同的层次来加强序列化的安全性。</p>\n<p>对序列化之后的流进行加密。这可以通过CipherOutputStream来实现。<br>实现自己的writeObject和readObject方法，在调用defaultWriteObject之前，先对要序列化的域的值进行加密处理。<br>使用一个SignedObject或SealedObject来封装当前对象，用SignedObject或SealedObject进行序列化。<br>在从流中进行反序列化的时候，可以通过ObjectInputStream的registerValidation方法添加ObjectInputValidation接口的实现，用来验证反序列化之后得到的对象是否合法。</p>\n<h4 id=\"自定义对象序列化\"><a href=\"#自定义对象序列化\" class=\"headerlink\" title=\"自定义对象序列化\"></a>自定义对象序列化</h4><h5 id=\"Serializable接口\"><a href=\"#Serializable接口\" class=\"headerlink\" title=\"Serializable接口\"></a>Serializable接口</h5><p><code>Serializable</code>接口是一个标记接口，接口内没有任何方法，但是在实际的序列化和反序列化过程中，jvm通过一些契约规则来满足用户自定义需求。</p>\n<p>基本的对象序列化机制让开发人员可以在包含哪些域上进行定制。如果想对序列化的过程进行更加细粒度的控制，就需要在类中添加writeObject和对应的 readObject方法。这两个方法属于前面提到的序列化机制的隐含契约的一部分。在通过ObjectOutputStream的 writeObject方法写入对象的时候，如果这个对象的类中定义了writeObject方法，就会调用该方法，并把当前 ObjectOutputStream对象作为参数传递进去。writeObject方法中一般会包含自定义的序列化逻辑，比如在写入之前修改域的值，或是写入额外的数据等。对于writeObject中添加的逻辑，在对应的readObject中都需要反转过来，与之对应。</p>\n<p>在添加自己的逻辑之前，推荐的做法是先调用Java的默认实现。在writeObject方法中通过ObjectOutputStream的defaultWriteObject来完成，在readObject方法则通过ObjectInputStream的defaultReadObject来实现。下面的代码在对象的序列化流中写入了一个额外的字符串。</p>\n<pre><code>private void writeObject(ObjectOutputStream output) throws IOException {\n    output.defaultWriteObject();\n    output.writeUTF(&quot;Hello World&quot;);\n}\n\nprivate void readObject(ObjectInputStream input) throws IOException, ClassNotFoundException {\n    input.defaultReadObject();\n    String value = input.readUTF();    \n    System.out.println(value);\n\n} \n</code></pre><h5 id=\"Externalizable接口\"><a href=\"#Externalizable接口\" class=\"headerlink\" title=\"Externalizable接口\"></a>Externalizable接口</h5><p><code>Externalizable</code> 是一个包含方法签名的接口,包括writeExternal和readExternal: </p>\n<pre><code>public void readExternal(ObjectInput arg0) throws IOException,  \n           ClassNotFoundException {  \n       Object obj = arg0.readObject();       \n}  \n\npublic void writeExternal(ObjectOutput arg0) throws IOException {   \n       arg0.writeObject(&quot;Hello world&quot;);  \n}  \n</code></pre><p>参考:<br><a href=\"http://www.infoq.com/cn/articles/cf-java-object-serialization-rmi\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/cf-java-object-serialization-rmi</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是序列化\"><a href=\"#什么是序列化\" class=\"headerlink\" title=\"什么是序列化\"></a>什么是序列化</h2><p>serialization is the process of converting a data structure or object state into a format that can be stored (for example, in a file or memory buffer, or transmitted across a network connection link) and “resurrected” later in the same or another computer environment.<br></p>","more":"<p></p>\n<h2 id=\"JAVA内置序列化介绍\"><a href=\"#JAVA内置序列化介绍\" class=\"headerlink\" title=\"JAVA内置序列化介绍\"></a>JAVA内置序列化介绍</h2><h3 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>由于Java提供了良好的默认支持，实现基本的对象序列化是件比较简单的事。待序列化的Java类只需要实现Serializable接口即可。Serializable仅是一个标记接口，并不包含任何需要实现的具体方法。实现该接口只是为了声明该Java类的对象是可以被序列化的。实际的序列化和反序列化工作是通过ObjectOuputStream和ObjectInputStream来完成的。ObjectOutputStream的writeObject方法可以把一个Java对象写入到流中，ObjectInputStream的readObject方法可以从流中读取一个Java对象。</p>\n<p>在写入和读取的时候，虽然用的参数或返回值是单个对象，但实际上操纵的是一个对象图，包括该对象所引用的其它对象，以及这些对象所引用的另外的对象。Java会自动帮你遍历对象图并逐个序列化。除了对象之外，Java中的基本类型和数组也是可以通过 ObjectOutputStream和ObjectInputStream来序列化的。</p>\n<p>序列化:</p>\n<pre><code>try {\n    User user = new User(&quot;Bohr&quot;, &quot;QIU&quot;);\n    ObjectOutputStream output = new ObjectOutputStream(new FileOutputStream(&quot;user.bin&quot;));\n    output.writeObject(user);\n    output.close();\n} catch (IOException e) {\n    e.printStackTrace();\n}\n</code></pre><p>反序列化:</p>\n<pre><code>try {\n    ObjectInputStream input = new ObjectInputStream(new FileInputStream(&quot;user.bin&quot;));\n    User user = (User) input.readObject();\n    System.out.println(user);    \n} catch (Exception e) {    \n    e.printStackTrace();    \n}\n</code></pre><p> User类实现了Serializable接口。</p>\n<h3 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h3><h4 id=\"哪些东东会被序列化\"><a href=\"#哪些东东会被序列化\" class=\"headerlink\" title=\"哪些东东会被序列化\"></a>哪些东东会被序列化</h4><p>序列化只保存状态，不保存行为。在默认的序列化实现中，Java对象中的非静态和非瞬时域都会被序列化。</p>\n<h4 id=\"如何控制序列化字段\"><a href=\"#如何控制序列化字段\" class=\"headerlink\" title=\"如何控制序列化字段\"></a>如何控制序列化字段</h4><p>1、把域声明为瞬时的，即使用transient关键词。</p>\n<p>2、添加一个serialPersistentFields域来声明序列化时要包含的域。</p>\n<pre><code>private static final ObjectStreamField[] serialPersistentFields = { \n    new ObjectStreamField(&quot;firstName&quot;, String.class) \n};  \n</code></pre><p>上面的代码给出了 serialPersistentFields的声明示例，即只有firstName这个域是要被序列化的。</p>\n<h4 id=\"为什么反序列化时不成功\"><a href=\"#为什么反序列化时不成功\" class=\"headerlink\" title=\"为什么反序列化时不成功\"></a>为什么反序列化时不成功</h4><p>虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，一个非常重要的一点是两个类的序列化 ID 是否一致（就是 private static final long serialVersionUID = 1L）。</p>\n<p>如果类没有serialVersionUID静态字段，jvm在反序列化时会根据field情况生成serialVersionUID，类字段增减时，就会出现版本不一致的问题，最好添加一个默认的版本，当然也可以通过这种方式来控制类的不同版本。</p>\n<h4 id=\"实现了Serializable接口为什么还是序列化不成功？\"><a href=\"#实现了Serializable接口为什么还是序列化不成功？\" class=\"headerlink\" title=\"实现了Serializable接口为什么还是序列化不成功？\"></a>实现了Serializable接口为什么还是序列化不成功？</h4><p>如果类中的域包含不可序列化的对象，序列化就会失败，抛出NotSerializableException。</p>\n<h4 id=\"父类实现了Serializable接口，子类不想序列化怎么办？\"><a href=\"#父类实现了Serializable接口，子类不想序列化怎么办？\" class=\"headerlink\" title=\"父类实现了Serializable接口，子类不想序列化怎么办？\"></a>父类实现了Serializable接口，子类不想序列化怎么办？</h4><p>子类可以重载writeObject () 或者 readObject ()方法，在方法体中throw NotSerializableException </p>\n<h4 id=\"什么是compatible-changes-and-incompatible-changes\"><a href=\"#什么是compatible-changes-and-incompatible-changes\" class=\"headerlink\" title=\"什么是compatible changes and incompatible changes\"></a>什么是compatible changes and incompatible changes</h4><p>增减字段或者方法属于compatible changes，只要serialVersionUID相同，还可以成功的反序列化。但是如果修改类层次，或者不实现Serializable接口，就属于incompatible changes。参考java 序列化规范</p>\n<h4 id=\"反序列化后的对象和new-的对象有什么区别\"><a href=\"#反序列化后的对象和new-的对象有什么区别\" class=\"headerlink\" title=\"反序列化后的对象和new 的对象有什么区别\"></a>反序列化后的对象和new 的对象有什么区别</h4><p>在通过ObjectInputStream的readObject方法读取到一个对象之后，这个对象是一个新的实例，但是其构造方法是没有被调用的，其中的域的初始化代码也没有被执行。对于那些没有被序列化的域，在新创建出来的对象中的值都是默认的。也就是说，这个对象从某种角度上来说是不完备的。这有可能会造成一些隐含的错误。调用者并不知道对象是通过一般的new操作符来创建的，还是通过反序列化所得到的。解决的办法就是在类的readObject方法里面，再执行所需的对象初始化逻辑。对于一般的Java类来说，构造方法中包含了初始化的逻辑。可以把这些逻辑提取到一个方法中，在readObject方法中调用此方法。</p>\n<h4 id=\"序列化安全性\"><a href=\"#序列化安全性\" class=\"headerlink\" title=\"序列化安全性\"></a>序列化安全性</h4><p>Java对象序列化之后的内容格式是公开的。所以可以很容易的从中提取出各种信息。从实现的角度来说，可以从不同的层次来加强序列化的安全性。</p>\n<p>对序列化之后的流进行加密。这可以通过CipherOutputStream来实现。<br>实现自己的writeObject和readObject方法，在调用defaultWriteObject之前，先对要序列化的域的值进行加密处理。<br>使用一个SignedObject或SealedObject来封装当前对象，用SignedObject或SealedObject进行序列化。<br>在从流中进行反序列化的时候，可以通过ObjectInputStream的registerValidation方法添加ObjectInputValidation接口的实现，用来验证反序列化之后得到的对象是否合法。</p>\n<h4 id=\"自定义对象序列化\"><a href=\"#自定义对象序列化\" class=\"headerlink\" title=\"自定义对象序列化\"></a>自定义对象序列化</h4><h5 id=\"Serializable接口\"><a href=\"#Serializable接口\" class=\"headerlink\" title=\"Serializable接口\"></a>Serializable接口</h5><p><code>Serializable</code>接口是一个标记接口，接口内没有任何方法，但是在实际的序列化和反序列化过程中，jvm通过一些契约规则来满足用户自定义需求。</p>\n<p>基本的对象序列化机制让开发人员可以在包含哪些域上进行定制。如果想对序列化的过程进行更加细粒度的控制，就需要在类中添加writeObject和对应的 readObject方法。这两个方法属于前面提到的序列化机制的隐含契约的一部分。在通过ObjectOutputStream的 writeObject方法写入对象的时候，如果这个对象的类中定义了writeObject方法，就会调用该方法，并把当前 ObjectOutputStream对象作为参数传递进去。writeObject方法中一般会包含自定义的序列化逻辑，比如在写入之前修改域的值，或是写入额外的数据等。对于writeObject中添加的逻辑，在对应的readObject中都需要反转过来，与之对应。</p>\n<p>在添加自己的逻辑之前，推荐的做法是先调用Java的默认实现。在writeObject方法中通过ObjectOutputStream的defaultWriteObject来完成，在readObject方法则通过ObjectInputStream的defaultReadObject来实现。下面的代码在对象的序列化流中写入了一个额外的字符串。</p>\n<pre><code>private void writeObject(ObjectOutputStream output) throws IOException {\n    output.defaultWriteObject();\n    output.writeUTF(&quot;Hello World&quot;);\n}\n\nprivate void readObject(ObjectInputStream input) throws IOException, ClassNotFoundException {\n    input.defaultReadObject();\n    String value = input.readUTF();    \n    System.out.println(value);\n\n} \n</code></pre><h5 id=\"Externalizable接口\"><a href=\"#Externalizable接口\" class=\"headerlink\" title=\"Externalizable接口\"></a>Externalizable接口</h5><p><code>Externalizable</code> 是一个包含方法签名的接口,包括writeExternal和readExternal: </p>\n<pre><code>public void readExternal(ObjectInput arg0) throws IOException,  \n           ClassNotFoundException {  \n       Object obj = arg0.readObject();       \n}  \n\npublic void writeExternal(ObjectOutput arg0) throws IOException {   \n       arg0.writeObject(&quot;Hello world&quot;);  \n}  \n</code></pre><p>参考:<br><a href=\"http://www.infoq.com/cn/articles/cf-java-object-serialization-rmi\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/cf-java-object-serialization-rmi</a></p>"},{"title":"JSR303","date":"2013-12-02T13:52:17.000Z","_content":"\n## how to obtain a validator\n\nTo obtain a Validator, you must first create a ValidatorFactory. If there is only one Bean Validation implementation in your classpath, you can use:\n\n\tValidatorFactory vf = Validation.buildDefaultValidatorFactory();\n\nYou should usually not instantiate more than one factory; factory creation is a costly process. Also, the factory also acts as a cache for the available validation constraints.\n<!--more-->\nBelow is an example that will create a singleton ValidatorFactory and will let you obtain Validators from it:\n\n\tpublic enum MyValidatorFactory {\n\t    SINGLE_INSTANCE {\n\t        ValidatorFactory avf =\n\t            Validation.byProvider(ApacheValidationProvider.class).configure().buildValidatorFactory();\n\t        @Override\n\t        public Validator getValidator() {\n\t            return avf.getValidator();\n\t        }\n\t    };\t\n\t    public abstract Validator getValidator(); \n\t}\nUsing the above class, obtaining a Validator just requires you to call:\n\n\tMyValidatorFactory.SINGLE_INSTANCE.getValidator()\n\n## Using The Spring Framework\n\nIf you are using Spring, you can easily inject Validators into your beans. Simply configure the factory in your ApplicationContext by adding:\n\n\t<!-- Validator bean -->\n\t<bean id=\"validator\"\n\t    class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\">\n\t    <property name=\"providerClass\"\n\t        value=\"org.apache.bval.jsr303.ApacheValidationProvider\" />\n\t</bean>\nAnd Spring will be able to inject Validators and the ValidatorFactory into your beans.\n\n## comment:\n\n这里使用的是[apache bval](http://bval.apache.org/obtaining-a-validator.html),\n一般使用hibernate的实现.\n\n在javabean中使用validator时，一定要是静态的,别遇上序列化问题\n\n\n","source":"_posts/jsr303.md","raw":"---\ntitle: JSR303\ndate: 2013-12-02 21:52:17\ncategories: java\ntags:\n  - jsr303\n---\n\n## how to obtain a validator\n\nTo obtain a Validator, you must first create a ValidatorFactory. If there is only one Bean Validation implementation in your classpath, you can use:\n\n\tValidatorFactory vf = Validation.buildDefaultValidatorFactory();\n\nYou should usually not instantiate more than one factory; factory creation is a costly process. Also, the factory also acts as a cache for the available validation constraints.\n<!--more-->\nBelow is an example that will create a singleton ValidatorFactory and will let you obtain Validators from it:\n\n\tpublic enum MyValidatorFactory {\n\t    SINGLE_INSTANCE {\n\t        ValidatorFactory avf =\n\t            Validation.byProvider(ApacheValidationProvider.class).configure().buildValidatorFactory();\n\t        @Override\n\t        public Validator getValidator() {\n\t            return avf.getValidator();\n\t        }\n\t    };\t\n\t    public abstract Validator getValidator(); \n\t}\nUsing the above class, obtaining a Validator just requires you to call:\n\n\tMyValidatorFactory.SINGLE_INSTANCE.getValidator()\n\n## Using The Spring Framework\n\nIf you are using Spring, you can easily inject Validators into your beans. Simply configure the factory in your ApplicationContext by adding:\n\n\t<!-- Validator bean -->\n\t<bean id=\"validator\"\n\t    class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\">\n\t    <property name=\"providerClass\"\n\t        value=\"org.apache.bval.jsr303.ApacheValidationProvider\" />\n\t</bean>\nAnd Spring will be able to inject Validators and the ValidatorFactory into your beans.\n\n## comment:\n\n这里使用的是[apache bval](http://bval.apache.org/obtaining-a-validator.html),\n一般使用hibernate的实现.\n\n在javabean中使用validator时，一定要是静态的,别遇上序列化问题\n\n\n","slug":"jsr303","published":1,"updated":"2018-04-01T16:53:17.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2kshr0033p0ugax4j97up","content":"<h2 id=\"how-to-obtain-a-validator\"><a href=\"#how-to-obtain-a-validator\" class=\"headerlink\" title=\"how to obtain a validator\"></a>how to obtain a validator</h2><p>To obtain a Validator, you must first create a ValidatorFactory. If there is only one Bean Validation implementation in your classpath, you can use:</p>\n<pre><code>ValidatorFactory vf = Validation.buildDefaultValidatorFactory();\n</code></pre><p>You should usually not instantiate more than one factory; factory creation is a costly process. Also, the factory also acts as a cache for the available validation constraints.<br><a id=\"more\"></a><br>Below is an example that will create a singleton ValidatorFactory and will let you obtain Validators from it:</p>\n<pre><code>public enum MyValidatorFactory {\n    SINGLE_INSTANCE {\n        ValidatorFactory avf =\n            Validation.byProvider(ApacheValidationProvider.class).configure().buildValidatorFactory();\n        @Override\n        public Validator getValidator() {\n            return avf.getValidator();\n        }\n    };    \n    public abstract Validator getValidator(); \n}\n</code></pre><p>Using the above class, obtaining a Validator just requires you to call:</p>\n<pre><code>MyValidatorFactory.SINGLE_INSTANCE.getValidator()\n</code></pre><h2 id=\"Using-The-Spring-Framework\"><a href=\"#Using-The-Spring-Framework\" class=\"headerlink\" title=\"Using The Spring Framework\"></a>Using The Spring Framework</h2><p>If you are using Spring, you can easily inject Validators into your beans. Simply configure the factory in your ApplicationContext by adding:</p>\n<pre><code>&lt;!-- Validator bean --&gt;\n&lt;bean id=&quot;validator&quot;\n    class=&quot;org.springframework.validation.beanvalidation.LocalValidatorFactoryBean&quot;&gt;\n    &lt;property name=&quot;providerClass&quot;\n        value=&quot;org.apache.bval.jsr303.ApacheValidationProvider&quot; /&gt;\n&lt;/bean&gt;\n</code></pre><p>And Spring will be able to inject Validators and the ValidatorFactory into your beans.</p>\n<h2 id=\"comment\"><a href=\"#comment\" class=\"headerlink\" title=\"comment:\"></a>comment:</h2><p>这里使用的是<a href=\"http://bval.apache.org/obtaining-a-validator.html\" target=\"_blank\" rel=\"noopener\">apache bval</a>,<br>一般使用hibernate的实现.</p>\n<p>在javabean中使用validator时，一定要是静态的,别遇上序列化问题</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"how-to-obtain-a-validator\"><a href=\"#how-to-obtain-a-validator\" class=\"headerlink\" title=\"how to obtain a validator\"></a>how to obtain a validator</h2><p>To obtain a Validator, you must first create a ValidatorFactory. If there is only one Bean Validation implementation in your classpath, you can use:</p>\n<pre><code>ValidatorFactory vf = Validation.buildDefaultValidatorFactory();\n</code></pre><p>You should usually not instantiate more than one factory; factory creation is a costly process. Also, the factory also acts as a cache for the available validation constraints.<br></p>","more":"<br>Below is an example that will create a singleton ValidatorFactory and will let you obtain Validators from it:<p></p>\n<pre><code>public enum MyValidatorFactory {\n    SINGLE_INSTANCE {\n        ValidatorFactory avf =\n            Validation.byProvider(ApacheValidationProvider.class).configure().buildValidatorFactory();\n        @Override\n        public Validator getValidator() {\n            return avf.getValidator();\n        }\n    };    \n    public abstract Validator getValidator(); \n}\n</code></pre><p>Using the above class, obtaining a Validator just requires you to call:</p>\n<pre><code>MyValidatorFactory.SINGLE_INSTANCE.getValidator()\n</code></pre><h2 id=\"Using-The-Spring-Framework\"><a href=\"#Using-The-Spring-Framework\" class=\"headerlink\" title=\"Using The Spring Framework\"></a>Using The Spring Framework</h2><p>If you are using Spring, you can easily inject Validators into your beans. Simply configure the factory in your ApplicationContext by adding:</p>\n<pre><code>&lt;!-- Validator bean --&gt;\n&lt;bean id=&quot;validator&quot;\n    class=&quot;org.springframework.validation.beanvalidation.LocalValidatorFactoryBean&quot;&gt;\n    &lt;property name=&quot;providerClass&quot;\n        value=&quot;org.apache.bval.jsr303.ApacheValidationProvider&quot; /&gt;\n&lt;/bean&gt;\n</code></pre><p>And Spring will be able to inject Validators and the ValidatorFactory into your beans.</p>\n<h2 id=\"comment\"><a href=\"#comment\" class=\"headerlink\" title=\"comment:\"></a>comment:</h2><p>这里使用的是<a href=\"http://bval.apache.org/obtaining-a-validator.html\" target=\"_blank\" rel=\"noopener\">apache bval</a>,<br>一般使用hibernate的实现.</p>\n<p>在javabean中使用validator时，一定要是静态的,别遇上序列化问题</p>"},{"title":"使用jdk7新增异常构造器提高异常性能","date":"2013-05-09T13:52:17.000Z","_content":"\nJDK7在Throwable对象中增加了一个新的构造器\n\n\tprotected Throwable(String message, Throwable cause,\n                        boolean enableSuppression,\n                        boolean writableStackTrace)\n第三个参数表示是否启用suppressedExceptions(try代码快中抛出异常，在finally中又抛出异常，导致try中的异常丢失)\n。第四个参数表示是否填充异常栈，如果为false，异常在初始化的时候不会调用本地方法fillInStackTrace。\n<!--more-->\n在业务开发中，我们会使用很多异常来表示不同的业务限制，比如用户余额不足、用户权限不够、参数不合法，这样的异常是不需要填充栈信息的，所以我们可以使用如下的代码来提高异常生成性能：\n\n\tpackage com.yjf.common.exception;\t\n\tpublic class AppExcetpion extends RuntimeException {\n\t\tprivate static final long serialVersionUID = 1L;\t\t\n\t\tpublic AppExcetpion() {\n\t\t\tthis(null, null);\n\t\t}\n\t\tpublic AppExcetpion(String message, Throwable cause) {\n\t\t\tsuper(message, cause, true, false);\n\t\t}\n\t\t\n\t\tpublic AppExcetpion(String message) {\n\t\t\tthis(message, null);\n\t\t}\n\t\t\n\t\tpublic AppExcetpion(Throwable cause) {\n\t\t\tthis(null, cause);\n\t\t}\n\t\n\t}\n\n使用此异常会比以前我们使用的异常性能提高10多倍。\n\n\t2013-05-09 14:58:39 [main] ERROR com.yjf.common.exception.JAVA7ExceptionTest.testJava7:23 - 运行:2000000/2010000 耗时:457ms\n\t2013-05-09 14:58:45 [main] ERROR com.yjf.common.exception.JAVA7ExceptionTest.testOri:40 - 运行:2000000/2010000 耗时:6442ms\n\t\nps:没用使用jdk7或者某些场景下不能使用新特性的,可以考虑重写`fillInStackTrace`方法:\n\n\tpublic class OrderCheckException extends IllegalArgumentException {\n\t\n\t\tprivate static final long serialVersionUID = 1L;\n\t\n\t\tprivate Map<String, String> errorMap = new HashMap<>();\n\t\n\t\tprivate String msg;\n\t\n\t\tpublic OrderCheckException() {\n\t\t\tsuper();\n\t\t}\n\t\n\t\tpublic OrderCheckException(Throwable cause) {\n\t\t\tsuper(cause);\n\t\t}\n\t\n\t\tpublic Map<String, String> getErrorMap() {\n\t\t\treturn errorMap;\n\t\t}\n\t\n\t\t/**\n\t\t * 增加参数错误信息\n\t\t * \n\t\t * @param parameter 校验失败参数\n\t\t * @param msg 参数信息\n\t\t */\n\t\tpublic void addError(String parameter, String msg) {\n\t\t\tthis.errorMap.put(parameter, msg);\n\t\t\tthis.msg = null;\n\t\t}\n\t\n\t\t@Override\n\t\tpublic String getMessage() {\n\t\t\tif (msg == null) {\n\t\t\t\tif (errorMap.isEmpty()) {\n\t\t\t\t\tmsg = \"\";\n\t\t\t\t} else {\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\tfor (Map.Entry entry : errorMap.entrySet()) {\n\t\t\t\t\t\tsb.append(entry.getKey()).append(SplitConstants.SEPARATOR_CHAR_COLON)\n\t\t\t\t\t\t.append(entry.getValue()).append(SplitConstants.SEPARATOR_CHAR_COMMA);\n\t\t\t\t\t}\n\t\t\t\t\tmsg = sb.toString();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn msg;\n\t\t}\n\t\n\t\t@Override\n\t\tpublic synchronized Throwable fillInStackTrace() {\n\t\t\treturn this;\n\t\t}\n  \t}\n  \t\n 上面这个`OrderCheckException`,它继承了`IllegalArgumentException`,但是此异常没有重写`java.lang.RuntimeException#RuntimeException(java.lang.String, java.lang.Throwable, boolean, boolean)`,只有通过重写`fillInStackTrace`来达到效果.","source":"_posts/jdk7-exception.md","raw":"---\ntitle: 使用jdk7新增异常构造器提高异常性能\ndate: 2013-05-09 21:52:17\ncategories: java\ntags:\n  - EXCEPTION\n---\n\nJDK7在Throwable对象中增加了一个新的构造器\n\n\tprotected Throwable(String message, Throwable cause,\n                        boolean enableSuppression,\n                        boolean writableStackTrace)\n第三个参数表示是否启用suppressedExceptions(try代码快中抛出异常，在finally中又抛出异常，导致try中的异常丢失)\n。第四个参数表示是否填充异常栈，如果为false，异常在初始化的时候不会调用本地方法fillInStackTrace。\n<!--more-->\n在业务开发中，我们会使用很多异常来表示不同的业务限制，比如用户余额不足、用户权限不够、参数不合法，这样的异常是不需要填充栈信息的，所以我们可以使用如下的代码来提高异常生成性能：\n\n\tpackage com.yjf.common.exception;\t\n\tpublic class AppExcetpion extends RuntimeException {\n\t\tprivate static final long serialVersionUID = 1L;\t\t\n\t\tpublic AppExcetpion() {\n\t\t\tthis(null, null);\n\t\t}\n\t\tpublic AppExcetpion(String message, Throwable cause) {\n\t\t\tsuper(message, cause, true, false);\n\t\t}\n\t\t\n\t\tpublic AppExcetpion(String message) {\n\t\t\tthis(message, null);\n\t\t}\n\t\t\n\t\tpublic AppExcetpion(Throwable cause) {\n\t\t\tthis(null, cause);\n\t\t}\n\t\n\t}\n\n使用此异常会比以前我们使用的异常性能提高10多倍。\n\n\t2013-05-09 14:58:39 [main] ERROR com.yjf.common.exception.JAVA7ExceptionTest.testJava7:23 - 运行:2000000/2010000 耗时:457ms\n\t2013-05-09 14:58:45 [main] ERROR com.yjf.common.exception.JAVA7ExceptionTest.testOri:40 - 运行:2000000/2010000 耗时:6442ms\n\t\nps:没用使用jdk7或者某些场景下不能使用新特性的,可以考虑重写`fillInStackTrace`方法:\n\n\tpublic class OrderCheckException extends IllegalArgumentException {\n\t\n\t\tprivate static final long serialVersionUID = 1L;\n\t\n\t\tprivate Map<String, String> errorMap = new HashMap<>();\n\t\n\t\tprivate String msg;\n\t\n\t\tpublic OrderCheckException() {\n\t\t\tsuper();\n\t\t}\n\t\n\t\tpublic OrderCheckException(Throwable cause) {\n\t\t\tsuper(cause);\n\t\t}\n\t\n\t\tpublic Map<String, String> getErrorMap() {\n\t\t\treturn errorMap;\n\t\t}\n\t\n\t\t/**\n\t\t * 增加参数错误信息\n\t\t * \n\t\t * @param parameter 校验失败参数\n\t\t * @param msg 参数信息\n\t\t */\n\t\tpublic void addError(String parameter, String msg) {\n\t\t\tthis.errorMap.put(parameter, msg);\n\t\t\tthis.msg = null;\n\t\t}\n\t\n\t\t@Override\n\t\tpublic String getMessage() {\n\t\t\tif (msg == null) {\n\t\t\t\tif (errorMap.isEmpty()) {\n\t\t\t\t\tmsg = \"\";\n\t\t\t\t} else {\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\tfor (Map.Entry entry : errorMap.entrySet()) {\n\t\t\t\t\t\tsb.append(entry.getKey()).append(SplitConstants.SEPARATOR_CHAR_COLON)\n\t\t\t\t\t\t.append(entry.getValue()).append(SplitConstants.SEPARATOR_CHAR_COMMA);\n\t\t\t\t\t}\n\t\t\t\t\tmsg = sb.toString();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn msg;\n\t\t}\n\t\n\t\t@Override\n\t\tpublic synchronized Throwable fillInStackTrace() {\n\t\t\treturn this;\n\t\t}\n  \t}\n  \t\n 上面这个`OrderCheckException`,它继承了`IllegalArgumentException`,但是此异常没有重写`java.lang.RuntimeException#RuntimeException(java.lang.String, java.lang.Throwable, boolean, boolean)`,只有通过重写`fillInStackTrace`来达到效果.","slug":"jdk7-exception","published":1,"updated":"2018-04-01T16:53:17.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2kshs0036p0ugd1k6gk21","content":"<p>JDK7在Throwable对象中增加了一个新的构造器</p>\n<pre><code>protected Throwable(String message, Throwable cause,\n                    boolean enableSuppression,\n                    boolean writableStackTrace)\n</code></pre><p>第三个参数表示是否启用suppressedExceptions(try代码快中抛出异常，在finally中又抛出异常，导致try中的异常丢失)<br>。第四个参数表示是否填充异常栈，如果为false，异常在初始化的时候不会调用本地方法fillInStackTrace。<br><a id=\"more\"></a><br>在业务开发中，我们会使用很多异常来表示不同的业务限制，比如用户余额不足、用户权限不够、参数不合法，这样的异常是不需要填充栈信息的，所以我们可以使用如下的代码来提高异常生成性能：</p>\n<pre><code>package com.yjf.common.exception;    \npublic class AppExcetpion extends RuntimeException {\n    private static final long serialVersionUID = 1L;        \n    public AppExcetpion() {\n        this(null, null);\n    }\n    public AppExcetpion(String message, Throwable cause) {\n        super(message, cause, true, false);\n    }\n\n    public AppExcetpion(String message) {\n        this(message, null);\n    }\n\n    public AppExcetpion(Throwable cause) {\n        this(null, cause);\n    }\n\n}\n</code></pre><p>使用此异常会比以前我们使用的异常性能提高10多倍。</p>\n<pre><code>2013-05-09 14:58:39 [main] ERROR com.yjf.common.exception.JAVA7ExceptionTest.testJava7:23 - 运行:2000000/2010000 耗时:457ms\n2013-05-09 14:58:45 [main] ERROR com.yjf.common.exception.JAVA7ExceptionTest.testOri:40 - 运行:2000000/2010000 耗时:6442ms\n</code></pre><p>ps:没用使用jdk7或者某些场景下不能使用新特性的,可以考虑重写<code>fillInStackTrace</code>方法:</p>\n<pre><code>public class OrderCheckException extends IllegalArgumentException {\n\n    private static final long serialVersionUID = 1L;\n\n    private Map&lt;String, String&gt; errorMap = new HashMap&lt;&gt;();\n\n    private String msg;\n\n    public OrderCheckException() {\n        super();\n    }\n\n    public OrderCheckException(Throwable cause) {\n        super(cause);\n    }\n\n    public Map&lt;String, String&gt; getErrorMap() {\n        return errorMap;\n    }\n\n    /**\n     * 增加参数错误信息\n     * \n     * @param parameter 校验失败参数\n     * @param msg 参数信息\n     */\n    public void addError(String parameter, String msg) {\n        this.errorMap.put(parameter, msg);\n        this.msg = null;\n    }\n\n    @Override\n    public String getMessage() {\n        if (msg == null) {\n            if (errorMap.isEmpty()) {\n                msg = &quot;&quot;;\n            } else {\n                StringBuilder sb = new StringBuilder();\n                for (Map.Entry entry : errorMap.entrySet()) {\n                    sb.append(entry.getKey()).append(SplitConstants.SEPARATOR_CHAR_COLON)\n                    .append(entry.getValue()).append(SplitConstants.SEPARATOR_CHAR_COMMA);\n                }\n                msg = sb.toString();\n            }\n        }\n        return msg;\n    }\n\n    @Override\n    public synchronized Throwable fillInStackTrace() {\n        return this;\n    }\n  }\n</code></pre><p> 上面这个<code>OrderCheckException</code>,它继承了<code>IllegalArgumentException</code>,但是此异常没有重写<code>java.lang.RuntimeException#RuntimeException(java.lang.String, java.lang.Throwable, boolean, boolean)</code>,只有通过重写<code>fillInStackTrace</code>来达到效果.</p>\n","site":{"data":{}},"excerpt":"<p>JDK7在Throwable对象中增加了一个新的构造器</p>\n<pre><code>protected Throwable(String message, Throwable cause,\n                    boolean enableSuppression,\n                    boolean writableStackTrace)\n</code></pre><p>第三个参数表示是否启用suppressedExceptions(try代码快中抛出异常，在finally中又抛出异常，导致try中的异常丢失)<br>。第四个参数表示是否填充异常栈，如果为false，异常在初始化的时候不会调用本地方法fillInStackTrace。<br></p>","more":"<br>在业务开发中，我们会使用很多异常来表示不同的业务限制，比如用户余额不足、用户权限不够、参数不合法，这样的异常是不需要填充栈信息的，所以我们可以使用如下的代码来提高异常生成性能：<p></p>\n<pre><code>package com.yjf.common.exception;    \npublic class AppExcetpion extends RuntimeException {\n    private static final long serialVersionUID = 1L;        \n    public AppExcetpion() {\n        this(null, null);\n    }\n    public AppExcetpion(String message, Throwable cause) {\n        super(message, cause, true, false);\n    }\n\n    public AppExcetpion(String message) {\n        this(message, null);\n    }\n\n    public AppExcetpion(Throwable cause) {\n        this(null, cause);\n    }\n\n}\n</code></pre><p>使用此异常会比以前我们使用的异常性能提高10多倍。</p>\n<pre><code>2013-05-09 14:58:39 [main] ERROR com.yjf.common.exception.JAVA7ExceptionTest.testJava7:23 - 运行:2000000/2010000 耗时:457ms\n2013-05-09 14:58:45 [main] ERROR com.yjf.common.exception.JAVA7ExceptionTest.testOri:40 - 运行:2000000/2010000 耗时:6442ms\n</code></pre><p>ps:没用使用jdk7或者某些场景下不能使用新特性的,可以考虑重写<code>fillInStackTrace</code>方法:</p>\n<pre><code>public class OrderCheckException extends IllegalArgumentException {\n\n    private static final long serialVersionUID = 1L;\n\n    private Map&lt;String, String&gt; errorMap = new HashMap&lt;&gt;();\n\n    private String msg;\n\n    public OrderCheckException() {\n        super();\n    }\n\n    public OrderCheckException(Throwable cause) {\n        super(cause);\n    }\n\n    public Map&lt;String, String&gt; getErrorMap() {\n        return errorMap;\n    }\n\n    /**\n     * 增加参数错误信息\n     * \n     * @param parameter 校验失败参数\n     * @param msg 参数信息\n     */\n    public void addError(String parameter, String msg) {\n        this.errorMap.put(parameter, msg);\n        this.msg = null;\n    }\n\n    @Override\n    public String getMessage() {\n        if (msg == null) {\n            if (errorMap.isEmpty()) {\n                msg = &quot;&quot;;\n            } else {\n                StringBuilder sb = new StringBuilder();\n                for (Map.Entry entry : errorMap.entrySet()) {\n                    sb.append(entry.getKey()).append(SplitConstants.SEPARATOR_CHAR_COLON)\n                    .append(entry.getValue()).append(SplitConstants.SEPARATOR_CHAR_COMMA);\n                }\n                msg = sb.toString();\n            }\n        }\n        return msg;\n    }\n\n    @Override\n    public synchronized Throwable fillInStackTrace() {\n        return this;\n    }\n  }\n</code></pre><p> 上面这个<code>OrderCheckException</code>,它继承了<code>IllegalArgumentException</code>,但是此异常没有重写<code>java.lang.RuntimeException#RuntimeException(java.lang.String, java.lang.Throwable, boolean, boolean)</code>,只有通过重写<code>fillInStackTrace</code>来达到效果.</p>"},{"title":"Kryo反序列化时版本不一致导致OOM","date":"2013-11-03T13:52:17.000Z","_content":"\n生产环境某系统上线大概4-5个小时后，出现OOM(java.lang.OutOfMemoryError: Java heap space )异常。按照目前的压力来说出现OOM不应该，本次上线也没有对代码进行过多的修改。和相关开发人员沟通后，发现上线之前memcached缓存没有清空，memcached存储着kryo序列化后的二进制数据，涉及到的对象增加了属性，初步怀疑是kryo反序列话时出了问题。\n\n<!--more-->\n拿到hprof日志后，分析如下：\n\n\n初步用jvisualvm看下\n\n![](kryo-oom/1.jpg)\n\n占用内存很小，tomcat的heap设置为4096M，不可能是内存泄漏造成的。\n\n \n分析线程dump发现\n\n![](kryo-oom/2.jpg)\n\n在kryo反序列化报了oom\n\n用MAT执行OQL:\n\n![](kryo-oom/3.jpg)\n\ndump buffer(见附件)到本地反序列化\n\n![](kryo-oom/4.jpg)\n\n然后就悲剧了...\n\n![](kryo-oom/5.jpg)\n\n要分配的这个char数组太大了，内存根本就不足。kryo序列化不会存储java 字段信息，他会把属性值按照一定的顺序写到byte数组里面的(没有字段信息)。如果反序列化时，java对象结构变化，就有可能出现今天的悲剧事件。","source":"_posts/kryo-oom.md","raw":"---\ntitle: Kryo反序列化时版本不一致导致OOM\ndate: 2013-11-03 21:52:17\ncategories: java\ntags:\n  - KRYO\n---\n\n生产环境某系统上线大概4-5个小时后，出现OOM(java.lang.OutOfMemoryError: Java heap space )异常。按照目前的压力来说出现OOM不应该，本次上线也没有对代码进行过多的修改。和相关开发人员沟通后，发现上线之前memcached缓存没有清空，memcached存储着kryo序列化后的二进制数据，涉及到的对象增加了属性，初步怀疑是kryo反序列话时出了问题。\n\n<!--more-->\n拿到hprof日志后，分析如下：\n\n\n初步用jvisualvm看下\n\n![](kryo-oom/1.jpg)\n\n占用内存很小，tomcat的heap设置为4096M，不可能是内存泄漏造成的。\n\n \n分析线程dump发现\n\n![](kryo-oom/2.jpg)\n\n在kryo反序列化报了oom\n\n用MAT执行OQL:\n\n![](kryo-oom/3.jpg)\n\ndump buffer(见附件)到本地反序列化\n\n![](kryo-oom/4.jpg)\n\n然后就悲剧了...\n\n![](kryo-oom/5.jpg)\n\n要分配的这个char数组太大了，内存根本就不足。kryo序列化不会存储java 字段信息，他会把属性值按照一定的顺序写到byte数组里面的(没有字段信息)。如果反序列化时，java对象结构变化，就有可能出现今天的悲剧事件。","slug":"kryo-oom","published":1,"updated":"2018-04-01T16:53:17.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2kshu0038p0ugnbxzolui","content":"<p>生产环境某系统上线大概4-5个小时后，出现OOM(java.lang.OutOfMemoryError: Java heap space )异常。按照目前的压力来说出现OOM不应该，本次上线也没有对代码进行过多的修改。和相关开发人员沟通后，发现上线之前memcached缓存没有清空，memcached存储着kryo序列化后的二进制数据，涉及到的对象增加了属性，初步怀疑是kryo反序列话时出了问题。</p>\n<a id=\"more\"></a>\n<p>拿到hprof日志后，分析如下：</p>\n<p>初步用jvisualvm看下</p>\n<p><img src=\"/kryo-oom/1.jpg\" alt=\"\"></p>\n<p>占用内存很小，tomcat的heap设置为4096M，不可能是内存泄漏造成的。</p>\n<p>分析线程dump发现</p>\n<p><img src=\"/kryo-oom/2.jpg\" alt=\"\"></p>\n<p>在kryo反序列化报了oom</p>\n<p>用MAT执行OQL:</p>\n<p><img src=\"/kryo-oom/3.jpg\" alt=\"\"></p>\n<p>dump buffer(见附件)到本地反序列化</p>\n<p><img src=\"/kryo-oom/4.jpg\" alt=\"\"></p>\n<p>然后就悲剧了…</p>\n<p><img src=\"/kryo-oom/5.jpg\" alt=\"\"></p>\n<p>要分配的这个char数组太大了，内存根本就不足。kryo序列化不会存储java 字段信息，他会把属性值按照一定的顺序写到byte数组里面的(没有字段信息)。如果反序列化时，java对象结构变化，就有可能出现今天的悲剧事件。</p>\n","site":{"data":{}},"excerpt":"<p>生产环境某系统上线大概4-5个小时后，出现OOM(java.lang.OutOfMemoryError: Java heap space )异常。按照目前的压力来说出现OOM不应该，本次上线也没有对代码进行过多的修改。和相关开发人员沟通后，发现上线之前memcached缓存没有清空，memcached存储着kryo序列化后的二进制数据，涉及到的对象增加了属性，初步怀疑是kryo反序列话时出了问题。</p>","more":"<p>拿到hprof日志后，分析如下：</p>\n<p>初步用jvisualvm看下</p>\n<p><img src=\"/kryo-oom/1.jpg\" alt=\"\"></p>\n<p>占用内存很小，tomcat的heap设置为4096M，不可能是内存泄漏造成的。</p>\n<p>分析线程dump发现</p>\n<p><img src=\"/kryo-oom/2.jpg\" alt=\"\"></p>\n<p>在kryo反序列化报了oom</p>\n<p>用MAT执行OQL:</p>\n<p><img src=\"/kryo-oom/3.jpg\" alt=\"\"></p>\n<p>dump buffer(见附件)到本地反序列化</p>\n<p><img src=\"/kryo-oom/4.jpg\" alt=\"\"></p>\n<p>然后就悲剧了…</p>\n<p><img src=\"/kryo-oom/5.jpg\" alt=\"\"></p>\n<p>要分配的这个char数组太大了，内存根本就不足。kryo序列化不会存储java 字段信息，他会把属性值按照一定的顺序写到byte数组里面的(没有字段信息)。如果反序列化时，java对象结构变化，就有可能出现今天的悲剧事件。</p>"},{"title":"日志优化","date":"2013-07-09T13:52:17.000Z","_content":"\n一些日志优化相关的东东.\n\n## 1. 关掉没用的appender\n\n现在我们所有的系统都会把日志输出到指定的文件，为了本地开发测试方便，我们也会把日志输出到控制台。在生产环境输出到控制台是完全没有必要的，既浪费了存储空间，又浪费了性能，请在生产环境去掉ConsoleAppender\n\n- logback去掉`ch.qos.logback.core.ConsoleAppender`\n- log4j去掉`org.apache.log4j.ConsoleAppender`\n\n使用logback的同学也可以如下操作：\n\n1.添加依赖\n\n\t<dependency>\n\t\t\t<groupId>org.codehaus.janino</groupId>\n\t\t\t<artifactId>janino</artifactId>\n\t\t\t<version>2.5.16</version>\n\t</dependency>\n2.修改logback.xml中原ConsoleAppender配置如下：\n\n\t<if condition='property(\"os.name\").toUpperCase().contains(\"WINDOWS\")'>\n\t\t<then>\n\t\t\t<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t\t\t<encoder>\n\t\t\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36}:%L-%msg%n%n</pattern>\n\t\t\t\t</encoder>\n\t\t\t</appender>\n\t\t\t<root>\n\t\t\t\t<appender-ref ref=\"STDOUT\" />\n\t\t\t</root>\n\t\t</then>\n\t</if>\n\n上面的配置表示在windows中运行时日志输出到控制台，在其他系统中日志不输出到控制台\n\n## 2. 禁用日志收集栈信息\n\n在写日志时，打印行号能方便我们快速定位出问题的代码。此功能通过生成栈信息，然后定位到合适的栈帧来实现。禁用此功能会提高日志性能。\n\n异步日志实现默认关闭了收集栈信息，见`ch.qos.logback.classic.AsyncAppender#includeCallerData`\n\n对于同步日志，只需要把`pattern`中的`%L`去掉就可以禁用栈信息。\n\n\n## 3. 使用异步日志\n\n### 3.1 logback\n\nlogback只需要用异步appender包裹原来的appender就可以了\n\n\t<appender name=\"ASYNC_ROLLING-cs\" class=\"com.yjf.common.log.LogbackAsyncAppender\">\n\t\t<appender-ref ref=\"ROLLING-cs\" />\n\t</appender>\n\n目前我们使用了用于输出日志到文件的`ch.qos.logback.core.rolling.RollingFileAppender`和输出日志到rabbitmq的`com.yjf.monitor.client.integration.log.appender.jms.LogbackMsgRollingAppenderAdapter`，请都用上面的`LogbackAsyncAppender`包裹住。\n\n此配置下，对象先放入一个队列，然后由另外一个线程来处理具体的日志输出，实现异步化，实现流程如下：\n\n- queue大小为1024，如果queue剩余空间小于100时,会做丢弃判断\n- 如果queue剩余空间小于100时，会丢弃TRACE、DEBUG日志，也会丢弃LoggerName不以com.yjf开始的INFO日志\n- 如果queue没有剩余空间为0时，会阻塞业务线程，直到queue有剩余空间\n- 输出日志到文件的appender，由于会用锁来控制多线程的写入，这种用单线程来写文件的方式很完美。\n- 输出日志到rabbitmq的appender，`LogbackMsgRollingAppenderAdapter`在并发下会有性能问题，因为`LogbackMsgRollingAppenderAdapter`内部只用到一个channel，如果遇到高并发场景，请给`CachingConnectionFactory`设置合理的channelCacheSize值\n\n### 3.2 log4j\n\n- 写日志到文件的appender，用`org.apache.log4j.AsyncAppender`代替`org.apache.log4j.DailyRollingFileAppender`\n- 写日志到rabbitmq的appender，建议用`com.yjf.common.log.Log4jAsynAmqpAppender`，内部也用queue来实现异步化\n\n## 4. logger api增强\n\n下面是常用的使用方式：\n\n\tlogger.info(\"金额无效,手续费大于或者等于提现总金额.charge:{},amount:{}\", new Object[] { 1, 2, 3 });\n\tlogger.info(\"金额无效,手续费大于或者等于提现总金额.charge:{},amount:{},test:{}\", 1, 2, 3); \n\tLoggerFormat.info(String.format(\"金额无效,手续费大于或者等于提现总金额.charge:%s,amount:%s,test:%s\", 1, 2,3), logger);\n\n第一种是slf4j提供的原生api，第二种是yjf-common-utils提供的支持可变的参数的logger，第三种是yjf-common-util提供的日志工具类。这三种使用方式在日志级别为error的情况下，跑一百万次测试出的性能数据如下：\n\n\tLoggerFactoryTest.testLogOri: [measured 1000000 out of 1020000 rounds, threads: 4 (all cores)]\n\t round: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 2, GC.time: 0.62, time.total: 2.67, time.warmup: 0.04, time.bench: 2.63\n\n\tLoggerFactoryTest.testYjfLogger: [measured 1000000 out of 1020000 rounds, threads: 4 (all cores)]\n\t round: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 1, GC.time: 0.72, time.total: 3.43, time.warmup: 0.06, time.bench: 3.37\n\n\tLoggerFactoryTest.testLogUtils: [measured 1000000 out of 1020000 rounds, threads: 4 (all cores)]\n\t round: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 14, GC.time: 1.78, time.total: 11.62, time.warmup: 0.22, time.bench: 11.40\n\n从这些数据可以看出，第三种使用方式由于在方法调用时就有字符串拼接的开销，在error级别下，性能肯定不是很好。\n\n在日志级别为info情况下，这种差距不是很大，但是如果我们使用异步日志，字符串的拼接在独立的线程中完成，不会在调用线程中完成，业务整体执行时间会减少。\n\n第三种方式还有一个问题，行号永远显示的是LoggerFormat.info方法的行号，不便于我们定位问题。“懒”的同学就用第二种方式吧，支持变长参数，例子如下：\n\n\timport com.yjf.common.log.Logger;\n\timport com.yjf.common.log.LoggerFactory;\n\t...\t\t\n\tLogger logger = LoggerFactory.getLogger(LoggerFactoryTest.class\n\t\t.getName());\n\t...\n\tlogger.info(\"xx:{} xx:{} xx:{}\",\"a\",\"b\",\"c\");\n\tlogger.info(\"xx:{} xx:{} xx:[]\", \"a\",\"b\",\"c\", new RuntimeException(\"挂了\"));\n\n请不要再使用`com.yjf.common.log.LoggerFormat`和`com.yjf.common.lang.util.PrintLogTool`\n\n## 5. tomcat日志优化\n\ntomcat embed默认日志使用的是`org.apache.juli.logging.DirectJDKLog`，此日志使用了`java.util.logging.Logger`，此logger使用了jre下面的配置文件`$JAVA_HOME\\jre\\lib\\logging.properties`，此配置文件配置了一个处理器`java.util.logging.ConsoleHandler`，它只做了一个事情，使用`System.err`来作为默认的日志输出，也就是说tomcat embed遇到不能处理的异常后，用System.err来打印日志。(见：`org.apache.catalina.core.StandardWrapperValve#invoke`方法)\n\n我们使用的的tomcat和tomcat embed有点差别，tomcat 中使用了`org.apache.juli.FileHandler`，此输出位置为`$CATALINA_HOME/logs/localhost.yyyy-MM-dd.log`，也就是说tomcat在遇到他搞不定的异常时，把日志输出到了此位置。\ntomcat把输出和错误输出都打印到catalina.out文件了，见catalina.sh\n\n\torg.apache.catalina.startup.Bootstrap \"$@\" start \\\n      >> \"$CATALINA_OUT\" 2>&1 \"&\"\n\n这也解释了上次易交易产品遇到的那个问题，spring mvc action递归调用自己，catalina.out文件中没有异常日志。但是我在本地使用tomcat embed测试，会在控制台输出`StackOverflowError`。\n\ntomcat日志优化点：\n\n- 用`org.apache.juli.AsyncFileHandler`代替`org.apache.juli.FileHandler`\n- 现在我们应用的日志目录都改为`/var/log/webapps/{project_name}/`。为了便于管理，tomcat 所有日志文件也会输出到`/var/log/webapps/{project_name}/`路径\n\n以上优化已提交到定制化tomcat模板。\n\n## 6.优化J.U.C\n\nJ.U.L代表java内置的日志机制，上面部分提到tomcat在遇到他搞不定的异常时，会把日志输出到`localhost.yyyy-MM-dd.log`。这样很不爽，很多同学在检查应用异常时，下意识的不会去看此日志文件，为了避免此问题，请使用下面的解决方案：\n\n1. 使用`com.yjf.common.log.LogbackConfigListener`,使用方法见doc\n\n\t请使用yjf-common-util版本大于等于1.6.9.20130708的包\n\n2. logback增加配置\n\n\t\t<contextListener class=\"ch.qos.logback.classic.jul.LevelChangePropagator\">\n    \t\t<resetJUL>true</resetJUL>\n  \t\t</contextListener>\n\n从此以后，所有的异常日志都会在应用日志文件中找到。\n\n## 7. 性能测试\n\n测试四种情况，普通日志输出，普通日志禁用线程栈信息，异步日志，异步日志禁用线程栈信息，测试结果如下：\n\n\t\n\tLoggerPerfTest.testCommonLogger: [measured 100000 out of 101000 rounds, threads: 16 (physical processors: 4)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 2, GC.time: 0.12, time.total: 10.73, time.warmup: 0.11, time.bench: 10.62\n \t\n\tLoggerPerfTest.testCommonLoggerWithoutStackInfo: [measured 100000 out of 101000 rounds, threads: 16 (physical processors: 4)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 2, GC.time: 0.04, time.total: 3.93, time.warmup: 0.14, time.bench: 3.79\n \t\n\tLoggerPerfTest.testAsyncLogger: [measured 100000 out of 101000 rounds, threads: 16 (physical processors: 4)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 3, GC.time: 0.15, time.total: 2.77, time.warmup: 0.06, time.bench: 2.71\n \t\n\tLoggerPerfTest.testAsyncLoggerWithoutStackInfo: [measured 100000 out of 101000 rounds, threads: 16 (physical processors: 4)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 1.86, time.warmup: 0.00, time.bench: 1.85\n \t\n可见异步日志性能会提升不少，不收集栈信息性能也会提升不少。","source":"_posts/log-tuning.md","raw":"---\ntitle: 日志优化\ndate: 2013-07-09 21:52:17\ncategories: java\ntags:\n  - 日志优化\n---\n\n一些日志优化相关的东东.\n\n## 1. 关掉没用的appender\n\n现在我们所有的系统都会把日志输出到指定的文件，为了本地开发测试方便，我们也会把日志输出到控制台。在生产环境输出到控制台是完全没有必要的，既浪费了存储空间，又浪费了性能，请在生产环境去掉ConsoleAppender\n\n- logback去掉`ch.qos.logback.core.ConsoleAppender`\n- log4j去掉`org.apache.log4j.ConsoleAppender`\n\n使用logback的同学也可以如下操作：\n\n1.添加依赖\n\n\t<dependency>\n\t\t\t<groupId>org.codehaus.janino</groupId>\n\t\t\t<artifactId>janino</artifactId>\n\t\t\t<version>2.5.16</version>\n\t</dependency>\n2.修改logback.xml中原ConsoleAppender配置如下：\n\n\t<if condition='property(\"os.name\").toUpperCase().contains(\"WINDOWS\")'>\n\t\t<then>\n\t\t\t<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t\t\t<encoder>\n\t\t\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36}:%L-%msg%n%n</pattern>\n\t\t\t\t</encoder>\n\t\t\t</appender>\n\t\t\t<root>\n\t\t\t\t<appender-ref ref=\"STDOUT\" />\n\t\t\t</root>\n\t\t</then>\n\t</if>\n\n上面的配置表示在windows中运行时日志输出到控制台，在其他系统中日志不输出到控制台\n\n## 2. 禁用日志收集栈信息\n\n在写日志时，打印行号能方便我们快速定位出问题的代码。此功能通过生成栈信息，然后定位到合适的栈帧来实现。禁用此功能会提高日志性能。\n\n异步日志实现默认关闭了收集栈信息，见`ch.qos.logback.classic.AsyncAppender#includeCallerData`\n\n对于同步日志，只需要把`pattern`中的`%L`去掉就可以禁用栈信息。\n\n\n## 3. 使用异步日志\n\n### 3.1 logback\n\nlogback只需要用异步appender包裹原来的appender就可以了\n\n\t<appender name=\"ASYNC_ROLLING-cs\" class=\"com.yjf.common.log.LogbackAsyncAppender\">\n\t\t<appender-ref ref=\"ROLLING-cs\" />\n\t</appender>\n\n目前我们使用了用于输出日志到文件的`ch.qos.logback.core.rolling.RollingFileAppender`和输出日志到rabbitmq的`com.yjf.monitor.client.integration.log.appender.jms.LogbackMsgRollingAppenderAdapter`，请都用上面的`LogbackAsyncAppender`包裹住。\n\n此配置下，对象先放入一个队列，然后由另外一个线程来处理具体的日志输出，实现异步化，实现流程如下：\n\n- queue大小为1024，如果queue剩余空间小于100时,会做丢弃判断\n- 如果queue剩余空间小于100时，会丢弃TRACE、DEBUG日志，也会丢弃LoggerName不以com.yjf开始的INFO日志\n- 如果queue没有剩余空间为0时，会阻塞业务线程，直到queue有剩余空间\n- 输出日志到文件的appender，由于会用锁来控制多线程的写入，这种用单线程来写文件的方式很完美。\n- 输出日志到rabbitmq的appender，`LogbackMsgRollingAppenderAdapter`在并发下会有性能问题，因为`LogbackMsgRollingAppenderAdapter`内部只用到一个channel，如果遇到高并发场景，请给`CachingConnectionFactory`设置合理的channelCacheSize值\n\n### 3.2 log4j\n\n- 写日志到文件的appender，用`org.apache.log4j.AsyncAppender`代替`org.apache.log4j.DailyRollingFileAppender`\n- 写日志到rabbitmq的appender，建议用`com.yjf.common.log.Log4jAsynAmqpAppender`，内部也用queue来实现异步化\n\n## 4. logger api增强\n\n下面是常用的使用方式：\n\n\tlogger.info(\"金额无效,手续费大于或者等于提现总金额.charge:{},amount:{}\", new Object[] { 1, 2, 3 });\n\tlogger.info(\"金额无效,手续费大于或者等于提现总金额.charge:{},amount:{},test:{}\", 1, 2, 3); \n\tLoggerFormat.info(String.format(\"金额无效,手续费大于或者等于提现总金额.charge:%s,amount:%s,test:%s\", 1, 2,3), logger);\n\n第一种是slf4j提供的原生api，第二种是yjf-common-utils提供的支持可变的参数的logger，第三种是yjf-common-util提供的日志工具类。这三种使用方式在日志级别为error的情况下，跑一百万次测试出的性能数据如下：\n\n\tLoggerFactoryTest.testLogOri: [measured 1000000 out of 1020000 rounds, threads: 4 (all cores)]\n\t round: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 2, GC.time: 0.62, time.total: 2.67, time.warmup: 0.04, time.bench: 2.63\n\n\tLoggerFactoryTest.testYjfLogger: [measured 1000000 out of 1020000 rounds, threads: 4 (all cores)]\n\t round: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 1, GC.time: 0.72, time.total: 3.43, time.warmup: 0.06, time.bench: 3.37\n\n\tLoggerFactoryTest.testLogUtils: [measured 1000000 out of 1020000 rounds, threads: 4 (all cores)]\n\t round: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 14, GC.time: 1.78, time.total: 11.62, time.warmup: 0.22, time.bench: 11.40\n\n从这些数据可以看出，第三种使用方式由于在方法调用时就有字符串拼接的开销，在error级别下，性能肯定不是很好。\n\n在日志级别为info情况下，这种差距不是很大，但是如果我们使用异步日志，字符串的拼接在独立的线程中完成，不会在调用线程中完成，业务整体执行时间会减少。\n\n第三种方式还有一个问题，行号永远显示的是LoggerFormat.info方法的行号，不便于我们定位问题。“懒”的同学就用第二种方式吧，支持变长参数，例子如下：\n\n\timport com.yjf.common.log.Logger;\n\timport com.yjf.common.log.LoggerFactory;\n\t...\t\t\n\tLogger logger = LoggerFactory.getLogger(LoggerFactoryTest.class\n\t\t.getName());\n\t...\n\tlogger.info(\"xx:{} xx:{} xx:{}\",\"a\",\"b\",\"c\");\n\tlogger.info(\"xx:{} xx:{} xx:[]\", \"a\",\"b\",\"c\", new RuntimeException(\"挂了\"));\n\n请不要再使用`com.yjf.common.log.LoggerFormat`和`com.yjf.common.lang.util.PrintLogTool`\n\n## 5. tomcat日志优化\n\ntomcat embed默认日志使用的是`org.apache.juli.logging.DirectJDKLog`，此日志使用了`java.util.logging.Logger`，此logger使用了jre下面的配置文件`$JAVA_HOME\\jre\\lib\\logging.properties`，此配置文件配置了一个处理器`java.util.logging.ConsoleHandler`，它只做了一个事情，使用`System.err`来作为默认的日志输出，也就是说tomcat embed遇到不能处理的异常后，用System.err来打印日志。(见：`org.apache.catalina.core.StandardWrapperValve#invoke`方法)\n\n我们使用的的tomcat和tomcat embed有点差别，tomcat 中使用了`org.apache.juli.FileHandler`，此输出位置为`$CATALINA_HOME/logs/localhost.yyyy-MM-dd.log`，也就是说tomcat在遇到他搞不定的异常时，把日志输出到了此位置。\ntomcat把输出和错误输出都打印到catalina.out文件了，见catalina.sh\n\n\torg.apache.catalina.startup.Bootstrap \"$@\" start \\\n      >> \"$CATALINA_OUT\" 2>&1 \"&\"\n\n这也解释了上次易交易产品遇到的那个问题，spring mvc action递归调用自己，catalina.out文件中没有异常日志。但是我在本地使用tomcat embed测试，会在控制台输出`StackOverflowError`。\n\ntomcat日志优化点：\n\n- 用`org.apache.juli.AsyncFileHandler`代替`org.apache.juli.FileHandler`\n- 现在我们应用的日志目录都改为`/var/log/webapps/{project_name}/`。为了便于管理，tomcat 所有日志文件也会输出到`/var/log/webapps/{project_name}/`路径\n\n以上优化已提交到定制化tomcat模板。\n\n## 6.优化J.U.C\n\nJ.U.L代表java内置的日志机制，上面部分提到tomcat在遇到他搞不定的异常时，会把日志输出到`localhost.yyyy-MM-dd.log`。这样很不爽，很多同学在检查应用异常时，下意识的不会去看此日志文件，为了避免此问题，请使用下面的解决方案：\n\n1. 使用`com.yjf.common.log.LogbackConfigListener`,使用方法见doc\n\n\t请使用yjf-common-util版本大于等于1.6.9.20130708的包\n\n2. logback增加配置\n\n\t\t<contextListener class=\"ch.qos.logback.classic.jul.LevelChangePropagator\">\n    \t\t<resetJUL>true</resetJUL>\n  \t\t</contextListener>\n\n从此以后，所有的异常日志都会在应用日志文件中找到。\n\n## 7. 性能测试\n\n测试四种情况，普通日志输出，普通日志禁用线程栈信息，异步日志，异步日志禁用线程栈信息，测试结果如下：\n\n\t\n\tLoggerPerfTest.testCommonLogger: [measured 100000 out of 101000 rounds, threads: 16 (physical processors: 4)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 2, GC.time: 0.12, time.total: 10.73, time.warmup: 0.11, time.bench: 10.62\n \t\n\tLoggerPerfTest.testCommonLoggerWithoutStackInfo: [measured 100000 out of 101000 rounds, threads: 16 (physical processors: 4)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 2, GC.time: 0.04, time.total: 3.93, time.warmup: 0.14, time.bench: 3.79\n \t\n\tLoggerPerfTest.testAsyncLogger: [measured 100000 out of 101000 rounds, threads: 16 (physical processors: 4)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 3, GC.time: 0.15, time.total: 2.77, time.warmup: 0.06, time.bench: 2.71\n \t\n\tLoggerPerfTest.testAsyncLoggerWithoutStackInfo: [measured 100000 out of 101000 rounds, threads: 16 (physical processors: 4)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 1.86, time.warmup: 0.00, time.bench: 1.85\n \t\n可见异步日志性能会提升不少，不收集栈信息性能也会提升不少。","slug":"log-tuning","published":1,"updated":"2018-04-01T16:53:17.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2kshv003bp0ug97gnaisq","content":"<p>一些日志优化相关的东东.</p>\n<h2 id=\"1-关掉没用的appender\"><a href=\"#1-关掉没用的appender\" class=\"headerlink\" title=\"1. 关掉没用的appender\"></a>1. 关掉没用的appender</h2><p>现在我们所有的系统都会把日志输出到指定的文件，为了本地开发测试方便，我们也会把日志输出到控制台。在生产环境输出到控制台是完全没有必要的，既浪费了存储空间，又浪费了性能，请在生产环境去掉ConsoleAppender</p>\n<ul>\n<li>logback去掉<code>ch.qos.logback.core.ConsoleAppender</code></li>\n<li>log4j去掉<code>org.apache.log4j.ConsoleAppender</code></li>\n</ul>\n<p>使用logback的同学也可以如下操作：</p>\n<p>1.添加依赖</p>\n<pre><code>&lt;dependency&gt;\n        &lt;groupId&gt;org.codehaus.janino&lt;/groupId&gt;\n        &lt;artifactId&gt;janino&lt;/artifactId&gt;\n        &lt;version&gt;2.5.16&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre><p>2.修改logback.xml中原ConsoleAppender配置如下：</p>\n<pre><code>&lt;if condition=&apos;property(&quot;os.name&quot;).toUpperCase().contains(&quot;WINDOWS&quot;)&apos;&gt;\n    &lt;then&gt;\n        &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;\n            &lt;encoder&gt;\n                &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36}:%L-%msg%n%n&lt;/pattern&gt;\n            &lt;/encoder&gt;\n        &lt;/appender&gt;\n        &lt;root&gt;\n            &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;\n        &lt;/root&gt;\n    &lt;/then&gt;\n&lt;/if&gt;\n</code></pre><p>上面的配置表示在windows中运行时日志输出到控制台，在其他系统中日志不输出到控制台</p>\n<h2 id=\"2-禁用日志收集栈信息\"><a href=\"#2-禁用日志收集栈信息\" class=\"headerlink\" title=\"2. 禁用日志收集栈信息\"></a>2. 禁用日志收集栈信息</h2><p>在写日志时，打印行号能方便我们快速定位出问题的代码。此功能通过生成栈信息，然后定位到合适的栈帧来实现。禁用此功能会提高日志性能。</p>\n<p>异步日志实现默认关闭了收集栈信息，见<code>ch.qos.logback.classic.AsyncAppender#includeCallerData</code></p>\n<p>对于同步日志，只需要把<code>pattern</code>中的<code>%L</code>去掉就可以禁用栈信息。</p>\n<h2 id=\"3-使用异步日志\"><a href=\"#3-使用异步日志\" class=\"headerlink\" title=\"3. 使用异步日志\"></a>3. 使用异步日志</h2><h3 id=\"3-1-logback\"><a href=\"#3-1-logback\" class=\"headerlink\" title=\"3.1 logback\"></a>3.1 logback</h3><p>logback只需要用异步appender包裹原来的appender就可以了</p>\n<pre><code>&lt;appender name=&quot;ASYNC_ROLLING-cs&quot; class=&quot;com.yjf.common.log.LogbackAsyncAppender&quot;&gt;\n    &lt;appender-ref ref=&quot;ROLLING-cs&quot; /&gt;\n&lt;/appender&gt;\n</code></pre><p>目前我们使用了用于输出日志到文件的<code>ch.qos.logback.core.rolling.RollingFileAppender</code>和输出日志到rabbitmq的<code>com.yjf.monitor.client.integration.log.appender.jms.LogbackMsgRollingAppenderAdapter</code>，请都用上面的<code>LogbackAsyncAppender</code>包裹住。</p>\n<p>此配置下，对象先放入一个队列，然后由另外一个线程来处理具体的日志输出，实现异步化，实现流程如下：</p>\n<ul>\n<li>queue大小为1024，如果queue剩余空间小于100时,会做丢弃判断</li>\n<li>如果queue剩余空间小于100时，会丢弃TRACE、DEBUG日志，也会丢弃LoggerName不以com.yjf开始的INFO日志</li>\n<li>如果queue没有剩余空间为0时，会阻塞业务线程，直到queue有剩余空间</li>\n<li>输出日志到文件的appender，由于会用锁来控制多线程的写入，这种用单线程来写文件的方式很完美。</li>\n<li>输出日志到rabbitmq的appender，<code>LogbackMsgRollingAppenderAdapter</code>在并发下会有性能问题，因为<code>LogbackMsgRollingAppenderAdapter</code>内部只用到一个channel，如果遇到高并发场景，请给<code>CachingConnectionFactory</code>设置合理的channelCacheSize值</li>\n</ul>\n<h3 id=\"3-2-log4j\"><a href=\"#3-2-log4j\" class=\"headerlink\" title=\"3.2 log4j\"></a>3.2 log4j</h3><ul>\n<li>写日志到文件的appender，用<code>org.apache.log4j.AsyncAppender</code>代替<code>org.apache.log4j.DailyRollingFileAppender</code></li>\n<li>写日志到rabbitmq的appender，建议用<code>com.yjf.common.log.Log4jAsynAmqpAppender</code>，内部也用queue来实现异步化</li>\n</ul>\n<h2 id=\"4-logger-api增强\"><a href=\"#4-logger-api增强\" class=\"headerlink\" title=\"4. logger api增强\"></a>4. logger api增强</h2><p>下面是常用的使用方式：</p>\n<pre><code>logger.info(&quot;金额无效,手续费大于或者等于提现总金额.charge:{},amount:{}&quot;, new Object[] { 1, 2, 3 });\nlogger.info(&quot;金额无效,手续费大于或者等于提现总金额.charge:{},amount:{},test:{}&quot;, 1, 2, 3); \nLoggerFormat.info(String.format(&quot;金额无效,手续费大于或者等于提现总金额.charge:%s,amount:%s,test:%s&quot;, 1, 2,3), logger);\n</code></pre><p>第一种是slf4j提供的原生api，第二种是yjf-common-utils提供的支持可变的参数的logger，第三种是yjf-common-util提供的日志工具类。这三种使用方式在日志级别为error的情况下，跑一百万次测试出的性能数据如下：</p>\n<pre><code>LoggerFactoryTest.testLogOri: [measured 1000000 out of 1020000 rounds, threads: 4 (all cores)]\n round: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 2, GC.time: 0.62, time.total: 2.67, time.warmup: 0.04, time.bench: 2.63\n\nLoggerFactoryTest.testYjfLogger: [measured 1000000 out of 1020000 rounds, threads: 4 (all cores)]\n round: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 1, GC.time: 0.72, time.total: 3.43, time.warmup: 0.06, time.bench: 3.37\n\nLoggerFactoryTest.testLogUtils: [measured 1000000 out of 1020000 rounds, threads: 4 (all cores)]\n round: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 14, GC.time: 1.78, time.total: 11.62, time.warmup: 0.22, time.bench: 11.40\n</code></pre><p>从这些数据可以看出，第三种使用方式由于在方法调用时就有字符串拼接的开销，在error级别下，性能肯定不是很好。</p>\n<p>在日志级别为info情况下，这种差距不是很大，但是如果我们使用异步日志，字符串的拼接在独立的线程中完成，不会在调用线程中完成，业务整体执行时间会减少。</p>\n<p>第三种方式还有一个问题，行号永远显示的是LoggerFormat.info方法的行号，不便于我们定位问题。“懒”的同学就用第二种方式吧，支持变长参数，例子如下：</p>\n<pre><code>import com.yjf.common.log.Logger;\nimport com.yjf.common.log.LoggerFactory;\n...        \nLogger logger = LoggerFactory.getLogger(LoggerFactoryTest.class\n    .getName());\n...\nlogger.info(&quot;xx:{} xx:{} xx:{}&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);\nlogger.info(&quot;xx:{} xx:{} xx:[]&quot;, &quot;a&quot;,&quot;b&quot;,&quot;c&quot;, new RuntimeException(&quot;挂了&quot;));\n</code></pre><p>请不要再使用<code>com.yjf.common.log.LoggerFormat</code>和<code>com.yjf.common.lang.util.PrintLogTool</code></p>\n<h2 id=\"5-tomcat日志优化\"><a href=\"#5-tomcat日志优化\" class=\"headerlink\" title=\"5. tomcat日志优化\"></a>5. tomcat日志优化</h2><p>tomcat embed默认日志使用的是<code>org.apache.juli.logging.DirectJDKLog</code>，此日志使用了<code>java.util.logging.Logger</code>，此logger使用了jre下面的配置文件<code>$JAVA_HOME\\jre\\lib\\logging.properties</code>，此配置文件配置了一个处理器<code>java.util.logging.ConsoleHandler</code>，它只做了一个事情，使用<code>System.err</code>来作为默认的日志输出，也就是说tomcat embed遇到不能处理的异常后，用System.err来打印日志。(见：<code>org.apache.catalina.core.StandardWrapperValve#invoke</code>方法)</p>\n<p>我们使用的的tomcat和tomcat embed有点差别，tomcat 中使用了<code>org.apache.juli.FileHandler</code>，此输出位置为<code>$CATALINA_HOME/logs/localhost.yyyy-MM-dd.log</code>，也就是说tomcat在遇到他搞不定的异常时，把日志输出到了此位置。<br>tomcat把输出和错误输出都打印到catalina.out文件了，见catalina.sh</p>\n<pre><code>org.apache.catalina.startup.Bootstrap &quot;$@&quot; start \\\n  &gt;&gt; &quot;$CATALINA_OUT&quot; 2&gt;&amp;1 &quot;&amp;&quot;\n</code></pre><p>这也解释了上次易交易产品遇到的那个问题，spring mvc action递归调用自己，catalina.out文件中没有异常日志。但是我在本地使用tomcat embed测试，会在控制台输出<code>StackOverflowError</code>。</p>\n<p>tomcat日志优化点：</p>\n<ul>\n<li>用<code>org.apache.juli.AsyncFileHandler</code>代替<code>org.apache.juli.FileHandler</code></li>\n<li>现在我们应用的日志目录都改为<code>/var/log/webapps/{project_name}/</code>。为了便于管理，tomcat 所有日志文件也会输出到<code>/var/log/webapps/{project_name}/</code>路径</li>\n</ul>\n<p>以上优化已提交到定制化tomcat模板。</p>\n<h2 id=\"6-优化J-U-C\"><a href=\"#6-优化J-U-C\" class=\"headerlink\" title=\"6.优化J.U.C\"></a>6.优化J.U.C</h2><p>J.U.L代表java内置的日志机制，上面部分提到tomcat在遇到他搞不定的异常时，会把日志输出到<code>localhost.yyyy-MM-dd.log</code>。这样很不爽，很多同学在检查应用异常时，下意识的不会去看此日志文件，为了避免此问题，请使用下面的解决方案：</p>\n<ol>\n<li><p>使用<code>com.yjf.common.log.LogbackConfigListener</code>,使用方法见doc</p>\n<p> 请使用yjf-common-util版本大于等于1.6.9.20130708的包</p>\n</li>\n<li><p>logback增加配置</p>\n<pre><code>&lt;contextListener class=&quot;ch.qos.logback.classic.jul.LevelChangePropagator&quot;&gt;\n    &lt;resetJUL&gt;true&lt;/resetJUL&gt;\n  &lt;/contextListener&gt;\n</code></pre></li>\n</ol>\n<p>从此以后，所有的异常日志都会在应用日志文件中找到。</p>\n<h2 id=\"7-性能测试\"><a href=\"#7-性能测试\" class=\"headerlink\" title=\"7. 性能测试\"></a>7. 性能测试</h2><p>测试四种情况，普通日志输出，普通日志禁用线程栈信息，异步日志，异步日志禁用线程栈信息，测试结果如下：</p>\n<pre><code>LoggerPerfTest.testCommonLogger: [measured 100000 out of 101000 rounds, threads: 16 (physical processors: 4)]\n round: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 2, GC.time: 0.12, time.total: 10.73, time.warmup: 0.11, time.bench: 10.62\n\nLoggerPerfTest.testCommonLoggerWithoutStackInfo: [measured 100000 out of 101000 rounds, threads: 16 (physical processors: 4)]\n round: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 2, GC.time: 0.04, time.total: 3.93, time.warmup: 0.14, time.bench: 3.79\n\nLoggerPerfTest.testAsyncLogger: [measured 100000 out of 101000 rounds, threads: 16 (physical processors: 4)]\n round: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 3, GC.time: 0.15, time.total: 2.77, time.warmup: 0.06, time.bench: 2.71\n\nLoggerPerfTest.testAsyncLoggerWithoutStackInfo: [measured 100000 out of 101000 rounds, threads: 16 (physical processors: 4)]\n round: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 1.86, time.warmup: 0.00, time.bench: 1.85\n</code></pre><p>可见异步日志性能会提升不少，不收集栈信息性能也会提升不少。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一些日志优化相关的东东.</p>\n<h2 id=\"1-关掉没用的appender\"><a href=\"#1-关掉没用的appender\" class=\"headerlink\" title=\"1. 关掉没用的appender\"></a>1. 关掉没用的appender</h2><p>现在我们所有的系统都会把日志输出到指定的文件，为了本地开发测试方便，我们也会把日志输出到控制台。在生产环境输出到控制台是完全没有必要的，既浪费了存储空间，又浪费了性能，请在生产环境去掉ConsoleAppender</p>\n<ul>\n<li>logback去掉<code>ch.qos.logback.core.ConsoleAppender</code></li>\n<li>log4j去掉<code>org.apache.log4j.ConsoleAppender</code></li>\n</ul>\n<p>使用logback的同学也可以如下操作：</p>\n<p>1.添加依赖</p>\n<pre><code>&lt;dependency&gt;\n        &lt;groupId&gt;org.codehaus.janino&lt;/groupId&gt;\n        &lt;artifactId&gt;janino&lt;/artifactId&gt;\n        &lt;version&gt;2.5.16&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre><p>2.修改logback.xml中原ConsoleAppender配置如下：</p>\n<pre><code>&lt;if condition=&apos;property(&quot;os.name&quot;).toUpperCase().contains(&quot;WINDOWS&quot;)&apos;&gt;\n    &lt;then&gt;\n        &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;\n            &lt;encoder&gt;\n                &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36}:%L-%msg%n%n&lt;/pattern&gt;\n            &lt;/encoder&gt;\n        &lt;/appender&gt;\n        &lt;root&gt;\n            &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;\n        &lt;/root&gt;\n    &lt;/then&gt;\n&lt;/if&gt;\n</code></pre><p>上面的配置表示在windows中运行时日志输出到控制台，在其他系统中日志不输出到控制台</p>\n<h2 id=\"2-禁用日志收集栈信息\"><a href=\"#2-禁用日志收集栈信息\" class=\"headerlink\" title=\"2. 禁用日志收集栈信息\"></a>2. 禁用日志收集栈信息</h2><p>在写日志时，打印行号能方便我们快速定位出问题的代码。此功能通过生成栈信息，然后定位到合适的栈帧来实现。禁用此功能会提高日志性能。</p>\n<p>异步日志实现默认关闭了收集栈信息，见<code>ch.qos.logback.classic.AsyncAppender#includeCallerData</code></p>\n<p>对于同步日志，只需要把<code>pattern</code>中的<code>%L</code>去掉就可以禁用栈信息。</p>\n<h2 id=\"3-使用异步日志\"><a href=\"#3-使用异步日志\" class=\"headerlink\" title=\"3. 使用异步日志\"></a>3. 使用异步日志</h2><h3 id=\"3-1-logback\"><a href=\"#3-1-logback\" class=\"headerlink\" title=\"3.1 logback\"></a>3.1 logback</h3><p>logback只需要用异步appender包裹原来的appender就可以了</p>\n<pre><code>&lt;appender name=&quot;ASYNC_ROLLING-cs&quot; class=&quot;com.yjf.common.log.LogbackAsyncAppender&quot;&gt;\n    &lt;appender-ref ref=&quot;ROLLING-cs&quot; /&gt;\n&lt;/appender&gt;\n</code></pre><p>目前我们使用了用于输出日志到文件的<code>ch.qos.logback.core.rolling.RollingFileAppender</code>和输出日志到rabbitmq的<code>com.yjf.monitor.client.integration.log.appender.jms.LogbackMsgRollingAppenderAdapter</code>，请都用上面的<code>LogbackAsyncAppender</code>包裹住。</p>\n<p>此配置下，对象先放入一个队列，然后由另外一个线程来处理具体的日志输出，实现异步化，实现流程如下：</p>\n<ul>\n<li>queue大小为1024，如果queue剩余空间小于100时,会做丢弃判断</li>\n<li>如果queue剩余空间小于100时，会丢弃TRACE、DEBUG日志，也会丢弃LoggerName不以com.yjf开始的INFO日志</li>\n<li>如果queue没有剩余空间为0时，会阻塞业务线程，直到queue有剩余空间</li>\n<li>输出日志到文件的appender，由于会用锁来控制多线程的写入，这种用单线程来写文件的方式很完美。</li>\n<li>输出日志到rabbitmq的appender，<code>LogbackMsgRollingAppenderAdapter</code>在并发下会有性能问题，因为<code>LogbackMsgRollingAppenderAdapter</code>内部只用到一个channel，如果遇到高并发场景，请给<code>CachingConnectionFactory</code>设置合理的channelCacheSize值</li>\n</ul>\n<h3 id=\"3-2-log4j\"><a href=\"#3-2-log4j\" class=\"headerlink\" title=\"3.2 log4j\"></a>3.2 log4j</h3><ul>\n<li>写日志到文件的appender，用<code>org.apache.log4j.AsyncAppender</code>代替<code>org.apache.log4j.DailyRollingFileAppender</code></li>\n<li>写日志到rabbitmq的appender，建议用<code>com.yjf.common.log.Log4jAsynAmqpAppender</code>，内部也用queue来实现异步化</li>\n</ul>\n<h2 id=\"4-logger-api增强\"><a href=\"#4-logger-api增强\" class=\"headerlink\" title=\"4. logger api增强\"></a>4. logger api增强</h2><p>下面是常用的使用方式：</p>\n<pre><code>logger.info(&quot;金额无效,手续费大于或者等于提现总金额.charge:{},amount:{}&quot;, new Object[] { 1, 2, 3 });\nlogger.info(&quot;金额无效,手续费大于或者等于提现总金额.charge:{},amount:{},test:{}&quot;, 1, 2, 3); \nLoggerFormat.info(String.format(&quot;金额无效,手续费大于或者等于提现总金额.charge:%s,amount:%s,test:%s&quot;, 1, 2,3), logger);\n</code></pre><p>第一种是slf4j提供的原生api，第二种是yjf-common-utils提供的支持可变的参数的logger，第三种是yjf-common-util提供的日志工具类。这三种使用方式在日志级别为error的情况下，跑一百万次测试出的性能数据如下：</p>\n<pre><code>LoggerFactoryTest.testLogOri: [measured 1000000 out of 1020000 rounds, threads: 4 (all cores)]\n round: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 2, GC.time: 0.62, time.total: 2.67, time.warmup: 0.04, time.bench: 2.63\n\nLoggerFactoryTest.testYjfLogger: [measured 1000000 out of 1020000 rounds, threads: 4 (all cores)]\n round: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 1, GC.time: 0.72, time.total: 3.43, time.warmup: 0.06, time.bench: 3.37\n\nLoggerFactoryTest.testLogUtils: [measured 1000000 out of 1020000 rounds, threads: 4 (all cores)]\n round: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 14, GC.time: 1.78, time.total: 11.62, time.warmup: 0.22, time.bench: 11.40\n</code></pre><p>从这些数据可以看出，第三种使用方式由于在方法调用时就有字符串拼接的开销，在error级别下，性能肯定不是很好。</p>\n<p>在日志级别为info情况下，这种差距不是很大，但是如果我们使用异步日志，字符串的拼接在独立的线程中完成，不会在调用线程中完成，业务整体执行时间会减少。</p>\n<p>第三种方式还有一个问题，行号永远显示的是LoggerFormat.info方法的行号，不便于我们定位问题。“懒”的同学就用第二种方式吧，支持变长参数，例子如下：</p>\n<pre><code>import com.yjf.common.log.Logger;\nimport com.yjf.common.log.LoggerFactory;\n...        \nLogger logger = LoggerFactory.getLogger(LoggerFactoryTest.class\n    .getName());\n...\nlogger.info(&quot;xx:{} xx:{} xx:{}&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);\nlogger.info(&quot;xx:{} xx:{} xx:[]&quot;, &quot;a&quot;,&quot;b&quot;,&quot;c&quot;, new RuntimeException(&quot;挂了&quot;));\n</code></pre><p>请不要再使用<code>com.yjf.common.log.LoggerFormat</code>和<code>com.yjf.common.lang.util.PrintLogTool</code></p>\n<h2 id=\"5-tomcat日志优化\"><a href=\"#5-tomcat日志优化\" class=\"headerlink\" title=\"5. tomcat日志优化\"></a>5. tomcat日志优化</h2><p>tomcat embed默认日志使用的是<code>org.apache.juli.logging.DirectJDKLog</code>，此日志使用了<code>java.util.logging.Logger</code>，此logger使用了jre下面的配置文件<code>$JAVA_HOME\\jre\\lib\\logging.properties</code>，此配置文件配置了一个处理器<code>java.util.logging.ConsoleHandler</code>，它只做了一个事情，使用<code>System.err</code>来作为默认的日志输出，也就是说tomcat embed遇到不能处理的异常后，用System.err来打印日志。(见：<code>org.apache.catalina.core.StandardWrapperValve#invoke</code>方法)</p>\n<p>我们使用的的tomcat和tomcat embed有点差别，tomcat 中使用了<code>org.apache.juli.FileHandler</code>，此输出位置为<code>$CATALINA_HOME/logs/localhost.yyyy-MM-dd.log</code>，也就是说tomcat在遇到他搞不定的异常时，把日志输出到了此位置。<br>tomcat把输出和错误输出都打印到catalina.out文件了，见catalina.sh</p>\n<pre><code>org.apache.catalina.startup.Bootstrap &quot;$@&quot; start \\\n  &gt;&gt; &quot;$CATALINA_OUT&quot; 2&gt;&amp;1 &quot;&amp;&quot;\n</code></pre><p>这也解释了上次易交易产品遇到的那个问题，spring mvc action递归调用自己，catalina.out文件中没有异常日志。但是我在本地使用tomcat embed测试，会在控制台输出<code>StackOverflowError</code>。</p>\n<p>tomcat日志优化点：</p>\n<ul>\n<li>用<code>org.apache.juli.AsyncFileHandler</code>代替<code>org.apache.juli.FileHandler</code></li>\n<li>现在我们应用的日志目录都改为<code>/var/log/webapps/{project_name}/</code>。为了便于管理，tomcat 所有日志文件也会输出到<code>/var/log/webapps/{project_name}/</code>路径</li>\n</ul>\n<p>以上优化已提交到定制化tomcat模板。</p>\n<h2 id=\"6-优化J-U-C\"><a href=\"#6-优化J-U-C\" class=\"headerlink\" title=\"6.优化J.U.C\"></a>6.优化J.U.C</h2><p>J.U.L代表java内置的日志机制，上面部分提到tomcat在遇到他搞不定的异常时，会把日志输出到<code>localhost.yyyy-MM-dd.log</code>。这样很不爽，很多同学在检查应用异常时，下意识的不会去看此日志文件，为了避免此问题，请使用下面的解决方案：</p>\n<ol>\n<li><p>使用<code>com.yjf.common.log.LogbackConfigListener</code>,使用方法见doc</p>\n<p> 请使用yjf-common-util版本大于等于1.6.9.20130708的包</p>\n</li>\n<li><p>logback增加配置</p>\n<pre><code>&lt;contextListener class=&quot;ch.qos.logback.classic.jul.LevelChangePropagator&quot;&gt;\n    &lt;resetJUL&gt;true&lt;/resetJUL&gt;\n  &lt;/contextListener&gt;\n</code></pre></li>\n</ol>\n<p>从此以后，所有的异常日志都会在应用日志文件中找到。</p>\n<h2 id=\"7-性能测试\"><a href=\"#7-性能测试\" class=\"headerlink\" title=\"7. 性能测试\"></a>7. 性能测试</h2><p>测试四种情况，普通日志输出，普通日志禁用线程栈信息，异步日志，异步日志禁用线程栈信息，测试结果如下：</p>\n<pre><code>LoggerPerfTest.testCommonLogger: [measured 100000 out of 101000 rounds, threads: 16 (physical processors: 4)]\n round: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 2, GC.time: 0.12, time.total: 10.73, time.warmup: 0.11, time.bench: 10.62\n\nLoggerPerfTest.testCommonLoggerWithoutStackInfo: [measured 100000 out of 101000 rounds, threads: 16 (physical processors: 4)]\n round: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 2, GC.time: 0.04, time.total: 3.93, time.warmup: 0.14, time.bench: 3.79\n\nLoggerPerfTest.testAsyncLogger: [measured 100000 out of 101000 rounds, threads: 16 (physical processors: 4)]\n round: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 3, GC.time: 0.15, time.total: 2.77, time.warmup: 0.06, time.bench: 2.71\n\nLoggerPerfTest.testAsyncLoggerWithoutStackInfo: [measured 100000 out of 101000 rounds, threads: 16 (physical processors: 4)]\n round: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 1.86, time.warmup: 0.00, time.bench: 1.85\n</code></pre><p>可见异步日志性能会提升不少，不收集栈信息性能也会提升不少。</p>\n"},{"title":"maven 传递依赖检查","date":"2014-05-28T13:52:17.000Z","_content":"\n## 传递依赖检查\n\n我们通过maven插件`org.apache.maven.plugins:maven-enforcer-plugin`启用`<requireUpperBoundDeps/>`\n来检查传递依赖是否高于直接依赖,如果传递依赖的版本比直接依赖的版本高,则打包失败.\n\n`<requireUpperBoundDeps/>`解释如下:\n\n\tIF:\n\n    \tA-->B1-->C2\n\n    \tA-->C1\n\n    \tC2>C1\n\n\tTHEN:\n\n    \tthrow Exception;\n    \t\n我觉得这个检查很有必要,但是解析的范围太宽了.一个项目依赖了很多的开源组件,我们最好是限制这个检查只检查我们自己的jar包.\n\n修改插件默认行为,在`org.apache.maven.plugins.enforcer.RequireUpperBoundDeps$RequireUpperBoundDepsVisitor#containsConflicts`中加入:\n\n\tString key=  resolvedPair.constructKey();\n\tif(key!=null && !key.startsWith(\"com.xxx\")){//不检查groupId中包括非com.xxx开头的jar包\n  \t\treturn false;\n\t}\t\n    \n## demo\n\n下面说下检查出来的提示信息分析,比如下面的情况:\n\n\tFailed while enforcing RequireUpperBoundDeps. The error(s) are [\n\t\tRequire upper bound dependencies error for xxx.interchange:interchange-facade-settle:1.0.0.20121009 paths to dependency are:\n\t\t+-xxx.ppm:ppm-integration:1.0.1.6\n \t \t\t+-xxx.interchange:interchange-facade-settle:1.0.0.20121009\n\t\tand\n\t\t+-xxx.ppm:ppm-integration:1.0.1.6\n \t \t\t+-xxx.core.payengine:payengine-facade:2.0.0.20140314\n   \t \t\t\t+-xxx.interchange:interchange-facade-settle:1.0.0.20121009 (managed) <-- xxx.interchange:interchange-facade-settle:1.3.0.20140303\n   \t \t\t\t\n\n第一个告诉我们`ppm-integration`-->`interchange-facade-settle:1.0.0.20121009`.\n\n第二个告诉我们`ppm-integration`-->`payengine-facade:2.0.0.20140314`-->`interchange-facade-settle:1.3.0.20140303`\n\n根据maven `最短路径优先原则`,`ppm-integration`最终会依赖`interchange-facade-settle:1.0.0.20121009`.但是`payengine-facade:2.0.0.20140314`它依赖`interchange-facade-settle:1.3.0.20140303`.如果classpath中只有`interchange-facade-settle:1.0.0.20121009`,运行时`payengine-facade`就有可能报找不到类,找不到方法之类的错误.\n\n遇到这样的场景,最好是修改我们项目的直接依赖,让`ppm-integration`-->`interchange-facade-settle:1.3.0.20140303`,然后测试下是否ok.\n","source":"_posts/maven-transitive-dependency-exception.md","raw":"---\ntitle: maven 传递依赖检查\ndate: 2014-05-28 21:52:17\ncategories: java\ntags:\n  - maven\n---\n\n## 传递依赖检查\n\n我们通过maven插件`org.apache.maven.plugins:maven-enforcer-plugin`启用`<requireUpperBoundDeps/>`\n来检查传递依赖是否高于直接依赖,如果传递依赖的版本比直接依赖的版本高,则打包失败.\n\n`<requireUpperBoundDeps/>`解释如下:\n\n\tIF:\n\n    \tA-->B1-->C2\n\n    \tA-->C1\n\n    \tC2>C1\n\n\tTHEN:\n\n    \tthrow Exception;\n    \t\n我觉得这个检查很有必要,但是解析的范围太宽了.一个项目依赖了很多的开源组件,我们最好是限制这个检查只检查我们自己的jar包.\n\n修改插件默认行为,在`org.apache.maven.plugins.enforcer.RequireUpperBoundDeps$RequireUpperBoundDepsVisitor#containsConflicts`中加入:\n\n\tString key=  resolvedPair.constructKey();\n\tif(key!=null && !key.startsWith(\"com.xxx\")){//不检查groupId中包括非com.xxx开头的jar包\n  \t\treturn false;\n\t}\t\n    \n## demo\n\n下面说下检查出来的提示信息分析,比如下面的情况:\n\n\tFailed while enforcing RequireUpperBoundDeps. The error(s) are [\n\t\tRequire upper bound dependencies error for xxx.interchange:interchange-facade-settle:1.0.0.20121009 paths to dependency are:\n\t\t+-xxx.ppm:ppm-integration:1.0.1.6\n \t \t\t+-xxx.interchange:interchange-facade-settle:1.0.0.20121009\n\t\tand\n\t\t+-xxx.ppm:ppm-integration:1.0.1.6\n \t \t\t+-xxx.core.payengine:payengine-facade:2.0.0.20140314\n   \t \t\t\t+-xxx.interchange:interchange-facade-settle:1.0.0.20121009 (managed) <-- xxx.interchange:interchange-facade-settle:1.3.0.20140303\n   \t \t\t\t\n\n第一个告诉我们`ppm-integration`-->`interchange-facade-settle:1.0.0.20121009`.\n\n第二个告诉我们`ppm-integration`-->`payengine-facade:2.0.0.20140314`-->`interchange-facade-settle:1.3.0.20140303`\n\n根据maven `最短路径优先原则`,`ppm-integration`最终会依赖`interchange-facade-settle:1.0.0.20121009`.但是`payengine-facade:2.0.0.20140314`它依赖`interchange-facade-settle:1.3.0.20140303`.如果classpath中只有`interchange-facade-settle:1.0.0.20121009`,运行时`payengine-facade`就有可能报找不到类,找不到方法之类的错误.\n\n遇到这样的场景,最好是修改我们项目的直接依赖,让`ppm-integration`-->`interchange-facade-settle:1.3.0.20140303`,然后测试下是否ok.\n","slug":"maven-transitive-dependency-exception","published":1,"updated":"2018-04-01T16:53:17.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2kshw003ep0ugdf1s9ey5","content":"<h2 id=\"传递依赖检查\"><a href=\"#传递依赖检查\" class=\"headerlink\" title=\"传递依赖检查\"></a>传递依赖检查</h2><p>我们通过maven插件<code>org.apache.maven.plugins:maven-enforcer-plugin</code>启用<code>&lt;requireUpperBoundDeps/&gt;</code><br>来检查传递依赖是否高于直接依赖,如果传递依赖的版本比直接依赖的版本高,则打包失败.</p>\n<p><code>&lt;requireUpperBoundDeps/&gt;</code>解释如下:</p>\n<pre><code>IF:\n\n    A--&gt;B1--&gt;C2\n\n    A--&gt;C1\n\n    C2&gt;C1\n\nTHEN:\n\n    throw Exception;\n</code></pre><p>我觉得这个检查很有必要,但是解析的范围太宽了.一个项目依赖了很多的开源组件,我们最好是限制这个检查只检查我们自己的jar包.</p>\n<p>修改插件默认行为,在<code>org.apache.maven.plugins.enforcer.RequireUpperBoundDeps$RequireUpperBoundDepsVisitor#containsConflicts</code>中加入:</p>\n<pre><code>String key=  resolvedPair.constructKey();\nif(key!=null &amp;&amp; !key.startsWith(&quot;com.xxx&quot;)){//不检查groupId中包括非com.xxx开头的jar包\n      return false;\n}    \n</code></pre><h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><p>下面说下检查出来的提示信息分析,比如下面的情况:</p>\n<pre><code>Failed while enforcing RequireUpperBoundDeps. The error(s) are [\n    Require upper bound dependencies error for xxx.interchange:interchange-facade-settle:1.0.0.20121009 paths to dependency are:\n    +-xxx.ppm:ppm-integration:1.0.1.6\n          +-xxx.interchange:interchange-facade-settle:1.0.0.20121009\n    and\n    +-xxx.ppm:ppm-integration:1.0.1.6\n          +-xxx.core.payengine:payengine-facade:2.0.0.20140314\n                +-xxx.interchange:interchange-facade-settle:1.0.0.20121009 (managed) &lt;-- xxx.interchange:interchange-facade-settle:1.3.0.20140303\n</code></pre><p>第一个告诉我们<code>ppm-integration</code>–&gt;<code>interchange-facade-settle:1.0.0.20121009</code>.</p>\n<p>第二个告诉我们<code>ppm-integration</code>–&gt;<code>payengine-facade:2.0.0.20140314</code>–&gt;<code>interchange-facade-settle:1.3.0.20140303</code></p>\n<p>根据maven <code>最短路径优先原则</code>,<code>ppm-integration</code>最终会依赖<code>interchange-facade-settle:1.0.0.20121009</code>.但是<code>payengine-facade:2.0.0.20140314</code>它依赖<code>interchange-facade-settle:1.3.0.20140303</code>.如果classpath中只有<code>interchange-facade-settle:1.0.0.20121009</code>,运行时<code>payengine-facade</code>就有可能报找不到类,找不到方法之类的错误.</p>\n<p>遇到这样的场景,最好是修改我们项目的直接依赖,让<code>ppm-integration</code>–&gt;<code>interchange-facade-settle:1.3.0.20140303</code>,然后测试下是否ok.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"传递依赖检查\"><a href=\"#传递依赖检查\" class=\"headerlink\" title=\"传递依赖检查\"></a>传递依赖检查</h2><p>我们通过maven插件<code>org.apache.maven.plugins:maven-enforcer-plugin</code>启用<code>&lt;requireUpperBoundDeps/&gt;</code><br>来检查传递依赖是否高于直接依赖,如果传递依赖的版本比直接依赖的版本高,则打包失败.</p>\n<p><code>&lt;requireUpperBoundDeps/&gt;</code>解释如下:</p>\n<pre><code>IF:\n\n    A--&gt;B1--&gt;C2\n\n    A--&gt;C1\n\n    C2&gt;C1\n\nTHEN:\n\n    throw Exception;\n</code></pre><p>我觉得这个检查很有必要,但是解析的范围太宽了.一个项目依赖了很多的开源组件,我们最好是限制这个检查只检查我们自己的jar包.</p>\n<p>修改插件默认行为,在<code>org.apache.maven.plugins.enforcer.RequireUpperBoundDeps$RequireUpperBoundDepsVisitor#containsConflicts</code>中加入:</p>\n<pre><code>String key=  resolvedPair.constructKey();\nif(key!=null &amp;&amp; !key.startsWith(&quot;com.xxx&quot;)){//不检查groupId中包括非com.xxx开头的jar包\n      return false;\n}    \n</code></pre><h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><p>下面说下检查出来的提示信息分析,比如下面的情况:</p>\n<pre><code>Failed while enforcing RequireUpperBoundDeps. The error(s) are [\n    Require upper bound dependencies error for xxx.interchange:interchange-facade-settle:1.0.0.20121009 paths to dependency are:\n    +-xxx.ppm:ppm-integration:1.0.1.6\n          +-xxx.interchange:interchange-facade-settle:1.0.0.20121009\n    and\n    +-xxx.ppm:ppm-integration:1.0.1.6\n          +-xxx.core.payengine:payengine-facade:2.0.0.20140314\n                +-xxx.interchange:interchange-facade-settle:1.0.0.20121009 (managed) &lt;-- xxx.interchange:interchange-facade-settle:1.3.0.20140303\n</code></pre><p>第一个告诉我们<code>ppm-integration</code>–&gt;<code>interchange-facade-settle:1.0.0.20121009</code>.</p>\n<p>第二个告诉我们<code>ppm-integration</code>–&gt;<code>payengine-facade:2.0.0.20140314</code>–&gt;<code>interchange-facade-settle:1.3.0.20140303</code></p>\n<p>根据maven <code>最短路径优先原则</code>,<code>ppm-integration</code>最终会依赖<code>interchange-facade-settle:1.0.0.20121009</code>.但是<code>payengine-facade:2.0.0.20140314</code>它依赖<code>interchange-facade-settle:1.3.0.20140303</code>.如果classpath中只有<code>interchange-facade-settle:1.0.0.20121009</code>,运行时<code>payengine-facade</code>就有可能报找不到类,找不到方法之类的错误.</p>\n<p>遇到这样的场景,最好是修改我们项目的直接依赖,让<code>ppm-integration</code>–&gt;<code>interchange-facade-settle:1.3.0.20140303</code>,然后测试下是否ok.</p>\n"},{"title":"java开发工程师可以了解的常用命令","date":"2014-08-06T13:52:17.000Z","_content":"\n先总结下常用的一些监控工具:\n\n## linux命令\n\n* `w`\n\t\n\t系统负载\n\t\n* `lsof -p pid`\n\t\n\t进程打开的文件\n\t\n* `lsof -i:port`\n\t\n\t端口的运行情况\n\t\n* `free -m`\n\n\t内存情况\n\t\n* `vmstat`\n\t\n\t进程、内存、内存分页、堵塞IO、traps及CPU活动的信息\n\t\n* `iostat`\n\n\t磁盘io情况\n\t\n* `top -n 1`\n\n\tcpu/负载/内存等使用情况.\n\t\n* `iotop`\n\n\t磁盘io\n    \n* `ps aux | sort -k6nr | head -n 10`\n\n\t查看linux 实际内存占用最多的10个\n\t\n* `ps aux | sort -k5nr | head -n 10`\n\n\t查看linux 虚拟内存占用最多的10个\n\t\n* `dstat -lamps`\n\n\t查看系统整体状况\n\t\n* `pstree -al pid|head -n 1`\n\n\t查看进程启动命令\n\n* `strace -T -p pid`\n\n\t查看进程系统调用.开销很大,使用时要小心.\n\n* `netstat`\n\n\t`netstat -an |grep port` 查看端口连接情况\n\n\t`netstat -alnp |grep pid` 通过pid查看进程所有端口情况\n\n* `ss -lntp |grep port`\n\n\t通过端口查看进程\n\n* `nmon`\n    \n\t强大的监控工具.也可以方便的出报表.我一般用来在压力测试时监控系统性能.\n\n* `latencytop`\n\n\t用于查看系统内部慢.以前做mysql性能优化,多亏有这东东.\n\n* `cat /proc/pid/status  |grep Threads`\n\n\t查看进程内线程个数\n    \n## java工具\n\n* `jvisualvm`\n\n\tjvm的运行情况/各种dump的分析都可以干,没有JRMC牛.oracle承诺会把JRockit的特性迁移到HotSpot上面来.现在jdk下已经有jmc了.\n\t\n* `jps -lv`\n\n\t查看所有java进程.\n\n* `jinfo -sysprops pid`\n\n\t查看java进程系统参数\n\n* `jinfo  -flag jvmflag pid`\n\n\t查看jvm flag.比如查看xss,`jinfo  -flag ThreadStackSize pid`\n\n* `jstack pid`\n\n\t查看线程栈信息\n\n* `jmap -dump:live,format=b,file=xxx.hprof pid`\n\n\t生成heap dump\n\n* `jmap -histo pid`\n\n\t查看java堆中对象统计信息\n\t\n* `java -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal` \n\n\t查看jvm flag\n\t\n\t\tThe first column appears to reflect the data type of the option (intx, uintx, uint64_t, bool, double, ccstr, ccstrlist). \n\t\tThe second column is the name of the flag and the third column is the value, if any, that the flag is set to.\n\t\tThe fourth column appears to indicate the type of flag and has values such as {product},{pd product}, {C1 product} for client or {C2 product} for server, {C1 pd product} for client or {C2 pd product} for server, {product rw}, {diagnostic} \n\t\t(only if -XX:+UnlockDiagnosticVMOptions was specified), {experimental}, and {manageable}. See Eugene Kuleshov's The most complete list of -XX options for Java 6 JVM for a brief description of most of these categories as well as a listing of most of these options themselves.\n\t\t\n* [tda](http://visualvm.java.net/plugins.html​)\n\n\t线程栈分析器,这个是jvisualvm的插件.\n\t\n* [mat](http://www.eclipse.org/mat/)\n\n\t基于eclipse的heap dump分析工具,这个工具是比jvisualvm在heap分析这块专业.不过jvisualvm能cover住大多数场景,基本上我都只用jvisualvm了.\n\t\n* `jmap -heap pid`\n\n\t检查heap情况\n\t\n* [GCViewer](https://github.com/chewiebug/GCViewer)\n\n\tGC日志分析\n\t\n* `jstat  -gcutil pid`\n\n\t查看gc总体情况\n\t\n\t\tS0  — Heap上的 Survivor space 0 区已使用空间的百分比\n\t\tS1  — Heap上的 Survivor space 1 区已使用空间的百分比\n\t\tE   — Heap上的 Eden space 区已使用空间的百分比\n\t\tO   — Heap上的 Old space 区已使用空间的百分比\n\t\tP   — Perm space 区已使用空间的百分比\n\t\tYGC — 从应用程序启动到采样时发生 Young GC 的次数\n\t\tYGCT– 从应用程序启动到采样时 Young GC 所用的时间(单位秒)\n\t\tFGC — 从应用程序启动到采样时发生 Full GC 的次数\n\t\tFGCT– 从应用程序启动到采样时 Full GC 所用的时间(单位秒)\n\t\tGCT — 从应用程序启动到采样时用于垃圾回收的总时间(单位秒)\n\n* `btrace`\n\n\t神器,线上出问题了,想知道某个方法的调用情况,入参之类的,就靠btrace了.\n此工具大致原理如下:\n\n\t1. `btrace-client` attach 目标进程(`com.sun.tools.attach.VirtualMachine#attach`)\n\t2. 加载agent `btrace-agent` (`com.sun.tools.attach.VirtualMachine#loadAgent`)\n\t3. agent启动服务端,开启监听端口\n\t4. `brace-client` 把编译好的用户btrace代码发送到服务端,并等待服务端响应\n\t5. `btrace-agent` 通过asm修改运行时代码,织入用户btrace代码逻辑.监控到信息后,发给`btrace-client`\n\n* jmc\n\n\t生成记录\n\n\t\t#检查特性是否开启\n\t\tjcmd 23385 VM.check_commercial_features\n\t\t#开启商业特性\n\t\tjcmd 23385 VM.unlock_commercial_features\n\t\t#检查JFR状态\n\t\tjcmd 23385 JFR.check\n\t\t#执行180sJFR收集\n\t\tjcmd 23385 JFR.start name=recording filename=/root/recording.jfr duration=180s\n\t\t\t","source":"_posts/monitor-tools.md","raw":"---\ntitle: java开发工程师可以了解的常用命令\ndate: 2014-08-06 21:52:17\ncategories: java\ntags:\n  - 常用命令\n---\n\n先总结下常用的一些监控工具:\n\n## linux命令\n\n* `w`\n\t\n\t系统负载\n\t\n* `lsof -p pid`\n\t\n\t进程打开的文件\n\t\n* `lsof -i:port`\n\t\n\t端口的运行情况\n\t\n* `free -m`\n\n\t内存情况\n\t\n* `vmstat`\n\t\n\t进程、内存、内存分页、堵塞IO、traps及CPU活动的信息\n\t\n* `iostat`\n\n\t磁盘io情况\n\t\n* `top -n 1`\n\n\tcpu/负载/内存等使用情况.\n\t\n* `iotop`\n\n\t磁盘io\n    \n* `ps aux | sort -k6nr | head -n 10`\n\n\t查看linux 实际内存占用最多的10个\n\t\n* `ps aux | sort -k5nr | head -n 10`\n\n\t查看linux 虚拟内存占用最多的10个\n\t\n* `dstat -lamps`\n\n\t查看系统整体状况\n\t\n* `pstree -al pid|head -n 1`\n\n\t查看进程启动命令\n\n* `strace -T -p pid`\n\n\t查看进程系统调用.开销很大,使用时要小心.\n\n* `netstat`\n\n\t`netstat -an |grep port` 查看端口连接情况\n\n\t`netstat -alnp |grep pid` 通过pid查看进程所有端口情况\n\n* `ss -lntp |grep port`\n\n\t通过端口查看进程\n\n* `nmon`\n    \n\t强大的监控工具.也可以方便的出报表.我一般用来在压力测试时监控系统性能.\n\n* `latencytop`\n\n\t用于查看系统内部慢.以前做mysql性能优化,多亏有这东东.\n\n* `cat /proc/pid/status  |grep Threads`\n\n\t查看进程内线程个数\n    \n## java工具\n\n* `jvisualvm`\n\n\tjvm的运行情况/各种dump的分析都可以干,没有JRMC牛.oracle承诺会把JRockit的特性迁移到HotSpot上面来.现在jdk下已经有jmc了.\n\t\n* `jps -lv`\n\n\t查看所有java进程.\n\n* `jinfo -sysprops pid`\n\n\t查看java进程系统参数\n\n* `jinfo  -flag jvmflag pid`\n\n\t查看jvm flag.比如查看xss,`jinfo  -flag ThreadStackSize pid`\n\n* `jstack pid`\n\n\t查看线程栈信息\n\n* `jmap -dump:live,format=b,file=xxx.hprof pid`\n\n\t生成heap dump\n\n* `jmap -histo pid`\n\n\t查看java堆中对象统计信息\n\t\n* `java -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal` \n\n\t查看jvm flag\n\t\n\t\tThe first column appears to reflect the data type of the option (intx, uintx, uint64_t, bool, double, ccstr, ccstrlist). \n\t\tThe second column is the name of the flag and the third column is the value, if any, that the flag is set to.\n\t\tThe fourth column appears to indicate the type of flag and has values such as {product},{pd product}, {C1 product} for client or {C2 product} for server, {C1 pd product} for client or {C2 pd product} for server, {product rw}, {diagnostic} \n\t\t(only if -XX:+UnlockDiagnosticVMOptions was specified), {experimental}, and {manageable}. See Eugene Kuleshov's The most complete list of -XX options for Java 6 JVM for a brief description of most of these categories as well as a listing of most of these options themselves.\n\t\t\n* [tda](http://visualvm.java.net/plugins.html​)\n\n\t线程栈分析器,这个是jvisualvm的插件.\n\t\n* [mat](http://www.eclipse.org/mat/)\n\n\t基于eclipse的heap dump分析工具,这个工具是比jvisualvm在heap分析这块专业.不过jvisualvm能cover住大多数场景,基本上我都只用jvisualvm了.\n\t\n* `jmap -heap pid`\n\n\t检查heap情况\n\t\n* [GCViewer](https://github.com/chewiebug/GCViewer)\n\n\tGC日志分析\n\t\n* `jstat  -gcutil pid`\n\n\t查看gc总体情况\n\t\n\t\tS0  — Heap上的 Survivor space 0 区已使用空间的百分比\n\t\tS1  — Heap上的 Survivor space 1 区已使用空间的百分比\n\t\tE   — Heap上的 Eden space 区已使用空间的百分比\n\t\tO   — Heap上的 Old space 区已使用空间的百分比\n\t\tP   — Perm space 区已使用空间的百分比\n\t\tYGC — 从应用程序启动到采样时发生 Young GC 的次数\n\t\tYGCT– 从应用程序启动到采样时 Young GC 所用的时间(单位秒)\n\t\tFGC — 从应用程序启动到采样时发生 Full GC 的次数\n\t\tFGCT– 从应用程序启动到采样时 Full GC 所用的时间(单位秒)\n\t\tGCT — 从应用程序启动到采样时用于垃圾回收的总时间(单位秒)\n\n* `btrace`\n\n\t神器,线上出问题了,想知道某个方法的调用情况,入参之类的,就靠btrace了.\n此工具大致原理如下:\n\n\t1. `btrace-client` attach 目标进程(`com.sun.tools.attach.VirtualMachine#attach`)\n\t2. 加载agent `btrace-agent` (`com.sun.tools.attach.VirtualMachine#loadAgent`)\n\t3. agent启动服务端,开启监听端口\n\t4. `brace-client` 把编译好的用户btrace代码发送到服务端,并等待服务端响应\n\t5. `btrace-agent` 通过asm修改运行时代码,织入用户btrace代码逻辑.监控到信息后,发给`btrace-client`\n\n* jmc\n\n\t生成记录\n\n\t\t#检查特性是否开启\n\t\tjcmd 23385 VM.check_commercial_features\n\t\t#开启商业特性\n\t\tjcmd 23385 VM.unlock_commercial_features\n\t\t#检查JFR状态\n\t\tjcmd 23385 JFR.check\n\t\t#执行180sJFR收集\n\t\tjcmd 23385 JFR.start name=recording filename=/root/recording.jfr duration=180s\n\t\t\t","slug":"monitor-tools","published":1,"updated":"2018-04-01T16:53:17.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2kshy003ip0ugtmp87x0t","content":"<p>先总结下常用的一些监控工具:</p>\n<h2 id=\"linux命令\"><a href=\"#linux命令\" class=\"headerlink\" title=\"linux命令\"></a>linux命令</h2><ul>\n<li><p><code>w</code></p>\n<p>  系统负载</p>\n</li>\n<li><p><code>lsof -p pid</code></p>\n<p>  进程打开的文件</p>\n</li>\n<li><p><code>lsof -i:port</code></p>\n<p>  端口的运行情况</p>\n</li>\n<li><p><code>free -m</code></p>\n<p>  内存情况</p>\n</li>\n<li><p><code>vmstat</code></p>\n<p>  进程、内存、内存分页、堵塞IO、traps及CPU活动的信息</p>\n</li>\n<li><p><code>iostat</code></p>\n<p>  磁盘io情况</p>\n</li>\n<li><p><code>top -n 1</code></p>\n<p>  cpu/负载/内存等使用情况.</p>\n</li>\n<li><p><code>iotop</code></p>\n<p>  磁盘io</p>\n</li>\n<li><p><code>ps aux | sort -k6nr | head -n 10</code></p>\n<p>  查看linux 实际内存占用最多的10个</p>\n</li>\n<li><p><code>ps aux | sort -k5nr | head -n 10</code></p>\n<p>  查看linux 虚拟内存占用最多的10个</p>\n</li>\n<li><p><code>dstat -lamps</code></p>\n<p>  查看系统整体状况</p>\n</li>\n<li><p><code>pstree -al pid|head -n 1</code></p>\n<p>  查看进程启动命令</p>\n</li>\n<li><p><code>strace -T -p pid</code></p>\n<p>  查看进程系统调用.开销很大,使用时要小心.</p>\n</li>\n<li><p><code>netstat</code></p>\n<p>  <code>netstat -an |grep port</code> 查看端口连接情况</p>\n<p>  <code>netstat -alnp |grep pid</code> 通过pid查看进程所有端口情况</p>\n</li>\n<li><p><code>ss -lntp |grep port</code></p>\n<p>  通过端口查看进程</p>\n</li>\n<li><p><code>nmon</code></p>\n<p>  强大的监控工具.也可以方便的出报表.我一般用来在压力测试时监控系统性能.</p>\n</li>\n<li><p><code>latencytop</code></p>\n<p>  用于查看系统内部慢.以前做mysql性能优化,多亏有这东东.</p>\n</li>\n<li><p><code>cat /proc/pid/status  |grep Threads</code></p>\n<p>  查看进程内线程个数</p>\n</li>\n</ul>\n<h2 id=\"java工具\"><a href=\"#java工具\" class=\"headerlink\" title=\"java工具\"></a>java工具</h2><ul>\n<li><p><code>jvisualvm</code></p>\n<p>  jvm的运行情况/各种dump的分析都可以干,没有JRMC牛.oracle承诺会把JRockit的特性迁移到HotSpot上面来.现在jdk下已经有jmc了.</p>\n</li>\n<li><p><code>jps -lv</code></p>\n<p>  查看所有java进程.</p>\n</li>\n<li><p><code>jinfo -sysprops pid</code></p>\n<p>  查看java进程系统参数</p>\n</li>\n<li><p><code>jinfo  -flag jvmflag pid</code></p>\n<p>  查看jvm flag.比如查看xss,<code>jinfo  -flag ThreadStackSize pid</code></p>\n</li>\n<li><p><code>jstack pid</code></p>\n<p>  查看线程栈信息</p>\n</li>\n<li><p><code>jmap -dump:live,format=b,file=xxx.hprof pid</code></p>\n<p>  生成heap dump</p>\n</li>\n<li><p><code>jmap -histo pid</code></p>\n<p>  查看java堆中对象统计信息</p>\n</li>\n<li><p><code>java -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal</code> </p>\n<p>  查看jvm flag</p>\n<pre><code>The first column appears to reflect the data type of the option (intx, uintx, uint64_t, bool, double, ccstr, ccstrlist). \nThe second column is the name of the flag and the third column is the value, if any, that the flag is set to.\nThe fourth column appears to indicate the type of flag and has values such as {product},{pd product}, {C1 product} for client or {C2 product} for server, {C1 pd product} for client or {C2 pd product} for server, {product rw}, {diagnostic} \n(only if -XX:+UnlockDiagnosticVMOptions was specified), {experimental}, and {manageable}. See Eugene Kuleshov&apos;s The most complete list of -XX options for Java 6 JVM for a brief description of most of these categories as well as a listing of most of these options themselves.\n</code></pre></li>\n<li><p><a href=\"http://visualvm.java.net/plugins.html​\" target=\"_blank\" rel=\"noopener\">tda</a></p>\n<p>  线程栈分析器,这个是jvisualvm的插件.</p>\n</li>\n<li><p><a href=\"http://www.eclipse.org/mat/\" target=\"_blank\" rel=\"noopener\">mat</a></p>\n<p>  基于eclipse的heap dump分析工具,这个工具是比jvisualvm在heap分析这块专业.不过jvisualvm能cover住大多数场景,基本上我都只用jvisualvm了.</p>\n</li>\n<li><p><code>jmap -heap pid</code></p>\n<p>  检查heap情况</p>\n</li>\n<li><p><a href=\"https://github.com/chewiebug/GCViewer\" target=\"_blank\" rel=\"noopener\">GCViewer</a></p>\n<p>  GC日志分析</p>\n</li>\n<li><p><code>jstat  -gcutil pid</code></p>\n<p>  查看gc总体情况</p>\n<pre><code>S0  — Heap上的 Survivor space 0 区已使用空间的百分比\nS1  — Heap上的 Survivor space 1 区已使用空间的百分比\nE   — Heap上的 Eden space 区已使用空间的百分比\nO   — Heap上的 Old space 区已使用空间的百分比\nP   — Perm space 区已使用空间的百分比\nYGC — 从应用程序启动到采样时发生 Young GC 的次数\nYGCT– 从应用程序启动到采样时 Young GC 所用的时间(单位秒)\nFGC — 从应用程序启动到采样时发生 Full GC 的次数\nFGCT– 从应用程序启动到采样时 Full GC 所用的时间(单位秒)\nGCT — 从应用程序启动到采样时用于垃圾回收的总时间(单位秒)\n</code></pre></li>\n<li><p><code>btrace</code></p>\n<p>  神器,线上出问题了,想知道某个方法的调用情况,入参之类的,就靠btrace了.<br>此工具大致原理如下:</p>\n<ol>\n<li><code>btrace-client</code> attach 目标进程(<code>com.sun.tools.attach.VirtualMachine#attach</code>)</li>\n<li>加载agent <code>btrace-agent</code> (<code>com.sun.tools.attach.VirtualMachine#loadAgent</code>)</li>\n<li>agent启动服务端,开启监听端口</li>\n<li><code>brace-client</code> 把编译好的用户btrace代码发送到服务端,并等待服务端响应</li>\n<li><code>btrace-agent</code> 通过asm修改运行时代码,织入用户btrace代码逻辑.监控到信息后,发给<code>btrace-client</code></li>\n</ol>\n</li>\n<li><p>jmc</p>\n<p>  生成记录</p>\n<pre><code>#检查特性是否开启\njcmd 23385 VM.check_commercial_features\n#开启商业特性\njcmd 23385 VM.unlock_commercial_features\n#检查JFR状态\njcmd 23385 JFR.check\n#执行180sJFR收集\njcmd 23385 JFR.start name=recording filename=/root/recording.jfr duration=180s\n</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>先总结下常用的一些监控工具:</p>\n<h2 id=\"linux命令\"><a href=\"#linux命令\" class=\"headerlink\" title=\"linux命令\"></a>linux命令</h2><ul>\n<li><p><code>w</code></p>\n<p>  系统负载</p>\n</li>\n<li><p><code>lsof -p pid</code></p>\n<p>  进程打开的文件</p>\n</li>\n<li><p><code>lsof -i:port</code></p>\n<p>  端口的运行情况</p>\n</li>\n<li><p><code>free -m</code></p>\n<p>  内存情况</p>\n</li>\n<li><p><code>vmstat</code></p>\n<p>  进程、内存、内存分页、堵塞IO、traps及CPU活动的信息</p>\n</li>\n<li><p><code>iostat</code></p>\n<p>  磁盘io情况</p>\n</li>\n<li><p><code>top -n 1</code></p>\n<p>  cpu/负载/内存等使用情况.</p>\n</li>\n<li><p><code>iotop</code></p>\n<p>  磁盘io</p>\n</li>\n<li><p><code>ps aux | sort -k6nr | head -n 10</code></p>\n<p>  查看linux 实际内存占用最多的10个</p>\n</li>\n<li><p><code>ps aux | sort -k5nr | head -n 10</code></p>\n<p>  查看linux 虚拟内存占用最多的10个</p>\n</li>\n<li><p><code>dstat -lamps</code></p>\n<p>  查看系统整体状况</p>\n</li>\n<li><p><code>pstree -al pid|head -n 1</code></p>\n<p>  查看进程启动命令</p>\n</li>\n<li><p><code>strace -T -p pid</code></p>\n<p>  查看进程系统调用.开销很大,使用时要小心.</p>\n</li>\n<li><p><code>netstat</code></p>\n<p>  <code>netstat -an |grep port</code> 查看端口连接情况</p>\n<p>  <code>netstat -alnp |grep pid</code> 通过pid查看进程所有端口情况</p>\n</li>\n<li><p><code>ss -lntp |grep port</code></p>\n<p>  通过端口查看进程</p>\n</li>\n<li><p><code>nmon</code></p>\n<p>  强大的监控工具.也可以方便的出报表.我一般用来在压力测试时监控系统性能.</p>\n</li>\n<li><p><code>latencytop</code></p>\n<p>  用于查看系统内部慢.以前做mysql性能优化,多亏有这东东.</p>\n</li>\n<li><p><code>cat /proc/pid/status  |grep Threads</code></p>\n<p>  查看进程内线程个数</p>\n</li>\n</ul>\n<h2 id=\"java工具\"><a href=\"#java工具\" class=\"headerlink\" title=\"java工具\"></a>java工具</h2><ul>\n<li><p><code>jvisualvm</code></p>\n<p>  jvm的运行情况/各种dump的分析都可以干,没有JRMC牛.oracle承诺会把JRockit的特性迁移到HotSpot上面来.现在jdk下已经有jmc了.</p>\n</li>\n<li><p><code>jps -lv</code></p>\n<p>  查看所有java进程.</p>\n</li>\n<li><p><code>jinfo -sysprops pid</code></p>\n<p>  查看java进程系统参数</p>\n</li>\n<li><p><code>jinfo  -flag jvmflag pid</code></p>\n<p>  查看jvm flag.比如查看xss,<code>jinfo  -flag ThreadStackSize pid</code></p>\n</li>\n<li><p><code>jstack pid</code></p>\n<p>  查看线程栈信息</p>\n</li>\n<li><p><code>jmap -dump:live,format=b,file=xxx.hprof pid</code></p>\n<p>  生成heap dump</p>\n</li>\n<li><p><code>jmap -histo pid</code></p>\n<p>  查看java堆中对象统计信息</p>\n</li>\n<li><p><code>java -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal</code> </p>\n<p>  查看jvm flag</p>\n<pre><code>The first column appears to reflect the data type of the option (intx, uintx, uint64_t, bool, double, ccstr, ccstrlist). \nThe second column is the name of the flag and the third column is the value, if any, that the flag is set to.\nThe fourth column appears to indicate the type of flag and has values such as {product},{pd product}, {C1 product} for client or {C2 product} for server, {C1 pd product} for client or {C2 pd product} for server, {product rw}, {diagnostic} \n(only if -XX:+UnlockDiagnosticVMOptions was specified), {experimental}, and {manageable}. See Eugene Kuleshov&apos;s The most complete list of -XX options for Java 6 JVM for a brief description of most of these categories as well as a listing of most of these options themselves.\n</code></pre></li>\n<li><p><a href=\"http://visualvm.java.net/plugins.html​\" target=\"_blank\" rel=\"noopener\">tda</a></p>\n<p>  线程栈分析器,这个是jvisualvm的插件.</p>\n</li>\n<li><p><a href=\"http://www.eclipse.org/mat/\" target=\"_blank\" rel=\"noopener\">mat</a></p>\n<p>  基于eclipse的heap dump分析工具,这个工具是比jvisualvm在heap分析这块专业.不过jvisualvm能cover住大多数场景,基本上我都只用jvisualvm了.</p>\n</li>\n<li><p><code>jmap -heap pid</code></p>\n<p>  检查heap情况</p>\n</li>\n<li><p><a href=\"https://github.com/chewiebug/GCViewer\" target=\"_blank\" rel=\"noopener\">GCViewer</a></p>\n<p>  GC日志分析</p>\n</li>\n<li><p><code>jstat  -gcutil pid</code></p>\n<p>  查看gc总体情况</p>\n<pre><code>S0  — Heap上的 Survivor space 0 区已使用空间的百分比\nS1  — Heap上的 Survivor space 1 区已使用空间的百分比\nE   — Heap上的 Eden space 区已使用空间的百分比\nO   — Heap上的 Old space 区已使用空间的百分比\nP   — Perm space 区已使用空间的百分比\nYGC — 从应用程序启动到采样时发生 Young GC 的次数\nYGCT– 从应用程序启动到采样时 Young GC 所用的时间(单位秒)\nFGC — 从应用程序启动到采样时发生 Full GC 的次数\nFGCT– 从应用程序启动到采样时 Full GC 所用的时间(单位秒)\nGCT — 从应用程序启动到采样时用于垃圾回收的总时间(单位秒)\n</code></pre></li>\n<li><p><code>btrace</code></p>\n<p>  神器,线上出问题了,想知道某个方法的调用情况,入参之类的,就靠btrace了.<br>此工具大致原理如下:</p>\n<ol>\n<li><code>btrace-client</code> attach 目标进程(<code>com.sun.tools.attach.VirtualMachine#attach</code>)</li>\n<li>加载agent <code>btrace-agent</code> (<code>com.sun.tools.attach.VirtualMachine#loadAgent</code>)</li>\n<li>agent启动服务端,开启监听端口</li>\n<li><code>brace-client</code> 把编译好的用户btrace代码发送到服务端,并等待服务端响应</li>\n<li><code>btrace-agent</code> 通过asm修改运行时代码,织入用户btrace代码逻辑.监控到信息后,发给<code>btrace-client</code></li>\n</ol>\n</li>\n<li><p>jmc</p>\n<p>  生成记录</p>\n<pre><code>#检查特性是否开启\njcmd 23385 VM.check_commercial_features\n#开启商业特性\njcmd 23385 VM.unlock_commercial_features\n#检查JFR状态\njcmd 23385 JFR.check\n#执行180sJFR收集\njcmd 23385 JFR.start name=recording filename=/root/recording.jfr duration=180s\n</code></pre></li>\n</ul>\n"},{"title":"java对象属性复制","date":"2014-05-13T13:52:17.000Z","_content":"\njava对象属性复制的工具类很多,常用的有`org.springframework.beans.BeanUtils#copyProperties`,`org.apache.commons.beanutils.BeanUtils#copyProperties`,这两个都是通过反射实现的,性能嘛,你关心TA就在那里,你不关心TA还是在那里.\n<!--more-->\n高级点的有`net.sf.cglib.beans.BeanCopier`,通过生成源代码实现属性复制,但是他的api很难使用.而且不支持基本类型和包装器类型的转换(java的boxing和unboxing只是语法糖而已).\n\nso,重新造了个轮子,采用javassit来生成源代码,并且提供方便使用的api.\n\n使用就像下面这样:\n\n\tTestBean target = new TestBean();\n\tCopier.copy(TestBean1.createTest(), target);\n\t\nTA生成的源代码如下:\n\n\tpublic class CopierImpl1002\n \t implements Copier.Copy\n\t{\n\t  public void copy(Object paramObject1, Object paramObject2)\n\t  {\n\t    TestBean localTestBean = (TestBean)paramObject1;\n    \tTestBean1 localTestBean1 = (TestBean1)paramObject2;\n    \tif (localTestBean.getA1() != null)\n      \t\tlocalTestBean1.setA1(localTestBean.getA1().longValue());\n    \tlocalTestBean1.setA10(localTestBean.getA10());\n \t   \tlocalTestBean1.setA2(localTestBean.isA2());\n \t  \tlocalTestBean1.setA3(Integer.valueOf(localTestBean.getA3()));\n   \t\tlocalTestBean1.setB8(Short.valueOf(localTestBean.getB8()));\n  \t  \tlocalTestBean1.setList(localTestBean.getList());\n \t }\n\t}\n\t\n源代码见:[https://gist.github.com/bohrqiu/5046a2a7d983996f0e5a](https://gist.github.com/bohrqiu/5046a2a7d983996f0e5a)","source":"_posts/pojo-perperty.md","raw":"---\ntitle: java对象属性复制\ndate: 2014-05-13 21:52:17\ncategories: java\ntags:\n  - java properties copy\n---\n\njava对象属性复制的工具类很多,常用的有`org.springframework.beans.BeanUtils#copyProperties`,`org.apache.commons.beanutils.BeanUtils#copyProperties`,这两个都是通过反射实现的,性能嘛,你关心TA就在那里,你不关心TA还是在那里.\n<!--more-->\n高级点的有`net.sf.cglib.beans.BeanCopier`,通过生成源代码实现属性复制,但是他的api很难使用.而且不支持基本类型和包装器类型的转换(java的boxing和unboxing只是语法糖而已).\n\nso,重新造了个轮子,采用javassit来生成源代码,并且提供方便使用的api.\n\n使用就像下面这样:\n\n\tTestBean target = new TestBean();\n\tCopier.copy(TestBean1.createTest(), target);\n\t\nTA生成的源代码如下:\n\n\tpublic class CopierImpl1002\n \t implements Copier.Copy\n\t{\n\t  public void copy(Object paramObject1, Object paramObject2)\n\t  {\n\t    TestBean localTestBean = (TestBean)paramObject1;\n    \tTestBean1 localTestBean1 = (TestBean1)paramObject2;\n    \tif (localTestBean.getA1() != null)\n      \t\tlocalTestBean1.setA1(localTestBean.getA1().longValue());\n    \tlocalTestBean1.setA10(localTestBean.getA10());\n \t   \tlocalTestBean1.setA2(localTestBean.isA2());\n \t  \tlocalTestBean1.setA3(Integer.valueOf(localTestBean.getA3()));\n   \t\tlocalTestBean1.setB8(Short.valueOf(localTestBean.getB8()));\n  \t  \tlocalTestBean1.setList(localTestBean.getList());\n \t }\n\t}\n\t\n源代码见:[https://gist.github.com/bohrqiu/5046a2a7d983996f0e5a](https://gist.github.com/bohrqiu/5046a2a7d983996f0e5a)","slug":"pojo-perperty","published":1,"updated":"2018-04-01T16:53:17.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksi0003lp0ugqhaf5u43","content":"<p>java对象属性复制的工具类很多,常用的有<code>org.springframework.beans.BeanUtils#copyProperties</code>,<code>org.apache.commons.beanutils.BeanUtils#copyProperties</code>,这两个都是通过反射实现的,性能嘛,你关心TA就在那里,你不关心TA还是在那里.<br><a id=\"more\"></a><br>高级点的有<code>net.sf.cglib.beans.BeanCopier</code>,通过生成源代码实现属性复制,但是他的api很难使用.而且不支持基本类型和包装器类型的转换(java的boxing和unboxing只是语法糖而已).</p>\n<p>so,重新造了个轮子,采用javassit来生成源代码,并且提供方便使用的api.</p>\n<p>使用就像下面这样:</p>\n<pre><code>TestBean target = new TestBean();\nCopier.copy(TestBean1.createTest(), target);\n</code></pre><p>TA生成的源代码如下:</p>\n<pre><code>public class CopierImpl1002\n  implements Copier.Copy\n{\n  public void copy(Object paramObject1, Object paramObject2)\n  {\n    TestBean localTestBean = (TestBean)paramObject1;\n    TestBean1 localTestBean1 = (TestBean1)paramObject2;\n    if (localTestBean.getA1() != null)\n          localTestBean1.setA1(localTestBean.getA1().longValue());\n    localTestBean1.setA10(localTestBean.getA10());\n        localTestBean1.setA2(localTestBean.isA2());\n       localTestBean1.setA3(Integer.valueOf(localTestBean.getA3()));\n       localTestBean1.setB8(Short.valueOf(localTestBean.getB8()));\n        localTestBean1.setList(localTestBean.getList());\n  }\n}\n</code></pre><p>源代码见:<a href=\"https://gist.github.com/bohrqiu/5046a2a7d983996f0e5a\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/bohrqiu/5046a2a7d983996f0e5a</a></p>\n","site":{"data":{}},"excerpt":"<p>java对象属性复制的工具类很多,常用的有<code>org.springframework.beans.BeanUtils#copyProperties</code>,<code>org.apache.commons.beanutils.BeanUtils#copyProperties</code>,这两个都是通过反射实现的,性能嘛,你关心TA就在那里,你不关心TA还是在那里.<br></p>","more":"<br>高级点的有<code>net.sf.cglib.beans.BeanCopier</code>,通过生成源代码实现属性复制,但是他的api很难使用.而且不支持基本类型和包装器类型的转换(java的boxing和unboxing只是语法糖而已).<p></p>\n<p>so,重新造了个轮子,采用javassit来生成源代码,并且提供方便使用的api.</p>\n<p>使用就像下面这样:</p>\n<pre><code>TestBean target = new TestBean();\nCopier.copy(TestBean1.createTest(), target);\n</code></pre><p>TA生成的源代码如下:</p>\n<pre><code>public class CopierImpl1002\n  implements Copier.Copy\n{\n  public void copy(Object paramObject1, Object paramObject2)\n  {\n    TestBean localTestBean = (TestBean)paramObject1;\n    TestBean1 localTestBean1 = (TestBean1)paramObject2;\n    if (localTestBean.getA1() != null)\n          localTestBean1.setA1(localTestBean.getA1().longValue());\n    localTestBean1.setA10(localTestBean.getA10());\n        localTestBean1.setA2(localTestBean.isA2());\n       localTestBean1.setA3(Integer.valueOf(localTestBean.getA3()));\n       localTestBean1.setB8(Short.valueOf(localTestBean.getB8()));\n        localTestBean1.setList(localTestBean.getList());\n  }\n}\n</code></pre><p>源代码见:<a href=\"https://gist.github.com/bohrqiu/5046a2a7d983996f0e5a\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/bohrqiu/5046a2a7d983996f0e5a</a></p>"},{"title":"序列化框架选型","date":"2014-01-26T13:52:17.000Z","_content":"\n### 序列化框架选型\n\n分布式应用中,序列化很关键,选择一个合适的序列化框架能给分布式应用带来性能红利,还能减少不必要的麻烦.本文仅仅从我遇到的一些实际问题来说明序列化的选型.更深入部分也可以参考[java序列化](http://bohr.me/2012/04/02/java-serialization.html)\n\n序列化框架的性能可以参考[jvm-serializers](https://github.com/eishay/jvm-serializers/wiki),`Kryo`的性能还是很牛叉的.\n\n除了性能,还要考虑兼容性/序列化后的大小.如果仅仅考虑性能,我们选择`Kryo`就足够了.但是Kryo有些用着不爽的地方,比如不是线程安全的/兼容性.\n\n#### 1.兼容性\n\n字段增删不兼容,这个问题有时候很麻烦.比如用memache做缓存,把对象序列化后存入memcache,如果出现字段增删的情况,必须在服务重启的时候把缓存清空,不然就会导致[灰常严重的BUG](http://bohr.me/2013/11/03/kryo-oom.html).但是如果应用服务器有多台,这个问题还是避免不了.总会有个时间窗口会出现不同服务器上的同一个应用有不同的类版本,仍然可能会出现灰常严重的BUG.\n\n现在的`Kryo`提供了兼容性的支持,使用`CompatibleFieldSerializer.class`,在`kryo.writeClassAndObject`写入的信息如下:\n\n\tclass name|field lenght|field1 name|field2 name|field1 value| filed2 value\n\n读入`kryo.readClassAndObject`时,会先读入`field names`.然后匹配当前反序列化类的field和顺序,构造结果.\n\n子类和父类中有同名的字段时，kryo反序列化会丢失字段值,出现问题的原因和[hessian](http://bohr.me/2013/11/29/hessian-java-serialization.html)出问题一样.\n\n\n给kryo提交了一个[improvement](https://github.com/EsotericSoftware/kryo/pull/187),在初始化类型信息时,去掉父类中重复名称的field.\n\n#### 2.线程安全\n\n非线程安全也很好处理,每次都new对象出来,当然这样不是最佳的使用方式.通过线程变量来解决会比较合理,保证了性能还能提供很方便使用的工具类.\n\n#### 3.如何生成对象\n对于没有无参构造器的类来说，生成新对象是个问题，可以使用java内部的机制来new一个对象。\n可以参考下[KryoReflectionFactorySupport](https://github.com/magro/kryo-serializers/blob/master/src/main/java/de/javakaffee/kryoserializers/KryoReflectionFactorySupport.java)的实现方式\n\n#### 4.性能\n\n下面测试了java下的各种序列化实现方式的性能\n\n\t0 Serialisation    write=4,206ns read=16,945ns total=21,151ns\n \t1 Serialisation    write=3,626ns read=18,205ns total=21,831ns\n\t0 MemoryByteBuffer write=270ns read=324ns total=594ns\n \t1 MemoryByteBuffer write=270ns read=330ns total=600ns\n \t0 MemoryByteBufferWithNativeOrder  write=357ns read=360ns total=717ns\n \t1 MemoryByteBufferWithNativeOrder  write=323ns read=359ns total=682ns\n \t0 DirectByteBuffer write=236ns read=325ns total=561ns\n \t1 DirectByteBuffer write=231ns read=301ns total=532ns\n \t0 DirectByteBufferWithNativeOrder  write=261ns read=310ns total=571ns\n \t1 DirectByteBufferWithNativeOrder  write=243ns read=290ns total=533ns\n \t0 UnsafeMemory write=28ns read=82ns total=110ns\n \t1 UnsafeMemory write=24ns read=75ns total=99ns\n \t0 kryo write=373ns read=348ns total=721ns\n \t1 kryo write=390ns read=386ns total=776ns\n \t0 kryoWithCompatibleFields write=1,037ns read=1,625ns total=2,662ns\n \t1 kryoWithCompatibleFields write=1,038ns read=1,657ns total=2,695ns\n \t0 kryoWithCompatibleFieldsAndDuplicateFieldAccept  write=1,077ns read=1,560ns total=2,637ns\n \t1 kryoWithCompatibleFieldsAndDuplicateFieldAccept  write=1,064ns read=1,583ns total=2,647ns\n \t0 kryoWithUnsafe   write=164ns read=204ns total=368ns\n \t1 kryoWithUnsafe   write=168ns read=210ns total=378ns\n \t0 fastjson write=1,942ns read=5,834ns total=7,776ns\n \t1 fastjson write=1,873ns read=5,879ns total=7,752ns\n \t\n每种序列化执行1000000次,并且有预热. 各组数据相对比较,可以得出一些结论:\n\n* 直接调用unsafe,最快,但是最麻烦\n* java自带的序列化很慢,最好不要用\n* kryo2.22提供的unsafe支持,性能非常卓越\n* kryo兼容性序列化器,开销挺大.写需要写入字段名,读的时候还需要做匹配撮合,读比写慢\n* fastjson也挺快的,兼容性\\跨语言互操性俱佳.\n\n序列化后的字节大小可以参考[jvm-serializers](https://github.com/eishay/jvm-serializers/wiki)\n","source":"_posts/serialization-framework.md","raw":"---\ntitle: 序列化框架选型\ndate: 2014-01-26 21:52:17\ncategories: java\ntags:\n  - 序列化\n---\n\n### 序列化框架选型\n\n分布式应用中,序列化很关键,选择一个合适的序列化框架能给分布式应用带来性能红利,还能减少不必要的麻烦.本文仅仅从我遇到的一些实际问题来说明序列化的选型.更深入部分也可以参考[java序列化](http://bohr.me/2012/04/02/java-serialization.html)\n\n序列化框架的性能可以参考[jvm-serializers](https://github.com/eishay/jvm-serializers/wiki),`Kryo`的性能还是很牛叉的.\n\n除了性能,还要考虑兼容性/序列化后的大小.如果仅仅考虑性能,我们选择`Kryo`就足够了.但是Kryo有些用着不爽的地方,比如不是线程安全的/兼容性.\n\n#### 1.兼容性\n\n字段增删不兼容,这个问题有时候很麻烦.比如用memache做缓存,把对象序列化后存入memcache,如果出现字段增删的情况,必须在服务重启的时候把缓存清空,不然就会导致[灰常严重的BUG](http://bohr.me/2013/11/03/kryo-oom.html).但是如果应用服务器有多台,这个问题还是避免不了.总会有个时间窗口会出现不同服务器上的同一个应用有不同的类版本,仍然可能会出现灰常严重的BUG.\n\n现在的`Kryo`提供了兼容性的支持,使用`CompatibleFieldSerializer.class`,在`kryo.writeClassAndObject`写入的信息如下:\n\n\tclass name|field lenght|field1 name|field2 name|field1 value| filed2 value\n\n读入`kryo.readClassAndObject`时,会先读入`field names`.然后匹配当前反序列化类的field和顺序,构造结果.\n\n子类和父类中有同名的字段时，kryo反序列化会丢失字段值,出现问题的原因和[hessian](http://bohr.me/2013/11/29/hessian-java-serialization.html)出问题一样.\n\n\n给kryo提交了一个[improvement](https://github.com/EsotericSoftware/kryo/pull/187),在初始化类型信息时,去掉父类中重复名称的field.\n\n#### 2.线程安全\n\n非线程安全也很好处理,每次都new对象出来,当然这样不是最佳的使用方式.通过线程变量来解决会比较合理,保证了性能还能提供很方便使用的工具类.\n\n#### 3.如何生成对象\n对于没有无参构造器的类来说，生成新对象是个问题，可以使用java内部的机制来new一个对象。\n可以参考下[KryoReflectionFactorySupport](https://github.com/magro/kryo-serializers/blob/master/src/main/java/de/javakaffee/kryoserializers/KryoReflectionFactorySupport.java)的实现方式\n\n#### 4.性能\n\n下面测试了java下的各种序列化实现方式的性能\n\n\t0 Serialisation    write=4,206ns read=16,945ns total=21,151ns\n \t1 Serialisation    write=3,626ns read=18,205ns total=21,831ns\n\t0 MemoryByteBuffer write=270ns read=324ns total=594ns\n \t1 MemoryByteBuffer write=270ns read=330ns total=600ns\n \t0 MemoryByteBufferWithNativeOrder  write=357ns read=360ns total=717ns\n \t1 MemoryByteBufferWithNativeOrder  write=323ns read=359ns total=682ns\n \t0 DirectByteBuffer write=236ns read=325ns total=561ns\n \t1 DirectByteBuffer write=231ns read=301ns total=532ns\n \t0 DirectByteBufferWithNativeOrder  write=261ns read=310ns total=571ns\n \t1 DirectByteBufferWithNativeOrder  write=243ns read=290ns total=533ns\n \t0 UnsafeMemory write=28ns read=82ns total=110ns\n \t1 UnsafeMemory write=24ns read=75ns total=99ns\n \t0 kryo write=373ns read=348ns total=721ns\n \t1 kryo write=390ns read=386ns total=776ns\n \t0 kryoWithCompatibleFields write=1,037ns read=1,625ns total=2,662ns\n \t1 kryoWithCompatibleFields write=1,038ns read=1,657ns total=2,695ns\n \t0 kryoWithCompatibleFieldsAndDuplicateFieldAccept  write=1,077ns read=1,560ns total=2,637ns\n \t1 kryoWithCompatibleFieldsAndDuplicateFieldAccept  write=1,064ns read=1,583ns total=2,647ns\n \t0 kryoWithUnsafe   write=164ns read=204ns total=368ns\n \t1 kryoWithUnsafe   write=168ns read=210ns total=378ns\n \t0 fastjson write=1,942ns read=5,834ns total=7,776ns\n \t1 fastjson write=1,873ns read=5,879ns total=7,752ns\n \t\n每种序列化执行1000000次,并且有预热. 各组数据相对比较,可以得出一些结论:\n\n* 直接调用unsafe,最快,但是最麻烦\n* java自带的序列化很慢,最好不要用\n* kryo2.22提供的unsafe支持,性能非常卓越\n* kryo兼容性序列化器,开销挺大.写需要写入字段名,读的时候还需要做匹配撮合,读比写慢\n* fastjson也挺快的,兼容性\\跨语言互操性俱佳.\n\n序列化后的字节大小可以参考[jvm-serializers](https://github.com/eishay/jvm-serializers/wiki)\n","slug":"serialization-framework","published":1,"updated":"2018-04-01T16:53:17.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksia003op0ug718vq347","content":"<h3 id=\"序列化框架选型\"><a href=\"#序列化框架选型\" class=\"headerlink\" title=\"序列化框架选型\"></a>序列化框架选型</h3><p>分布式应用中,序列化很关键,选择一个合适的序列化框架能给分布式应用带来性能红利,还能减少不必要的麻烦.本文仅仅从我遇到的一些实际问题来说明序列化的选型.更深入部分也可以参考<a href=\"http://bohr.me/2012/04/02/java-serialization.html\">java序列化</a></p>\n<p>序列化框架的性能可以参考<a href=\"https://github.com/eishay/jvm-serializers/wiki\" target=\"_blank\" rel=\"noopener\">jvm-serializers</a>,<code>Kryo</code>的性能还是很牛叉的.</p>\n<p>除了性能,还要考虑兼容性/序列化后的大小.如果仅仅考虑性能,我们选择<code>Kryo</code>就足够了.但是Kryo有些用着不爽的地方,比如不是线程安全的/兼容性.</p>\n<h4 id=\"1-兼容性\"><a href=\"#1-兼容性\" class=\"headerlink\" title=\"1.兼容性\"></a>1.兼容性</h4><p>字段增删不兼容,这个问题有时候很麻烦.比如用memache做缓存,把对象序列化后存入memcache,如果出现字段增删的情况,必须在服务重启的时候把缓存清空,不然就会导致<a href=\"http://bohr.me/2013/11/03/kryo-oom.html\">灰常严重的BUG</a>.但是如果应用服务器有多台,这个问题还是避免不了.总会有个时间窗口会出现不同服务器上的同一个应用有不同的类版本,仍然可能会出现灰常严重的BUG.</p>\n<p>现在的<code>Kryo</code>提供了兼容性的支持,使用<code>CompatibleFieldSerializer.class</code>,在<code>kryo.writeClassAndObject</code>写入的信息如下:</p>\n<pre><code>class name|field lenght|field1 name|field2 name|field1 value| filed2 value\n</code></pre><p>读入<code>kryo.readClassAndObject</code>时,会先读入<code>field names</code>.然后匹配当前反序列化类的field和顺序,构造结果.</p>\n<p>子类和父类中有同名的字段时，kryo反序列化会丢失字段值,出现问题的原因和<a href=\"http://bohr.me/2013/11/29/hessian-java-serialization.html\">hessian</a>出问题一样.</p>\n<p>给kryo提交了一个<a href=\"https://github.com/EsotericSoftware/kryo/pull/187\" target=\"_blank\" rel=\"noopener\">improvement</a>,在初始化类型信息时,去掉父类中重复名称的field.</p>\n<h4 id=\"2-线程安全\"><a href=\"#2-线程安全\" class=\"headerlink\" title=\"2.线程安全\"></a>2.线程安全</h4><p>非线程安全也很好处理,每次都new对象出来,当然这样不是最佳的使用方式.通过线程变量来解决会比较合理,保证了性能还能提供很方便使用的工具类.</p>\n<h4 id=\"3-如何生成对象\"><a href=\"#3-如何生成对象\" class=\"headerlink\" title=\"3.如何生成对象\"></a>3.如何生成对象</h4><p>对于没有无参构造器的类来说，生成新对象是个问题，可以使用java内部的机制来new一个对象。<br>可以参考下<a href=\"https://github.com/magro/kryo-serializers/blob/master/src/main/java/de/javakaffee/kryoserializers/KryoReflectionFactorySupport.java\" target=\"_blank\" rel=\"noopener\">KryoReflectionFactorySupport</a>的实现方式</p>\n<h4 id=\"4-性能\"><a href=\"#4-性能\" class=\"headerlink\" title=\"4.性能\"></a>4.性能</h4><p>下面测试了java下的各种序列化实现方式的性能</p>\n<pre><code>0 Serialisation    write=4,206ns read=16,945ns total=21,151ns\n 1 Serialisation    write=3,626ns read=18,205ns total=21,831ns\n0 MemoryByteBuffer write=270ns read=324ns total=594ns\n 1 MemoryByteBuffer write=270ns read=330ns total=600ns\n 0 MemoryByteBufferWithNativeOrder  write=357ns read=360ns total=717ns\n 1 MemoryByteBufferWithNativeOrder  write=323ns read=359ns total=682ns\n 0 DirectByteBuffer write=236ns read=325ns total=561ns\n 1 DirectByteBuffer write=231ns read=301ns total=532ns\n 0 DirectByteBufferWithNativeOrder  write=261ns read=310ns total=571ns\n 1 DirectByteBufferWithNativeOrder  write=243ns read=290ns total=533ns\n 0 UnsafeMemory write=28ns read=82ns total=110ns\n 1 UnsafeMemory write=24ns read=75ns total=99ns\n 0 kryo write=373ns read=348ns total=721ns\n 1 kryo write=390ns read=386ns total=776ns\n 0 kryoWithCompatibleFields write=1,037ns read=1,625ns total=2,662ns\n 1 kryoWithCompatibleFields write=1,038ns read=1,657ns total=2,695ns\n 0 kryoWithCompatibleFieldsAndDuplicateFieldAccept  write=1,077ns read=1,560ns total=2,637ns\n 1 kryoWithCompatibleFieldsAndDuplicateFieldAccept  write=1,064ns read=1,583ns total=2,647ns\n 0 kryoWithUnsafe   write=164ns read=204ns total=368ns\n 1 kryoWithUnsafe   write=168ns read=210ns total=378ns\n 0 fastjson write=1,942ns read=5,834ns total=7,776ns\n 1 fastjson write=1,873ns read=5,879ns total=7,752ns\n</code></pre><p>每种序列化执行1000000次,并且有预热. 各组数据相对比较,可以得出一些结论:</p>\n<ul>\n<li>直接调用unsafe,最快,但是最麻烦</li>\n<li>java自带的序列化很慢,最好不要用</li>\n<li>kryo2.22提供的unsafe支持,性能非常卓越</li>\n<li>kryo兼容性序列化器,开销挺大.写需要写入字段名,读的时候还需要做匹配撮合,读比写慢</li>\n<li>fastjson也挺快的,兼容性\\跨语言互操性俱佳.</li>\n</ul>\n<p>序列化后的字节大小可以参考<a href=\"https://github.com/eishay/jvm-serializers/wiki\" target=\"_blank\" rel=\"noopener\">jvm-serializers</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"序列化框架选型\"><a href=\"#序列化框架选型\" class=\"headerlink\" title=\"序列化框架选型\"></a>序列化框架选型</h3><p>分布式应用中,序列化很关键,选择一个合适的序列化框架能给分布式应用带来性能红利,还能减少不必要的麻烦.本文仅仅从我遇到的一些实际问题来说明序列化的选型.更深入部分也可以参考<a href=\"http://bohr.me/2012/04/02/java-serialization.html\">java序列化</a></p>\n<p>序列化框架的性能可以参考<a href=\"https://github.com/eishay/jvm-serializers/wiki\" target=\"_blank\" rel=\"noopener\">jvm-serializers</a>,<code>Kryo</code>的性能还是很牛叉的.</p>\n<p>除了性能,还要考虑兼容性/序列化后的大小.如果仅仅考虑性能,我们选择<code>Kryo</code>就足够了.但是Kryo有些用着不爽的地方,比如不是线程安全的/兼容性.</p>\n<h4 id=\"1-兼容性\"><a href=\"#1-兼容性\" class=\"headerlink\" title=\"1.兼容性\"></a>1.兼容性</h4><p>字段增删不兼容,这个问题有时候很麻烦.比如用memache做缓存,把对象序列化后存入memcache,如果出现字段增删的情况,必须在服务重启的时候把缓存清空,不然就会导致<a href=\"http://bohr.me/2013/11/03/kryo-oom.html\">灰常严重的BUG</a>.但是如果应用服务器有多台,这个问题还是避免不了.总会有个时间窗口会出现不同服务器上的同一个应用有不同的类版本,仍然可能会出现灰常严重的BUG.</p>\n<p>现在的<code>Kryo</code>提供了兼容性的支持,使用<code>CompatibleFieldSerializer.class</code>,在<code>kryo.writeClassAndObject</code>写入的信息如下:</p>\n<pre><code>class name|field lenght|field1 name|field2 name|field1 value| filed2 value\n</code></pre><p>读入<code>kryo.readClassAndObject</code>时,会先读入<code>field names</code>.然后匹配当前反序列化类的field和顺序,构造结果.</p>\n<p>子类和父类中有同名的字段时，kryo反序列化会丢失字段值,出现问题的原因和<a href=\"http://bohr.me/2013/11/29/hessian-java-serialization.html\">hessian</a>出问题一样.</p>\n<p>给kryo提交了一个<a href=\"https://github.com/EsotericSoftware/kryo/pull/187\" target=\"_blank\" rel=\"noopener\">improvement</a>,在初始化类型信息时,去掉父类中重复名称的field.</p>\n<h4 id=\"2-线程安全\"><a href=\"#2-线程安全\" class=\"headerlink\" title=\"2.线程安全\"></a>2.线程安全</h4><p>非线程安全也很好处理,每次都new对象出来,当然这样不是最佳的使用方式.通过线程变量来解决会比较合理,保证了性能还能提供很方便使用的工具类.</p>\n<h4 id=\"3-如何生成对象\"><a href=\"#3-如何生成对象\" class=\"headerlink\" title=\"3.如何生成对象\"></a>3.如何生成对象</h4><p>对于没有无参构造器的类来说，生成新对象是个问题，可以使用java内部的机制来new一个对象。<br>可以参考下<a href=\"https://github.com/magro/kryo-serializers/blob/master/src/main/java/de/javakaffee/kryoserializers/KryoReflectionFactorySupport.java\" target=\"_blank\" rel=\"noopener\">KryoReflectionFactorySupport</a>的实现方式</p>\n<h4 id=\"4-性能\"><a href=\"#4-性能\" class=\"headerlink\" title=\"4.性能\"></a>4.性能</h4><p>下面测试了java下的各种序列化实现方式的性能</p>\n<pre><code>0 Serialisation    write=4,206ns read=16,945ns total=21,151ns\n 1 Serialisation    write=3,626ns read=18,205ns total=21,831ns\n0 MemoryByteBuffer write=270ns read=324ns total=594ns\n 1 MemoryByteBuffer write=270ns read=330ns total=600ns\n 0 MemoryByteBufferWithNativeOrder  write=357ns read=360ns total=717ns\n 1 MemoryByteBufferWithNativeOrder  write=323ns read=359ns total=682ns\n 0 DirectByteBuffer write=236ns read=325ns total=561ns\n 1 DirectByteBuffer write=231ns read=301ns total=532ns\n 0 DirectByteBufferWithNativeOrder  write=261ns read=310ns total=571ns\n 1 DirectByteBufferWithNativeOrder  write=243ns read=290ns total=533ns\n 0 UnsafeMemory write=28ns read=82ns total=110ns\n 1 UnsafeMemory write=24ns read=75ns total=99ns\n 0 kryo write=373ns read=348ns total=721ns\n 1 kryo write=390ns read=386ns total=776ns\n 0 kryoWithCompatibleFields write=1,037ns read=1,625ns total=2,662ns\n 1 kryoWithCompatibleFields write=1,038ns read=1,657ns total=2,695ns\n 0 kryoWithCompatibleFieldsAndDuplicateFieldAccept  write=1,077ns read=1,560ns total=2,637ns\n 1 kryoWithCompatibleFieldsAndDuplicateFieldAccept  write=1,064ns read=1,583ns total=2,647ns\n 0 kryoWithUnsafe   write=164ns read=204ns total=368ns\n 1 kryoWithUnsafe   write=168ns read=210ns total=378ns\n 0 fastjson write=1,942ns read=5,834ns total=7,776ns\n 1 fastjson write=1,873ns read=5,879ns total=7,752ns\n</code></pre><p>每种序列化执行1000000次,并且有预热. 各组数据相对比较,可以得出一些结论:</p>\n<ul>\n<li>直接调用unsafe,最快,但是最麻烦</li>\n<li>java自带的序列化很慢,最好不要用</li>\n<li>kryo2.22提供的unsafe支持,性能非常卓越</li>\n<li>kryo兼容性序列化器,开销挺大.写需要写入字段名,读的时候还需要做匹配撮合,读比写慢</li>\n<li>fastjson也挺快的,兼容性\\跨语言互操性俱佳.</li>\n</ul>\n<p>序列化后的字节大小可以参考<a href=\"https://github.com/eishay/jvm-serializers/wiki\" target=\"_blank\" rel=\"noopener\">jvm-serializers</a></p>\n"},{"title":"使用ssh tunneling和JMX远程监控java程序","date":"2013-05-18T13:52:17.000Z","_content":"\n\n很多时候，我们需要连到远程应用服务器上去观察java进程的运行情况。由于邪恶的防火墙限制我们很难直接连到应用服务器。所以，也有了本文...\n<!--more-->\n常见的网络拓扑结构如下：\n\n![](ssh-tunneling-and-JMX-for-remote-monitor/network_topology.jpg)\n\n如上图所示，办公电脑通过互联网连接跳板机,在跳板机上，我们可以访问应用服务器，查看应用服务器日志或做其他操作。现在我们需要在办公电脑上监控应用服务器1上的java进程。\n\n## ssh tunneling\n\n由于防火墙的限制，我们不能直接访问应用服务器。我们可以通过ssh tunneling来实现从办公电脑访问到应用服务器服务端口。\n\n\n- 跳板机：内网ip：192.168.0.1 外网ip：14.17.32.211 ssh端口：22\n\n- 应用服务器1：内网ip：192.168.0.2 应用端口：11113\n\n通过ssh tunneling，我们利用ssh client建立ssh tunneling映射如下：\n\n\t127.0.0.1:11113->14.17.32.211:22->192.168.0.2:11113\n\n本地应用客户端通过访问本地11113端口，ssh client会把请求转发到应用服务器192.168.0.2:11113\n\n\n## JMX\n\n一个典型的jmx url：\n\nservice:jmx:rmi://localhost:5000/jndi/rmi://localhost:6000/jmxrmi\n\n这个JMX URL可以分为如下几个部分：\n\n- service:jmx: 这个是JMX URL的标准前缀，所有的JMX URL都必须以该字符串开头。\n\n- rmi: 这个是connector server的传输协议，在这个url中是使用rmi来进行传输的。JSR 160规定了所有connector server都必须至少实现rmi传输，是否还支持其他的传输协议依赖于具体的实现。比如MX4J就支持soap、soap+ssl、hessian、burlap等等传输协议。\n\n- localhost:5000: 这个是connector server的IP和端口，该部分是一个可选项，可以被省略掉。因为我们可以通过后面的服务注册端口，拿到jmx服务运行的端口信息。\n\n- /jndi/rmi://localhost:6000/jmxrmi: 这个是connector server的路径，具体含义取决于前面的传输协议。比如该URL中这串字符串就代表着该connector server的stub是使用jndi api绑定在rmi://localhost:6000/jmxrmi这个地址。可以理解为，localhost:6000提供了服务的注册查询端口，具体的jmx服务实现在localhost:5000\n\njava进程一般通过如下的配置启动jmx：\n\n \t-Dcom.sun.management.jmxremote -Djava.rmi.server.hostname=192.168.0.2  -Dcom.sun.management.jmxremote.port=11113 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\n\n通过上面的配置可以看出，只配置了服务注册查询端口11113，而实际的jmx服务运行端口是在运行时通过11113获取到的。\n\n## 如何实现\n\n上面提到了用ssh tunneling来实现端口转发，跳过防火墙的限制，也讲到了jmx的服务暴露方式。同时引出了我们遇到的问题，我们为了监控远程服务器上的java进程，我们能通过本地的11113端口访问到远程服务器上的JMX服务注册查询端口11113，但是JMX服务运行端口，我们不知道(因为是在运行时随机指定的)，这样貌似走进了死胡同。\n\n幸运的是我们自己来初始化JMXConnectorServer时，我们可以指定具体的jmx服务端口，并且还可以指定JMX服务端口和JMX注册查询端口为同一个端口。比如我们可以设置JMX url为：\n\n\tservice:jmx:rmi://localhost:11113/jndi/rmi://localhost:11113/jmxrmi\n\n### 解决方案如下：\n\n1. 通过Java Agent实现在java业务代码运行之前，启动jmx server，并且设置jxm服务注册查询端口和服务端口为同一端口，JMX URL为：\n\n\t\tservice:jmx:rmi://127.0.0.1:11113/jndi/rmi://127.0.0.1:11113/jmxrmi\n\t\n\t\n\n2. 通过ssh tunneling实现端口转发，我们的JMX client只需要访问本地的端口就能跳过防火墙的限制\n\n\n注意：这里ip地址写为127.0.0.1是有原因的，看看我们的请求流程:\n\n\n- JMX client访问本地的127.0.0.1:11113\n- 注册查询请求被ssh tunneling转发到应用服务192.168.0.2:11113\n- 应用服务器上的java进程JMX注册查询服务会告诉JMX client,JMX服务在127.0.0.1:11113\n- 然后JMX client再访问127.0.0.1:11113\n- 服务请求又被ssh tunneling转发到应用服务192.168.0.2:11113，这次建立了JMX服务请求连接\n\n### 操作步骤\n\n1. 下载[jmx agent](https://github.com/bohrqiu/jmx_agent.git)后执行`mvn package`，在target目录会生成jmxagent-0.0.1.jar，上传此jar包到服务器\n2. 配置java服务进程启动参数\n\t\n\t\t-javaagent:/root/jmxagent-0.0.1.jar -Djmx.rmi.agent.hostname=127.0.0.1 -Djmx.rmi.agent.port=11113\n\t\n\t上面设置jmx服务ip为127.0.0.1，服务端口为11113，使用javaagent jar包路径为/root/jmxagent-0.0.1.jar\n\n3. 启动java服务\n\t\n\t在控制台中，可以看到`Start the RMI connector server`的字样，说明服务正常启动了。\n\n4. 建立ssh tunneling\n\n\t在xshell中配置ssh tunneling很简单，只需要两个步骤：\n\n\t配置连接，我们这里需要连接到跳板机的ssh服务，如下图：\t\n\n\t![](ssh-tunneling-and-JMX-for-remote-monitor/xshell_ssh_tunneling1.jpg)\n\t\n\t配置tunneling，配置稳定端口11113，应用服务器192.168.0.2:11113\n\n\t![](ssh-tunneling-and-JMX-for-remote-monitor/xshell_ssh_tunneling2.jpg)\n\n5. 使用jmx client监控远程服务\n\n\t在jvisualvm中添加JMX连接，如下图：\n\t\n\t![](ssh-tunneling-and-JMX-for-remote-monitor/xshell_ssh_tunneling3.jpg)\n\n6. enjoy!\t\n\n\nPS:附带一个maven启用此解决方案的脚本\n\n\texport MAVEN_OPTS=\"-server -Xms8192m -Xmx8192m -XX:PermSize=128m -XX:MaxPermSize=256m -XX:+PrintGCTimeStamps -XX:+PrintGCDetails  -XX:SurvivorRatio=4 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:MaxTenuringThreshold=5 -XX:+CMSClassUnloadingEnabled -verbosegc  -Xloggc:/var/log/xxx/gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log/xxx/oom.hprof  -Djava.awt.headless=true  -javaagent:/root/jmxagent-0.0.1.jar -Djmx.rmi.agent.hostname=127.0.0.1 -Djmx.rmi.agent.port=11113\"\n\tmvn exec:java -Dexec.mainClass=\"com.xxx.Bootstrap\" &","source":"_posts/ssh-tunneling-and-JMX-for-remote-monitor.md","raw":"---\ntitle: 使用ssh tunneling和JMX远程监控java程序\ndate: 2013-05-18 21:52:17\ncategories: java\ntags:\n  - SSH TUNNELING\n  - JMX\n---\n\n\n很多时候，我们需要连到远程应用服务器上去观察java进程的运行情况。由于邪恶的防火墙限制我们很难直接连到应用服务器。所以，也有了本文...\n<!--more-->\n常见的网络拓扑结构如下：\n\n![](ssh-tunneling-and-JMX-for-remote-monitor/network_topology.jpg)\n\n如上图所示，办公电脑通过互联网连接跳板机,在跳板机上，我们可以访问应用服务器，查看应用服务器日志或做其他操作。现在我们需要在办公电脑上监控应用服务器1上的java进程。\n\n## ssh tunneling\n\n由于防火墙的限制，我们不能直接访问应用服务器。我们可以通过ssh tunneling来实现从办公电脑访问到应用服务器服务端口。\n\n\n- 跳板机：内网ip：192.168.0.1 外网ip：14.17.32.211 ssh端口：22\n\n- 应用服务器1：内网ip：192.168.0.2 应用端口：11113\n\n通过ssh tunneling，我们利用ssh client建立ssh tunneling映射如下：\n\n\t127.0.0.1:11113->14.17.32.211:22->192.168.0.2:11113\n\n本地应用客户端通过访问本地11113端口，ssh client会把请求转发到应用服务器192.168.0.2:11113\n\n\n## JMX\n\n一个典型的jmx url：\n\nservice:jmx:rmi://localhost:5000/jndi/rmi://localhost:6000/jmxrmi\n\n这个JMX URL可以分为如下几个部分：\n\n- service:jmx: 这个是JMX URL的标准前缀，所有的JMX URL都必须以该字符串开头。\n\n- rmi: 这个是connector server的传输协议，在这个url中是使用rmi来进行传输的。JSR 160规定了所有connector server都必须至少实现rmi传输，是否还支持其他的传输协议依赖于具体的实现。比如MX4J就支持soap、soap+ssl、hessian、burlap等等传输协议。\n\n- localhost:5000: 这个是connector server的IP和端口，该部分是一个可选项，可以被省略掉。因为我们可以通过后面的服务注册端口，拿到jmx服务运行的端口信息。\n\n- /jndi/rmi://localhost:6000/jmxrmi: 这个是connector server的路径，具体含义取决于前面的传输协议。比如该URL中这串字符串就代表着该connector server的stub是使用jndi api绑定在rmi://localhost:6000/jmxrmi这个地址。可以理解为，localhost:6000提供了服务的注册查询端口，具体的jmx服务实现在localhost:5000\n\njava进程一般通过如下的配置启动jmx：\n\n \t-Dcom.sun.management.jmxremote -Djava.rmi.server.hostname=192.168.0.2  -Dcom.sun.management.jmxremote.port=11113 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\n\n通过上面的配置可以看出，只配置了服务注册查询端口11113，而实际的jmx服务运行端口是在运行时通过11113获取到的。\n\n## 如何实现\n\n上面提到了用ssh tunneling来实现端口转发，跳过防火墙的限制，也讲到了jmx的服务暴露方式。同时引出了我们遇到的问题，我们为了监控远程服务器上的java进程，我们能通过本地的11113端口访问到远程服务器上的JMX服务注册查询端口11113，但是JMX服务运行端口，我们不知道(因为是在运行时随机指定的)，这样貌似走进了死胡同。\n\n幸运的是我们自己来初始化JMXConnectorServer时，我们可以指定具体的jmx服务端口，并且还可以指定JMX服务端口和JMX注册查询端口为同一个端口。比如我们可以设置JMX url为：\n\n\tservice:jmx:rmi://localhost:11113/jndi/rmi://localhost:11113/jmxrmi\n\n### 解决方案如下：\n\n1. 通过Java Agent实现在java业务代码运行之前，启动jmx server，并且设置jxm服务注册查询端口和服务端口为同一端口，JMX URL为：\n\n\t\tservice:jmx:rmi://127.0.0.1:11113/jndi/rmi://127.0.0.1:11113/jmxrmi\n\t\n\t\n\n2. 通过ssh tunneling实现端口转发，我们的JMX client只需要访问本地的端口就能跳过防火墙的限制\n\n\n注意：这里ip地址写为127.0.0.1是有原因的，看看我们的请求流程:\n\n\n- JMX client访问本地的127.0.0.1:11113\n- 注册查询请求被ssh tunneling转发到应用服务192.168.0.2:11113\n- 应用服务器上的java进程JMX注册查询服务会告诉JMX client,JMX服务在127.0.0.1:11113\n- 然后JMX client再访问127.0.0.1:11113\n- 服务请求又被ssh tunneling转发到应用服务192.168.0.2:11113，这次建立了JMX服务请求连接\n\n### 操作步骤\n\n1. 下载[jmx agent](https://github.com/bohrqiu/jmx_agent.git)后执行`mvn package`，在target目录会生成jmxagent-0.0.1.jar，上传此jar包到服务器\n2. 配置java服务进程启动参数\n\t\n\t\t-javaagent:/root/jmxagent-0.0.1.jar -Djmx.rmi.agent.hostname=127.0.0.1 -Djmx.rmi.agent.port=11113\n\t\n\t上面设置jmx服务ip为127.0.0.1，服务端口为11113，使用javaagent jar包路径为/root/jmxagent-0.0.1.jar\n\n3. 启动java服务\n\t\n\t在控制台中，可以看到`Start the RMI connector server`的字样，说明服务正常启动了。\n\n4. 建立ssh tunneling\n\n\t在xshell中配置ssh tunneling很简单，只需要两个步骤：\n\n\t配置连接，我们这里需要连接到跳板机的ssh服务，如下图：\t\n\n\t![](ssh-tunneling-and-JMX-for-remote-monitor/xshell_ssh_tunneling1.jpg)\n\t\n\t配置tunneling，配置稳定端口11113，应用服务器192.168.0.2:11113\n\n\t![](ssh-tunneling-and-JMX-for-remote-monitor/xshell_ssh_tunneling2.jpg)\n\n5. 使用jmx client监控远程服务\n\n\t在jvisualvm中添加JMX连接，如下图：\n\t\n\t![](ssh-tunneling-and-JMX-for-remote-monitor/xshell_ssh_tunneling3.jpg)\n\n6. enjoy!\t\n\n\nPS:附带一个maven启用此解决方案的脚本\n\n\texport MAVEN_OPTS=\"-server -Xms8192m -Xmx8192m -XX:PermSize=128m -XX:MaxPermSize=256m -XX:+PrintGCTimeStamps -XX:+PrintGCDetails  -XX:SurvivorRatio=4 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:MaxTenuringThreshold=5 -XX:+CMSClassUnloadingEnabled -verbosegc  -Xloggc:/var/log/xxx/gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log/xxx/oom.hprof  -Djava.awt.headless=true  -javaagent:/root/jmxagent-0.0.1.jar -Djmx.rmi.agent.hostname=127.0.0.1 -Djmx.rmi.agent.port=11113\"\n\tmvn exec:java -Dexec.mainClass=\"com.xxx.Bootstrap\" &","slug":"ssh-tunneling-and-JMX-for-remote-monitor","published":1,"updated":"2018-04-01T16:53:17.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksie003sp0ug860ldue9","content":"<p>很多时候，我们需要连到远程应用服务器上去观察java进程的运行情况。由于邪恶的防火墙限制我们很难直接连到应用服务器。所以，也有了本文…<br><a id=\"more\"></a><br>常见的网络拓扑结构如下：</p>\n<p><img src=\"/ssh-tunneling-and-JMX-for-remote-monitor/network_topology.jpg\" alt=\"\"></p>\n<p>如上图所示，办公电脑通过互联网连接跳板机,在跳板机上，我们可以访问应用服务器，查看应用服务器日志或做其他操作。现在我们需要在办公电脑上监控应用服务器1上的java进程。</p>\n<h2 id=\"ssh-tunneling\"><a href=\"#ssh-tunneling\" class=\"headerlink\" title=\"ssh tunneling\"></a>ssh tunneling</h2><p>由于防火墙的限制，我们不能直接访问应用服务器。我们可以通过ssh tunneling来实现从办公电脑访问到应用服务器服务端口。</p>\n<ul>\n<li><p>跳板机：内网ip：192.168.0.1 外网ip：14.17.32.211 ssh端口：22</p>\n</li>\n<li><p>应用服务器1：内网ip：192.168.0.2 应用端口：11113</p>\n</li>\n</ul>\n<p>通过ssh tunneling，我们利用ssh client建立ssh tunneling映射如下：</p>\n<pre><code>127.0.0.1:11113-&gt;14.17.32.211:22-&gt;192.168.0.2:11113\n</code></pre><p>本地应用客户端通过访问本地11113端口，ssh client会把请求转发到应用服务器192.168.0.2:11113</p>\n<h2 id=\"JMX\"><a href=\"#JMX\" class=\"headerlink\" title=\"JMX\"></a>JMX</h2><p>一个典型的jmx url：</p>\n<p>service:jmx:rmi://localhost:5000/jndi/rmi://localhost:6000/jmxrmi</p>\n<p>这个JMX URL可以分为如下几个部分：</p>\n<ul>\n<li><p>service:jmx: 这个是JMX URL的标准前缀，所有的JMX URL都必须以该字符串开头。</p>\n</li>\n<li><p>rmi: 这个是connector server的传输协议，在这个url中是使用rmi来进行传输的。JSR 160规定了所有connector server都必须至少实现rmi传输，是否还支持其他的传输协议依赖于具体的实现。比如MX4J就支持soap、soap+ssl、hessian、burlap等等传输协议。</p>\n</li>\n<li><p>localhost:5000: 这个是connector server的IP和端口，该部分是一个可选项，可以被省略掉。因为我们可以通过后面的服务注册端口，拿到jmx服务运行的端口信息。</p>\n</li>\n<li><p>/jndi/rmi://localhost:6000/jmxrmi: 这个是connector server的路径，具体含义取决于前面的传输协议。比如该URL中这串字符串就代表着该connector server的stub是使用jndi api绑定在rmi://localhost:6000/jmxrmi这个地址。可以理解为，localhost:6000提供了服务的注册查询端口，具体的jmx服务实现在localhost:5000</p>\n</li>\n</ul>\n<p>java进程一般通过如下的配置启动jmx：</p>\n<pre><code>-Dcom.sun.management.jmxremote -Djava.rmi.server.hostname=192.168.0.2  -Dcom.sun.management.jmxremote.port=11113 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\n</code></pre><p>通过上面的配置可以看出，只配置了服务注册查询端口11113，而实际的jmx服务运行端口是在运行时通过11113获取到的。</p>\n<h2 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h2><p>上面提到了用ssh tunneling来实现端口转发，跳过防火墙的限制，也讲到了jmx的服务暴露方式。同时引出了我们遇到的问题，我们为了监控远程服务器上的java进程，我们能通过本地的11113端口访问到远程服务器上的JMX服务注册查询端口11113，但是JMX服务运行端口，我们不知道(因为是在运行时随机指定的)，这样貌似走进了死胡同。</p>\n<p>幸运的是我们自己来初始化JMXConnectorServer时，我们可以指定具体的jmx服务端口，并且还可以指定JMX服务端口和JMX注册查询端口为同一个端口。比如我们可以设置JMX url为：</p>\n<pre><code>service:jmx:rmi://localhost:11113/jndi/rmi://localhost:11113/jmxrmi\n</code></pre><h3 id=\"解决方案如下：\"><a href=\"#解决方案如下：\" class=\"headerlink\" title=\"解决方案如下：\"></a>解决方案如下：</h3><ol>\n<li><p>通过Java Agent实现在java业务代码运行之前，启动jmx server，并且设置jxm服务注册查询端口和服务端口为同一端口，JMX URL为：</p>\n<pre><code>service:jmx:rmi://127.0.0.1:11113/jndi/rmi://127.0.0.1:11113/jmxrmi\n</code></pre></li>\n</ol>\n<ol>\n<li>通过ssh tunneling实现端口转发，我们的JMX client只需要访问本地的端口就能跳过防火墙的限制</li>\n</ol>\n<p>注意：这里ip地址写为127.0.0.1是有原因的，看看我们的请求流程:</p>\n<ul>\n<li>JMX client访问本地的127.0.0.1:11113</li>\n<li>注册查询请求被ssh tunneling转发到应用服务192.168.0.2:11113</li>\n<li>应用服务器上的java进程JMX注册查询服务会告诉JMX client,JMX服务在127.0.0.1:11113</li>\n<li>然后JMX client再访问127.0.0.1:11113</li>\n<li>服务请求又被ssh tunneling转发到应用服务192.168.0.2:11113，这次建立了JMX服务请求连接</li>\n</ul>\n<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><ol>\n<li>下载<a href=\"https://github.com/bohrqiu/jmx_agent.git\" target=\"_blank\" rel=\"noopener\">jmx agent</a>后执行<code>mvn package</code>，在target目录会生成jmxagent-0.0.1.jar，上传此jar包到服务器</li>\n<li><p>配置java服务进程启动参数</p>\n<pre><code>-javaagent:/root/jmxagent-0.0.1.jar -Djmx.rmi.agent.hostname=127.0.0.1 -Djmx.rmi.agent.port=11113\n</code></pre><p> 上面设置jmx服务ip为127.0.0.1，服务端口为11113，使用javaagent jar包路径为/root/jmxagent-0.0.1.jar</p>\n</li>\n<li><p>启动java服务</p>\n<p> 在控制台中，可以看到<code>Start the RMI connector server</code>的字样，说明服务正常启动了。</p>\n</li>\n<li><p>建立ssh tunneling</p>\n<p> 在xshell中配置ssh tunneling很简单，只需要两个步骤：</p>\n<p> 配置连接，我们这里需要连接到跳板机的ssh服务，如下图：    </p>\n<p> <img src=\"/ssh-tunneling-and-JMX-for-remote-monitor/xshell_ssh_tunneling1.jpg\" alt=\"\"></p>\n<p> 配置tunneling，配置稳定端口11113，应用服务器192.168.0.2:11113</p>\n<p> <img src=\"/ssh-tunneling-and-JMX-for-remote-monitor/xshell_ssh_tunneling2.jpg\" alt=\"\"></p>\n</li>\n<li><p>使用jmx client监控远程服务</p>\n<p> 在jvisualvm中添加JMX连接，如下图：</p>\n<p> <img src=\"/ssh-tunneling-and-JMX-for-remote-monitor/xshell_ssh_tunneling3.jpg\" alt=\"\"></p>\n</li>\n<li><p>enjoy!    </p>\n</li>\n</ol>\n<p>PS:附带一个maven启用此解决方案的脚本</p>\n<pre><code>export MAVEN_OPTS=&quot;-server -Xms8192m -Xmx8192m -XX:PermSize=128m -XX:MaxPermSize=256m -XX:+PrintGCTimeStamps -XX:+PrintGCDetails  -XX:SurvivorRatio=4 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:MaxTenuringThreshold=5 -XX:+CMSClassUnloadingEnabled -verbosegc  -Xloggc:/var/log/xxx/gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log/xxx/oom.hprof  -Djava.awt.headless=true  -javaagent:/root/jmxagent-0.0.1.jar -Djmx.rmi.agent.hostname=127.0.0.1 -Djmx.rmi.agent.port=11113&quot;\nmvn exec:java -Dexec.mainClass=&quot;com.xxx.Bootstrap&quot; &amp;\n</code></pre>","site":{"data":{}},"excerpt":"<p>很多时候，我们需要连到远程应用服务器上去观察java进程的运行情况。由于邪恶的防火墙限制我们很难直接连到应用服务器。所以，也有了本文…<br></p>","more":"<br>常见的网络拓扑结构如下：<p></p>\n<p><img src=\"/ssh-tunneling-and-JMX-for-remote-monitor/network_topology.jpg\" alt=\"\"></p>\n<p>如上图所示，办公电脑通过互联网连接跳板机,在跳板机上，我们可以访问应用服务器，查看应用服务器日志或做其他操作。现在我们需要在办公电脑上监控应用服务器1上的java进程。</p>\n<h2 id=\"ssh-tunneling\"><a href=\"#ssh-tunneling\" class=\"headerlink\" title=\"ssh tunneling\"></a>ssh tunneling</h2><p>由于防火墙的限制，我们不能直接访问应用服务器。我们可以通过ssh tunneling来实现从办公电脑访问到应用服务器服务端口。</p>\n<ul>\n<li><p>跳板机：内网ip：192.168.0.1 外网ip：14.17.32.211 ssh端口：22</p>\n</li>\n<li><p>应用服务器1：内网ip：192.168.0.2 应用端口：11113</p>\n</li>\n</ul>\n<p>通过ssh tunneling，我们利用ssh client建立ssh tunneling映射如下：</p>\n<pre><code>127.0.0.1:11113-&gt;14.17.32.211:22-&gt;192.168.0.2:11113\n</code></pre><p>本地应用客户端通过访问本地11113端口，ssh client会把请求转发到应用服务器192.168.0.2:11113</p>\n<h2 id=\"JMX\"><a href=\"#JMX\" class=\"headerlink\" title=\"JMX\"></a>JMX</h2><p>一个典型的jmx url：</p>\n<p>service:jmx:rmi://localhost:5000/jndi/rmi://localhost:6000/jmxrmi</p>\n<p>这个JMX URL可以分为如下几个部分：</p>\n<ul>\n<li><p>service:jmx: 这个是JMX URL的标准前缀，所有的JMX URL都必须以该字符串开头。</p>\n</li>\n<li><p>rmi: 这个是connector server的传输协议，在这个url中是使用rmi来进行传输的。JSR 160规定了所有connector server都必须至少实现rmi传输，是否还支持其他的传输协议依赖于具体的实现。比如MX4J就支持soap、soap+ssl、hessian、burlap等等传输协议。</p>\n</li>\n<li><p>localhost:5000: 这个是connector server的IP和端口，该部分是一个可选项，可以被省略掉。因为我们可以通过后面的服务注册端口，拿到jmx服务运行的端口信息。</p>\n</li>\n<li><p>/jndi/rmi://localhost:6000/jmxrmi: 这个是connector server的路径，具体含义取决于前面的传输协议。比如该URL中这串字符串就代表着该connector server的stub是使用jndi api绑定在rmi://localhost:6000/jmxrmi这个地址。可以理解为，localhost:6000提供了服务的注册查询端口，具体的jmx服务实现在localhost:5000</p>\n</li>\n</ul>\n<p>java进程一般通过如下的配置启动jmx：</p>\n<pre><code>-Dcom.sun.management.jmxremote -Djava.rmi.server.hostname=192.168.0.2  -Dcom.sun.management.jmxremote.port=11113 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\n</code></pre><p>通过上面的配置可以看出，只配置了服务注册查询端口11113，而实际的jmx服务运行端口是在运行时通过11113获取到的。</p>\n<h2 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h2><p>上面提到了用ssh tunneling来实现端口转发，跳过防火墙的限制，也讲到了jmx的服务暴露方式。同时引出了我们遇到的问题，我们为了监控远程服务器上的java进程，我们能通过本地的11113端口访问到远程服务器上的JMX服务注册查询端口11113，但是JMX服务运行端口，我们不知道(因为是在运行时随机指定的)，这样貌似走进了死胡同。</p>\n<p>幸运的是我们自己来初始化JMXConnectorServer时，我们可以指定具体的jmx服务端口，并且还可以指定JMX服务端口和JMX注册查询端口为同一个端口。比如我们可以设置JMX url为：</p>\n<pre><code>service:jmx:rmi://localhost:11113/jndi/rmi://localhost:11113/jmxrmi\n</code></pre><h3 id=\"解决方案如下：\"><a href=\"#解决方案如下：\" class=\"headerlink\" title=\"解决方案如下：\"></a>解决方案如下：</h3><ol>\n<li><p>通过Java Agent实现在java业务代码运行之前，启动jmx server，并且设置jxm服务注册查询端口和服务端口为同一端口，JMX URL为：</p>\n<pre><code>service:jmx:rmi://127.0.0.1:11113/jndi/rmi://127.0.0.1:11113/jmxrmi\n</code></pre></li>\n</ol>\n<ol>\n<li>通过ssh tunneling实现端口转发，我们的JMX client只需要访问本地的端口就能跳过防火墙的限制</li>\n</ol>\n<p>注意：这里ip地址写为127.0.0.1是有原因的，看看我们的请求流程:</p>\n<ul>\n<li>JMX client访问本地的127.0.0.1:11113</li>\n<li>注册查询请求被ssh tunneling转发到应用服务192.168.0.2:11113</li>\n<li>应用服务器上的java进程JMX注册查询服务会告诉JMX client,JMX服务在127.0.0.1:11113</li>\n<li>然后JMX client再访问127.0.0.1:11113</li>\n<li>服务请求又被ssh tunneling转发到应用服务192.168.0.2:11113，这次建立了JMX服务请求连接</li>\n</ul>\n<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><ol>\n<li>下载<a href=\"https://github.com/bohrqiu/jmx_agent.git\" target=\"_blank\" rel=\"noopener\">jmx agent</a>后执行<code>mvn package</code>，在target目录会生成jmxagent-0.0.1.jar，上传此jar包到服务器</li>\n<li><p>配置java服务进程启动参数</p>\n<pre><code>-javaagent:/root/jmxagent-0.0.1.jar -Djmx.rmi.agent.hostname=127.0.0.1 -Djmx.rmi.agent.port=11113\n</code></pre><p> 上面设置jmx服务ip为127.0.0.1，服务端口为11113，使用javaagent jar包路径为/root/jmxagent-0.0.1.jar</p>\n</li>\n<li><p>启动java服务</p>\n<p> 在控制台中，可以看到<code>Start the RMI connector server</code>的字样，说明服务正常启动了。</p>\n</li>\n<li><p>建立ssh tunneling</p>\n<p> 在xshell中配置ssh tunneling很简单，只需要两个步骤：</p>\n<p> 配置连接，我们这里需要连接到跳板机的ssh服务，如下图：    </p>\n<p> <img src=\"/ssh-tunneling-and-JMX-for-remote-monitor/xshell_ssh_tunneling1.jpg\" alt=\"\"></p>\n<p> 配置tunneling，配置稳定端口11113，应用服务器192.168.0.2:11113</p>\n<p> <img src=\"/ssh-tunneling-and-JMX-for-remote-monitor/xshell_ssh_tunneling2.jpg\" alt=\"\"></p>\n</li>\n<li><p>使用jmx client监控远程服务</p>\n<p> 在jvisualvm中添加JMX连接，如下图：</p>\n<p> <img src=\"/ssh-tunneling-and-JMX-for-remote-monitor/xshell_ssh_tunneling3.jpg\" alt=\"\"></p>\n</li>\n<li><p>enjoy!    </p>\n</li>\n</ol>\n<p>PS:附带一个maven启用此解决方案的脚本</p>\n<pre><code>export MAVEN_OPTS=&quot;-server -Xms8192m -Xmx8192m -XX:PermSize=128m -XX:MaxPermSize=256m -XX:+PrintGCTimeStamps -XX:+PrintGCDetails  -XX:SurvivorRatio=4 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:MaxTenuringThreshold=5 -XX:+CMSClassUnloadingEnabled -verbosegc  -Xloggc:/var/log/xxx/gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log/xxx/oom.hprof  -Djava.awt.headless=true  -javaagent:/root/jmxagent-0.0.1.jar -Djmx.rmi.agent.hostname=127.0.0.1 -Djmx.rmi.agent.port=11113&quot;\nmvn exec:java -Dexec.mainClass=&quot;com.xxx.Bootstrap&quot; &amp;\n</code></pre>"},{"title":"Thinking Clearly about Performance笔记","date":"2013-04-29T13:52:17.000Z","_content":"\n## Thinking Clearly about Performance笔记\n\n原文链接:[Thinking Clearly about Performance](http://queue.acm.org/detail.cfm?id=1854041)\n\n### RESPONSE TIME VERSUS THROUGHPUT\n\n响应时间和吞吐量没有太多关系.你要了解两个值需要测试两个值.下面两个例子说明为什么两者之间没有太多关系.\n\n1. 应用吞吐量为1000笔/s,用户的平均响应时间是多少?\n\n\t如果应用下面是1000个服务提供者在提供服务,每一笔的响应时间最大可以为1s.所以,只能得出的结论是平均响应时间为0-1s\n2. 客户对某应用的需求为在单cpu的服务器上吞吐量为100笔/s.现在你写的应用每次执行耗时1ms,你的程序满足客户需求吗?\n\n    如果请求串行发过来,每次执行一个,一个执行完在执行下一个,这种情况应该还是可以满足需求的.但是如果这100个请求在1s内随机的发送过来,CPU调度器(比如线程上下文切换)和串行资源(比如CAS导致的重试)可能让你不能满足客户需求.\n    \n### PERCENTILE SPECIFICATIONS\n\n平均并不能精确的定义响应时间.假如你能容忍的响应时间是1s,对于不同的应用,他们的平均响应时间都是1s.但是应用A90%的请求响应时间都小于1s和应用B60%的请求响应时间都小于1s,这两个应用提供的服务性能是不一样的.我们一般可以如下的形式来定义响应时间:`the “Track Shipment” task must complete in less than .5 second in at least 99.9 percent of executions.`\n\n### PROBLEM DIAGNOSIS\n\n明确用户的需求,用户不会精确的定义他对性能的需求.大多数时候,他只是说\"系统太慢了,我们没办法使用\",可以引导用户提出他的需求`Response time of X is more than 20 seconds\rin many cases. We’ll be happy when response time is one second or less in at least 95 percent of executions.`\n\n### THE SEQUENCE DIAGRAM\n\nThe sequence diagram is a good tool for conceptualizing flow of control and the corresponding flow of time. To think clearly about response time, however, you need something else.\n\n### THE PROFILE\n\nA profile shows where your code has spent your time and—sometimes even more importantly—where it has not. There is tremendous value in not having to guess about these things.\n\nWith a profile, you can begin to formulate the answer to the question, “How long should this task run?” which, by now, you know is an important question in the first step of any good problem diagnosis.\n\n![](http://deliveryimages.acm.org/10.1145/1860000/1854041/millsap-table2.png)\n\n### AMDAHL’S LAW\n\nPerformance improvement is proportional to how much a program uses the thing you improved. If the thing you're trying to improve contributes only 5 percent to your task's total response time, then the maximum impact you'll be able to make is 5 percent of your total response time. This means that the closer to the top of a profile that you work (assuming that the profile is sorted in descending response-time order), the bigger the benefit potential for your overall response time.\n\n\n\n### MINIMIZING RISK\n\nwhen everyone is happy except for you, make sure your local stuff is in order before you go messing around with the global stuff that affects everyone else, too.\n\n### LOAD\n\nOne measure of load is utilization, which is resource usage divided by resource capacity for a specified time interval.\n\nThere are two reasons that systems get slower as load increases: **queuing delay** and **coherency delay**.\n\n* QUEUING DELAY\n\n\tResponse time (R), in the perfect scalability M/M/m model, consists of two components: service time (S) and queuing delay (Q), or R = S + Q. \n\t\n当谈到性能时,你期望一个系统满足下面两个目标:\n\n* 最佳的响应时间(不用等太久就能获得结果)\n* 最佳吞吐量(能服务更多的人)\n\n但是这两个目标是互相矛盾的,优化第一个目标,需要你较少系统的负载.优化第二个目标,又需要你提高系统使用率,增加负载.你不能同时满足这两个目标,只能权衡取舍.\n\n### COHERENCY DELAY\n\nYour system doesn’t have theoretically perfect scalability. Coherency delay is the factor that you can use to model the imperfection. It is the duration that a task spends communicating and coordinating access to a shared resource. \n\nThe utilization value at which this optimal balance occurs is called the **knee**. This is the point at which throughput is maximized with minimal negative impact to response times. ","source":"_posts/thinking-clearly-about-performance.md","raw":"---\ntitle: Thinking Clearly about Performance笔记\ndate: 2013-04-29 21:52:17\ncategories: java\ntags:\n  - Performance\n---\n\n## Thinking Clearly about Performance笔记\n\n原文链接:[Thinking Clearly about Performance](http://queue.acm.org/detail.cfm?id=1854041)\n\n### RESPONSE TIME VERSUS THROUGHPUT\n\n响应时间和吞吐量没有太多关系.你要了解两个值需要测试两个值.下面两个例子说明为什么两者之间没有太多关系.\n\n1. 应用吞吐量为1000笔/s,用户的平均响应时间是多少?\n\n\t如果应用下面是1000个服务提供者在提供服务,每一笔的响应时间最大可以为1s.所以,只能得出的结论是平均响应时间为0-1s\n2. 客户对某应用的需求为在单cpu的服务器上吞吐量为100笔/s.现在你写的应用每次执行耗时1ms,你的程序满足客户需求吗?\n\n    如果请求串行发过来,每次执行一个,一个执行完在执行下一个,这种情况应该还是可以满足需求的.但是如果这100个请求在1s内随机的发送过来,CPU调度器(比如线程上下文切换)和串行资源(比如CAS导致的重试)可能让你不能满足客户需求.\n    \n### PERCENTILE SPECIFICATIONS\n\n平均并不能精确的定义响应时间.假如你能容忍的响应时间是1s,对于不同的应用,他们的平均响应时间都是1s.但是应用A90%的请求响应时间都小于1s和应用B60%的请求响应时间都小于1s,这两个应用提供的服务性能是不一样的.我们一般可以如下的形式来定义响应时间:`the “Track Shipment” task must complete in less than .5 second in at least 99.9 percent of executions.`\n\n### PROBLEM DIAGNOSIS\n\n明确用户的需求,用户不会精确的定义他对性能的需求.大多数时候,他只是说\"系统太慢了,我们没办法使用\",可以引导用户提出他的需求`Response time of X is more than 20 seconds\rin many cases. We’ll be happy when response time is one second or less in at least 95 percent of executions.`\n\n### THE SEQUENCE DIAGRAM\n\nThe sequence diagram is a good tool for conceptualizing flow of control and the corresponding flow of time. To think clearly about response time, however, you need something else.\n\n### THE PROFILE\n\nA profile shows where your code has spent your time and—sometimes even more importantly—where it has not. There is tremendous value in not having to guess about these things.\n\nWith a profile, you can begin to formulate the answer to the question, “How long should this task run?” which, by now, you know is an important question in the first step of any good problem diagnosis.\n\n![](http://deliveryimages.acm.org/10.1145/1860000/1854041/millsap-table2.png)\n\n### AMDAHL’S LAW\n\nPerformance improvement is proportional to how much a program uses the thing you improved. If the thing you're trying to improve contributes only 5 percent to your task's total response time, then the maximum impact you'll be able to make is 5 percent of your total response time. This means that the closer to the top of a profile that you work (assuming that the profile is sorted in descending response-time order), the bigger the benefit potential for your overall response time.\n\n\n\n### MINIMIZING RISK\n\nwhen everyone is happy except for you, make sure your local stuff is in order before you go messing around with the global stuff that affects everyone else, too.\n\n### LOAD\n\nOne measure of load is utilization, which is resource usage divided by resource capacity for a specified time interval.\n\nThere are two reasons that systems get slower as load increases: **queuing delay** and **coherency delay**.\n\n* QUEUING DELAY\n\n\tResponse time (R), in the perfect scalability M/M/m model, consists of two components: service time (S) and queuing delay (Q), or R = S + Q. \n\t\n当谈到性能时,你期望一个系统满足下面两个目标:\n\n* 最佳的响应时间(不用等太久就能获得结果)\n* 最佳吞吐量(能服务更多的人)\n\n但是这两个目标是互相矛盾的,优化第一个目标,需要你较少系统的负载.优化第二个目标,又需要你提高系统使用率,增加负载.你不能同时满足这两个目标,只能权衡取舍.\n\n### COHERENCY DELAY\n\nYour system doesn’t have theoretically perfect scalability. Coherency delay is the factor that you can use to model the imperfection. It is the duration that a task spends communicating and coordinating access to a shared resource. \n\nThe utilization value at which this optimal balance occurs is called the **knee**. This is the point at which throughput is maximized with minimal negative impact to response times. ","slug":"thinking-clearly-about-performance","published":1,"updated":"2018-04-01T16:53:17.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksif003up0ugegmj9yj9","content":"<h2 id=\"Thinking-Clearly-about-Performance笔记\"><a href=\"#Thinking-Clearly-about-Performance笔记\" class=\"headerlink\" title=\"Thinking Clearly about Performance笔记\"></a>Thinking Clearly about Performance笔记</h2><p>原文链接:<a href=\"http://queue.acm.org/detail.cfm?id=1854041\" target=\"_blank\" rel=\"noopener\">Thinking Clearly about Performance</a></p>\n<h3 id=\"RESPONSE-TIME-VERSUS-THROUGHPUT\"><a href=\"#RESPONSE-TIME-VERSUS-THROUGHPUT\" class=\"headerlink\" title=\"RESPONSE TIME VERSUS THROUGHPUT\"></a>RESPONSE TIME VERSUS THROUGHPUT</h3><p>响应时间和吞吐量没有太多关系.你要了解两个值需要测试两个值.下面两个例子说明为什么两者之间没有太多关系.</p>\n<ol>\n<li><p>应用吞吐量为1000笔/s,用户的平均响应时间是多少?</p>\n<p> 如果应用下面是1000个服务提供者在提供服务,每一笔的响应时间最大可以为1s.所以,只能得出的结论是平均响应时间为0-1s</p>\n</li>\n<li><p>客户对某应用的需求为在单cpu的服务器上吞吐量为100笔/s.现在你写的应用每次执行耗时1ms,你的程序满足客户需求吗?</p>\n<p> 如果请求串行发过来,每次执行一个,一个执行完在执行下一个,这种情况应该还是可以满足需求的.但是如果这100个请求在1s内随机的发送过来,CPU调度器(比如线程上下文切换)和串行资源(比如CAS导致的重试)可能让你不能满足客户需求.</p>\n</li>\n</ol>\n<h3 id=\"PERCENTILE-SPECIFICATIONS\"><a href=\"#PERCENTILE-SPECIFICATIONS\" class=\"headerlink\" title=\"PERCENTILE SPECIFICATIONS\"></a>PERCENTILE SPECIFICATIONS</h3><p>平均并不能精确的定义响应时间.假如你能容忍的响应时间是1s,对于不同的应用,他们的平均响应时间都是1s.但是应用A90%的请求响应时间都小于1s和应用B60%的请求响应时间都小于1s,这两个应用提供的服务性能是不一样的.我们一般可以如下的形式来定义响应时间:<code>the “Track Shipment” task must complete in less than .5 second in at least 99.9 percent of executions.</code></p>\n<h3 id=\"PROBLEM-DIAGNOSIS\"><a href=\"#PROBLEM-DIAGNOSIS\" class=\"headerlink\" title=\"PROBLEM DIAGNOSIS\"></a>PROBLEM DIAGNOSIS</h3><p>明确用户的需求,用户不会精确的定义他对性能的需求.大多数时候,他只是说”系统太慢了,我们没办法使用”,可以引导用户提出他的需求<code>Response time of X is more than 20 seconds\nin many cases. We’ll be happy when response time is one second or less in at least 95 percent of executions.</code></p>\n<h3 id=\"THE-SEQUENCE-DIAGRAM\"><a href=\"#THE-SEQUENCE-DIAGRAM\" class=\"headerlink\" title=\"THE SEQUENCE DIAGRAM\"></a>THE SEQUENCE DIAGRAM</h3><p>The sequence diagram is a good tool for conceptualizing flow of control and the corresponding flow of time. To think clearly about response time, however, you need something else.</p>\n<h3 id=\"THE-PROFILE\"><a href=\"#THE-PROFILE\" class=\"headerlink\" title=\"THE PROFILE\"></a>THE PROFILE</h3><p>A profile shows where your code has spent your time and—sometimes even more importantly—where it has not. There is tremendous value in not having to guess about these things.</p>\n<p>With a profile, you can begin to formulate the answer to the question, “How long should this task run?” which, by now, you know is an important question in the first step of any good problem diagnosis.</p>\n<p><img src=\"http://deliveryimages.acm.org/10.1145/1860000/1854041/millsap-table2.png\" alt=\"\"></p>\n<h3 id=\"AMDAHL’S-LAW\"><a href=\"#AMDAHL’S-LAW\" class=\"headerlink\" title=\"AMDAHL’S LAW\"></a>AMDAHL’S LAW</h3><p>Performance improvement is proportional to how much a program uses the thing you improved. If the thing you’re trying to improve contributes only 5 percent to your task’s total response time, then the maximum impact you’ll be able to make is 5 percent of your total response time. This means that the closer to the top of a profile that you work (assuming that the profile is sorted in descending response-time order), the bigger the benefit potential for your overall response time.</p>\n<h3 id=\"MINIMIZING-RISK\"><a href=\"#MINIMIZING-RISK\" class=\"headerlink\" title=\"MINIMIZING RISK\"></a>MINIMIZING RISK</h3><p>when everyone is happy except for you, make sure your local stuff is in order before you go messing around with the global stuff that affects everyone else, too.</p>\n<h3 id=\"LOAD\"><a href=\"#LOAD\" class=\"headerlink\" title=\"LOAD\"></a>LOAD</h3><p>One measure of load is utilization, which is resource usage divided by resource capacity for a specified time interval.</p>\n<p>There are two reasons that systems get slower as load increases: <strong>queuing delay</strong> and <strong>coherency delay</strong>.</p>\n<ul>\n<li><p>QUEUING DELAY</p>\n<p>  Response time (R), in the perfect scalability M/M/m model, consists of two components: service time (S) and queuing delay (Q), or R = S + Q. </p>\n</li>\n</ul>\n<p>当谈到性能时,你期望一个系统满足下面两个目标:</p>\n<ul>\n<li>最佳的响应时间(不用等太久就能获得结果)</li>\n<li>最佳吞吐量(能服务更多的人)</li>\n</ul>\n<p>但是这两个目标是互相矛盾的,优化第一个目标,需要你较少系统的负载.优化第二个目标,又需要你提高系统使用率,增加负载.你不能同时满足这两个目标,只能权衡取舍.</p>\n<h3 id=\"COHERENCY-DELAY\"><a href=\"#COHERENCY-DELAY\" class=\"headerlink\" title=\"COHERENCY DELAY\"></a>COHERENCY DELAY</h3><p>Your system doesn’t have theoretically perfect scalability. Coherency delay is the factor that you can use to model the imperfection. It is the duration that a task spends communicating and coordinating access to a shared resource. </p>\n<p>The utilization value at which this optimal balance occurs is called the <strong>knee</strong>. This is the point at which throughput is maximized with minimal negative impact to response times. </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Thinking-Clearly-about-Performance笔记\"><a href=\"#Thinking-Clearly-about-Performance笔记\" class=\"headerlink\" title=\"Thinking Clearly about Performance笔记\"></a>Thinking Clearly about Performance笔记</h2><p>原文链接:<a href=\"http://queue.acm.org/detail.cfm?id=1854041\" target=\"_blank\" rel=\"noopener\">Thinking Clearly about Performance</a></p>\n<h3 id=\"RESPONSE-TIME-VERSUS-THROUGHPUT\"><a href=\"#RESPONSE-TIME-VERSUS-THROUGHPUT\" class=\"headerlink\" title=\"RESPONSE TIME VERSUS THROUGHPUT\"></a>RESPONSE TIME VERSUS THROUGHPUT</h3><p>响应时间和吞吐量没有太多关系.你要了解两个值需要测试两个值.下面两个例子说明为什么两者之间没有太多关系.</p>\n<ol>\n<li><p>应用吞吐量为1000笔/s,用户的平均响应时间是多少?</p>\n<p> 如果应用下面是1000个服务提供者在提供服务,每一笔的响应时间最大可以为1s.所以,只能得出的结论是平均响应时间为0-1s</p>\n</li>\n<li><p>客户对某应用的需求为在单cpu的服务器上吞吐量为100笔/s.现在你写的应用每次执行耗时1ms,你的程序满足客户需求吗?</p>\n<p> 如果请求串行发过来,每次执行一个,一个执行完在执行下一个,这种情况应该还是可以满足需求的.但是如果这100个请求在1s内随机的发送过来,CPU调度器(比如线程上下文切换)和串行资源(比如CAS导致的重试)可能让你不能满足客户需求.</p>\n</li>\n</ol>\n<h3 id=\"PERCENTILE-SPECIFICATIONS\"><a href=\"#PERCENTILE-SPECIFICATIONS\" class=\"headerlink\" title=\"PERCENTILE SPECIFICATIONS\"></a>PERCENTILE SPECIFICATIONS</h3><p>平均并不能精确的定义响应时间.假如你能容忍的响应时间是1s,对于不同的应用,他们的平均响应时间都是1s.但是应用A90%的请求响应时间都小于1s和应用B60%的请求响应时间都小于1s,这两个应用提供的服务性能是不一样的.我们一般可以如下的形式来定义响应时间:<code>the “Track Shipment” task must complete in less than .5 second in at least 99.9 percent of executions.</code></p>\n<h3 id=\"PROBLEM-DIAGNOSIS\"><a href=\"#PROBLEM-DIAGNOSIS\" class=\"headerlink\" title=\"PROBLEM DIAGNOSIS\"></a>PROBLEM DIAGNOSIS</h3><p>明确用户的需求,用户不会精确的定义他对性能的需求.大多数时候,他只是说”系统太慢了,我们没办法使用”,可以引导用户提出他的需求<code>Response time of X is more than 20 seconds\nin many cases. We’ll be happy when response time is one second or less in at least 95 percent of executions.</code></p>\n<h3 id=\"THE-SEQUENCE-DIAGRAM\"><a href=\"#THE-SEQUENCE-DIAGRAM\" class=\"headerlink\" title=\"THE SEQUENCE DIAGRAM\"></a>THE SEQUENCE DIAGRAM</h3><p>The sequence diagram is a good tool for conceptualizing flow of control and the corresponding flow of time. To think clearly about response time, however, you need something else.</p>\n<h3 id=\"THE-PROFILE\"><a href=\"#THE-PROFILE\" class=\"headerlink\" title=\"THE PROFILE\"></a>THE PROFILE</h3><p>A profile shows where your code has spent your time and—sometimes even more importantly—where it has not. There is tremendous value in not having to guess about these things.</p>\n<p>With a profile, you can begin to formulate the answer to the question, “How long should this task run?” which, by now, you know is an important question in the first step of any good problem diagnosis.</p>\n<p><img src=\"http://deliveryimages.acm.org/10.1145/1860000/1854041/millsap-table2.png\" alt=\"\"></p>\n<h3 id=\"AMDAHL’S-LAW\"><a href=\"#AMDAHL’S-LAW\" class=\"headerlink\" title=\"AMDAHL’S LAW\"></a>AMDAHL’S LAW</h3><p>Performance improvement is proportional to how much a program uses the thing you improved. If the thing you’re trying to improve contributes only 5 percent to your task’s total response time, then the maximum impact you’ll be able to make is 5 percent of your total response time. This means that the closer to the top of a profile that you work (assuming that the profile is sorted in descending response-time order), the bigger the benefit potential for your overall response time.</p>\n<h3 id=\"MINIMIZING-RISK\"><a href=\"#MINIMIZING-RISK\" class=\"headerlink\" title=\"MINIMIZING RISK\"></a>MINIMIZING RISK</h3><p>when everyone is happy except for you, make sure your local stuff is in order before you go messing around with the global stuff that affects everyone else, too.</p>\n<h3 id=\"LOAD\"><a href=\"#LOAD\" class=\"headerlink\" title=\"LOAD\"></a>LOAD</h3><p>One measure of load is utilization, which is resource usage divided by resource capacity for a specified time interval.</p>\n<p>There are two reasons that systems get slower as load increases: <strong>queuing delay</strong> and <strong>coherency delay</strong>.</p>\n<ul>\n<li><p>QUEUING DELAY</p>\n<p>  Response time (R), in the perfect scalability M/M/m model, consists of two components: service time (S) and queuing delay (Q), or R = S + Q. </p>\n</li>\n</ul>\n<p>当谈到性能时,你期望一个系统满足下面两个目标:</p>\n<ul>\n<li>最佳的响应时间(不用等太久就能获得结果)</li>\n<li>最佳吞吐量(能服务更多的人)</li>\n</ul>\n<p>但是这两个目标是互相矛盾的,优化第一个目标,需要你较少系统的负载.优化第二个目标,又需要你提高系统使用率,增加负载.你不能同时满足这两个目标,只能权衡取舍.</p>\n<h3 id=\"COHERENCY-DELAY\"><a href=\"#COHERENCY-DELAY\" class=\"headerlink\" title=\"COHERENCY DELAY\"></a>COHERENCY DELAY</h3><p>Your system doesn’t have theoretically perfect scalability. Coherency delay is the factor that you can use to model the imperfection. It is the duration that a task spends communicating and coordinating access to a shared resource. </p>\n<p>The utilization value at which this optimal balance occurs is called the <strong>knee</strong>. This is the point at which throughput is maximized with minimal negative impact to response times. </p>\n"},{"title":"使用vagrant","date":"2014-07-07T13:52:17.000Z","_content":"\nvagrant挺火的,用于快速搭建开发环境.官方网站一行大字`Development environments made easy.`很惹眼.他可以实现可分发的环境搭建.\n\n我们现在要快速搭建开发测试环境的需求很强烈,我们希望使用TA来快速搭建我们的开发测试环境.so,begin...\n\n## 1.`Centos`上安装`Virtaul Box`[^1]\n\n### 1.1 安装问题`unable to find the sources of your current Linux kernel. Specify KERN_DIR=<directory> and run Make again.`[^2]\n\nVirtaul Box原因是`uname -r`和`ls /usr/src/kernels/`版本不一致,需要执行`yum update`,可以把国内的yum镜像用起来,会快点.完了重启下.\n\n\t\n参考:\n\n\thttp://rationallyparanoid.com/articles/virtualbox-centos-6.2.html\n\thttps://www.centos.org/forums/viewtopic.php?t=5603\n\t\n## 2.`Centos`上安装`vagrant`[^3]\n\n### 2.1 `static IP on a bridged interface`\n由于是公用的环境,会有很多个童鞋去访问,所以需要固定ip,并且上面的服务大家也可以自由访问,所以需要桥接网络.\n但是官方网站上没有这样的配置,最后在github[^4]上发现了解决方案,测试了N遍,终于对头了:\n\t\n\tconfig.vm.network \"public_network\", :bridge => \"eth0\", :ip => \"192.168.46.51\"\n\t\n如果是mac上,就用:\n\n\tconfig.vm.network \"public_network\", :bridge => \"en0: Wi-Fi (AirPort)\", :ip   => \"192.168.1.222\"\n\t\n这样也需要注意下,如果要搭建多套环境,最好还是开一个新的网段,别和其他系统的ip冲突了.\n\n如果只是你自己一个人玩,使用host-only吧,很简单.\n\n### 2.2 `ext4 file system inconsistency`系统稳定性问题\n不知道什么原因,过段时间就启动不了,最后通过`ssh tunneling`打开`Virtaul Box`图形化界面才发现了这个`ext4 file system inconsistency`问题.\n\n错误日志如下:\n\t\n\t\tThere is a known Linux kernel bug which can lead to the corruption of the virtual disk image under these conditions.\n\t\tEither enable the host I/O cache permanently in the VM settings or put the disk image and the snapshot folder onto a different file system.\n\t\tThe host I/O cache will now be enabled for this medium.\n\t\t\n这是一个kernel的bug,centos forum上遇到这个问题[^5],其他的虚拟化vmware也有同样的问题.\n\n如果`enable host I/O cache`,又会遇到各种问题[^6].比如`data loss`,`I/O errors`,`I/O requests time out`,`Physical memory waste`都是童鞋们不能接受的.\n\n只有选择使用不同的文件系统,`fdisk -l`看下`/home`还比较大,有上T的空间.\n\t\n\t#卸载home分区\n\tumount /dev/mapper/VolGroup-lv_home\n\t#格式化\n\tmkfs.ext3 /dev/mapper/VolGroup-lv_home\n\t#装载home分区\n\tmount /dev/mapper/VolGroup-lv_home /home\n最后需要修改 `/etc/fstab`,改变挂载分区为`ext3`,重启后`sudo parted -l`看生效没有.现在可以在`/home`目录启动vagrant.\n\n### 2.3 guest分配多核反而更慢\n\n如果开启多核(比如设置为20核),又遇到启动很慢的问题[^7].原因是:\n\n> VMs with multiple vCPUs require that all allocated cores be free before processing can begin. This means, if you have a 2 vCPU machine,2 physical cores must be available, and a 4 vCPU requires 4 physical cores\n\n我开启20核,等了半个小时实在等不下去了.\n\n查看cpu个数`grep 'physical id' /proc/cpuinfo | sort -u`,2个物理cpu.查看每个cpu核心数,`grep 'core id' /proc/cpuinfo | sort -u | wc -l`,每个cpu6个核心. 按照\n\n>One point to note is that if you assign many more vCPUs than you have physical CPUs the system may run slower because the host spends more time scheduling threads than actually running them.\n\n,理论上12个应该是最优的,但是感觉还是不太靠谱,测试某app启动性能:\n\ncpus | 启动费时1|启动费时2\n--- | --------|----- |\n1   | 34664 | 34291\n2   | 29040 | 29104\n4\t| 26205\t| 26495\n6\t| 27207\t| 28566\n8\t| 48087\t| 44483\n\n根据上面的测试,给vm配置4 cpus是最优的.卧槽,咱这服务两个物理cpu,每个cpu6 个核心,在加上`Hyperthreading`,`processor`都有24个了.如果这台服务器上有多个vm,咱这个测试最优的cpu数还会更少.\n\n## 3.制作package\n\n### 3.1 初始化vagrant环境\n下载一个官方提供的base box[^8],用于初始化环境.这里我们选择CentOS 6.4 x86_64[^9].\n在前面提到的ext3分区上进行:\n\n\t #添加镜像到 Vagrant\n\t vagrant box add yiji package.box\n\t #初始化环境\n\t vagrant init yiji\n\n当前目录会有一个`Vagrantfile`文件,加上前面测试的东东:\n\n\tconfig.vm.network \"public_network\", :bridge => \"eth0\", :ip => \"192.168.46.51\"\n\tconfig.vm.provider :virtualbox do |vb|\n        vb.gui = false\n        #设置内存\n        vb.customize [\"modifyvm\", :id, \"--memory\", \"5120\"]\n        #设置虚拟机ip\n        vb.customize [\"modifyvm\", :id, \"--cpus\", \"4\"]\n        #设置ioapic,启用多个cpu时,必须设置.如果就一个cpu就不要设置,影响性能\n        vb.customize [\"modifyvm\", :id, \"--ioapic\", \"on\"]\n        #vb.customize [\"modifyvm\", :id, \"--cpuexecutioncap\", \"50\"]\n    end\n\n启动虚拟机并ssh登陆:\n\t\n\t#启动虚拟机\n\tvagrant up\n\t#ssh登陆\n\tvagrant ssh\n\t\n### 3.2 初始化VM环境\nssh登陆后,此时是用vagrant用户登陆的,这个时候神马事情都干不了,切换到root用户\n\n\t#修改root密码\n\tsudo passwd root\n\t#切换到root账户\n\tsu - root\n配置路由和dns服务器:\n\t\n\tsudo route del default\n\tsudo route add default gw 192.168.46.254\n\techo \"nameserver 192.168.45.10\" > /etc/resolv.conf\n\techo \"nameserver 8.8.8.8\" >> /etc/resolv.conf\n添加定时常用定时任务:\n\t\n\t#每12小时时间服务同步\n\t0 */12 * * * rdate -s time.nist.gov\n\t#每天清理日志\n\t0 0 * * * /script/deletelog.sh\n\t\n关闭防火墙:\n\n\tchkconfig ip6tables off\n\tchkconfig iptables off\n为了集中控制jvm的启动参数,定义java应用依赖环境变量:\n\n\texport APP_JAVA_OPTS=\"-Xms256m -Xmx512m\"\n所有的java应用启动脚本中把`APP_JAVA_OPTS`加在启动参数的最后,它的优先级最高,就很方便的控制所有的jvm进程内存大小了.\n\n上面有些东西可以脚本化的,尽量就脚本化,比如在`/etc/rc.d/rc.local`增加启动脚本`init.sh` .其他脚本分为 `init_network.sh` `init_env.sh` `init_common_app.sh` `init_app.sh`\n\n### 3.3 安装memcache\n安装:\n\n\tyum install memcached\n\t \n配置文件:\n\t\n\t/etc/sysconfig/memcached\n命令:\n\n\tservice memcached start/stop/restart/status\n\n设置开机启动:\n\t\n\tchkconfig memcached on\n修改`/etc/init.d/memcached`可以修改memcache启动参数\n\n### 3.4 安装rabbitmq\n \n安装:\n \n\tyum install rabbitmq\n \t#安装webui\n \trabbitmq-plugins enable rabbitmq_management\n \t#启用guest账户 访问web ui\n \techo \"[{rabbit, [{loopback_users, []}]}].\" >/etc/rabbitmq/rabbitmq.config\n \t\t\n \n常用命令:\n \t\n \tservice rabbitmq-server stop/start/etc.\n \t\t\nweb ui访问地址,账号密码guest/guest:\n \t\t\n \thttp://192.168.46.51:15672/\n \t\n设置开机启动:\n\t\n\tchkconfig rabbitmq-server on\n\t\n### 3.5 安装其他软件\n\njdk/maven/memcache/zookeeper/rabbitmq/dubbo-monitor-simple/dubbo-admin\n\n### 3.6 服务列表说明\n\n| 服务\t\t\t | 服务端口 | web ui 端口 |\n| -------------- | ------------- | ------------ |\n| memcache \t\t| 11211  | 无 |\n| zookeeper\t\t| 2181   | 无 |\n| rabbitmq \t\t| 5672   | 15672 |\n| dubbo-monitor | 7070  | 7071 |\n| dubbo-admin\t| 无     | 7073 |\n\n### 3.7 制作分发包\n\n\tvagrant package\n上面命令会在当前目录生成一个`package.box`文件,此文件拷贝到其他服务器,就可以快速搭建系统了.\n\n### 3.8 常用vagrant 命令\n\t\n\t#初始化环境,此命令会生成Vagrantfile配置文件,如果当前目录有Vagrantfile,不要执行此命令,直接up吧\n\tvagrant init\n\t\n\t#启动虚拟机  \n\tvagrant up\n\t\n\t#关闭虚拟机  \n\tvagrant halt\n\t\n\t# 重新启动虚拟机,如果Vagrantfile被修改后,执行此命令才能生效.\n\t#但是修改cpu相关参数,此命令也不能重新加载配置,这个时候把虚拟机先停下来,\n\t#通过ssh tunneling在gui界面里调整\n\tvagrant reload \n\t\n\t#SSH至虚拟机\n\tvagrant ssh\n\t  \n\t#查看虚拟机运行状态\n\tvagrant status\n\t\n\t# 销毁当前虚拟机\n\tvagrant destroy  \n\t\n\t#add box\n\tvagrant box add boxname xxx.box\n\t\n\t#remove box\n\t\n\tvagrant box remove boxname\n\t\n\t#list box\n\tvagrant box list\n\t\n## 4.写在最后\n`virtual box`的性能让人担忧,如果部署应用太多需要仔细权衡下,如果只是搭建单机环境,使用vagrant还是很ok的.\n\n[^1]: [`Virtual Box`下载地址](https://www.virtualbox.org/wiki/Linux_Downloads)\n[^2]: [unable to find the sources of your current Linux kernel](https://www.centos.org/forums/viewtopic.php?t=5603)\n[^3]: [`vagrant`下载地址](http://www.vagrantup.com/downloads.htmlhttp://www.vagrantup.com/downloads.html)\n[^4]: [Static ip addresses on public networks](https://github.com/mitchellh/vagrant/pull/1745)\n[^5]: [ext4 file system inconsistency](https://www.centos.org/forums/viewtopic.php?t=4436)\n[^6]: [Host I/O caching](https://www.virtualbox.org/manual/ch05.html#iocaching)\n[^7]: [Adding CPUs to Virtualbox guests makes guests boot SLOWER](http://www.reddit.com/r/linux/comments/1tqlsz/adding_cpus_to_virtualbox_guests_makes_guests/)\n[^8]: [vagrant base box](http://www.vagrantbox.es/)\n[^9]: [vagrant base box CentOS 6.4 x86_64](https://github.com/2creatives/vagrant-centos/releases/download/v6.4.2/centos64-x86_64-20140116.box)","source":"_posts/vagrant.md","raw":"---\ntitle: 使用vagrant\ndate: 2014-07-07 21:52:17\ncategories: java\ntags:\n  - vagrant\n---\n\nvagrant挺火的,用于快速搭建开发环境.官方网站一行大字`Development environments made easy.`很惹眼.他可以实现可分发的环境搭建.\n\n我们现在要快速搭建开发测试环境的需求很强烈,我们希望使用TA来快速搭建我们的开发测试环境.so,begin...\n\n## 1.`Centos`上安装`Virtaul Box`[^1]\n\n### 1.1 安装问题`unable to find the sources of your current Linux kernel. Specify KERN_DIR=<directory> and run Make again.`[^2]\n\nVirtaul Box原因是`uname -r`和`ls /usr/src/kernels/`版本不一致,需要执行`yum update`,可以把国内的yum镜像用起来,会快点.完了重启下.\n\n\t\n参考:\n\n\thttp://rationallyparanoid.com/articles/virtualbox-centos-6.2.html\n\thttps://www.centos.org/forums/viewtopic.php?t=5603\n\t\n## 2.`Centos`上安装`vagrant`[^3]\n\n### 2.1 `static IP on a bridged interface`\n由于是公用的环境,会有很多个童鞋去访问,所以需要固定ip,并且上面的服务大家也可以自由访问,所以需要桥接网络.\n但是官方网站上没有这样的配置,最后在github[^4]上发现了解决方案,测试了N遍,终于对头了:\n\t\n\tconfig.vm.network \"public_network\", :bridge => \"eth0\", :ip => \"192.168.46.51\"\n\t\n如果是mac上,就用:\n\n\tconfig.vm.network \"public_network\", :bridge => \"en0: Wi-Fi (AirPort)\", :ip   => \"192.168.1.222\"\n\t\n这样也需要注意下,如果要搭建多套环境,最好还是开一个新的网段,别和其他系统的ip冲突了.\n\n如果只是你自己一个人玩,使用host-only吧,很简单.\n\n### 2.2 `ext4 file system inconsistency`系统稳定性问题\n不知道什么原因,过段时间就启动不了,最后通过`ssh tunneling`打开`Virtaul Box`图形化界面才发现了这个`ext4 file system inconsistency`问题.\n\n错误日志如下:\n\t\n\t\tThere is a known Linux kernel bug which can lead to the corruption of the virtual disk image under these conditions.\n\t\tEither enable the host I/O cache permanently in the VM settings or put the disk image and the snapshot folder onto a different file system.\n\t\tThe host I/O cache will now be enabled for this medium.\n\t\t\n这是一个kernel的bug,centos forum上遇到这个问题[^5],其他的虚拟化vmware也有同样的问题.\n\n如果`enable host I/O cache`,又会遇到各种问题[^6].比如`data loss`,`I/O errors`,`I/O requests time out`,`Physical memory waste`都是童鞋们不能接受的.\n\n只有选择使用不同的文件系统,`fdisk -l`看下`/home`还比较大,有上T的空间.\n\t\n\t#卸载home分区\n\tumount /dev/mapper/VolGroup-lv_home\n\t#格式化\n\tmkfs.ext3 /dev/mapper/VolGroup-lv_home\n\t#装载home分区\n\tmount /dev/mapper/VolGroup-lv_home /home\n最后需要修改 `/etc/fstab`,改变挂载分区为`ext3`,重启后`sudo parted -l`看生效没有.现在可以在`/home`目录启动vagrant.\n\n### 2.3 guest分配多核反而更慢\n\n如果开启多核(比如设置为20核),又遇到启动很慢的问题[^7].原因是:\n\n> VMs with multiple vCPUs require that all allocated cores be free before processing can begin. This means, if you have a 2 vCPU machine,2 physical cores must be available, and a 4 vCPU requires 4 physical cores\n\n我开启20核,等了半个小时实在等不下去了.\n\n查看cpu个数`grep 'physical id' /proc/cpuinfo | sort -u`,2个物理cpu.查看每个cpu核心数,`grep 'core id' /proc/cpuinfo | sort -u | wc -l`,每个cpu6个核心. 按照\n\n>One point to note is that if you assign many more vCPUs than you have physical CPUs the system may run slower because the host spends more time scheduling threads than actually running them.\n\n,理论上12个应该是最优的,但是感觉还是不太靠谱,测试某app启动性能:\n\ncpus | 启动费时1|启动费时2\n--- | --------|----- |\n1   | 34664 | 34291\n2   | 29040 | 29104\n4\t| 26205\t| 26495\n6\t| 27207\t| 28566\n8\t| 48087\t| 44483\n\n根据上面的测试,给vm配置4 cpus是最优的.卧槽,咱这服务两个物理cpu,每个cpu6 个核心,在加上`Hyperthreading`,`processor`都有24个了.如果这台服务器上有多个vm,咱这个测试最优的cpu数还会更少.\n\n## 3.制作package\n\n### 3.1 初始化vagrant环境\n下载一个官方提供的base box[^8],用于初始化环境.这里我们选择CentOS 6.4 x86_64[^9].\n在前面提到的ext3分区上进行:\n\n\t #添加镜像到 Vagrant\n\t vagrant box add yiji package.box\n\t #初始化环境\n\t vagrant init yiji\n\n当前目录会有一个`Vagrantfile`文件,加上前面测试的东东:\n\n\tconfig.vm.network \"public_network\", :bridge => \"eth0\", :ip => \"192.168.46.51\"\n\tconfig.vm.provider :virtualbox do |vb|\n        vb.gui = false\n        #设置内存\n        vb.customize [\"modifyvm\", :id, \"--memory\", \"5120\"]\n        #设置虚拟机ip\n        vb.customize [\"modifyvm\", :id, \"--cpus\", \"4\"]\n        #设置ioapic,启用多个cpu时,必须设置.如果就一个cpu就不要设置,影响性能\n        vb.customize [\"modifyvm\", :id, \"--ioapic\", \"on\"]\n        #vb.customize [\"modifyvm\", :id, \"--cpuexecutioncap\", \"50\"]\n    end\n\n启动虚拟机并ssh登陆:\n\t\n\t#启动虚拟机\n\tvagrant up\n\t#ssh登陆\n\tvagrant ssh\n\t\n### 3.2 初始化VM环境\nssh登陆后,此时是用vagrant用户登陆的,这个时候神马事情都干不了,切换到root用户\n\n\t#修改root密码\n\tsudo passwd root\n\t#切换到root账户\n\tsu - root\n配置路由和dns服务器:\n\t\n\tsudo route del default\n\tsudo route add default gw 192.168.46.254\n\techo \"nameserver 192.168.45.10\" > /etc/resolv.conf\n\techo \"nameserver 8.8.8.8\" >> /etc/resolv.conf\n添加定时常用定时任务:\n\t\n\t#每12小时时间服务同步\n\t0 */12 * * * rdate -s time.nist.gov\n\t#每天清理日志\n\t0 0 * * * /script/deletelog.sh\n\t\n关闭防火墙:\n\n\tchkconfig ip6tables off\n\tchkconfig iptables off\n为了集中控制jvm的启动参数,定义java应用依赖环境变量:\n\n\texport APP_JAVA_OPTS=\"-Xms256m -Xmx512m\"\n所有的java应用启动脚本中把`APP_JAVA_OPTS`加在启动参数的最后,它的优先级最高,就很方便的控制所有的jvm进程内存大小了.\n\n上面有些东西可以脚本化的,尽量就脚本化,比如在`/etc/rc.d/rc.local`增加启动脚本`init.sh` .其他脚本分为 `init_network.sh` `init_env.sh` `init_common_app.sh` `init_app.sh`\n\n### 3.3 安装memcache\n安装:\n\n\tyum install memcached\n\t \n配置文件:\n\t\n\t/etc/sysconfig/memcached\n命令:\n\n\tservice memcached start/stop/restart/status\n\n设置开机启动:\n\t\n\tchkconfig memcached on\n修改`/etc/init.d/memcached`可以修改memcache启动参数\n\n### 3.4 安装rabbitmq\n \n安装:\n \n\tyum install rabbitmq\n \t#安装webui\n \trabbitmq-plugins enable rabbitmq_management\n \t#启用guest账户 访问web ui\n \techo \"[{rabbit, [{loopback_users, []}]}].\" >/etc/rabbitmq/rabbitmq.config\n \t\t\n \n常用命令:\n \t\n \tservice rabbitmq-server stop/start/etc.\n \t\t\nweb ui访问地址,账号密码guest/guest:\n \t\t\n \thttp://192.168.46.51:15672/\n \t\n设置开机启动:\n\t\n\tchkconfig rabbitmq-server on\n\t\n### 3.5 安装其他软件\n\njdk/maven/memcache/zookeeper/rabbitmq/dubbo-monitor-simple/dubbo-admin\n\n### 3.6 服务列表说明\n\n| 服务\t\t\t | 服务端口 | web ui 端口 |\n| -------------- | ------------- | ------------ |\n| memcache \t\t| 11211  | 无 |\n| zookeeper\t\t| 2181   | 无 |\n| rabbitmq \t\t| 5672   | 15672 |\n| dubbo-monitor | 7070  | 7071 |\n| dubbo-admin\t| 无     | 7073 |\n\n### 3.7 制作分发包\n\n\tvagrant package\n上面命令会在当前目录生成一个`package.box`文件,此文件拷贝到其他服务器,就可以快速搭建系统了.\n\n### 3.8 常用vagrant 命令\n\t\n\t#初始化环境,此命令会生成Vagrantfile配置文件,如果当前目录有Vagrantfile,不要执行此命令,直接up吧\n\tvagrant init\n\t\n\t#启动虚拟机  \n\tvagrant up\n\t\n\t#关闭虚拟机  \n\tvagrant halt\n\t\n\t# 重新启动虚拟机,如果Vagrantfile被修改后,执行此命令才能生效.\n\t#但是修改cpu相关参数,此命令也不能重新加载配置,这个时候把虚拟机先停下来,\n\t#通过ssh tunneling在gui界面里调整\n\tvagrant reload \n\t\n\t#SSH至虚拟机\n\tvagrant ssh\n\t  \n\t#查看虚拟机运行状态\n\tvagrant status\n\t\n\t# 销毁当前虚拟机\n\tvagrant destroy  \n\t\n\t#add box\n\tvagrant box add boxname xxx.box\n\t\n\t#remove box\n\t\n\tvagrant box remove boxname\n\t\n\t#list box\n\tvagrant box list\n\t\n## 4.写在最后\n`virtual box`的性能让人担忧,如果部署应用太多需要仔细权衡下,如果只是搭建单机环境,使用vagrant还是很ok的.\n\n[^1]: [`Virtual Box`下载地址](https://www.virtualbox.org/wiki/Linux_Downloads)\n[^2]: [unable to find the sources of your current Linux kernel](https://www.centos.org/forums/viewtopic.php?t=5603)\n[^3]: [`vagrant`下载地址](http://www.vagrantup.com/downloads.htmlhttp://www.vagrantup.com/downloads.html)\n[^4]: [Static ip addresses on public networks](https://github.com/mitchellh/vagrant/pull/1745)\n[^5]: [ext4 file system inconsistency](https://www.centos.org/forums/viewtopic.php?t=4436)\n[^6]: [Host I/O caching](https://www.virtualbox.org/manual/ch05.html#iocaching)\n[^7]: [Adding CPUs to Virtualbox guests makes guests boot SLOWER](http://www.reddit.com/r/linux/comments/1tqlsz/adding_cpus_to_virtualbox_guests_makes_guests/)\n[^8]: [vagrant base box](http://www.vagrantbox.es/)\n[^9]: [vagrant base box CentOS 6.4 x86_64](https://github.com/2creatives/vagrant-centos/releases/download/v6.4.2/centos64-x86_64-20140116.box)","slug":"vagrant","published":1,"updated":"2018-04-01T16:53:17.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksii003xp0ugvyvpf1je","content":"<p>vagrant挺火的,用于快速搭建开发环境.官方网站一行大字<code>Development environments made easy.</code>很惹眼.他可以实现可分发的环境搭建.</p>\n<p>我们现在要快速搭建开发测试环境的需求很强烈,我们希望使用TA来快速搭建我们的开发测试环境.so,begin…</p>\n<h2 id=\"1-Centos上安装Virtaul-Box-1\"><a href=\"#1-Centos上安装Virtaul-Box-1\" class=\"headerlink\" title=\"1.Centos上安装Virtaul Box[^1]\"></a>1.<code>Centos</code>上安装<code>Virtaul Box</code>[^1]</h2><h3 id=\"1-1-安装问题unable-to-find-the-sources-of-your-current-Linux-kernel-Specify-KERN-DIR-lt-directory-gt-and-run-Make-again-2\"><a href=\"#1-1-安装问题unable-to-find-the-sources-of-your-current-Linux-kernel-Specify-KERN-DIR-lt-directory-gt-and-run-Make-again-2\" class=\"headerlink\" title=\"1.1 安装问题unable to find the sources of your current Linux kernel. Specify KERN_DIR=&lt;directory&gt; and run Make again.[^2]\"></a>1.1 安装问题<code>unable to find the sources of your current Linux kernel. Specify KERN_DIR=&lt;directory&gt; and run Make again.</code>[^2]</h3><p>Virtaul Box原因是<code>uname -r</code>和<code>ls /usr/src/kernels/</code>版本不一致,需要执行<code>yum update</code>,可以把国内的yum镜像用起来,会快点.完了重启下.</p>\n<p>参考:</p>\n<pre><code>http://rationallyparanoid.com/articles/virtualbox-centos-6.2.html\nhttps://www.centos.org/forums/viewtopic.php?t=5603\n</code></pre><h2 id=\"2-Centos上安装vagrant-3\"><a href=\"#2-Centos上安装vagrant-3\" class=\"headerlink\" title=\"2.Centos上安装vagrant[^3]\"></a>2.<code>Centos</code>上安装<code>vagrant</code>[^3]</h2><h3 id=\"2-1-static-IP-on-a-bridged-interface\"><a href=\"#2-1-static-IP-on-a-bridged-interface\" class=\"headerlink\" title=\"2.1 static IP on a bridged interface\"></a>2.1 <code>static IP on a bridged interface</code></h3><p>由于是公用的环境,会有很多个童鞋去访问,所以需要固定ip,并且上面的服务大家也可以自由访问,所以需要桥接网络.<br>但是官方网站上没有这样的配置,最后在github[^4]上发现了解决方案,测试了N遍,终于对头了:</p>\n<pre><code>config.vm.network &quot;public_network&quot;, :bridge =&gt; &quot;eth0&quot;, :ip =&gt; &quot;192.168.46.51&quot;\n</code></pre><p>如果是mac上,就用:</p>\n<pre><code>config.vm.network &quot;public_network&quot;, :bridge =&gt; &quot;en0: Wi-Fi (AirPort)&quot;, :ip   =&gt; &quot;192.168.1.222&quot;\n</code></pre><p>这样也需要注意下,如果要搭建多套环境,最好还是开一个新的网段,别和其他系统的ip冲突了.</p>\n<p>如果只是你自己一个人玩,使用host-only吧,很简单.</p>\n<h3 id=\"2-2-ext4-file-system-inconsistency系统稳定性问题\"><a href=\"#2-2-ext4-file-system-inconsistency系统稳定性问题\" class=\"headerlink\" title=\"2.2 ext4 file system inconsistency系统稳定性问题\"></a>2.2 <code>ext4 file system inconsistency</code>系统稳定性问题</h3><p>不知道什么原因,过段时间就启动不了,最后通过<code>ssh tunneling</code>打开<code>Virtaul Box</code>图形化界面才发现了这个<code>ext4 file system inconsistency</code>问题.</p>\n<p>错误日志如下:</p>\n<pre><code>There is a known Linux kernel bug which can lead to the corruption of the virtual disk image under these conditions.\nEither enable the host I/O cache permanently in the VM settings or put the disk image and the snapshot folder onto a different file system.\nThe host I/O cache will now be enabled for this medium.\n</code></pre><p>这是一个kernel的bug,centos forum上遇到这个问题[^5],其他的虚拟化vmware也有同样的问题.</p>\n<p>如果<code>enable host I/O cache</code>,又会遇到各种问题[^6].比如<code>data loss</code>,<code>I/O errors</code>,<code>I/O requests time out</code>,<code>Physical memory waste</code>都是童鞋们不能接受的.</p>\n<p>只有选择使用不同的文件系统,<code>fdisk -l</code>看下<code>/home</code>还比较大,有上T的空间.</p>\n<pre><code>#卸载home分区\numount /dev/mapper/VolGroup-lv_home\n#格式化\nmkfs.ext3 /dev/mapper/VolGroup-lv_home\n#装载home分区\nmount /dev/mapper/VolGroup-lv_home /home\n</code></pre><p>最后需要修改 <code>/etc/fstab</code>,改变挂载分区为<code>ext3</code>,重启后<code>sudo parted -l</code>看生效没有.现在可以在<code>/home</code>目录启动vagrant.</p>\n<h3 id=\"2-3-guest分配多核反而更慢\"><a href=\"#2-3-guest分配多核反而更慢\" class=\"headerlink\" title=\"2.3 guest分配多核反而更慢\"></a>2.3 guest分配多核反而更慢</h3><p>如果开启多核(比如设置为20核),又遇到启动很慢的问题[^7].原因是:</p>\n<blockquote>\n<p>VMs with multiple vCPUs require that all allocated cores be free before processing can begin. This means, if you have a 2 vCPU machine,2 physical cores must be available, and a 4 vCPU requires 4 physical cores</p>\n</blockquote>\n<p>我开启20核,等了半个小时实在等不下去了.</p>\n<p>查看cpu个数<code>grep &#39;physical id&#39; /proc/cpuinfo | sort -u</code>,2个物理cpu.查看每个cpu核心数,<code>grep &#39;core id&#39; /proc/cpuinfo | sort -u | wc -l</code>,每个cpu6个核心. 按照</p>\n<blockquote>\n<p>One point to note is that if you assign many more vCPUs than you have physical CPUs the system may run slower because the host spends more time scheduling threads than actually running them.</p>\n</blockquote>\n<p>,理论上12个应该是最优的,但是感觉还是不太靠谱,测试某app启动性能:</p>\n<table>\n<thead>\n<tr>\n<th>cpus</th>\n<th>启动费时1</th>\n<th>启动费时2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>34664</td>\n<td>34291</td>\n</tr>\n<tr>\n<td>2</td>\n<td>29040</td>\n<td>29104</td>\n</tr>\n<tr>\n<td>4</td>\n<td>26205</td>\n<td>26495</td>\n</tr>\n<tr>\n<td>6</td>\n<td>27207</td>\n<td>28566</td>\n</tr>\n<tr>\n<td>8</td>\n<td>48087</td>\n<td>44483</td>\n</tr>\n</tbody>\n</table>\n<p>根据上面的测试,给vm配置4 cpus是最优的.卧槽,咱这服务两个物理cpu,每个cpu6 个核心,在加上<code>Hyperthreading</code>,<code>processor</code>都有24个了.如果这台服务器上有多个vm,咱这个测试最优的cpu数还会更少.</p>\n<h2 id=\"3-制作package\"><a href=\"#3-制作package\" class=\"headerlink\" title=\"3.制作package\"></a>3.制作package</h2><h3 id=\"3-1-初始化vagrant环境\"><a href=\"#3-1-初始化vagrant环境\" class=\"headerlink\" title=\"3.1 初始化vagrant环境\"></a>3.1 初始化vagrant环境</h3><p>下载一个官方提供的base box[^8],用于初始化环境.这里我们选择CentOS 6.4 x86_64[^9].<br>在前面提到的ext3分区上进行:</p>\n<pre><code>#添加镜像到 Vagrant\nvagrant box add yiji package.box\n#初始化环境\nvagrant init yiji\n</code></pre><p>当前目录会有一个<code>Vagrantfile</code>文件,加上前面测试的东东:</p>\n<pre><code>config.vm.network &quot;public_network&quot;, :bridge =&gt; &quot;eth0&quot;, :ip =&gt; &quot;192.168.46.51&quot;\nconfig.vm.provider :virtualbox do |vb|\n    vb.gui = false\n    #设置内存\n    vb.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, &quot;5120&quot;]\n    #设置虚拟机ip\n    vb.customize [&quot;modifyvm&quot;, :id, &quot;--cpus&quot;, &quot;4&quot;]\n    #设置ioapic,启用多个cpu时,必须设置.如果就一个cpu就不要设置,影响性能\n    vb.customize [&quot;modifyvm&quot;, :id, &quot;--ioapic&quot;, &quot;on&quot;]\n    #vb.customize [&quot;modifyvm&quot;, :id, &quot;--cpuexecutioncap&quot;, &quot;50&quot;]\nend\n</code></pre><p>启动虚拟机并ssh登陆:</p>\n<pre><code>#启动虚拟机\nvagrant up\n#ssh登陆\nvagrant ssh\n</code></pre><h3 id=\"3-2-初始化VM环境\"><a href=\"#3-2-初始化VM环境\" class=\"headerlink\" title=\"3.2 初始化VM环境\"></a>3.2 初始化VM环境</h3><p>ssh登陆后,此时是用vagrant用户登陆的,这个时候神马事情都干不了,切换到root用户</p>\n<pre><code>#修改root密码\nsudo passwd root\n#切换到root账户\nsu - root\n</code></pre><p>配置路由和dns服务器:</p>\n<pre><code>sudo route del default\nsudo route add default gw 192.168.46.254\necho &quot;nameserver 192.168.45.10&quot; &gt; /etc/resolv.conf\necho &quot;nameserver 8.8.8.8&quot; &gt;&gt; /etc/resolv.conf\n</code></pre><p>添加定时常用定时任务:</p>\n<pre><code>#每12小时时间服务同步\n0 */12 * * * rdate -s time.nist.gov\n#每天清理日志\n0 0 * * * /script/deletelog.sh\n</code></pre><p>关闭防火墙:</p>\n<pre><code>chkconfig ip6tables off\nchkconfig iptables off\n</code></pre><p>为了集中控制jvm的启动参数,定义java应用依赖环境变量:</p>\n<pre><code>export APP_JAVA_OPTS=&quot;-Xms256m -Xmx512m&quot;\n</code></pre><p>所有的java应用启动脚本中把<code>APP_JAVA_OPTS</code>加在启动参数的最后,它的优先级最高,就很方便的控制所有的jvm进程内存大小了.</p>\n<p>上面有些东西可以脚本化的,尽量就脚本化,比如在<code>/etc/rc.d/rc.local</code>增加启动脚本<code>init.sh</code> .其他脚本分为 <code>init_network.sh</code> <code>init_env.sh</code> <code>init_common_app.sh</code> <code>init_app.sh</code></p>\n<h3 id=\"3-3-安装memcache\"><a href=\"#3-3-安装memcache\" class=\"headerlink\" title=\"3.3 安装memcache\"></a>3.3 安装memcache</h3><p>安装:</p>\n<pre><code>yum install memcached\n</code></pre><p>配置文件:</p>\n<pre><code>/etc/sysconfig/memcached\n</code></pre><p>命令:</p>\n<pre><code>service memcached start/stop/restart/status\n</code></pre><p>设置开机启动:</p>\n<pre><code>chkconfig memcached on\n</code></pre><p>修改<code>/etc/init.d/memcached</code>可以修改memcache启动参数</p>\n<h3 id=\"3-4-安装rabbitmq\"><a href=\"#3-4-安装rabbitmq\" class=\"headerlink\" title=\"3.4 安装rabbitmq\"></a>3.4 安装rabbitmq</h3><p>安装:</p>\n<pre><code>yum install rabbitmq\n #安装webui\n rabbitmq-plugins enable rabbitmq_management\n #启用guest账户 访问web ui\n echo &quot;[{rabbit, [{loopback_users, []}]}].&quot; &gt;/etc/rabbitmq/rabbitmq.config\n</code></pre><p>常用命令:</p>\n<pre><code>service rabbitmq-server stop/start/etc.\n</code></pre><p>web ui访问地址,账号密码guest/guest:</p>\n<pre><code>http://192.168.46.51:15672/\n</code></pre><p>设置开机启动:</p>\n<pre><code>chkconfig rabbitmq-server on\n</code></pre><h3 id=\"3-5-安装其他软件\"><a href=\"#3-5-安装其他软件\" class=\"headerlink\" title=\"3.5 安装其他软件\"></a>3.5 安装其他软件</h3><p>jdk/maven/memcache/zookeeper/rabbitmq/dubbo-monitor-simple/dubbo-admin</p>\n<h3 id=\"3-6-服务列表说明\"><a href=\"#3-6-服务列表说明\" class=\"headerlink\" title=\"3.6 服务列表说明\"></a>3.6 服务列表说明</h3><table>\n<thead>\n<tr>\n<th>服务</th>\n<th>服务端口</th>\n<th>web ui 端口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>memcache</td>\n<td>11211</td>\n<td>无</td>\n</tr>\n<tr>\n<td>zookeeper</td>\n<td>2181</td>\n<td>无</td>\n</tr>\n<tr>\n<td>rabbitmq</td>\n<td>5672</td>\n<td>15672</td>\n</tr>\n<tr>\n<td>dubbo-monitor</td>\n<td>7070</td>\n<td>7071</td>\n</tr>\n<tr>\n<td>dubbo-admin</td>\n<td>无</td>\n<td>7073</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-7-制作分发包\"><a href=\"#3-7-制作分发包\" class=\"headerlink\" title=\"3.7 制作分发包\"></a>3.7 制作分发包</h3><pre><code>vagrant package\n</code></pre><p>上面命令会在当前目录生成一个<code>package.box</code>文件,此文件拷贝到其他服务器,就可以快速搭建系统了.</p>\n<h3 id=\"3-8-常用vagrant-命令\"><a href=\"#3-8-常用vagrant-命令\" class=\"headerlink\" title=\"3.8 常用vagrant 命令\"></a>3.8 常用vagrant 命令</h3><pre><code>#初始化环境,此命令会生成Vagrantfile配置文件,如果当前目录有Vagrantfile,不要执行此命令,直接up吧\nvagrant init\n\n#启动虚拟机  \nvagrant up\n\n#关闭虚拟机  \nvagrant halt\n\n# 重新启动虚拟机,如果Vagrantfile被修改后,执行此命令才能生效.\n#但是修改cpu相关参数,此命令也不能重新加载配置,这个时候把虚拟机先停下来,\n#通过ssh tunneling在gui界面里调整\nvagrant reload \n\n#SSH至虚拟机\nvagrant ssh\n\n#查看虚拟机运行状态\nvagrant status\n\n# 销毁当前虚拟机\nvagrant destroy  \n\n#add box\nvagrant box add boxname xxx.box\n\n#remove box\n\nvagrant box remove boxname\n\n#list box\nvagrant box list\n</code></pre><h2 id=\"4-写在最后\"><a href=\"#4-写在最后\" class=\"headerlink\" title=\"4.写在最后\"></a>4.写在最后</h2><p><code>virtual box</code>的性能让人担忧,如果部署应用太多需要仔细权衡下,如果只是搭建单机环境,使用vagrant还是很ok的.</p>\n<p>[^1]: <a href=\"https://www.virtualbox.org/wiki/Linux_Downloads\" target=\"_blank\" rel=\"noopener\"><code>Virtual Box</code>下载地址</a><br>[^2]: <a href=\"https://www.centos.org/forums/viewtopic.php?t=5603\" target=\"_blank\" rel=\"noopener\">unable to find the sources of your current Linux kernel</a><br>[^3]: <a href=\"http://www.vagrantup.com/downloads.htmlhttp://www.vagrantup.com/downloads.html\" target=\"_blank\" rel=\"noopener\"><code>vagrant</code>下载地址</a><br>[^4]: <a href=\"https://github.com/mitchellh/vagrant/pull/1745\" target=\"_blank\" rel=\"noopener\">Static ip addresses on public networks</a><br>[^5]: <a href=\"https://www.centos.org/forums/viewtopic.php?t=4436\" target=\"_blank\" rel=\"noopener\">ext4 file system inconsistency</a><br>[^6]: <a href=\"https://www.virtualbox.org/manual/ch05.html#iocaching\" target=\"_blank\" rel=\"noopener\">Host I/O caching</a><br>[^7]: <a href=\"http://www.reddit.com/r/linux/comments/1tqlsz/adding_cpus_to_virtualbox_guests_makes_guests/\" target=\"_blank\" rel=\"noopener\">Adding CPUs to Virtualbox guests makes guests boot SLOWER</a><br>[^8]: <a href=\"http://www.vagrantbox.es/\" target=\"_blank\" rel=\"noopener\">vagrant base box</a><br>[^9]: <a href=\"https://github.com/2creatives/vagrant-centos/releases/download/v6.4.2/centos64-x86_64-20140116.box\" target=\"_blank\" rel=\"noopener\">vagrant base box CentOS 6.4 x86_64</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>vagrant挺火的,用于快速搭建开发环境.官方网站一行大字<code>Development environments made easy.</code>很惹眼.他可以实现可分发的环境搭建.</p>\n<p>我们现在要快速搭建开发测试环境的需求很强烈,我们希望使用TA来快速搭建我们的开发测试环境.so,begin…</p>\n<h2 id=\"1-Centos上安装Virtaul-Box-1\"><a href=\"#1-Centos上安装Virtaul-Box-1\" class=\"headerlink\" title=\"1.Centos上安装Virtaul Box[^1]\"></a>1.<code>Centos</code>上安装<code>Virtaul Box</code>[^1]</h2><h3 id=\"1-1-安装问题unable-to-find-the-sources-of-your-current-Linux-kernel-Specify-KERN-DIR-lt-directory-gt-and-run-Make-again-2\"><a href=\"#1-1-安装问题unable-to-find-the-sources-of-your-current-Linux-kernel-Specify-KERN-DIR-lt-directory-gt-and-run-Make-again-2\" class=\"headerlink\" title=\"1.1 安装问题unable to find the sources of your current Linux kernel. Specify KERN_DIR=&lt;directory&gt; and run Make again.[^2]\"></a>1.1 安装问题<code>unable to find the sources of your current Linux kernel. Specify KERN_DIR=&lt;directory&gt; and run Make again.</code>[^2]</h3><p>Virtaul Box原因是<code>uname -r</code>和<code>ls /usr/src/kernels/</code>版本不一致,需要执行<code>yum update</code>,可以把国内的yum镜像用起来,会快点.完了重启下.</p>\n<p>参考:</p>\n<pre><code>http://rationallyparanoid.com/articles/virtualbox-centos-6.2.html\nhttps://www.centos.org/forums/viewtopic.php?t=5603\n</code></pre><h2 id=\"2-Centos上安装vagrant-3\"><a href=\"#2-Centos上安装vagrant-3\" class=\"headerlink\" title=\"2.Centos上安装vagrant[^3]\"></a>2.<code>Centos</code>上安装<code>vagrant</code>[^3]</h2><h3 id=\"2-1-static-IP-on-a-bridged-interface\"><a href=\"#2-1-static-IP-on-a-bridged-interface\" class=\"headerlink\" title=\"2.1 static IP on a bridged interface\"></a>2.1 <code>static IP on a bridged interface</code></h3><p>由于是公用的环境,会有很多个童鞋去访问,所以需要固定ip,并且上面的服务大家也可以自由访问,所以需要桥接网络.<br>但是官方网站上没有这样的配置,最后在github[^4]上发现了解决方案,测试了N遍,终于对头了:</p>\n<pre><code>config.vm.network &quot;public_network&quot;, :bridge =&gt; &quot;eth0&quot;, :ip =&gt; &quot;192.168.46.51&quot;\n</code></pre><p>如果是mac上,就用:</p>\n<pre><code>config.vm.network &quot;public_network&quot;, :bridge =&gt; &quot;en0: Wi-Fi (AirPort)&quot;, :ip   =&gt; &quot;192.168.1.222&quot;\n</code></pre><p>这样也需要注意下,如果要搭建多套环境,最好还是开一个新的网段,别和其他系统的ip冲突了.</p>\n<p>如果只是你自己一个人玩,使用host-only吧,很简单.</p>\n<h3 id=\"2-2-ext4-file-system-inconsistency系统稳定性问题\"><a href=\"#2-2-ext4-file-system-inconsistency系统稳定性问题\" class=\"headerlink\" title=\"2.2 ext4 file system inconsistency系统稳定性问题\"></a>2.2 <code>ext4 file system inconsistency</code>系统稳定性问题</h3><p>不知道什么原因,过段时间就启动不了,最后通过<code>ssh tunneling</code>打开<code>Virtaul Box</code>图形化界面才发现了这个<code>ext4 file system inconsistency</code>问题.</p>\n<p>错误日志如下:</p>\n<pre><code>There is a known Linux kernel bug which can lead to the corruption of the virtual disk image under these conditions.\nEither enable the host I/O cache permanently in the VM settings or put the disk image and the snapshot folder onto a different file system.\nThe host I/O cache will now be enabled for this medium.\n</code></pre><p>这是一个kernel的bug,centos forum上遇到这个问题[^5],其他的虚拟化vmware也有同样的问题.</p>\n<p>如果<code>enable host I/O cache</code>,又会遇到各种问题[^6].比如<code>data loss</code>,<code>I/O errors</code>,<code>I/O requests time out</code>,<code>Physical memory waste</code>都是童鞋们不能接受的.</p>\n<p>只有选择使用不同的文件系统,<code>fdisk -l</code>看下<code>/home</code>还比较大,有上T的空间.</p>\n<pre><code>#卸载home分区\numount /dev/mapper/VolGroup-lv_home\n#格式化\nmkfs.ext3 /dev/mapper/VolGroup-lv_home\n#装载home分区\nmount /dev/mapper/VolGroup-lv_home /home\n</code></pre><p>最后需要修改 <code>/etc/fstab</code>,改变挂载分区为<code>ext3</code>,重启后<code>sudo parted -l</code>看生效没有.现在可以在<code>/home</code>目录启动vagrant.</p>\n<h3 id=\"2-3-guest分配多核反而更慢\"><a href=\"#2-3-guest分配多核反而更慢\" class=\"headerlink\" title=\"2.3 guest分配多核反而更慢\"></a>2.3 guest分配多核反而更慢</h3><p>如果开启多核(比如设置为20核),又遇到启动很慢的问题[^7].原因是:</p>\n<blockquote>\n<p>VMs with multiple vCPUs require that all allocated cores be free before processing can begin. This means, if you have a 2 vCPU machine,2 physical cores must be available, and a 4 vCPU requires 4 physical cores</p>\n</blockquote>\n<p>我开启20核,等了半个小时实在等不下去了.</p>\n<p>查看cpu个数<code>grep &#39;physical id&#39; /proc/cpuinfo | sort -u</code>,2个物理cpu.查看每个cpu核心数,<code>grep &#39;core id&#39; /proc/cpuinfo | sort -u | wc -l</code>,每个cpu6个核心. 按照</p>\n<blockquote>\n<p>One point to note is that if you assign many more vCPUs than you have physical CPUs the system may run slower because the host spends more time scheduling threads than actually running them.</p>\n</blockquote>\n<p>,理论上12个应该是最优的,但是感觉还是不太靠谱,测试某app启动性能:</p>\n<table>\n<thead>\n<tr>\n<th>cpus</th>\n<th>启动费时1</th>\n<th>启动费时2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>34664</td>\n<td>34291</td>\n</tr>\n<tr>\n<td>2</td>\n<td>29040</td>\n<td>29104</td>\n</tr>\n<tr>\n<td>4</td>\n<td>26205</td>\n<td>26495</td>\n</tr>\n<tr>\n<td>6</td>\n<td>27207</td>\n<td>28566</td>\n</tr>\n<tr>\n<td>8</td>\n<td>48087</td>\n<td>44483</td>\n</tr>\n</tbody>\n</table>\n<p>根据上面的测试,给vm配置4 cpus是最优的.卧槽,咱这服务两个物理cpu,每个cpu6 个核心,在加上<code>Hyperthreading</code>,<code>processor</code>都有24个了.如果这台服务器上有多个vm,咱这个测试最优的cpu数还会更少.</p>\n<h2 id=\"3-制作package\"><a href=\"#3-制作package\" class=\"headerlink\" title=\"3.制作package\"></a>3.制作package</h2><h3 id=\"3-1-初始化vagrant环境\"><a href=\"#3-1-初始化vagrant环境\" class=\"headerlink\" title=\"3.1 初始化vagrant环境\"></a>3.1 初始化vagrant环境</h3><p>下载一个官方提供的base box[^8],用于初始化环境.这里我们选择CentOS 6.4 x86_64[^9].<br>在前面提到的ext3分区上进行:</p>\n<pre><code>#添加镜像到 Vagrant\nvagrant box add yiji package.box\n#初始化环境\nvagrant init yiji\n</code></pre><p>当前目录会有一个<code>Vagrantfile</code>文件,加上前面测试的东东:</p>\n<pre><code>config.vm.network &quot;public_network&quot;, :bridge =&gt; &quot;eth0&quot;, :ip =&gt; &quot;192.168.46.51&quot;\nconfig.vm.provider :virtualbox do |vb|\n    vb.gui = false\n    #设置内存\n    vb.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, &quot;5120&quot;]\n    #设置虚拟机ip\n    vb.customize [&quot;modifyvm&quot;, :id, &quot;--cpus&quot;, &quot;4&quot;]\n    #设置ioapic,启用多个cpu时,必须设置.如果就一个cpu就不要设置,影响性能\n    vb.customize [&quot;modifyvm&quot;, :id, &quot;--ioapic&quot;, &quot;on&quot;]\n    #vb.customize [&quot;modifyvm&quot;, :id, &quot;--cpuexecutioncap&quot;, &quot;50&quot;]\nend\n</code></pre><p>启动虚拟机并ssh登陆:</p>\n<pre><code>#启动虚拟机\nvagrant up\n#ssh登陆\nvagrant ssh\n</code></pre><h3 id=\"3-2-初始化VM环境\"><a href=\"#3-2-初始化VM环境\" class=\"headerlink\" title=\"3.2 初始化VM环境\"></a>3.2 初始化VM环境</h3><p>ssh登陆后,此时是用vagrant用户登陆的,这个时候神马事情都干不了,切换到root用户</p>\n<pre><code>#修改root密码\nsudo passwd root\n#切换到root账户\nsu - root\n</code></pre><p>配置路由和dns服务器:</p>\n<pre><code>sudo route del default\nsudo route add default gw 192.168.46.254\necho &quot;nameserver 192.168.45.10&quot; &gt; /etc/resolv.conf\necho &quot;nameserver 8.8.8.8&quot; &gt;&gt; /etc/resolv.conf\n</code></pre><p>添加定时常用定时任务:</p>\n<pre><code>#每12小时时间服务同步\n0 */12 * * * rdate -s time.nist.gov\n#每天清理日志\n0 0 * * * /script/deletelog.sh\n</code></pre><p>关闭防火墙:</p>\n<pre><code>chkconfig ip6tables off\nchkconfig iptables off\n</code></pre><p>为了集中控制jvm的启动参数,定义java应用依赖环境变量:</p>\n<pre><code>export APP_JAVA_OPTS=&quot;-Xms256m -Xmx512m&quot;\n</code></pre><p>所有的java应用启动脚本中把<code>APP_JAVA_OPTS</code>加在启动参数的最后,它的优先级最高,就很方便的控制所有的jvm进程内存大小了.</p>\n<p>上面有些东西可以脚本化的,尽量就脚本化,比如在<code>/etc/rc.d/rc.local</code>增加启动脚本<code>init.sh</code> .其他脚本分为 <code>init_network.sh</code> <code>init_env.sh</code> <code>init_common_app.sh</code> <code>init_app.sh</code></p>\n<h3 id=\"3-3-安装memcache\"><a href=\"#3-3-安装memcache\" class=\"headerlink\" title=\"3.3 安装memcache\"></a>3.3 安装memcache</h3><p>安装:</p>\n<pre><code>yum install memcached\n</code></pre><p>配置文件:</p>\n<pre><code>/etc/sysconfig/memcached\n</code></pre><p>命令:</p>\n<pre><code>service memcached start/stop/restart/status\n</code></pre><p>设置开机启动:</p>\n<pre><code>chkconfig memcached on\n</code></pre><p>修改<code>/etc/init.d/memcached</code>可以修改memcache启动参数</p>\n<h3 id=\"3-4-安装rabbitmq\"><a href=\"#3-4-安装rabbitmq\" class=\"headerlink\" title=\"3.4 安装rabbitmq\"></a>3.4 安装rabbitmq</h3><p>安装:</p>\n<pre><code>yum install rabbitmq\n #安装webui\n rabbitmq-plugins enable rabbitmq_management\n #启用guest账户 访问web ui\n echo &quot;[{rabbit, [{loopback_users, []}]}].&quot; &gt;/etc/rabbitmq/rabbitmq.config\n</code></pre><p>常用命令:</p>\n<pre><code>service rabbitmq-server stop/start/etc.\n</code></pre><p>web ui访问地址,账号密码guest/guest:</p>\n<pre><code>http://192.168.46.51:15672/\n</code></pre><p>设置开机启动:</p>\n<pre><code>chkconfig rabbitmq-server on\n</code></pre><h3 id=\"3-5-安装其他软件\"><a href=\"#3-5-安装其他软件\" class=\"headerlink\" title=\"3.5 安装其他软件\"></a>3.5 安装其他软件</h3><p>jdk/maven/memcache/zookeeper/rabbitmq/dubbo-monitor-simple/dubbo-admin</p>\n<h3 id=\"3-6-服务列表说明\"><a href=\"#3-6-服务列表说明\" class=\"headerlink\" title=\"3.6 服务列表说明\"></a>3.6 服务列表说明</h3><table>\n<thead>\n<tr>\n<th>服务</th>\n<th>服务端口</th>\n<th>web ui 端口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>memcache</td>\n<td>11211</td>\n<td>无</td>\n</tr>\n<tr>\n<td>zookeeper</td>\n<td>2181</td>\n<td>无</td>\n</tr>\n<tr>\n<td>rabbitmq</td>\n<td>5672</td>\n<td>15672</td>\n</tr>\n<tr>\n<td>dubbo-monitor</td>\n<td>7070</td>\n<td>7071</td>\n</tr>\n<tr>\n<td>dubbo-admin</td>\n<td>无</td>\n<td>7073</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-7-制作分发包\"><a href=\"#3-7-制作分发包\" class=\"headerlink\" title=\"3.7 制作分发包\"></a>3.7 制作分发包</h3><pre><code>vagrant package\n</code></pre><p>上面命令会在当前目录生成一个<code>package.box</code>文件,此文件拷贝到其他服务器,就可以快速搭建系统了.</p>\n<h3 id=\"3-8-常用vagrant-命令\"><a href=\"#3-8-常用vagrant-命令\" class=\"headerlink\" title=\"3.8 常用vagrant 命令\"></a>3.8 常用vagrant 命令</h3><pre><code>#初始化环境,此命令会生成Vagrantfile配置文件,如果当前目录有Vagrantfile,不要执行此命令,直接up吧\nvagrant init\n\n#启动虚拟机  \nvagrant up\n\n#关闭虚拟机  \nvagrant halt\n\n# 重新启动虚拟机,如果Vagrantfile被修改后,执行此命令才能生效.\n#但是修改cpu相关参数,此命令也不能重新加载配置,这个时候把虚拟机先停下来,\n#通过ssh tunneling在gui界面里调整\nvagrant reload \n\n#SSH至虚拟机\nvagrant ssh\n\n#查看虚拟机运行状态\nvagrant status\n\n# 销毁当前虚拟机\nvagrant destroy  \n\n#add box\nvagrant box add boxname xxx.box\n\n#remove box\n\nvagrant box remove boxname\n\n#list box\nvagrant box list\n</code></pre><h2 id=\"4-写在最后\"><a href=\"#4-写在最后\" class=\"headerlink\" title=\"4.写在最后\"></a>4.写在最后</h2><p><code>virtual box</code>的性能让人担忧,如果部署应用太多需要仔细权衡下,如果只是搭建单机环境,使用vagrant还是很ok的.</p>\n<p>[^1]: <a href=\"https://www.virtualbox.org/wiki/Linux_Downloads\" target=\"_blank\" rel=\"noopener\"><code>Virtual Box</code>下载地址</a><br>[^2]: <a href=\"https://www.centos.org/forums/viewtopic.php?t=5603\" target=\"_blank\" rel=\"noopener\">unable to find the sources of your current Linux kernel</a><br>[^3]: <a href=\"http://www.vagrantup.com/downloads.htmlhttp://www.vagrantup.com/downloads.html\" target=\"_blank\" rel=\"noopener\"><code>vagrant</code>下载地址</a><br>[^4]: <a href=\"https://github.com/mitchellh/vagrant/pull/1745\" target=\"_blank\" rel=\"noopener\">Static ip addresses on public networks</a><br>[^5]: <a href=\"https://www.centos.org/forums/viewtopic.php?t=4436\" target=\"_blank\" rel=\"noopener\">ext4 file system inconsistency</a><br>[^6]: <a href=\"https://www.virtualbox.org/manual/ch05.html#iocaching\" target=\"_blank\" rel=\"noopener\">Host I/O caching</a><br>[^7]: <a href=\"http://www.reddit.com/r/linux/comments/1tqlsz/adding_cpus_to_virtualbox_guests_makes_guests/\" target=\"_blank\" rel=\"noopener\">Adding CPUs to Virtualbox guests makes guests boot SLOWER</a><br>[^8]: <a href=\"http://www.vagrantbox.es/\" target=\"_blank\" rel=\"noopener\">vagrant base box</a><br>[^9]: <a href=\"https://github.com/2creatives/vagrant-centos/releases/download/v6.4.2/centos64-x86_64-20140116.box\" target=\"_blank\" rel=\"noopener\">vagrant base box CentOS 6.4 x86_64</a></p>\n"},{"title":"web服务器集群技术","date":"2013-08-12T13:52:17.000Z","_content":"\n\nweb服务器集群技术包括web负载均衡和http session 失效转移\n<!--more-->\n## 1.负载均衡\n\n负载均衡我们主要关注以下四点：\n\n### 1.1 实现负载均衡的算法\n\n实现的算法很多，可以参考[此文章](http://www.cnblogs.com/shanyou/archive/2012/11/09/2763272.html)。最好是选用通过检测后端服务器状态来实现最优的负载均衡。\n\n### 1.2 健康检查\n\n当一台服务器失效了，负载均衡器应当检测出失效并不再将请求分发到这台服务器上。同样，它也要检测服务器是否恢复正常，并恢复分发请求。\n\n健康检测要关注检测状态所消耗的时间，比如haproxy如下的配置：\n\n\t\tcheck inter 2000 rise 2 fall 3\n\n检测周期为2s，连续成功2次认为节点恢复，连续失败3次认为节点不能提供服务。这里就存在负载均衡和后端服务状态不一致的时间窗口6s，我们需要通过一些机制或者手段去掉这6s对用户的影响或者尽量减少对用户的影响。\n\n通过haproxy的redispatch机制，我们可以减少对用户的影响。通过在负载均衡上主动关闭流量，我们几乎可以做到完全屏蔽用户的影响(关闭流量会引导新请求到其他节点，对于正在处理的请求，我们最好是等一段时间，让他处理完，等待时间和影响用户感知，这个由业务来权衡)。\n\n### 1.3 会话粘滞\n\n机制很多，我觉得比较好的方式是在第一次http请求时向cookie写入节点信息(减少代理上网造成的不均衡)，后续的请求都转发到此节点。\n\n我们需要根据不同的应用选择是否启用会话粘滞。如果是接口调用，我们没有必要支持会话粘滞；如果是web页面，我们需要启用此特性。还需要注意的一点是，负载均衡上的会话超时时间设置应该大于或者等于web容器的会话超时时间设置。\n\n### 1.4 其他\n\n其他功能和负载均衡关系不是很大，但是可以放在负载均衡设备上来做。比如ssl卸载、gzip压缩、内容缓存。在我们访问量比较少的情况下，这些操作还是放在web容器来做吧，省钱。\n\n## 2. Session失效转移\n\nsession失效转移是说在用户访问的某节点挂掉后，用户还能够正常的获取session做操作，这里面通常会涉及到三个问题：\n\n### 2.1 全局http session id\n\n如果session不能唯一，这肯定要天下大乱，后面我会谈到在memcached-session-manager中怎么保证session id不重复\n\n### 2.2 如何备份会话状态\n\n常见的机制有：数据库备份、广播复制(所有集群内的web容器都保存所有的会话)、对等复制(每台服务器任意选择一台服务器备份)、中心状态服务器复制(session保存到中心服务器)、分布式缓存(现在大多数互联网企业选择的方案)\n\n### 2.3 备份的频率和粒度\n\n备份频率和粒度很影响性能和可靠性\n\n#### 2.3.1 备份频率：\n\n - 在web请求处理结束后备份 \n - 固定时间间隔备份\n\t\nmemcached-session-manager灵活的使用了web请求结束后备份和固定时间间隔机制检查，来提高性能。\n\n#### 2.3.2 备份粒度：\n\n- 整个会话\n\n\t每次都备份整个会话，这样可以带来易用性，但是性能不佳\n- 修改过的会话\n\n\t仅当会话修改后才备份会话。当“session.setAttribute()”或 “session.removeAttribute()”被调用后，则认为会话被修改过。所以这种方式，我们在修改会话内的对象时，必须主动调一次set/removeAttribute,让它知道这个会话已经被修改。我们可以在序列化对象时做压缩尽量减少网络的开销。\n- 修改过的属性\n\n\t这种方式带来最小的网络开销，可能会遇到一些问题。比如后端缓存服务器是否支持，属性之间的交叉引用如何识别等。属性交叉引用可以通过计算所有属性的hash值来判断某属性的修改是否会影响到其他属性，我们需要权衡网络开销和cpu消耗\n\n## 3. 我们的选择\n\n### 3.1 负载均衡\n\n负载均衡可以用硬件或者软件来实现。如果从成本的角度考虑，现阶段用软负载可能更好。我们需要从性能、稳定性、负载的产品重要性几个方面来考虑\n\n### 3.2 session失效转移\n\n我们采用缓存集群来保存session，数据的可用性、一致性交给缓存集群。备份粒度和频率我们通过组件来实现。\n\n#### 3.2.1 分布式缓存产品的选择\n\n备份的粒度是决定我们选择分布式缓存产品的一个重要因素。备份整个会话或者修改过的会话，我们可以选择key-value类型的nosql缓存组件。如果我们要支持`备份修改过的属性`,我们需要选择支持更多数据(比如支持内置的命名空间，MAP)结构的nosql缓存组件。\n\nmemcached、mongodb、redis、tair、mongodb、voldemort...有很多很多nosql产品我们可以选择。选择机会多了，选择也就越难了。\n\n根据CAP理论，我们只能在一致性、可用性、分区容错性上取舍，根据不同的应用场景来选择不同的处理方式。没有绝对的最优，只有不断的根据我们不同阶段的特点选择不同的产品。\n\n对于缓存来说最好的选择方案是选择支持灵活的路由机制(服务端路由或者client路由保证AP)，支持丰富的数据结构(从易用性和性能考虑)，支持数据持久化(保证A，最好是有这个特性，当然缓存嘛，只是来加快应用的，不应该把数据只存在缓存中，不能保证高可用)，支持多版本控制(尽量保证C)。\n\n下图是voldemort(有幸参与过此产品的应用开发)的物理架构图。大多数的nosql产品都面临这下面三种物理架构的抉择。\n\n![](http://www.project-voldemort.com/voldemort/images/physical_arch.png)\n\nmemcached、redis只支持客户端路由，严格意义上讲，它算不上分布式缓存组件。如果要达到高可用性和分区容错性，我们需要自己来存多份([NRW](http://www.project-voldemort.com/voldemort/design.html)Routing Parameters部分)\n\n选择mongodb、mongodb、tair、voldemort算是比较好的方案，鉴于我们的运维能力，可能hold不住，暂时只能呵呵了。tair相对来说，很适合我们的应用场景，支持比纯KV更丰富的数据结构，支持服务端路由，支持服务端NRW。\n\n目前我们选择memcached作为缓存组件。\n\n\n#### 3.2.2 session备份组件的选择\n\n我们可以通过filter来备份session。但是对于后端缓存组件选用memcached来说，这样会存在一个问题。存储的key为sessionid，通过hash或者[一致性hash](http://blog.csdn.net/sparkliang/article/details/5279393)来实现路由，这样在memcached集群拓扑变动时，会造成路由的迁移(拓扑变动造成路由到不同的memcached服务器)。对于应用来说，缓存丢失了。\n\n如果我们能把第一次选择memcached节点写入到sessionid里面，后续的请求都根据sessionid中的node信息选择memcached，这样在节点动态调整时，不会造成缓存丢失。但是我们在filter中不能改变sessionid的值，所以我们选择了[memcached-session-manager](https://code.google.com/p/memcached-session-manager/)。\n\n## 4.memcached-session-manager\n\n### 4.1 主要特性如下：\n\n\n- Supports Tomcat 6 and Tomcat 7\n\n- Handles sticky or non-sticky sessions\n\n\t启用session sticky时，memcached作为二级缓存，tomcat不挂掉时，不会从memcached取数据\n\n- No Single Point of Failure\n\n- Handles tomcat failover\n\n\ttomcat挂掉时从memcached读取session\n\n- Handles memcached failover\n\n\tnon-sticky模式下，由于jvm没有缓存session，它会把session存到两台memcached，保证可用性。\n\t在sticky模式下，jvm缓存着session，一台memcached也会存session，也保证了可用性。\n\n\t当然，这个只是相对的保证了可用性，不能完全保证可用性。\n\n- Comes with pluggable session serialization\n\n\t我们可以选择kryo作为序列化组件\n\n- Allows asynchronous session storage for faster response times\n\t\n\t在请求响应之前，异步写入session到memcached\n\n- Sessions are only sent to memcached if they're actually modified\n\n\t仅当session被修改时，才存储session\n\n- JMX management & monitoring\n\t\n\t提供JMX管理监控功能\n\n### 4.2 代码分析\n\n考虑到性能，我们只采用sticky模式(jvm和一个memcached中存session)，主要的功能实现如下：\n\n- session创建\n\n\ta.`request.getSession()`调用`MemcachedSessionService#createSession`,创建session\n\n\tb.用`org.apache.catalina.util.SessionIdGenerator`生成sessionid，\n\n\tc.在sessionid中加入memcached节点信息(`MemcachedSessionService.newSessionId`，通过`NodeIdService.getMemcachedNodeId`随机选择节点)\n\t\n\t注意：SessionIdGenerator只能保证jvm内的不重复，多个jvm下需要另外的id生成机制，如果加上jvmRoute可以避规这个问题。\n\n\n- session恢复\n\n\ta.首先在本地session缓存中找session，如果有此session。就用此session\n\n\tb.如果本地缓存没有session，则MemcachedSessionService.findSession通过用户请求传来的sessionid从memcached服务器找session\n\n\n- session存储\n\n\t在请求结束后(de.javakaffee.web.msm.RequestTrackingHostValve:173)，会检测session是否有修改(调用session.setAttribute标记此session被修改)。如果修改，(de.javakaffee.web.msm.BackupSessionService:205)创建一个BackupSessionTask，在检查到session内容改变后异步(通过序列化后的的byte数组做hash比较)写入memcached。\n\n\n- session过期策略\n\t\n\t如果仅仅使用session.maxInactiveInterval，在session初始化时设置此key的过期时间。这需要在每次session被访问时都修改memcached中的getLastAccessedTime，这样做效率不是太好。所以在memcached-session-manager通过容器来提供周期性的回调，检查需要过期的时间。\n\n\t通过ContainerBackgroundProcessor线程来周期性的回调MemcachedBackupSessionManager.backgroundProcess()方法。过期时间为：session.maxInactiveInterval - timeIdle\n\n\t注意：需要保证memcached和应用服务器时间一致\n\n- session销毁\n\n\tMemcachedBackupSessionManager.removeInternal，会把memcached和jvm中的session清理掉\n\n\t注意：在销毁session时如果memcached挂掉，会出现不一致的情况。\n\n- 可靠性\n\n\t选择采用sticky模式时，没有多份复制数据。如果很不幸，tomcat和memcached都挂了，session就丢失了。见官方[maillist](https://groups.google.com/forum/#!topic/memcached-session-manager/W6z6eSuhAJ0)。\n\n\t在非sticky模式下，session会保存到两个memcached(MemcachedSessionService:1079)。但是tomcat本地没有存储session，会影响所有的请求性能。\n\n\n- memcached状态检测\n\n\t在创建、查找session、恢复session时，都会通过NodeAvailabilityCache检测memcached状态，检测后端memcached状态间隔50ms(MemcachedNodesManager.NODE_AVAILABILITY_CACHE_TTL)\n\n### 4.3 最佳实践\n\n根据上面的代码分析，以下的最佳实践适合我们。\n\n对于我们的开发同学，session里面的对象修改后，需要setAttribute下。\n\n对于运维同学：\n\n- 设置tomcat jvmRoute，避免sessionid重复\n\n- MemcachedSessionService.setMemcachedProtocol设置二进制协议\n\n- MemcachedSessionService.setSessionBackupTimeout 默认异步操作100ms超时，在网络不好的情况下会出现大量的异常，设置长点。\n\n- MemcachedSessionService.setOperationTimeout是memcached客户端和服务端通信时的超时时间,不能设置太短\n\n","source":"_posts/web-layer-cluster.md","raw":"---\ntitle: web服务器集群技术\ndate: 2013-08-12 21:52:17\ncategories: java\ntags:\n  - web cluster\n---\n\n\nweb服务器集群技术包括web负载均衡和http session 失效转移\n<!--more-->\n## 1.负载均衡\n\n负载均衡我们主要关注以下四点：\n\n### 1.1 实现负载均衡的算法\n\n实现的算法很多，可以参考[此文章](http://www.cnblogs.com/shanyou/archive/2012/11/09/2763272.html)。最好是选用通过检测后端服务器状态来实现最优的负载均衡。\n\n### 1.2 健康检查\n\n当一台服务器失效了，负载均衡器应当检测出失效并不再将请求分发到这台服务器上。同样，它也要检测服务器是否恢复正常，并恢复分发请求。\n\n健康检测要关注检测状态所消耗的时间，比如haproxy如下的配置：\n\n\t\tcheck inter 2000 rise 2 fall 3\n\n检测周期为2s，连续成功2次认为节点恢复，连续失败3次认为节点不能提供服务。这里就存在负载均衡和后端服务状态不一致的时间窗口6s，我们需要通过一些机制或者手段去掉这6s对用户的影响或者尽量减少对用户的影响。\n\n通过haproxy的redispatch机制，我们可以减少对用户的影响。通过在负载均衡上主动关闭流量，我们几乎可以做到完全屏蔽用户的影响(关闭流量会引导新请求到其他节点，对于正在处理的请求，我们最好是等一段时间，让他处理完，等待时间和影响用户感知，这个由业务来权衡)。\n\n### 1.3 会话粘滞\n\n机制很多，我觉得比较好的方式是在第一次http请求时向cookie写入节点信息(减少代理上网造成的不均衡)，后续的请求都转发到此节点。\n\n我们需要根据不同的应用选择是否启用会话粘滞。如果是接口调用，我们没有必要支持会话粘滞；如果是web页面，我们需要启用此特性。还需要注意的一点是，负载均衡上的会话超时时间设置应该大于或者等于web容器的会话超时时间设置。\n\n### 1.4 其他\n\n其他功能和负载均衡关系不是很大，但是可以放在负载均衡设备上来做。比如ssl卸载、gzip压缩、内容缓存。在我们访问量比较少的情况下，这些操作还是放在web容器来做吧，省钱。\n\n## 2. Session失效转移\n\nsession失效转移是说在用户访问的某节点挂掉后，用户还能够正常的获取session做操作，这里面通常会涉及到三个问题：\n\n### 2.1 全局http session id\n\n如果session不能唯一，这肯定要天下大乱，后面我会谈到在memcached-session-manager中怎么保证session id不重复\n\n### 2.2 如何备份会话状态\n\n常见的机制有：数据库备份、广播复制(所有集群内的web容器都保存所有的会话)、对等复制(每台服务器任意选择一台服务器备份)、中心状态服务器复制(session保存到中心服务器)、分布式缓存(现在大多数互联网企业选择的方案)\n\n### 2.3 备份的频率和粒度\n\n备份频率和粒度很影响性能和可靠性\n\n#### 2.3.1 备份频率：\n\n - 在web请求处理结束后备份 \n - 固定时间间隔备份\n\t\nmemcached-session-manager灵活的使用了web请求结束后备份和固定时间间隔机制检查，来提高性能。\n\n#### 2.3.2 备份粒度：\n\n- 整个会话\n\n\t每次都备份整个会话，这样可以带来易用性，但是性能不佳\n- 修改过的会话\n\n\t仅当会话修改后才备份会话。当“session.setAttribute()”或 “session.removeAttribute()”被调用后，则认为会话被修改过。所以这种方式，我们在修改会话内的对象时，必须主动调一次set/removeAttribute,让它知道这个会话已经被修改。我们可以在序列化对象时做压缩尽量减少网络的开销。\n- 修改过的属性\n\n\t这种方式带来最小的网络开销，可能会遇到一些问题。比如后端缓存服务器是否支持，属性之间的交叉引用如何识别等。属性交叉引用可以通过计算所有属性的hash值来判断某属性的修改是否会影响到其他属性，我们需要权衡网络开销和cpu消耗\n\n## 3. 我们的选择\n\n### 3.1 负载均衡\n\n负载均衡可以用硬件或者软件来实现。如果从成本的角度考虑，现阶段用软负载可能更好。我们需要从性能、稳定性、负载的产品重要性几个方面来考虑\n\n### 3.2 session失效转移\n\n我们采用缓存集群来保存session，数据的可用性、一致性交给缓存集群。备份粒度和频率我们通过组件来实现。\n\n#### 3.2.1 分布式缓存产品的选择\n\n备份的粒度是决定我们选择分布式缓存产品的一个重要因素。备份整个会话或者修改过的会话，我们可以选择key-value类型的nosql缓存组件。如果我们要支持`备份修改过的属性`,我们需要选择支持更多数据(比如支持内置的命名空间，MAP)结构的nosql缓存组件。\n\nmemcached、mongodb、redis、tair、mongodb、voldemort...有很多很多nosql产品我们可以选择。选择机会多了，选择也就越难了。\n\n根据CAP理论，我们只能在一致性、可用性、分区容错性上取舍，根据不同的应用场景来选择不同的处理方式。没有绝对的最优，只有不断的根据我们不同阶段的特点选择不同的产品。\n\n对于缓存来说最好的选择方案是选择支持灵活的路由机制(服务端路由或者client路由保证AP)，支持丰富的数据结构(从易用性和性能考虑)，支持数据持久化(保证A，最好是有这个特性，当然缓存嘛，只是来加快应用的，不应该把数据只存在缓存中，不能保证高可用)，支持多版本控制(尽量保证C)。\n\n下图是voldemort(有幸参与过此产品的应用开发)的物理架构图。大多数的nosql产品都面临这下面三种物理架构的抉择。\n\n![](http://www.project-voldemort.com/voldemort/images/physical_arch.png)\n\nmemcached、redis只支持客户端路由，严格意义上讲，它算不上分布式缓存组件。如果要达到高可用性和分区容错性，我们需要自己来存多份([NRW](http://www.project-voldemort.com/voldemort/design.html)Routing Parameters部分)\n\n选择mongodb、mongodb、tair、voldemort算是比较好的方案，鉴于我们的运维能力，可能hold不住，暂时只能呵呵了。tair相对来说，很适合我们的应用场景，支持比纯KV更丰富的数据结构，支持服务端路由，支持服务端NRW。\n\n目前我们选择memcached作为缓存组件。\n\n\n#### 3.2.2 session备份组件的选择\n\n我们可以通过filter来备份session。但是对于后端缓存组件选用memcached来说，这样会存在一个问题。存储的key为sessionid，通过hash或者[一致性hash](http://blog.csdn.net/sparkliang/article/details/5279393)来实现路由，这样在memcached集群拓扑变动时，会造成路由的迁移(拓扑变动造成路由到不同的memcached服务器)。对于应用来说，缓存丢失了。\n\n如果我们能把第一次选择memcached节点写入到sessionid里面，后续的请求都根据sessionid中的node信息选择memcached，这样在节点动态调整时，不会造成缓存丢失。但是我们在filter中不能改变sessionid的值，所以我们选择了[memcached-session-manager](https://code.google.com/p/memcached-session-manager/)。\n\n## 4.memcached-session-manager\n\n### 4.1 主要特性如下：\n\n\n- Supports Tomcat 6 and Tomcat 7\n\n- Handles sticky or non-sticky sessions\n\n\t启用session sticky时，memcached作为二级缓存，tomcat不挂掉时，不会从memcached取数据\n\n- No Single Point of Failure\n\n- Handles tomcat failover\n\n\ttomcat挂掉时从memcached读取session\n\n- Handles memcached failover\n\n\tnon-sticky模式下，由于jvm没有缓存session，它会把session存到两台memcached，保证可用性。\n\t在sticky模式下，jvm缓存着session，一台memcached也会存session，也保证了可用性。\n\n\t当然，这个只是相对的保证了可用性，不能完全保证可用性。\n\n- Comes with pluggable session serialization\n\n\t我们可以选择kryo作为序列化组件\n\n- Allows asynchronous session storage for faster response times\n\t\n\t在请求响应之前，异步写入session到memcached\n\n- Sessions are only sent to memcached if they're actually modified\n\n\t仅当session被修改时，才存储session\n\n- JMX management & monitoring\n\t\n\t提供JMX管理监控功能\n\n### 4.2 代码分析\n\n考虑到性能，我们只采用sticky模式(jvm和一个memcached中存session)，主要的功能实现如下：\n\n- session创建\n\n\ta.`request.getSession()`调用`MemcachedSessionService#createSession`,创建session\n\n\tb.用`org.apache.catalina.util.SessionIdGenerator`生成sessionid，\n\n\tc.在sessionid中加入memcached节点信息(`MemcachedSessionService.newSessionId`，通过`NodeIdService.getMemcachedNodeId`随机选择节点)\n\t\n\t注意：SessionIdGenerator只能保证jvm内的不重复，多个jvm下需要另外的id生成机制，如果加上jvmRoute可以避规这个问题。\n\n\n- session恢复\n\n\ta.首先在本地session缓存中找session，如果有此session。就用此session\n\n\tb.如果本地缓存没有session，则MemcachedSessionService.findSession通过用户请求传来的sessionid从memcached服务器找session\n\n\n- session存储\n\n\t在请求结束后(de.javakaffee.web.msm.RequestTrackingHostValve:173)，会检测session是否有修改(调用session.setAttribute标记此session被修改)。如果修改，(de.javakaffee.web.msm.BackupSessionService:205)创建一个BackupSessionTask，在检查到session内容改变后异步(通过序列化后的的byte数组做hash比较)写入memcached。\n\n\n- session过期策略\n\t\n\t如果仅仅使用session.maxInactiveInterval，在session初始化时设置此key的过期时间。这需要在每次session被访问时都修改memcached中的getLastAccessedTime，这样做效率不是太好。所以在memcached-session-manager通过容器来提供周期性的回调，检查需要过期的时间。\n\n\t通过ContainerBackgroundProcessor线程来周期性的回调MemcachedBackupSessionManager.backgroundProcess()方法。过期时间为：session.maxInactiveInterval - timeIdle\n\n\t注意：需要保证memcached和应用服务器时间一致\n\n- session销毁\n\n\tMemcachedBackupSessionManager.removeInternal，会把memcached和jvm中的session清理掉\n\n\t注意：在销毁session时如果memcached挂掉，会出现不一致的情况。\n\n- 可靠性\n\n\t选择采用sticky模式时，没有多份复制数据。如果很不幸，tomcat和memcached都挂了，session就丢失了。见官方[maillist](https://groups.google.com/forum/#!topic/memcached-session-manager/W6z6eSuhAJ0)。\n\n\t在非sticky模式下，session会保存到两个memcached(MemcachedSessionService:1079)。但是tomcat本地没有存储session，会影响所有的请求性能。\n\n\n- memcached状态检测\n\n\t在创建、查找session、恢复session时，都会通过NodeAvailabilityCache检测memcached状态，检测后端memcached状态间隔50ms(MemcachedNodesManager.NODE_AVAILABILITY_CACHE_TTL)\n\n### 4.3 最佳实践\n\n根据上面的代码分析，以下的最佳实践适合我们。\n\n对于我们的开发同学，session里面的对象修改后，需要setAttribute下。\n\n对于运维同学：\n\n- 设置tomcat jvmRoute，避免sessionid重复\n\n- MemcachedSessionService.setMemcachedProtocol设置二进制协议\n\n- MemcachedSessionService.setSessionBackupTimeout 默认异步操作100ms超时，在网络不好的情况下会出现大量的异常，设置长点。\n\n- MemcachedSessionService.setOperationTimeout是memcached客户端和服务端通信时的超时时间,不能设置太短\n\n","slug":"web-layer-cluster","published":1,"updated":"2018-04-01T16:53:17.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksik003zp0ug5lbhmj6l","content":"<p>web服务器集群技术包括web负载均衡和http session 失效转移<br><a id=\"more\"></a></p>\n<h2 id=\"1-负载均衡\"><a href=\"#1-负载均衡\" class=\"headerlink\" title=\"1.负载均衡\"></a>1.负载均衡</h2><p>负载均衡我们主要关注以下四点：</p>\n<h3 id=\"1-1-实现负载均衡的算法\"><a href=\"#1-1-实现负载均衡的算法\" class=\"headerlink\" title=\"1.1 实现负载均衡的算法\"></a>1.1 实现负载均衡的算法</h3><p>实现的算法很多，可以参考<a href=\"http://www.cnblogs.com/shanyou/archive/2012/11/09/2763272.html\" target=\"_blank\" rel=\"noopener\">此文章</a>。最好是选用通过检测后端服务器状态来实现最优的负载均衡。</p>\n<h3 id=\"1-2-健康检查\"><a href=\"#1-2-健康检查\" class=\"headerlink\" title=\"1.2 健康检查\"></a>1.2 健康检查</h3><p>当一台服务器失效了，负载均衡器应当检测出失效并不再将请求分发到这台服务器上。同样，它也要检测服务器是否恢复正常，并恢复分发请求。</p>\n<p>健康检测要关注检测状态所消耗的时间，比如haproxy如下的配置：</p>\n<pre><code>check inter 2000 rise 2 fall 3\n</code></pre><p>检测周期为2s，连续成功2次认为节点恢复，连续失败3次认为节点不能提供服务。这里就存在负载均衡和后端服务状态不一致的时间窗口6s，我们需要通过一些机制或者手段去掉这6s对用户的影响或者尽量减少对用户的影响。</p>\n<p>通过haproxy的redispatch机制，我们可以减少对用户的影响。通过在负载均衡上主动关闭流量，我们几乎可以做到完全屏蔽用户的影响(关闭流量会引导新请求到其他节点，对于正在处理的请求，我们最好是等一段时间，让他处理完，等待时间和影响用户感知，这个由业务来权衡)。</p>\n<h3 id=\"1-3-会话粘滞\"><a href=\"#1-3-会话粘滞\" class=\"headerlink\" title=\"1.3 会话粘滞\"></a>1.3 会话粘滞</h3><p>机制很多，我觉得比较好的方式是在第一次http请求时向cookie写入节点信息(减少代理上网造成的不均衡)，后续的请求都转发到此节点。</p>\n<p>我们需要根据不同的应用选择是否启用会话粘滞。如果是接口调用，我们没有必要支持会话粘滞；如果是web页面，我们需要启用此特性。还需要注意的一点是，负载均衡上的会话超时时间设置应该大于或者等于web容器的会话超时时间设置。</p>\n<h3 id=\"1-4-其他\"><a href=\"#1-4-其他\" class=\"headerlink\" title=\"1.4 其他\"></a>1.4 其他</h3><p>其他功能和负载均衡关系不是很大，但是可以放在负载均衡设备上来做。比如ssl卸载、gzip压缩、内容缓存。在我们访问量比较少的情况下，这些操作还是放在web容器来做吧，省钱。</p>\n<h2 id=\"2-Session失效转移\"><a href=\"#2-Session失效转移\" class=\"headerlink\" title=\"2. Session失效转移\"></a>2. Session失效转移</h2><p>session失效转移是说在用户访问的某节点挂掉后，用户还能够正常的获取session做操作，这里面通常会涉及到三个问题：</p>\n<h3 id=\"2-1-全局http-session-id\"><a href=\"#2-1-全局http-session-id\" class=\"headerlink\" title=\"2.1 全局http session id\"></a>2.1 全局http session id</h3><p>如果session不能唯一，这肯定要天下大乱，后面我会谈到在memcached-session-manager中怎么保证session id不重复</p>\n<h3 id=\"2-2-如何备份会话状态\"><a href=\"#2-2-如何备份会话状态\" class=\"headerlink\" title=\"2.2 如何备份会话状态\"></a>2.2 如何备份会话状态</h3><p>常见的机制有：数据库备份、广播复制(所有集群内的web容器都保存所有的会话)、对等复制(每台服务器任意选择一台服务器备份)、中心状态服务器复制(session保存到中心服务器)、分布式缓存(现在大多数互联网企业选择的方案)</p>\n<h3 id=\"2-3-备份的频率和粒度\"><a href=\"#2-3-备份的频率和粒度\" class=\"headerlink\" title=\"2.3 备份的频率和粒度\"></a>2.3 备份的频率和粒度</h3><p>备份频率和粒度很影响性能和可靠性</p>\n<h4 id=\"2-3-1-备份频率：\"><a href=\"#2-3-1-备份频率：\" class=\"headerlink\" title=\"2.3.1 备份频率：\"></a>2.3.1 备份频率：</h4><ul>\n<li>在web请求处理结束后备份 </li>\n<li>固定时间间隔备份</li>\n</ul>\n<p>memcached-session-manager灵活的使用了web请求结束后备份和固定时间间隔机制检查，来提高性能。</p>\n<h4 id=\"2-3-2-备份粒度：\"><a href=\"#2-3-2-备份粒度：\" class=\"headerlink\" title=\"2.3.2 备份粒度：\"></a>2.3.2 备份粒度：</h4><ul>\n<li><p>整个会话</p>\n<p>  每次都备份整个会话，这样可以带来易用性，但是性能不佳</p>\n</li>\n<li><p>修改过的会话</p>\n<p>  仅当会话修改后才备份会话。当“session.setAttribute()”或 “session.removeAttribute()”被调用后，则认为会话被修改过。所以这种方式，我们在修改会话内的对象时，必须主动调一次set/removeAttribute,让它知道这个会话已经被修改。我们可以在序列化对象时做压缩尽量减少网络的开销。</p>\n</li>\n<li><p>修改过的属性</p>\n<p>  这种方式带来最小的网络开销，可能会遇到一些问题。比如后端缓存服务器是否支持，属性之间的交叉引用如何识别等。属性交叉引用可以通过计算所有属性的hash值来判断某属性的修改是否会影响到其他属性，我们需要权衡网络开销和cpu消耗</p>\n</li>\n</ul>\n<h2 id=\"3-我们的选择\"><a href=\"#3-我们的选择\" class=\"headerlink\" title=\"3. 我们的选择\"></a>3. 我们的选择</h2><h3 id=\"3-1-负载均衡\"><a href=\"#3-1-负载均衡\" class=\"headerlink\" title=\"3.1 负载均衡\"></a>3.1 负载均衡</h3><p>负载均衡可以用硬件或者软件来实现。如果从成本的角度考虑，现阶段用软负载可能更好。我们需要从性能、稳定性、负载的产品重要性几个方面来考虑</p>\n<h3 id=\"3-2-session失效转移\"><a href=\"#3-2-session失效转移\" class=\"headerlink\" title=\"3.2 session失效转移\"></a>3.2 session失效转移</h3><p>我们采用缓存集群来保存session，数据的可用性、一致性交给缓存集群。备份粒度和频率我们通过组件来实现。</p>\n<h4 id=\"3-2-1-分布式缓存产品的选择\"><a href=\"#3-2-1-分布式缓存产品的选择\" class=\"headerlink\" title=\"3.2.1 分布式缓存产品的选择\"></a>3.2.1 分布式缓存产品的选择</h4><p>备份的粒度是决定我们选择分布式缓存产品的一个重要因素。备份整个会话或者修改过的会话，我们可以选择key-value类型的nosql缓存组件。如果我们要支持<code>备份修改过的属性</code>,我们需要选择支持更多数据(比如支持内置的命名空间，MAP)结构的nosql缓存组件。</p>\n<p>memcached、mongodb、redis、tair、mongodb、voldemort…有很多很多nosql产品我们可以选择。选择机会多了，选择也就越难了。</p>\n<p>根据CAP理论，我们只能在一致性、可用性、分区容错性上取舍，根据不同的应用场景来选择不同的处理方式。没有绝对的最优，只有不断的根据我们不同阶段的特点选择不同的产品。</p>\n<p>对于缓存来说最好的选择方案是选择支持灵活的路由机制(服务端路由或者client路由保证AP)，支持丰富的数据结构(从易用性和性能考虑)，支持数据持久化(保证A，最好是有这个特性，当然缓存嘛，只是来加快应用的，不应该把数据只存在缓存中，不能保证高可用)，支持多版本控制(尽量保证C)。</p>\n<p>下图是voldemort(有幸参与过此产品的应用开发)的物理架构图。大多数的nosql产品都面临这下面三种物理架构的抉择。</p>\n<p><img src=\"http://www.project-voldemort.com/voldemort/images/physical_arch.png\" alt=\"\"></p>\n<p>memcached、redis只支持客户端路由，严格意义上讲，它算不上分布式缓存组件。如果要达到高可用性和分区容错性，我们需要自己来存多份(<a href=\"http://www.project-voldemort.com/voldemort/design.html\" target=\"_blank\" rel=\"noopener\">NRW</a>Routing Parameters部分)</p>\n<p>选择mongodb、mongodb、tair、voldemort算是比较好的方案，鉴于我们的运维能力，可能hold不住，暂时只能呵呵了。tair相对来说，很适合我们的应用场景，支持比纯KV更丰富的数据结构，支持服务端路由，支持服务端NRW。</p>\n<p>目前我们选择memcached作为缓存组件。</p>\n<h4 id=\"3-2-2-session备份组件的选择\"><a href=\"#3-2-2-session备份组件的选择\" class=\"headerlink\" title=\"3.2.2 session备份组件的选择\"></a>3.2.2 session备份组件的选择</h4><p>我们可以通过filter来备份session。但是对于后端缓存组件选用memcached来说，这样会存在一个问题。存储的key为sessionid，通过hash或者<a href=\"http://blog.csdn.net/sparkliang/article/details/5279393\" target=\"_blank\" rel=\"noopener\">一致性hash</a>来实现路由，这样在memcached集群拓扑变动时，会造成路由的迁移(拓扑变动造成路由到不同的memcached服务器)。对于应用来说，缓存丢失了。</p>\n<p>如果我们能把第一次选择memcached节点写入到sessionid里面，后续的请求都根据sessionid中的node信息选择memcached，这样在节点动态调整时，不会造成缓存丢失。但是我们在filter中不能改变sessionid的值，所以我们选择了<a href=\"https://code.google.com/p/memcached-session-manager/\" target=\"_blank\" rel=\"noopener\">memcached-session-manager</a>。</p>\n<h2 id=\"4-memcached-session-manager\"><a href=\"#4-memcached-session-manager\" class=\"headerlink\" title=\"4.memcached-session-manager\"></a>4.memcached-session-manager</h2><h3 id=\"4-1-主要特性如下：\"><a href=\"#4-1-主要特性如下：\" class=\"headerlink\" title=\"4.1 主要特性如下：\"></a>4.1 主要特性如下：</h3><ul>\n<li><p>Supports Tomcat 6 and Tomcat 7</p>\n</li>\n<li><p>Handles sticky or non-sticky sessions</p>\n<p>  启用session sticky时，memcached作为二级缓存，tomcat不挂掉时，不会从memcached取数据</p>\n</li>\n<li><p>No Single Point of Failure</p>\n</li>\n<li><p>Handles tomcat failover</p>\n<p>  tomcat挂掉时从memcached读取session</p>\n</li>\n<li><p>Handles memcached failover</p>\n<p>  non-sticky模式下，由于jvm没有缓存session，它会把session存到两台memcached，保证可用性。<br>  在sticky模式下，jvm缓存着session，一台memcached也会存session，也保证了可用性。</p>\n<p>  当然，这个只是相对的保证了可用性，不能完全保证可用性。</p>\n</li>\n<li><p>Comes with pluggable session serialization</p>\n<p>  我们可以选择kryo作为序列化组件</p>\n</li>\n<li><p>Allows asynchronous session storage for faster response times</p>\n<p>  在请求响应之前，异步写入session到memcached</p>\n</li>\n<li><p>Sessions are only sent to memcached if they’re actually modified</p>\n<p>  仅当session被修改时，才存储session</p>\n</li>\n<li><p>JMX management &amp; monitoring</p>\n<p>  提供JMX管理监控功能</p>\n</li>\n</ul>\n<h3 id=\"4-2-代码分析\"><a href=\"#4-2-代码分析\" class=\"headerlink\" title=\"4.2 代码分析\"></a>4.2 代码分析</h3><p>考虑到性能，我们只采用sticky模式(jvm和一个memcached中存session)，主要的功能实现如下：</p>\n<ul>\n<li><p>session创建</p>\n<p>  a.<code>request.getSession()</code>调用<code>MemcachedSessionService#createSession</code>,创建session</p>\n<p>  b.用<code>org.apache.catalina.util.SessionIdGenerator</code>生成sessionid，</p>\n<p>  c.在sessionid中加入memcached节点信息(<code>MemcachedSessionService.newSessionId</code>，通过<code>NodeIdService.getMemcachedNodeId</code>随机选择节点)</p>\n<p>  注意：SessionIdGenerator只能保证jvm内的不重复，多个jvm下需要另外的id生成机制，如果加上jvmRoute可以避规这个问题。</p>\n</li>\n</ul>\n<ul>\n<li><p>session恢复</p>\n<p>  a.首先在本地session缓存中找session，如果有此session。就用此session</p>\n<p>  b.如果本地缓存没有session，则MemcachedSessionService.findSession通过用户请求传来的sessionid从memcached服务器找session</p>\n</li>\n</ul>\n<ul>\n<li><p>session存储</p>\n<p>  在请求结束后(de.javakaffee.web.msm.RequestTrackingHostValve:173)，会检测session是否有修改(调用session.setAttribute标记此session被修改)。如果修改，(de.javakaffee.web.msm.BackupSessionService:205)创建一个BackupSessionTask，在检查到session内容改变后异步(通过序列化后的的byte数组做hash比较)写入memcached。</p>\n</li>\n</ul>\n<ul>\n<li><p>session过期策略</p>\n<p>  如果仅仅使用session.maxInactiveInterval，在session初始化时设置此key的过期时间。这需要在每次session被访问时都修改memcached中的getLastAccessedTime，这样做效率不是太好。所以在memcached-session-manager通过容器来提供周期性的回调，检查需要过期的时间。</p>\n<p>  通过ContainerBackgroundProcessor线程来周期性的回调MemcachedBackupSessionManager.backgroundProcess()方法。过期时间为：session.maxInactiveInterval - timeIdle</p>\n<p>  注意：需要保证memcached和应用服务器时间一致</p>\n</li>\n<li><p>session销毁</p>\n<p>  MemcachedBackupSessionManager.removeInternal，会把memcached和jvm中的session清理掉</p>\n<p>  注意：在销毁session时如果memcached挂掉，会出现不一致的情况。</p>\n</li>\n<li><p>可靠性</p>\n<p>  选择采用sticky模式时，没有多份复制数据。如果很不幸，tomcat和memcached都挂了，session就丢失了。见官方<a href=\"https://groups.google.com/forum/#!topic/memcached-session-manager/W6z6eSuhAJ0\" target=\"_blank\" rel=\"noopener\">maillist</a>。</p>\n<p>  在非sticky模式下，session会保存到两个memcached(MemcachedSessionService:1079)。但是tomcat本地没有存储session，会影响所有的请求性能。</p>\n</li>\n</ul>\n<ul>\n<li><p>memcached状态检测</p>\n<p>  在创建、查找session、恢复session时，都会通过NodeAvailabilityCache检测memcached状态，检测后端memcached状态间隔50ms(MemcachedNodesManager.NODE_AVAILABILITY_CACHE_TTL)</p>\n</li>\n</ul>\n<h3 id=\"4-3-最佳实践\"><a href=\"#4-3-最佳实践\" class=\"headerlink\" title=\"4.3 最佳实践\"></a>4.3 最佳实践</h3><p>根据上面的代码分析，以下的最佳实践适合我们。</p>\n<p>对于我们的开发同学，session里面的对象修改后，需要setAttribute下。</p>\n<p>对于运维同学：</p>\n<ul>\n<li><p>设置tomcat jvmRoute，避免sessionid重复</p>\n</li>\n<li><p>MemcachedSessionService.setMemcachedProtocol设置二进制协议</p>\n</li>\n<li><p>MemcachedSessionService.setSessionBackupTimeout 默认异步操作100ms超时，在网络不好的情况下会出现大量的异常，设置长点。</p>\n</li>\n<li><p>MemcachedSessionService.setOperationTimeout是memcached客户端和服务端通信时的超时时间,不能设置太短</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>web服务器集群技术包括web负载均衡和http session 失效转移<br></p>","more":"<p></p>\n<h2 id=\"1-负载均衡\"><a href=\"#1-负载均衡\" class=\"headerlink\" title=\"1.负载均衡\"></a>1.负载均衡</h2><p>负载均衡我们主要关注以下四点：</p>\n<h3 id=\"1-1-实现负载均衡的算法\"><a href=\"#1-1-实现负载均衡的算法\" class=\"headerlink\" title=\"1.1 实现负载均衡的算法\"></a>1.1 实现负载均衡的算法</h3><p>实现的算法很多，可以参考<a href=\"http://www.cnblogs.com/shanyou/archive/2012/11/09/2763272.html\" target=\"_blank\" rel=\"noopener\">此文章</a>。最好是选用通过检测后端服务器状态来实现最优的负载均衡。</p>\n<h3 id=\"1-2-健康检查\"><a href=\"#1-2-健康检查\" class=\"headerlink\" title=\"1.2 健康检查\"></a>1.2 健康检查</h3><p>当一台服务器失效了，负载均衡器应当检测出失效并不再将请求分发到这台服务器上。同样，它也要检测服务器是否恢复正常，并恢复分发请求。</p>\n<p>健康检测要关注检测状态所消耗的时间，比如haproxy如下的配置：</p>\n<pre><code>check inter 2000 rise 2 fall 3\n</code></pre><p>检测周期为2s，连续成功2次认为节点恢复，连续失败3次认为节点不能提供服务。这里就存在负载均衡和后端服务状态不一致的时间窗口6s，我们需要通过一些机制或者手段去掉这6s对用户的影响或者尽量减少对用户的影响。</p>\n<p>通过haproxy的redispatch机制，我们可以减少对用户的影响。通过在负载均衡上主动关闭流量，我们几乎可以做到完全屏蔽用户的影响(关闭流量会引导新请求到其他节点，对于正在处理的请求，我们最好是等一段时间，让他处理完，等待时间和影响用户感知，这个由业务来权衡)。</p>\n<h3 id=\"1-3-会话粘滞\"><a href=\"#1-3-会话粘滞\" class=\"headerlink\" title=\"1.3 会话粘滞\"></a>1.3 会话粘滞</h3><p>机制很多，我觉得比较好的方式是在第一次http请求时向cookie写入节点信息(减少代理上网造成的不均衡)，后续的请求都转发到此节点。</p>\n<p>我们需要根据不同的应用选择是否启用会话粘滞。如果是接口调用，我们没有必要支持会话粘滞；如果是web页面，我们需要启用此特性。还需要注意的一点是，负载均衡上的会话超时时间设置应该大于或者等于web容器的会话超时时间设置。</p>\n<h3 id=\"1-4-其他\"><a href=\"#1-4-其他\" class=\"headerlink\" title=\"1.4 其他\"></a>1.4 其他</h3><p>其他功能和负载均衡关系不是很大，但是可以放在负载均衡设备上来做。比如ssl卸载、gzip压缩、内容缓存。在我们访问量比较少的情况下，这些操作还是放在web容器来做吧，省钱。</p>\n<h2 id=\"2-Session失效转移\"><a href=\"#2-Session失效转移\" class=\"headerlink\" title=\"2. Session失效转移\"></a>2. Session失效转移</h2><p>session失效转移是说在用户访问的某节点挂掉后，用户还能够正常的获取session做操作，这里面通常会涉及到三个问题：</p>\n<h3 id=\"2-1-全局http-session-id\"><a href=\"#2-1-全局http-session-id\" class=\"headerlink\" title=\"2.1 全局http session id\"></a>2.1 全局http session id</h3><p>如果session不能唯一，这肯定要天下大乱，后面我会谈到在memcached-session-manager中怎么保证session id不重复</p>\n<h3 id=\"2-2-如何备份会话状态\"><a href=\"#2-2-如何备份会话状态\" class=\"headerlink\" title=\"2.2 如何备份会话状态\"></a>2.2 如何备份会话状态</h3><p>常见的机制有：数据库备份、广播复制(所有集群内的web容器都保存所有的会话)、对等复制(每台服务器任意选择一台服务器备份)、中心状态服务器复制(session保存到中心服务器)、分布式缓存(现在大多数互联网企业选择的方案)</p>\n<h3 id=\"2-3-备份的频率和粒度\"><a href=\"#2-3-备份的频率和粒度\" class=\"headerlink\" title=\"2.3 备份的频率和粒度\"></a>2.3 备份的频率和粒度</h3><p>备份频率和粒度很影响性能和可靠性</p>\n<h4 id=\"2-3-1-备份频率：\"><a href=\"#2-3-1-备份频率：\" class=\"headerlink\" title=\"2.3.1 备份频率：\"></a>2.3.1 备份频率：</h4><ul>\n<li>在web请求处理结束后备份 </li>\n<li>固定时间间隔备份</li>\n</ul>\n<p>memcached-session-manager灵活的使用了web请求结束后备份和固定时间间隔机制检查，来提高性能。</p>\n<h4 id=\"2-3-2-备份粒度：\"><a href=\"#2-3-2-备份粒度：\" class=\"headerlink\" title=\"2.3.2 备份粒度：\"></a>2.3.2 备份粒度：</h4><ul>\n<li><p>整个会话</p>\n<p>  每次都备份整个会话，这样可以带来易用性，但是性能不佳</p>\n</li>\n<li><p>修改过的会话</p>\n<p>  仅当会话修改后才备份会话。当“session.setAttribute()”或 “session.removeAttribute()”被调用后，则认为会话被修改过。所以这种方式，我们在修改会话内的对象时，必须主动调一次set/removeAttribute,让它知道这个会话已经被修改。我们可以在序列化对象时做压缩尽量减少网络的开销。</p>\n</li>\n<li><p>修改过的属性</p>\n<p>  这种方式带来最小的网络开销，可能会遇到一些问题。比如后端缓存服务器是否支持，属性之间的交叉引用如何识别等。属性交叉引用可以通过计算所有属性的hash值来判断某属性的修改是否会影响到其他属性，我们需要权衡网络开销和cpu消耗</p>\n</li>\n</ul>\n<h2 id=\"3-我们的选择\"><a href=\"#3-我们的选择\" class=\"headerlink\" title=\"3. 我们的选择\"></a>3. 我们的选择</h2><h3 id=\"3-1-负载均衡\"><a href=\"#3-1-负载均衡\" class=\"headerlink\" title=\"3.1 负载均衡\"></a>3.1 负载均衡</h3><p>负载均衡可以用硬件或者软件来实现。如果从成本的角度考虑，现阶段用软负载可能更好。我们需要从性能、稳定性、负载的产品重要性几个方面来考虑</p>\n<h3 id=\"3-2-session失效转移\"><a href=\"#3-2-session失效转移\" class=\"headerlink\" title=\"3.2 session失效转移\"></a>3.2 session失效转移</h3><p>我们采用缓存集群来保存session，数据的可用性、一致性交给缓存集群。备份粒度和频率我们通过组件来实现。</p>\n<h4 id=\"3-2-1-分布式缓存产品的选择\"><a href=\"#3-2-1-分布式缓存产品的选择\" class=\"headerlink\" title=\"3.2.1 分布式缓存产品的选择\"></a>3.2.1 分布式缓存产品的选择</h4><p>备份的粒度是决定我们选择分布式缓存产品的一个重要因素。备份整个会话或者修改过的会话，我们可以选择key-value类型的nosql缓存组件。如果我们要支持<code>备份修改过的属性</code>,我们需要选择支持更多数据(比如支持内置的命名空间，MAP)结构的nosql缓存组件。</p>\n<p>memcached、mongodb、redis、tair、mongodb、voldemort…有很多很多nosql产品我们可以选择。选择机会多了，选择也就越难了。</p>\n<p>根据CAP理论，我们只能在一致性、可用性、分区容错性上取舍，根据不同的应用场景来选择不同的处理方式。没有绝对的最优，只有不断的根据我们不同阶段的特点选择不同的产品。</p>\n<p>对于缓存来说最好的选择方案是选择支持灵活的路由机制(服务端路由或者client路由保证AP)，支持丰富的数据结构(从易用性和性能考虑)，支持数据持久化(保证A，最好是有这个特性，当然缓存嘛，只是来加快应用的，不应该把数据只存在缓存中，不能保证高可用)，支持多版本控制(尽量保证C)。</p>\n<p>下图是voldemort(有幸参与过此产品的应用开发)的物理架构图。大多数的nosql产品都面临这下面三种物理架构的抉择。</p>\n<p><img src=\"http://www.project-voldemort.com/voldemort/images/physical_arch.png\" alt=\"\"></p>\n<p>memcached、redis只支持客户端路由，严格意义上讲，它算不上分布式缓存组件。如果要达到高可用性和分区容错性，我们需要自己来存多份(<a href=\"http://www.project-voldemort.com/voldemort/design.html\" target=\"_blank\" rel=\"noopener\">NRW</a>Routing Parameters部分)</p>\n<p>选择mongodb、mongodb、tair、voldemort算是比较好的方案，鉴于我们的运维能力，可能hold不住，暂时只能呵呵了。tair相对来说，很适合我们的应用场景，支持比纯KV更丰富的数据结构，支持服务端路由，支持服务端NRW。</p>\n<p>目前我们选择memcached作为缓存组件。</p>\n<h4 id=\"3-2-2-session备份组件的选择\"><a href=\"#3-2-2-session备份组件的选择\" class=\"headerlink\" title=\"3.2.2 session备份组件的选择\"></a>3.2.2 session备份组件的选择</h4><p>我们可以通过filter来备份session。但是对于后端缓存组件选用memcached来说，这样会存在一个问题。存储的key为sessionid，通过hash或者<a href=\"http://blog.csdn.net/sparkliang/article/details/5279393\" target=\"_blank\" rel=\"noopener\">一致性hash</a>来实现路由，这样在memcached集群拓扑变动时，会造成路由的迁移(拓扑变动造成路由到不同的memcached服务器)。对于应用来说，缓存丢失了。</p>\n<p>如果我们能把第一次选择memcached节点写入到sessionid里面，后续的请求都根据sessionid中的node信息选择memcached，这样在节点动态调整时，不会造成缓存丢失。但是我们在filter中不能改变sessionid的值，所以我们选择了<a href=\"https://code.google.com/p/memcached-session-manager/\" target=\"_blank\" rel=\"noopener\">memcached-session-manager</a>。</p>\n<h2 id=\"4-memcached-session-manager\"><a href=\"#4-memcached-session-manager\" class=\"headerlink\" title=\"4.memcached-session-manager\"></a>4.memcached-session-manager</h2><h3 id=\"4-1-主要特性如下：\"><a href=\"#4-1-主要特性如下：\" class=\"headerlink\" title=\"4.1 主要特性如下：\"></a>4.1 主要特性如下：</h3><ul>\n<li><p>Supports Tomcat 6 and Tomcat 7</p>\n</li>\n<li><p>Handles sticky or non-sticky sessions</p>\n<p>  启用session sticky时，memcached作为二级缓存，tomcat不挂掉时，不会从memcached取数据</p>\n</li>\n<li><p>No Single Point of Failure</p>\n</li>\n<li><p>Handles tomcat failover</p>\n<p>  tomcat挂掉时从memcached读取session</p>\n</li>\n<li><p>Handles memcached failover</p>\n<p>  non-sticky模式下，由于jvm没有缓存session，它会把session存到两台memcached，保证可用性。<br>  在sticky模式下，jvm缓存着session，一台memcached也会存session，也保证了可用性。</p>\n<p>  当然，这个只是相对的保证了可用性，不能完全保证可用性。</p>\n</li>\n<li><p>Comes with pluggable session serialization</p>\n<p>  我们可以选择kryo作为序列化组件</p>\n</li>\n<li><p>Allows asynchronous session storage for faster response times</p>\n<p>  在请求响应之前，异步写入session到memcached</p>\n</li>\n<li><p>Sessions are only sent to memcached if they’re actually modified</p>\n<p>  仅当session被修改时，才存储session</p>\n</li>\n<li><p>JMX management &amp; monitoring</p>\n<p>  提供JMX管理监控功能</p>\n</li>\n</ul>\n<h3 id=\"4-2-代码分析\"><a href=\"#4-2-代码分析\" class=\"headerlink\" title=\"4.2 代码分析\"></a>4.2 代码分析</h3><p>考虑到性能，我们只采用sticky模式(jvm和一个memcached中存session)，主要的功能实现如下：</p>\n<ul>\n<li><p>session创建</p>\n<p>  a.<code>request.getSession()</code>调用<code>MemcachedSessionService#createSession</code>,创建session</p>\n<p>  b.用<code>org.apache.catalina.util.SessionIdGenerator</code>生成sessionid，</p>\n<p>  c.在sessionid中加入memcached节点信息(<code>MemcachedSessionService.newSessionId</code>，通过<code>NodeIdService.getMemcachedNodeId</code>随机选择节点)</p>\n<p>  注意：SessionIdGenerator只能保证jvm内的不重复，多个jvm下需要另外的id生成机制，如果加上jvmRoute可以避规这个问题。</p>\n</li>\n</ul>\n<ul>\n<li><p>session恢复</p>\n<p>  a.首先在本地session缓存中找session，如果有此session。就用此session</p>\n<p>  b.如果本地缓存没有session，则MemcachedSessionService.findSession通过用户请求传来的sessionid从memcached服务器找session</p>\n</li>\n</ul>\n<ul>\n<li><p>session存储</p>\n<p>  在请求结束后(de.javakaffee.web.msm.RequestTrackingHostValve:173)，会检测session是否有修改(调用session.setAttribute标记此session被修改)。如果修改，(de.javakaffee.web.msm.BackupSessionService:205)创建一个BackupSessionTask，在检查到session内容改变后异步(通过序列化后的的byte数组做hash比较)写入memcached。</p>\n</li>\n</ul>\n<ul>\n<li><p>session过期策略</p>\n<p>  如果仅仅使用session.maxInactiveInterval，在session初始化时设置此key的过期时间。这需要在每次session被访问时都修改memcached中的getLastAccessedTime，这样做效率不是太好。所以在memcached-session-manager通过容器来提供周期性的回调，检查需要过期的时间。</p>\n<p>  通过ContainerBackgroundProcessor线程来周期性的回调MemcachedBackupSessionManager.backgroundProcess()方法。过期时间为：session.maxInactiveInterval - timeIdle</p>\n<p>  注意：需要保证memcached和应用服务器时间一致</p>\n</li>\n<li><p>session销毁</p>\n<p>  MemcachedBackupSessionManager.removeInternal，会把memcached和jvm中的session清理掉</p>\n<p>  注意：在销毁session时如果memcached挂掉，会出现不一致的情况。</p>\n</li>\n<li><p>可靠性</p>\n<p>  选择采用sticky模式时，没有多份复制数据。如果很不幸，tomcat和memcached都挂了，session就丢失了。见官方<a href=\"https://groups.google.com/forum/#!topic/memcached-session-manager/W6z6eSuhAJ0\" target=\"_blank\" rel=\"noopener\">maillist</a>。</p>\n<p>  在非sticky模式下，session会保存到两个memcached(MemcachedSessionService:1079)。但是tomcat本地没有存储session，会影响所有的请求性能。</p>\n</li>\n</ul>\n<ul>\n<li><p>memcached状态检测</p>\n<p>  在创建、查找session、恢复session时，都会通过NodeAvailabilityCache检测memcached状态，检测后端memcached状态间隔50ms(MemcachedNodesManager.NODE_AVAILABILITY_CACHE_TTL)</p>\n</li>\n</ul>\n<h3 id=\"4-3-最佳实践\"><a href=\"#4-3-最佳实践\" class=\"headerlink\" title=\"4.3 最佳实践\"></a>4.3 最佳实践</h3><p>根据上面的代码分析，以下的最佳实践适合我们。</p>\n<p>对于我们的开发同学，session里面的对象修改后，需要setAttribute下。</p>\n<p>对于运维同学：</p>\n<ul>\n<li><p>设置tomcat jvmRoute，避免sessionid重复</p>\n</li>\n<li><p>MemcachedSessionService.setMemcachedProtocol设置二进制协议</p>\n</li>\n<li><p>MemcachedSessionService.setSessionBackupTimeout 默认异步操作100ms超时，在网络不好的情况下会出现大量的异常，设置长点。</p>\n</li>\n<li><p>MemcachedSessionService.setOperationTimeout是memcached客户端和服务端通信时的超时时间,不能设置太短</p>\n</li>\n</ul>"},{"title":"Why react?","date":"2015-12-01T13:52:17.000Z","_content":"\n\n昨天给朋友推荐了`React`，但心里还真没有底，这里整理下资料，如果不考虑浏览器兼容性的问题，这东东真不错😄。\n\n#### 1. 虚拟dom是什么？\n\n虚拟DOM是HTML DOM的抽象，它和浏览器的实现分离。\n\n#### 2. 为什么虚拟dom快？\n\nDOM拖慢JavaScript。所有的DOM操作都是同步的，会堵塞浏览器。JavaScript操作DOM时，必须等前一个操作结束，才能执行后一个操作。只要一个操作有卡顿，整个网页就会短暂失去响应。浏览器重绘网页的频率是60FPS（即16毫秒/帧），JavaScript做不到在16毫秒内完成DOM操作，因此产生了跳帧。虚拟dom的改变并不会引起浏览器dom的改变，而是由React在合适的时机比较差异并渲染，保证`FPS`。\n\n#### 3. Why is React's concept of Virtual DOM said to be more performant than dirty model checking?\n\nReact knows when to re-render the scene because it is able to **observe when this data changes**. Dirty checking is slower than observables because you must poll the data at a regular interval and check all of the values in the data structure recursively. By comparison, setting a value on the state will signal to a listener that some state has changed, so React can simply listen for change events on the state and queue up re-rendering.(这点随着es6的`Proxy`到来，`AngularJS`会越来越强大😄)\n\n#### 4. What makes React fast ?\n\n* Batched DOM read/write operations.\n* Efficient update of sub-tree only.\n\nCompared to dirty-check, the key differences IMO are:\n\nModel dirty-checking: React component is explicitly set as dirty whenever setState is called, so there's no comparison (of the data) needed here. For dirty-checking, the comparison (of the models) always happen each digest loop.\n\nDOM updating: DOM operations are very expensive because modifying the DOM will also apply and calculate CSS styles, layouts. The saved time from unnecessary DOM modification can be longer than the time spent diffing the virtual DOM.\n\n#### 4. What's the problem of template engine？\n\nTemplate languages express the initial render of your application, and you’re responsible for manually mutating the state of the UI when your backing data changes and events occur.\n\n\n#### 5. how to run ?\n\n![](why-react/reactjs.png)\n\n上面部分是用户触发的，下面部分是定时触发的。\n\n首先说上面部分：\n\n1. 用户点击某dom\n2. `top-level event handler`分发事件到指定的`event handler`\n\n\t`top-level event handler`指的是`document`上的`event handler`,这种方式能够提高性能(因为在每个真实的dom上面绑定事件是非常慢的)并且跨浏览器(浏览器中的事件本身就没有统一)\n\n3. 用户代码调用setState()\n\n\t`AngularJS`双向绑定，不需要用户调用状态变更。所以，必须要去做大量的`dirty check`。虽然是一种倒退，但是为了性能忍了，等ES6吧。\n\n\n下面部分的逻辑：`event loop`周期性的检查有状态组件是否`dirty`，然后通过`diff`算法批量更新浏览器dom树。\n","source":"_posts/why-react.md","raw":"---\ntitle: Why react?\ndate: 2015-12-01 21:52:17\ncategories: java\ntags:\n  - READING NOTES\n  - react\n---\n\n\n昨天给朋友推荐了`React`，但心里还真没有底，这里整理下资料，如果不考虑浏览器兼容性的问题，这东东真不错😄。\n\n#### 1. 虚拟dom是什么？\n\n虚拟DOM是HTML DOM的抽象，它和浏览器的实现分离。\n\n#### 2. 为什么虚拟dom快？\n\nDOM拖慢JavaScript。所有的DOM操作都是同步的，会堵塞浏览器。JavaScript操作DOM时，必须等前一个操作结束，才能执行后一个操作。只要一个操作有卡顿，整个网页就会短暂失去响应。浏览器重绘网页的频率是60FPS（即16毫秒/帧），JavaScript做不到在16毫秒内完成DOM操作，因此产生了跳帧。虚拟dom的改变并不会引起浏览器dom的改变，而是由React在合适的时机比较差异并渲染，保证`FPS`。\n\n#### 3. Why is React's concept of Virtual DOM said to be more performant than dirty model checking?\n\nReact knows when to re-render the scene because it is able to **observe when this data changes**. Dirty checking is slower than observables because you must poll the data at a regular interval and check all of the values in the data structure recursively. By comparison, setting a value on the state will signal to a listener that some state has changed, so React can simply listen for change events on the state and queue up re-rendering.(这点随着es6的`Proxy`到来，`AngularJS`会越来越强大😄)\n\n#### 4. What makes React fast ?\n\n* Batched DOM read/write operations.\n* Efficient update of sub-tree only.\n\nCompared to dirty-check, the key differences IMO are:\n\nModel dirty-checking: React component is explicitly set as dirty whenever setState is called, so there's no comparison (of the data) needed here. For dirty-checking, the comparison (of the models) always happen each digest loop.\n\nDOM updating: DOM operations are very expensive because modifying the DOM will also apply and calculate CSS styles, layouts. The saved time from unnecessary DOM modification can be longer than the time spent diffing the virtual DOM.\n\n#### 4. What's the problem of template engine？\n\nTemplate languages express the initial render of your application, and you’re responsible for manually mutating the state of the UI when your backing data changes and events occur.\n\n\n#### 5. how to run ?\n\n![](why-react/reactjs.png)\n\n上面部分是用户触发的，下面部分是定时触发的。\n\n首先说上面部分：\n\n1. 用户点击某dom\n2. `top-level event handler`分发事件到指定的`event handler`\n\n\t`top-level event handler`指的是`document`上的`event handler`,这种方式能够提高性能(因为在每个真实的dom上面绑定事件是非常慢的)并且跨浏览器(浏览器中的事件本身就没有统一)\n\n3. 用户代码调用setState()\n\n\t`AngularJS`双向绑定，不需要用户调用状态变更。所以，必须要去做大量的`dirty check`。虽然是一种倒退，但是为了性能忍了，等ES6吧。\n\n\n下面部分的逻辑：`event loop`周期性的检查有状态组件是否`dirty`，然后通过`diff`算法批量更新浏览器dom树。\n","slug":"why-react","published":1,"updated":"2018-04-01T16:53:17.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksim0042p0ugoqt8hlze","content":"<p>昨天给朋友推荐了<code>React</code>，但心里还真没有底，这里整理下资料，如果不考虑浏览器兼容性的问题，这东东真不错😄。</p>\n<h4 id=\"1-虚拟dom是什么？\"><a href=\"#1-虚拟dom是什么？\" class=\"headerlink\" title=\"1. 虚拟dom是什么？\"></a>1. 虚拟dom是什么？</h4><p>虚拟DOM是HTML DOM的抽象，它和浏览器的实现分离。</p>\n<h4 id=\"2-为什么虚拟dom快？\"><a href=\"#2-为什么虚拟dom快？\" class=\"headerlink\" title=\"2. 为什么虚拟dom快？\"></a>2. 为什么虚拟dom快？</h4><p>DOM拖慢JavaScript。所有的DOM操作都是同步的，会堵塞浏览器。JavaScript操作DOM时，必须等前一个操作结束，才能执行后一个操作。只要一个操作有卡顿，整个网页就会短暂失去响应。浏览器重绘网页的频率是60FPS（即16毫秒/帧），JavaScript做不到在16毫秒内完成DOM操作，因此产生了跳帧。虚拟dom的改变并不会引起浏览器dom的改变，而是由React在合适的时机比较差异并渲染，保证<code>FPS</code>。</p>\n<h4 id=\"3-Why-is-React’s-concept-of-Virtual-DOM-said-to-be-more-performant-than-dirty-model-checking\"><a href=\"#3-Why-is-React’s-concept-of-Virtual-DOM-said-to-be-more-performant-than-dirty-model-checking\" class=\"headerlink\" title=\"3. Why is React’s concept of Virtual DOM said to be more performant than dirty model checking?\"></a>3. Why is React’s concept of Virtual DOM said to be more performant than dirty model checking?</h4><p>React knows when to re-render the scene because it is able to <strong>observe when this data changes</strong>. Dirty checking is slower than observables because you must poll the data at a regular interval and check all of the values in the data structure recursively. By comparison, setting a value on the state will signal to a listener that some state has changed, so React can simply listen for change events on the state and queue up re-rendering.(这点随着es6的<code>Proxy</code>到来，<code>AngularJS</code>会越来越强大😄)</p>\n<h4 id=\"4-What-makes-React-fast\"><a href=\"#4-What-makes-React-fast\" class=\"headerlink\" title=\"4. What makes React fast ?\"></a>4. What makes React fast ?</h4><ul>\n<li>Batched DOM read/write operations.</li>\n<li>Efficient update of sub-tree only.</li>\n</ul>\n<p>Compared to dirty-check, the key differences IMO are:</p>\n<p>Model dirty-checking: React component is explicitly set as dirty whenever setState is called, so there’s no comparison (of the data) needed here. For dirty-checking, the comparison (of the models) always happen each digest loop.</p>\n<p>DOM updating: DOM operations are very expensive because modifying the DOM will also apply and calculate CSS styles, layouts. The saved time from unnecessary DOM modification can be longer than the time spent diffing the virtual DOM.</p>\n<h4 id=\"4-What’s-the-problem-of-template-engine？\"><a href=\"#4-What’s-the-problem-of-template-engine？\" class=\"headerlink\" title=\"4. What’s the problem of template engine？\"></a>4. What’s the problem of template engine？</h4><p>Template languages express the initial render of your application, and you’re responsible for manually mutating the state of the UI when your backing data changes and events occur.</p>\n<h4 id=\"5-how-to-run\"><a href=\"#5-how-to-run\" class=\"headerlink\" title=\"5. how to run ?\"></a>5. how to run ?</h4><p><img src=\"/why-react/reactjs.png\" alt=\"\"></p>\n<p>上面部分是用户触发的，下面部分是定时触发的。</p>\n<p>首先说上面部分：</p>\n<ol>\n<li>用户点击某dom</li>\n<li><p><code>top-level event handler</code>分发事件到指定的<code>event handler</code></p>\n<p> <code>top-level event handler</code>指的是<code>document</code>上的<code>event handler</code>,这种方式能够提高性能(因为在每个真实的dom上面绑定事件是非常慢的)并且跨浏览器(浏览器中的事件本身就没有统一)</p>\n</li>\n<li><p>用户代码调用setState()</p>\n<p> <code>AngularJS</code>双向绑定，不需要用户调用状态变更。所以，必须要去做大量的<code>dirty check</code>。虽然是一种倒退，但是为了性能忍了，等ES6吧。</p>\n</li>\n</ol>\n<p>下面部分的逻辑：<code>event loop</code>周期性的检查有状态组件是否<code>dirty</code>，然后通过<code>diff</code>算法批量更新浏览器dom树。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天给朋友推荐了<code>React</code>，但心里还真没有底，这里整理下资料，如果不考虑浏览器兼容性的问题，这东东真不错😄。</p>\n<h4 id=\"1-虚拟dom是什么？\"><a href=\"#1-虚拟dom是什么？\" class=\"headerlink\" title=\"1. 虚拟dom是什么？\"></a>1. 虚拟dom是什么？</h4><p>虚拟DOM是HTML DOM的抽象，它和浏览器的实现分离。</p>\n<h4 id=\"2-为什么虚拟dom快？\"><a href=\"#2-为什么虚拟dom快？\" class=\"headerlink\" title=\"2. 为什么虚拟dom快？\"></a>2. 为什么虚拟dom快？</h4><p>DOM拖慢JavaScript。所有的DOM操作都是同步的，会堵塞浏览器。JavaScript操作DOM时，必须等前一个操作结束，才能执行后一个操作。只要一个操作有卡顿，整个网页就会短暂失去响应。浏览器重绘网页的频率是60FPS（即16毫秒/帧），JavaScript做不到在16毫秒内完成DOM操作，因此产生了跳帧。虚拟dom的改变并不会引起浏览器dom的改变，而是由React在合适的时机比较差异并渲染，保证<code>FPS</code>。</p>\n<h4 id=\"3-Why-is-React’s-concept-of-Virtual-DOM-said-to-be-more-performant-than-dirty-model-checking\"><a href=\"#3-Why-is-React’s-concept-of-Virtual-DOM-said-to-be-more-performant-than-dirty-model-checking\" class=\"headerlink\" title=\"3. Why is React’s concept of Virtual DOM said to be more performant than dirty model checking?\"></a>3. Why is React’s concept of Virtual DOM said to be more performant than dirty model checking?</h4><p>React knows when to re-render the scene because it is able to <strong>observe when this data changes</strong>. Dirty checking is slower than observables because you must poll the data at a regular interval and check all of the values in the data structure recursively. By comparison, setting a value on the state will signal to a listener that some state has changed, so React can simply listen for change events on the state and queue up re-rendering.(这点随着es6的<code>Proxy</code>到来，<code>AngularJS</code>会越来越强大😄)</p>\n<h4 id=\"4-What-makes-React-fast\"><a href=\"#4-What-makes-React-fast\" class=\"headerlink\" title=\"4. What makes React fast ?\"></a>4. What makes React fast ?</h4><ul>\n<li>Batched DOM read/write operations.</li>\n<li>Efficient update of sub-tree only.</li>\n</ul>\n<p>Compared to dirty-check, the key differences IMO are:</p>\n<p>Model dirty-checking: React component is explicitly set as dirty whenever setState is called, so there’s no comparison (of the data) needed here. For dirty-checking, the comparison (of the models) always happen each digest loop.</p>\n<p>DOM updating: DOM operations are very expensive because modifying the DOM will also apply and calculate CSS styles, layouts. The saved time from unnecessary DOM modification can be longer than the time spent diffing the virtual DOM.</p>\n<h4 id=\"4-What’s-the-problem-of-template-engine？\"><a href=\"#4-What’s-the-problem-of-template-engine？\" class=\"headerlink\" title=\"4. What’s the problem of template engine？\"></a>4. What’s the problem of template engine？</h4><p>Template languages express the initial render of your application, and you’re responsible for manually mutating the state of the UI when your backing data changes and events occur.</p>\n<h4 id=\"5-how-to-run\"><a href=\"#5-how-to-run\" class=\"headerlink\" title=\"5. how to run ?\"></a>5. how to run ?</h4><p><img src=\"/why-react/reactjs.png\" alt=\"\"></p>\n<p>上面部分是用户触发的，下面部分是定时触发的。</p>\n<p>首先说上面部分：</p>\n<ol>\n<li>用户点击某dom</li>\n<li><p><code>top-level event handler</code>分发事件到指定的<code>event handler</code></p>\n<p> <code>top-level event handler</code>指的是<code>document</code>上的<code>event handler</code>,这种方式能够提高性能(因为在每个真实的dom上面绑定事件是非常慢的)并且跨浏览器(浏览器中的事件本身就没有统一)</p>\n</li>\n<li><p>用户代码调用setState()</p>\n<p> <code>AngularJS</code>双向绑定，不需要用户调用状态变更。所以，必须要去做大量的<code>dirty check</code>。虽然是一种倒退，但是为了性能忍了，等ES6吧。</p>\n</li>\n</ol>\n<p>下面部分的逻辑：<code>event loop</code>周期性的检查有状态组件是否<code>dirty</code>，然后通过<code>diff</code>算法批量更新浏览器dom树。</p>\n"},{"title":"使用零拷贝提高数据传输效率","date":"2014-08-16T13:52:17.000Z","_content":"\n本文讲了如何用`zero copy`技术来提高I/O性能.\n\n静态文件服务器需要把磁盘上的数据发送给客户端.这里cpu消耗比较少,但是效率不高:内核从磁盘读数据,内核/用户空间交换数据,最后写到socket.数据在内核/用户空间转换时,需要拷贝数据,消耗cpu和内存带宽.对于java应用来说,还需要合理的使用缓冲区来减少gc的压力.\n\njava提供了`transferTo`方法来使用`zero copy`技术.他可以让数据直接从一个`channel`到另外一个`channel`.避免上面说到的一些问题.\n\n### 1.传统的解决办法\n\n过程类似于下面的代码:\n\n\tFile.read(fileDesc, buf, len);\n\tSocket.send(socket, buf, len);\n\t\n#### 1.1数据拷贝\n\t\n![](zero-copy/figure1.gif)\n\n这种方式会有四次内存拷贝\n\n#### 1.2 上下文切换\n\n![](zero-copy/figure2.gif)\n\n这种方式会有四次上下文切换.\n\n\n#### 1.3 过程说明\n\n1. `read`方法导致一次从`user mode`到`kernel mode`的上下文切换.系统调用`sys_read`从文件读取数据,通过DMA,把磁盘上的数据读到`kernel address space buffer`.\n2. 数据从`kernel address space buffer`拷贝到`user buffer`.`read`返回,导致从`kernel mode`到`user mode`的上下文切换.现在数据被读到了`user address space buffer`.\n3. `send`方法导致一次`user mode`到`kernel mode`的上下文切换.第三次拷贝把拷贝到`kernel address space buffer`.此buffer关联着`destination socket`\n4. 系统`send`调用返回时导致第四次上下文切换,DMA把`kernel address space buffer`中的数据发送到协议引擎导致第四次数据拷贝.\n\n#### 1.4 intermediate kernel buffer\n\n\n使用`intermediate kernel buffer`主要为了提高性能,读的时候扮演缓存的角色,写的时候可以让应用程序实现异步(应用程序写到kernel buffer就返回).不幸的是,当我们处理的数据大于内核缓冲大小时,这样的拷贝是完全没有任何意义的.\n\n### 2.零拷贝的方式\n\n使用如下的代码来完成零拷贝\n\njava方法:\n\n\tpublic void transferTo(long position, long count, WritableByteChannel target);\n\t\n系统调用:\n\n\t#include <sys/socket.h>\n\tssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count);\n\n\n#### 2.1 数据拷贝\n\n![](zero-copy/figure3.gif)\n\n涉及到3次数据拷贝.\n\n#### 2.2 上下文切换\n\n![](zero-copy/figure4.gif)\n\n涉及到2次上下文切换\n\n#### 2.3 过程说明\n\n1. `transferTo`方法让DMA把磁盘文件读到`kernel read buffer`.然后内核把`kernel read buffer`中的数据拷贝到`socket buffer`.\n2. `DMA`把`socket buffer`中的数据拷贝到协议引擎.\n\n### 3 更好的方式\n\n通过上面使用这种方式,上下文切换从4次变为了2次.数据拷贝减少了一次.如果网卡支持`gather operations`,linux 2.4内核就开始提供更好的解决方案.\n\n\n![](zero-copy/figure5.gif)\n\n1. `transferTo`方法让`DMA engine`把磁盘文件内容拷贝到内核缓冲区.\n2. 数据不需要拷贝到`socket buffer`.`socket buffer`里只需写入数据的地址和长度.`DMA engine`从内核缓冲区把数据读到协议引擎.\n\n通过内核带来的特性,数据拷贝变为了2次(这两次拷贝都是DMA在做).cpu copy变为了0.\n\n### 4 写在最后\n\n文章地址`http://www.ibm.com/developerworks/library/j-zerocopy/`,里面有性能测试结果.后面附带有性能测试程序.不过这个测试程序不太恰当,应该都用nio的api来测试`tansferTo`和非`tansferTo`.\n\n静态文件服务器一般都有静态资源缓存(apache可以配置,其他的服务器不了解).如果使用内存缓存,减少了读的过程.内存拷贝变为cpu copy `application buffer` -> `socket buffer`,DMA copy `socket buffer` ->`NIC buffer`,磁盘io大大降低了.\n\n`NIO`不是很熟悉,不知道通过`ByteBuffer.allocateDirect()`+`transferTo`+`gather operations`能不能让copy变为一次.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/zero-copy.md","raw":"---\ntitle: 使用零拷贝提高数据传输效率\ndate: 2014-08-16 21:52:17\ncategories: java\ntags:\n  - zero copy\n---\n\n本文讲了如何用`zero copy`技术来提高I/O性能.\n\n静态文件服务器需要把磁盘上的数据发送给客户端.这里cpu消耗比较少,但是效率不高:内核从磁盘读数据,内核/用户空间交换数据,最后写到socket.数据在内核/用户空间转换时,需要拷贝数据,消耗cpu和内存带宽.对于java应用来说,还需要合理的使用缓冲区来减少gc的压力.\n\njava提供了`transferTo`方法来使用`zero copy`技术.他可以让数据直接从一个`channel`到另外一个`channel`.避免上面说到的一些问题.\n\n### 1.传统的解决办法\n\n过程类似于下面的代码:\n\n\tFile.read(fileDesc, buf, len);\n\tSocket.send(socket, buf, len);\n\t\n#### 1.1数据拷贝\n\t\n![](zero-copy/figure1.gif)\n\n这种方式会有四次内存拷贝\n\n#### 1.2 上下文切换\n\n![](zero-copy/figure2.gif)\n\n这种方式会有四次上下文切换.\n\n\n#### 1.3 过程说明\n\n1. `read`方法导致一次从`user mode`到`kernel mode`的上下文切换.系统调用`sys_read`从文件读取数据,通过DMA,把磁盘上的数据读到`kernel address space buffer`.\n2. 数据从`kernel address space buffer`拷贝到`user buffer`.`read`返回,导致从`kernel mode`到`user mode`的上下文切换.现在数据被读到了`user address space buffer`.\n3. `send`方法导致一次`user mode`到`kernel mode`的上下文切换.第三次拷贝把拷贝到`kernel address space buffer`.此buffer关联着`destination socket`\n4. 系统`send`调用返回时导致第四次上下文切换,DMA把`kernel address space buffer`中的数据发送到协议引擎导致第四次数据拷贝.\n\n#### 1.4 intermediate kernel buffer\n\n\n使用`intermediate kernel buffer`主要为了提高性能,读的时候扮演缓存的角色,写的时候可以让应用程序实现异步(应用程序写到kernel buffer就返回).不幸的是,当我们处理的数据大于内核缓冲大小时,这样的拷贝是完全没有任何意义的.\n\n### 2.零拷贝的方式\n\n使用如下的代码来完成零拷贝\n\njava方法:\n\n\tpublic void transferTo(long position, long count, WritableByteChannel target);\n\t\n系统调用:\n\n\t#include <sys/socket.h>\n\tssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count);\n\n\n#### 2.1 数据拷贝\n\n![](zero-copy/figure3.gif)\n\n涉及到3次数据拷贝.\n\n#### 2.2 上下文切换\n\n![](zero-copy/figure4.gif)\n\n涉及到2次上下文切换\n\n#### 2.3 过程说明\n\n1. `transferTo`方法让DMA把磁盘文件读到`kernel read buffer`.然后内核把`kernel read buffer`中的数据拷贝到`socket buffer`.\n2. `DMA`把`socket buffer`中的数据拷贝到协议引擎.\n\n### 3 更好的方式\n\n通过上面使用这种方式,上下文切换从4次变为了2次.数据拷贝减少了一次.如果网卡支持`gather operations`,linux 2.4内核就开始提供更好的解决方案.\n\n\n![](zero-copy/figure5.gif)\n\n1. `transferTo`方法让`DMA engine`把磁盘文件内容拷贝到内核缓冲区.\n2. 数据不需要拷贝到`socket buffer`.`socket buffer`里只需写入数据的地址和长度.`DMA engine`从内核缓冲区把数据读到协议引擎.\n\n通过内核带来的特性,数据拷贝变为了2次(这两次拷贝都是DMA在做).cpu copy变为了0.\n\n### 4 写在最后\n\n文章地址`http://www.ibm.com/developerworks/library/j-zerocopy/`,里面有性能测试结果.后面附带有性能测试程序.不过这个测试程序不太恰当,应该都用nio的api来测试`tansferTo`和非`tansferTo`.\n\n静态文件服务器一般都有静态资源缓存(apache可以配置,其他的服务器不了解).如果使用内存缓存,减少了读的过程.内存拷贝变为cpu copy `application buffer` -> `socket buffer`,DMA copy `socket buffer` ->`NIC buffer`,磁盘io大大降低了.\n\n`NIO`不是很熟悉,不知道通过`ByteBuffer.allocateDirect()`+`transferTo`+`gather operations`能不能让copy变为一次.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"zero-copy","published":1,"updated":"2018-04-01T16:53:17.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksin0044p0ugzjvrg9yc","content":"<p>本文讲了如何用<code>zero copy</code>技术来提高I/O性能.</p>\n<p>静态文件服务器需要把磁盘上的数据发送给客户端.这里cpu消耗比较少,但是效率不高:内核从磁盘读数据,内核/用户空间交换数据,最后写到socket.数据在内核/用户空间转换时,需要拷贝数据,消耗cpu和内存带宽.对于java应用来说,还需要合理的使用缓冲区来减少gc的压力.</p>\n<p>java提供了<code>transferTo</code>方法来使用<code>zero copy</code>技术.他可以让数据直接从一个<code>channel</code>到另外一个<code>channel</code>.避免上面说到的一些问题.</p>\n<h3 id=\"1-传统的解决办法\"><a href=\"#1-传统的解决办法\" class=\"headerlink\" title=\"1.传统的解决办法\"></a>1.传统的解决办法</h3><p>过程类似于下面的代码:</p>\n<pre><code>File.read(fileDesc, buf, len);\nSocket.send(socket, buf, len);\n</code></pre><h4 id=\"1-1数据拷贝\"><a href=\"#1-1数据拷贝\" class=\"headerlink\" title=\"1.1数据拷贝\"></a>1.1数据拷贝</h4><p><img src=\"/zero-copy/figure1.gif\" alt=\"\"></p>\n<p>这种方式会有四次内存拷贝</p>\n<h4 id=\"1-2-上下文切换\"><a href=\"#1-2-上下文切换\" class=\"headerlink\" title=\"1.2 上下文切换\"></a>1.2 上下文切换</h4><p><img src=\"/zero-copy/figure2.gif\" alt=\"\"></p>\n<p>这种方式会有四次上下文切换.</p>\n<h4 id=\"1-3-过程说明\"><a href=\"#1-3-过程说明\" class=\"headerlink\" title=\"1.3 过程说明\"></a>1.3 过程说明</h4><ol>\n<li><code>read</code>方法导致一次从<code>user mode</code>到<code>kernel mode</code>的上下文切换.系统调用<code>sys_read</code>从文件读取数据,通过DMA,把磁盘上的数据读到<code>kernel address space buffer</code>.</li>\n<li>数据从<code>kernel address space buffer</code>拷贝到<code>user buffer</code>.<code>read</code>返回,导致从<code>kernel mode</code>到<code>user mode</code>的上下文切换.现在数据被读到了<code>user address space buffer</code>.</li>\n<li><code>send</code>方法导致一次<code>user mode</code>到<code>kernel mode</code>的上下文切换.第三次拷贝把拷贝到<code>kernel address space buffer</code>.此buffer关联着<code>destination socket</code></li>\n<li>系统<code>send</code>调用返回时导致第四次上下文切换,DMA把<code>kernel address space buffer</code>中的数据发送到协议引擎导致第四次数据拷贝.</li>\n</ol>\n<h4 id=\"1-4-intermediate-kernel-buffer\"><a href=\"#1-4-intermediate-kernel-buffer\" class=\"headerlink\" title=\"1.4 intermediate kernel buffer\"></a>1.4 intermediate kernel buffer</h4><p>使用<code>intermediate kernel buffer</code>主要为了提高性能,读的时候扮演缓存的角色,写的时候可以让应用程序实现异步(应用程序写到kernel buffer就返回).不幸的是,当我们处理的数据大于内核缓冲大小时,这样的拷贝是完全没有任何意义的.</p>\n<h3 id=\"2-零拷贝的方式\"><a href=\"#2-零拷贝的方式\" class=\"headerlink\" title=\"2.零拷贝的方式\"></a>2.零拷贝的方式</h3><p>使用如下的代码来完成零拷贝</p>\n<p>java方法:</p>\n<pre><code>public void transferTo(long position, long count, WritableByteChannel target);\n</code></pre><p>系统调用:</p>\n<pre><code>#include &lt;sys/socket.h&gt;\nssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count);\n</code></pre><h4 id=\"2-1-数据拷贝\"><a href=\"#2-1-数据拷贝\" class=\"headerlink\" title=\"2.1 数据拷贝\"></a>2.1 数据拷贝</h4><p><img src=\"/zero-copy/figure3.gif\" alt=\"\"></p>\n<p>涉及到3次数据拷贝.</p>\n<h4 id=\"2-2-上下文切换\"><a href=\"#2-2-上下文切换\" class=\"headerlink\" title=\"2.2 上下文切换\"></a>2.2 上下文切换</h4><p><img src=\"/zero-copy/figure4.gif\" alt=\"\"></p>\n<p>涉及到2次上下文切换</p>\n<h4 id=\"2-3-过程说明\"><a href=\"#2-3-过程说明\" class=\"headerlink\" title=\"2.3 过程说明\"></a>2.3 过程说明</h4><ol>\n<li><code>transferTo</code>方法让DMA把磁盘文件读到<code>kernel read buffer</code>.然后内核把<code>kernel read buffer</code>中的数据拷贝到<code>socket buffer</code>.</li>\n<li><code>DMA</code>把<code>socket buffer</code>中的数据拷贝到协议引擎.</li>\n</ol>\n<h3 id=\"3-更好的方式\"><a href=\"#3-更好的方式\" class=\"headerlink\" title=\"3 更好的方式\"></a>3 更好的方式</h3><p>通过上面使用这种方式,上下文切换从4次变为了2次.数据拷贝减少了一次.如果网卡支持<code>gather operations</code>,linux 2.4内核就开始提供更好的解决方案.</p>\n<p><img src=\"/zero-copy/figure5.gif\" alt=\"\"></p>\n<ol>\n<li><code>transferTo</code>方法让<code>DMA engine</code>把磁盘文件内容拷贝到内核缓冲区.</li>\n<li>数据不需要拷贝到<code>socket buffer</code>.<code>socket buffer</code>里只需写入数据的地址和长度.<code>DMA engine</code>从内核缓冲区把数据读到协议引擎.</li>\n</ol>\n<p>通过内核带来的特性,数据拷贝变为了2次(这两次拷贝都是DMA在做).cpu copy变为了0.</p>\n<h3 id=\"4-写在最后\"><a href=\"#4-写在最后\" class=\"headerlink\" title=\"4 写在最后\"></a>4 写在最后</h3><p>文章地址<code>http://www.ibm.com/developerworks/library/j-zerocopy/</code>,里面有性能测试结果.后面附带有性能测试程序.不过这个测试程序不太恰当,应该都用nio的api来测试<code>tansferTo</code>和非<code>tansferTo</code>.</p>\n<p>静态文件服务器一般都有静态资源缓存(apache可以配置,其他的服务器不了解).如果使用内存缓存,减少了读的过程.内存拷贝变为cpu copy <code>application buffer</code> -&gt; <code>socket buffer</code>,DMA copy <code>socket buffer</code> -&gt;<code>NIC buffer</code>,磁盘io大大降低了.</p>\n<p><code>NIO</code>不是很熟悉,不知道通过<code>ByteBuffer.allocateDirect()</code>+<code>transferTo</code>+<code>gather operations</code>能不能让copy变为一次.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文讲了如何用<code>zero copy</code>技术来提高I/O性能.</p>\n<p>静态文件服务器需要把磁盘上的数据发送给客户端.这里cpu消耗比较少,但是效率不高:内核从磁盘读数据,内核/用户空间交换数据,最后写到socket.数据在内核/用户空间转换时,需要拷贝数据,消耗cpu和内存带宽.对于java应用来说,还需要合理的使用缓冲区来减少gc的压力.</p>\n<p>java提供了<code>transferTo</code>方法来使用<code>zero copy</code>技术.他可以让数据直接从一个<code>channel</code>到另外一个<code>channel</code>.避免上面说到的一些问题.</p>\n<h3 id=\"1-传统的解决办法\"><a href=\"#1-传统的解决办法\" class=\"headerlink\" title=\"1.传统的解决办法\"></a>1.传统的解决办法</h3><p>过程类似于下面的代码:</p>\n<pre><code>File.read(fileDesc, buf, len);\nSocket.send(socket, buf, len);\n</code></pre><h4 id=\"1-1数据拷贝\"><a href=\"#1-1数据拷贝\" class=\"headerlink\" title=\"1.1数据拷贝\"></a>1.1数据拷贝</h4><p><img src=\"/zero-copy/figure1.gif\" alt=\"\"></p>\n<p>这种方式会有四次内存拷贝</p>\n<h4 id=\"1-2-上下文切换\"><a href=\"#1-2-上下文切换\" class=\"headerlink\" title=\"1.2 上下文切换\"></a>1.2 上下文切换</h4><p><img src=\"/zero-copy/figure2.gif\" alt=\"\"></p>\n<p>这种方式会有四次上下文切换.</p>\n<h4 id=\"1-3-过程说明\"><a href=\"#1-3-过程说明\" class=\"headerlink\" title=\"1.3 过程说明\"></a>1.3 过程说明</h4><ol>\n<li><code>read</code>方法导致一次从<code>user mode</code>到<code>kernel mode</code>的上下文切换.系统调用<code>sys_read</code>从文件读取数据,通过DMA,把磁盘上的数据读到<code>kernel address space buffer</code>.</li>\n<li>数据从<code>kernel address space buffer</code>拷贝到<code>user buffer</code>.<code>read</code>返回,导致从<code>kernel mode</code>到<code>user mode</code>的上下文切换.现在数据被读到了<code>user address space buffer</code>.</li>\n<li><code>send</code>方法导致一次<code>user mode</code>到<code>kernel mode</code>的上下文切换.第三次拷贝把拷贝到<code>kernel address space buffer</code>.此buffer关联着<code>destination socket</code></li>\n<li>系统<code>send</code>调用返回时导致第四次上下文切换,DMA把<code>kernel address space buffer</code>中的数据发送到协议引擎导致第四次数据拷贝.</li>\n</ol>\n<h4 id=\"1-4-intermediate-kernel-buffer\"><a href=\"#1-4-intermediate-kernel-buffer\" class=\"headerlink\" title=\"1.4 intermediate kernel buffer\"></a>1.4 intermediate kernel buffer</h4><p>使用<code>intermediate kernel buffer</code>主要为了提高性能,读的时候扮演缓存的角色,写的时候可以让应用程序实现异步(应用程序写到kernel buffer就返回).不幸的是,当我们处理的数据大于内核缓冲大小时,这样的拷贝是完全没有任何意义的.</p>\n<h3 id=\"2-零拷贝的方式\"><a href=\"#2-零拷贝的方式\" class=\"headerlink\" title=\"2.零拷贝的方式\"></a>2.零拷贝的方式</h3><p>使用如下的代码来完成零拷贝</p>\n<p>java方法:</p>\n<pre><code>public void transferTo(long position, long count, WritableByteChannel target);\n</code></pre><p>系统调用:</p>\n<pre><code>#include &lt;sys/socket.h&gt;\nssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count);\n</code></pre><h4 id=\"2-1-数据拷贝\"><a href=\"#2-1-数据拷贝\" class=\"headerlink\" title=\"2.1 数据拷贝\"></a>2.1 数据拷贝</h4><p><img src=\"/zero-copy/figure3.gif\" alt=\"\"></p>\n<p>涉及到3次数据拷贝.</p>\n<h4 id=\"2-2-上下文切换\"><a href=\"#2-2-上下文切换\" class=\"headerlink\" title=\"2.2 上下文切换\"></a>2.2 上下文切换</h4><p><img src=\"/zero-copy/figure4.gif\" alt=\"\"></p>\n<p>涉及到2次上下文切换</p>\n<h4 id=\"2-3-过程说明\"><a href=\"#2-3-过程说明\" class=\"headerlink\" title=\"2.3 过程说明\"></a>2.3 过程说明</h4><ol>\n<li><code>transferTo</code>方法让DMA把磁盘文件读到<code>kernel read buffer</code>.然后内核把<code>kernel read buffer</code>中的数据拷贝到<code>socket buffer</code>.</li>\n<li><code>DMA</code>把<code>socket buffer</code>中的数据拷贝到协议引擎.</li>\n</ol>\n<h3 id=\"3-更好的方式\"><a href=\"#3-更好的方式\" class=\"headerlink\" title=\"3 更好的方式\"></a>3 更好的方式</h3><p>通过上面使用这种方式,上下文切换从4次变为了2次.数据拷贝减少了一次.如果网卡支持<code>gather operations</code>,linux 2.4内核就开始提供更好的解决方案.</p>\n<p><img src=\"/zero-copy/figure5.gif\" alt=\"\"></p>\n<ol>\n<li><code>transferTo</code>方法让<code>DMA engine</code>把磁盘文件内容拷贝到内核缓冲区.</li>\n<li>数据不需要拷贝到<code>socket buffer</code>.<code>socket buffer</code>里只需写入数据的地址和长度.<code>DMA engine</code>从内核缓冲区把数据读到协议引擎.</li>\n</ol>\n<p>通过内核带来的特性,数据拷贝变为了2次(这两次拷贝都是DMA在做).cpu copy变为了0.</p>\n<h3 id=\"4-写在最后\"><a href=\"#4-写在最后\" class=\"headerlink\" title=\"4 写在最后\"></a>4 写在最后</h3><p>文章地址<code>http://www.ibm.com/developerworks/library/j-zerocopy/</code>,里面有性能测试结果.后面附带有性能测试程序.不过这个测试程序不太恰当,应该都用nio的api来测试<code>tansferTo</code>和非<code>tansferTo</code>.</p>\n<p>静态文件服务器一般都有静态资源缓存(apache可以配置,其他的服务器不了解).如果使用内存缓存,减少了读的过程.内存拷贝变为cpu copy <code>application buffer</code> -&gt; <code>socket buffer</code>,DMA copy <code>socket buffer</code> -&gt;<code>NIC buffer</code>,磁盘io大大降低了.</p>\n<p><code>NIO</code>不是很熟悉,不知道通过<code>ByteBuffer.allocateDirect()</code>+<code>transferTo</code>+<code>gather operations</code>能不能让copy变为一次.</p>\n"},{"title":"一次技术问答","date":"2017-07-28T13:52:17.000Z","_content":"\n\n最近一年多都没有写博客了，技术上做了很多有意义的事情，也有一些经验上的积累，逐步沉淀到博客上。\n\n今天回答某公司的技术上的一些疑问，把问题和回答贴上来。逐步`养`自己的技术观。\n\n<!-- more -->\n\n\n### 1. 如何做数据安全防范？还有哪些支付安全需要注意？\n\n数据安全防范主要分为两个方面：\n\n1. 内部\n\n\t* 数据库管理员职责单一，不能既懂业务，又懂数据库\n\t* 数据库合理管控\n\t* 日志脱敏\n\t* 线上导入到线下的测试数据需要审核\n\n2. 外部\n\n\t防止数据被泄露出去，比如sql防注入，服务器权限合理管控，数据访问需要进行合理的授权(比如遍历id就能把数据查出来)\n\n\n技术上的安全关注下owasp top 10，业务上的安全需要属于风控了，这块我了解的比较少，比如基本的同卡进出。\n\n### 2. 认证授权怎样拦截无效用户？\n\n上下文说得不是很清楚。我理解为，认证服务的能力。除了功能性需求，可能还需要一些非功能性需求。比如认证服务需要使用缓存，认证服务需要有限流。\n\n\n###  3. 分布式性能提升的方案. 数据模型设计有哪些最佳实践？\n\n这个话题太大，我只能大概说下：\n\n1. 首先要平衡组件和服务之间的关系，毕竟分布式第一定律：不要分布式\n2. 分布式场景，应该要考虑允许数据不一致的情况，合适的引入缓存\n3. 所有的性能问题，其实是怎么把资源榨干，了解各种资源的特性，就了解了如何取舍资源利用率\n4. 性能需要考虑，在项目前期，要对性能有预期，留下足够扩展的点，不要过多投入，也不能完全不管。\n\n### 4. 交易相关分布式事务控制. log的处理方式. 异常处理机制请随意分享一些实际的经验\n\n1. 分布式事务不要碰，简单的做法：服务提供方幂等+服务使用方努力尝试。这样做开销最小，毕竟失败不是常态。\n2. log不要阻塞业务的执行。log中应该要保留请求唯一id，便于做链路分析。open-tracing还不错。\n3. 异常的处理原则：a. 业务尽量不要处理异常，交给框架，这样代码写起来会很优雅(框架异常处理器来处理)。b. 不要吞掉底层异常 c. 业务异常要考虑下是否必须收集栈信息(不收集栈信息可以减少日志，并提高性能)\n\n\n\n### 5. 分享一下中间件使用场景\n\n`中间件`这个词太大了。没办法讲。\n\n\n### 6. 用dubbo框架多服务之间rpc调用同步返回这种需求有什么好的方法来保证实时性返回，因为整个服务链调执行完后还需要每个链路挨个返回效率很低\n\n这个不是dubbo的问题。该异步的异步，该并行的并行，能缓存的缓存，性能自然好了。\n\n\n### 7. 封装mq做同步返回替代rpc同步返回机制是否可行\n\nmq做同步返回？mq本来就是异步的，同步只是在交互上的同步，由两个异步的场景+等待组合成对外部的异步，这样做意义不大把？\n\nsoa中，dubbo只是提供了一种解决rpc的手段，不要忘记，消息在很多场景下比用rpc好得多。\n\n### 8. 定时服务只能单点部署，如何做高可用\n\n定时任务可以做高可用，开源有解决方案，quartz也有解决方案。两种思路：\n\n1. 基于quartz官方的数据库方案。\n2. 数据库存任务，用zookeeper之类的来做任务分配，用quartz来做节点上的定时任务。\n\n\n### 9. 怎样才能评估服务拆分的合理性\n\n* 若非可重用，先尽量不要拆分。微服务这样的入大流的名词，做起来需要很多基础设施做支撑。单体应用能支撑得很好，组件化，模块化也很不错。\n* 服务拆分尽量按照领域来设计，高内聚、低耦合是目标(参考面向对象设计的基本原则)。服务粒度靠业务场景养出来的，准则很多，需要根据业务场景来逐步演进。\n* 公司的技术架构能改变公司的业务发展现状！！！技术真的能带来生产力！！！可以参考阿里巴巴`大中台，小前台`的思路。不过要看阶段，合适的阶段做合适的事情，技术能带来价值，也能带来麻烦。一切都是取舍。\n\n\n### 10. web项目分布式集群时session共享有什么好的实践。\n\nspring session+redis或者spring session+内存网格(Hazelcast\\ Ignite）\n\n\n\n### 11. Dubbo服务不停机升级，如何让正在运行的处理完毕，并且不接收新请求的\n\n我们内部的版本修复了这个问题。步骤如下：\n\n* provider通知consumer,不要发新请求过来（zookeeper unregister service）\n* provider等待服务执行完毕 (provider计数)\n* consumer等待服务执行完毕 (执行完毕后provider计数)\n* provider关闭\n* cusumer关闭\n\n### 12. 易极付这边的页面自动生成技术是如何实现的？\n\n通过自动生成的业务主要用于后台管理，包括：新增，修改，删除，分页，导入，导出等功能。做起来比较简单，访问数据库获取元数据，通过freemarker生成代码。\n\n\n### 13. 支付系统的异步通知的实现，如何优雅的控制通知的频率\n\n我们内部有一个通知服务，所有要对外通知的系统向通知服务发送消息。通知系统记录任务，通过异步http向外发送消息。每个任务维护通知的状态。现在通知间隔是逐步递增的。\n\n\n### 14. 包的版本使用SNAPSHOT，怎样确保使用gradle下载的是最新的jar包\n\ngradle有5年多没有用了，大概参考官方文档[gradle:controlling_caching](https://docs.gradle.org/current/userguide/dependency_management.html#sec:controlling_caching)可以做到。\n\n### 15. 遇到回调先于同步返回的情况，该如何处理？\n\n对于服务调用方，需要考虑幂等。谁先回来都无所谓。\n","source":"_posts/一次技术问答.md","raw":"---\ntitle: 一次技术问答\ndate: 2017-07-28 21:52:17\ncategories: java\ntags:\n  - share\n---\n\n\n最近一年多都没有写博客了，技术上做了很多有意义的事情，也有一些经验上的积累，逐步沉淀到博客上。\n\n今天回答某公司的技术上的一些疑问，把问题和回答贴上来。逐步`养`自己的技术观。\n\n<!-- more -->\n\n\n### 1. 如何做数据安全防范？还有哪些支付安全需要注意？\n\n数据安全防范主要分为两个方面：\n\n1. 内部\n\n\t* 数据库管理员职责单一，不能既懂业务，又懂数据库\n\t* 数据库合理管控\n\t* 日志脱敏\n\t* 线上导入到线下的测试数据需要审核\n\n2. 外部\n\n\t防止数据被泄露出去，比如sql防注入，服务器权限合理管控，数据访问需要进行合理的授权(比如遍历id就能把数据查出来)\n\n\n技术上的安全关注下owasp top 10，业务上的安全需要属于风控了，这块我了解的比较少，比如基本的同卡进出。\n\n### 2. 认证授权怎样拦截无效用户？\n\n上下文说得不是很清楚。我理解为，认证服务的能力。除了功能性需求，可能还需要一些非功能性需求。比如认证服务需要使用缓存，认证服务需要有限流。\n\n\n###  3. 分布式性能提升的方案. 数据模型设计有哪些最佳实践？\n\n这个话题太大，我只能大概说下：\n\n1. 首先要平衡组件和服务之间的关系，毕竟分布式第一定律：不要分布式\n2. 分布式场景，应该要考虑允许数据不一致的情况，合适的引入缓存\n3. 所有的性能问题，其实是怎么把资源榨干，了解各种资源的特性，就了解了如何取舍资源利用率\n4. 性能需要考虑，在项目前期，要对性能有预期，留下足够扩展的点，不要过多投入，也不能完全不管。\n\n### 4. 交易相关分布式事务控制. log的处理方式. 异常处理机制请随意分享一些实际的经验\n\n1. 分布式事务不要碰，简单的做法：服务提供方幂等+服务使用方努力尝试。这样做开销最小，毕竟失败不是常态。\n2. log不要阻塞业务的执行。log中应该要保留请求唯一id，便于做链路分析。open-tracing还不错。\n3. 异常的处理原则：a. 业务尽量不要处理异常，交给框架，这样代码写起来会很优雅(框架异常处理器来处理)。b. 不要吞掉底层异常 c. 业务异常要考虑下是否必须收集栈信息(不收集栈信息可以减少日志，并提高性能)\n\n\n\n### 5. 分享一下中间件使用场景\n\n`中间件`这个词太大了。没办法讲。\n\n\n### 6. 用dubbo框架多服务之间rpc调用同步返回这种需求有什么好的方法来保证实时性返回，因为整个服务链调执行完后还需要每个链路挨个返回效率很低\n\n这个不是dubbo的问题。该异步的异步，该并行的并行，能缓存的缓存，性能自然好了。\n\n\n### 7. 封装mq做同步返回替代rpc同步返回机制是否可行\n\nmq做同步返回？mq本来就是异步的，同步只是在交互上的同步，由两个异步的场景+等待组合成对外部的异步，这样做意义不大把？\n\nsoa中，dubbo只是提供了一种解决rpc的手段，不要忘记，消息在很多场景下比用rpc好得多。\n\n### 8. 定时服务只能单点部署，如何做高可用\n\n定时任务可以做高可用，开源有解决方案，quartz也有解决方案。两种思路：\n\n1. 基于quartz官方的数据库方案。\n2. 数据库存任务，用zookeeper之类的来做任务分配，用quartz来做节点上的定时任务。\n\n\n### 9. 怎样才能评估服务拆分的合理性\n\n* 若非可重用，先尽量不要拆分。微服务这样的入大流的名词，做起来需要很多基础设施做支撑。单体应用能支撑得很好，组件化，模块化也很不错。\n* 服务拆分尽量按照领域来设计，高内聚、低耦合是目标(参考面向对象设计的基本原则)。服务粒度靠业务场景养出来的，准则很多，需要根据业务场景来逐步演进。\n* 公司的技术架构能改变公司的业务发展现状！！！技术真的能带来生产力！！！可以参考阿里巴巴`大中台，小前台`的思路。不过要看阶段，合适的阶段做合适的事情，技术能带来价值，也能带来麻烦。一切都是取舍。\n\n\n### 10. web项目分布式集群时session共享有什么好的实践。\n\nspring session+redis或者spring session+内存网格(Hazelcast\\ Ignite）\n\n\n\n### 11. Dubbo服务不停机升级，如何让正在运行的处理完毕，并且不接收新请求的\n\n我们内部的版本修复了这个问题。步骤如下：\n\n* provider通知consumer,不要发新请求过来（zookeeper unregister service）\n* provider等待服务执行完毕 (provider计数)\n* consumer等待服务执行完毕 (执行完毕后provider计数)\n* provider关闭\n* cusumer关闭\n\n### 12. 易极付这边的页面自动生成技术是如何实现的？\n\n通过自动生成的业务主要用于后台管理，包括：新增，修改，删除，分页，导入，导出等功能。做起来比较简单，访问数据库获取元数据，通过freemarker生成代码。\n\n\n### 13. 支付系统的异步通知的实现，如何优雅的控制通知的频率\n\n我们内部有一个通知服务，所有要对外通知的系统向通知服务发送消息。通知系统记录任务，通过异步http向外发送消息。每个任务维护通知的状态。现在通知间隔是逐步递增的。\n\n\n### 14. 包的版本使用SNAPSHOT，怎样确保使用gradle下载的是最新的jar包\n\ngradle有5年多没有用了，大概参考官方文档[gradle:controlling_caching](https://docs.gradle.org/current/userguide/dependency_management.html#sec:controlling_caching)可以做到。\n\n### 15. 遇到回调先于同步返回的情况，该如何处理？\n\n对于服务调用方，需要考虑幂等。谁先回来都无所谓。\n","slug":"一次技术问答","published":1,"updated":"2018-04-01T16:53:17.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksio0047p0ugeoy5dye2","content":"<p>最近一年多都没有写博客了，技术上做了很多有意义的事情，也有一些经验上的积累，逐步沉淀到博客上。</p>\n<p>今天回答某公司的技术上的一些疑问，把问题和回答贴上来。逐步<code>养</code>自己的技术观。</p>\n<a id=\"more\"></a>\n<h3 id=\"1-如何做数据安全防范？还有哪些支付安全需要注意？\"><a href=\"#1-如何做数据安全防范？还有哪些支付安全需要注意？\" class=\"headerlink\" title=\"1. 如何做数据安全防范？还有哪些支付安全需要注意？\"></a>1. 如何做数据安全防范？还有哪些支付安全需要注意？</h3><p>数据安全防范主要分为两个方面：</p>\n<ol>\n<li><p>内部</p>\n<ul>\n<li>数据库管理员职责单一，不能既懂业务，又懂数据库</li>\n<li>数据库合理管控</li>\n<li>日志脱敏</li>\n<li>线上导入到线下的测试数据需要审核</li>\n</ul>\n</li>\n<li><p>外部</p>\n<p> 防止数据被泄露出去，比如sql防注入，服务器权限合理管控，数据访问需要进行合理的授权(比如遍历id就能把数据查出来)</p>\n</li>\n</ol>\n<p>技术上的安全关注下owasp top 10，业务上的安全需要属于风控了，这块我了解的比较少，比如基本的同卡进出。</p>\n<h3 id=\"2-认证授权怎样拦截无效用户？\"><a href=\"#2-认证授权怎样拦截无效用户？\" class=\"headerlink\" title=\"2. 认证授权怎样拦截无效用户？\"></a>2. 认证授权怎样拦截无效用户？</h3><p>上下文说得不是很清楚。我理解为，认证服务的能力。除了功能性需求，可能还需要一些非功能性需求。比如认证服务需要使用缓存，认证服务需要有限流。</p>\n<h3 id=\"3-分布式性能提升的方案-数据模型设计有哪些最佳实践？\"><a href=\"#3-分布式性能提升的方案-数据模型设计有哪些最佳实践？\" class=\"headerlink\" title=\"3. 分布式性能提升的方案. 数据模型设计有哪些最佳实践？\"></a>3. 分布式性能提升的方案. 数据模型设计有哪些最佳实践？</h3><p>这个话题太大，我只能大概说下：</p>\n<ol>\n<li>首先要平衡组件和服务之间的关系，毕竟分布式第一定律：不要分布式</li>\n<li>分布式场景，应该要考虑允许数据不一致的情况，合适的引入缓存</li>\n<li>所有的性能问题，其实是怎么把资源榨干，了解各种资源的特性，就了解了如何取舍资源利用率</li>\n<li>性能需要考虑，在项目前期，要对性能有预期，留下足够扩展的点，不要过多投入，也不能完全不管。</li>\n</ol>\n<h3 id=\"4-交易相关分布式事务控制-log的处理方式-异常处理机制请随意分享一些实际的经验\"><a href=\"#4-交易相关分布式事务控制-log的处理方式-异常处理机制请随意分享一些实际的经验\" class=\"headerlink\" title=\"4. 交易相关分布式事务控制. log的处理方式. 异常处理机制请随意分享一些实际的经验\"></a>4. 交易相关分布式事务控制. log的处理方式. 异常处理机制请随意分享一些实际的经验</h3><ol>\n<li>分布式事务不要碰，简单的做法：服务提供方幂等+服务使用方努力尝试。这样做开销最小，毕竟失败不是常态。</li>\n<li>log不要阻塞业务的执行。log中应该要保留请求唯一id，便于做链路分析。open-tracing还不错。</li>\n<li>异常的处理原则：a. 业务尽量不要处理异常，交给框架，这样代码写起来会很优雅(框架异常处理器来处理)。b. 不要吞掉底层异常 c. 业务异常要考虑下是否必须收集栈信息(不收集栈信息可以减少日志，并提高性能)</li>\n</ol>\n<h3 id=\"5-分享一下中间件使用场景\"><a href=\"#5-分享一下中间件使用场景\" class=\"headerlink\" title=\"5. 分享一下中间件使用场景\"></a>5. 分享一下中间件使用场景</h3><p><code>中间件</code>这个词太大了。没办法讲。</p>\n<h3 id=\"6-用dubbo框架多服务之间rpc调用同步返回这种需求有什么好的方法来保证实时性返回，因为整个服务链调执行完后还需要每个链路挨个返回效率很低\"><a href=\"#6-用dubbo框架多服务之间rpc调用同步返回这种需求有什么好的方法来保证实时性返回，因为整个服务链调执行完后还需要每个链路挨个返回效率很低\" class=\"headerlink\" title=\"6. 用dubbo框架多服务之间rpc调用同步返回这种需求有什么好的方法来保证实时性返回，因为整个服务链调执行完后还需要每个链路挨个返回效率很低\"></a>6. 用dubbo框架多服务之间rpc调用同步返回这种需求有什么好的方法来保证实时性返回，因为整个服务链调执行完后还需要每个链路挨个返回效率很低</h3><p>这个不是dubbo的问题。该异步的异步，该并行的并行，能缓存的缓存，性能自然好了。</p>\n<h3 id=\"7-封装mq做同步返回替代rpc同步返回机制是否可行\"><a href=\"#7-封装mq做同步返回替代rpc同步返回机制是否可行\" class=\"headerlink\" title=\"7. 封装mq做同步返回替代rpc同步返回机制是否可行\"></a>7. 封装mq做同步返回替代rpc同步返回机制是否可行</h3><p>mq做同步返回？mq本来就是异步的，同步只是在交互上的同步，由两个异步的场景+等待组合成对外部的异步，这样做意义不大把？</p>\n<p>soa中，dubbo只是提供了一种解决rpc的手段，不要忘记，消息在很多场景下比用rpc好得多。</p>\n<h3 id=\"8-定时服务只能单点部署，如何做高可用\"><a href=\"#8-定时服务只能单点部署，如何做高可用\" class=\"headerlink\" title=\"8. 定时服务只能单点部署，如何做高可用\"></a>8. 定时服务只能单点部署，如何做高可用</h3><p>定时任务可以做高可用，开源有解决方案，quartz也有解决方案。两种思路：</p>\n<ol>\n<li>基于quartz官方的数据库方案。</li>\n<li>数据库存任务，用zookeeper之类的来做任务分配，用quartz来做节点上的定时任务。</li>\n</ol>\n<h3 id=\"9-怎样才能评估服务拆分的合理性\"><a href=\"#9-怎样才能评估服务拆分的合理性\" class=\"headerlink\" title=\"9. 怎样才能评估服务拆分的合理性\"></a>9. 怎样才能评估服务拆分的合理性</h3><ul>\n<li>若非可重用，先尽量不要拆分。微服务这样的入大流的名词，做起来需要很多基础设施做支撑。单体应用能支撑得很好，组件化，模块化也很不错。</li>\n<li>服务拆分尽量按照领域来设计，高内聚、低耦合是目标(参考面向对象设计的基本原则)。服务粒度靠业务场景养出来的，准则很多，需要根据业务场景来逐步演进。</li>\n<li>公司的技术架构能改变公司的业务发展现状！！！技术真的能带来生产力！！！可以参考阿里巴巴<code>大中台，小前台</code>的思路。不过要看阶段，合适的阶段做合适的事情，技术能带来价值，也能带来麻烦。一切都是取舍。</li>\n</ul>\n<h3 id=\"10-web项目分布式集群时session共享有什么好的实践。\"><a href=\"#10-web项目分布式集群时session共享有什么好的实践。\" class=\"headerlink\" title=\"10. web项目分布式集群时session共享有什么好的实践。\"></a>10. web项目分布式集群时session共享有什么好的实践。</h3><p>spring session+redis或者spring session+内存网格(Hazelcast\\ Ignite）</p>\n<h3 id=\"11-Dubbo服务不停机升级，如何让正在运行的处理完毕，并且不接收新请求的\"><a href=\"#11-Dubbo服务不停机升级，如何让正在运行的处理完毕，并且不接收新请求的\" class=\"headerlink\" title=\"11. Dubbo服务不停机升级，如何让正在运行的处理完毕，并且不接收新请求的\"></a>11. Dubbo服务不停机升级，如何让正在运行的处理完毕，并且不接收新请求的</h3><p>我们内部的版本修复了这个问题。步骤如下：</p>\n<ul>\n<li>provider通知consumer,不要发新请求过来（zookeeper unregister service）</li>\n<li>provider等待服务执行完毕 (provider计数)</li>\n<li>consumer等待服务执行完毕 (执行完毕后provider计数)</li>\n<li>provider关闭</li>\n<li>cusumer关闭</li>\n</ul>\n<h3 id=\"12-易极付这边的页面自动生成技术是如何实现的？\"><a href=\"#12-易极付这边的页面自动生成技术是如何实现的？\" class=\"headerlink\" title=\"12. 易极付这边的页面自动生成技术是如何实现的？\"></a>12. 易极付这边的页面自动生成技术是如何实现的？</h3><p>通过自动生成的业务主要用于后台管理，包括：新增，修改，删除，分页，导入，导出等功能。做起来比较简单，访问数据库获取元数据，通过freemarker生成代码。</p>\n<h3 id=\"13-支付系统的异步通知的实现，如何优雅的控制通知的频率\"><a href=\"#13-支付系统的异步通知的实现，如何优雅的控制通知的频率\" class=\"headerlink\" title=\"13. 支付系统的异步通知的实现，如何优雅的控制通知的频率\"></a>13. 支付系统的异步通知的实现，如何优雅的控制通知的频率</h3><p>我们内部有一个通知服务，所有要对外通知的系统向通知服务发送消息。通知系统记录任务，通过异步http向外发送消息。每个任务维护通知的状态。现在通知间隔是逐步递增的。</p>\n<h3 id=\"14-包的版本使用SNAPSHOT，怎样确保使用gradle下载的是最新的jar包\"><a href=\"#14-包的版本使用SNAPSHOT，怎样确保使用gradle下载的是最新的jar包\" class=\"headerlink\" title=\"14. 包的版本使用SNAPSHOT，怎样确保使用gradle下载的是最新的jar包\"></a>14. 包的版本使用SNAPSHOT，怎样确保使用gradle下载的是最新的jar包</h3><p>gradle有5年多没有用了，大概参考官方文档<a href=\"https://docs.gradle.org/current/userguide/dependency_management.html#sec:controlling_caching\" target=\"_blank\" rel=\"noopener\">gradle:controlling_caching</a>可以做到。</p>\n<h3 id=\"15-遇到回调先于同步返回的情况，该如何处理？\"><a href=\"#15-遇到回调先于同步返回的情况，该如何处理？\" class=\"headerlink\" title=\"15. 遇到回调先于同步返回的情况，该如何处理？\"></a>15. 遇到回调先于同步返回的情况，该如何处理？</h3><p>对于服务调用方，需要考虑幂等。谁先回来都无所谓。</p>\n","site":{"data":{}},"excerpt":"<p>最近一年多都没有写博客了，技术上做了很多有意义的事情，也有一些经验上的积累，逐步沉淀到博客上。</p>\n<p>今天回答某公司的技术上的一些疑问，把问题和回答贴上来。逐步<code>养</code>自己的技术观。</p>","more":"<h3 id=\"1-如何做数据安全防范？还有哪些支付安全需要注意？\"><a href=\"#1-如何做数据安全防范？还有哪些支付安全需要注意？\" class=\"headerlink\" title=\"1. 如何做数据安全防范？还有哪些支付安全需要注意？\"></a>1. 如何做数据安全防范？还有哪些支付安全需要注意？</h3><p>数据安全防范主要分为两个方面：</p>\n<ol>\n<li><p>内部</p>\n<ul>\n<li>数据库管理员职责单一，不能既懂业务，又懂数据库</li>\n<li>数据库合理管控</li>\n<li>日志脱敏</li>\n<li>线上导入到线下的测试数据需要审核</li>\n</ul>\n</li>\n<li><p>外部</p>\n<p> 防止数据被泄露出去，比如sql防注入，服务器权限合理管控，数据访问需要进行合理的授权(比如遍历id就能把数据查出来)</p>\n</li>\n</ol>\n<p>技术上的安全关注下owasp top 10，业务上的安全需要属于风控了，这块我了解的比较少，比如基本的同卡进出。</p>\n<h3 id=\"2-认证授权怎样拦截无效用户？\"><a href=\"#2-认证授权怎样拦截无效用户？\" class=\"headerlink\" title=\"2. 认证授权怎样拦截无效用户？\"></a>2. 认证授权怎样拦截无效用户？</h3><p>上下文说得不是很清楚。我理解为，认证服务的能力。除了功能性需求，可能还需要一些非功能性需求。比如认证服务需要使用缓存，认证服务需要有限流。</p>\n<h3 id=\"3-分布式性能提升的方案-数据模型设计有哪些最佳实践？\"><a href=\"#3-分布式性能提升的方案-数据模型设计有哪些最佳实践？\" class=\"headerlink\" title=\"3. 分布式性能提升的方案. 数据模型设计有哪些最佳实践？\"></a>3. 分布式性能提升的方案. 数据模型设计有哪些最佳实践？</h3><p>这个话题太大，我只能大概说下：</p>\n<ol>\n<li>首先要平衡组件和服务之间的关系，毕竟分布式第一定律：不要分布式</li>\n<li>分布式场景，应该要考虑允许数据不一致的情况，合适的引入缓存</li>\n<li>所有的性能问题，其实是怎么把资源榨干，了解各种资源的特性，就了解了如何取舍资源利用率</li>\n<li>性能需要考虑，在项目前期，要对性能有预期，留下足够扩展的点，不要过多投入，也不能完全不管。</li>\n</ol>\n<h3 id=\"4-交易相关分布式事务控制-log的处理方式-异常处理机制请随意分享一些实际的经验\"><a href=\"#4-交易相关分布式事务控制-log的处理方式-异常处理机制请随意分享一些实际的经验\" class=\"headerlink\" title=\"4. 交易相关分布式事务控制. log的处理方式. 异常处理机制请随意分享一些实际的经验\"></a>4. 交易相关分布式事务控制. log的处理方式. 异常处理机制请随意分享一些实际的经验</h3><ol>\n<li>分布式事务不要碰，简单的做法：服务提供方幂等+服务使用方努力尝试。这样做开销最小，毕竟失败不是常态。</li>\n<li>log不要阻塞业务的执行。log中应该要保留请求唯一id，便于做链路分析。open-tracing还不错。</li>\n<li>异常的处理原则：a. 业务尽量不要处理异常，交给框架，这样代码写起来会很优雅(框架异常处理器来处理)。b. 不要吞掉底层异常 c. 业务异常要考虑下是否必须收集栈信息(不收集栈信息可以减少日志，并提高性能)</li>\n</ol>\n<h3 id=\"5-分享一下中间件使用场景\"><a href=\"#5-分享一下中间件使用场景\" class=\"headerlink\" title=\"5. 分享一下中间件使用场景\"></a>5. 分享一下中间件使用场景</h3><p><code>中间件</code>这个词太大了。没办法讲。</p>\n<h3 id=\"6-用dubbo框架多服务之间rpc调用同步返回这种需求有什么好的方法来保证实时性返回，因为整个服务链调执行完后还需要每个链路挨个返回效率很低\"><a href=\"#6-用dubbo框架多服务之间rpc调用同步返回这种需求有什么好的方法来保证实时性返回，因为整个服务链调执行完后还需要每个链路挨个返回效率很低\" class=\"headerlink\" title=\"6. 用dubbo框架多服务之间rpc调用同步返回这种需求有什么好的方法来保证实时性返回，因为整个服务链调执行完后还需要每个链路挨个返回效率很低\"></a>6. 用dubbo框架多服务之间rpc调用同步返回这种需求有什么好的方法来保证实时性返回，因为整个服务链调执行完后还需要每个链路挨个返回效率很低</h3><p>这个不是dubbo的问题。该异步的异步，该并行的并行，能缓存的缓存，性能自然好了。</p>\n<h3 id=\"7-封装mq做同步返回替代rpc同步返回机制是否可行\"><a href=\"#7-封装mq做同步返回替代rpc同步返回机制是否可行\" class=\"headerlink\" title=\"7. 封装mq做同步返回替代rpc同步返回机制是否可行\"></a>7. 封装mq做同步返回替代rpc同步返回机制是否可行</h3><p>mq做同步返回？mq本来就是异步的，同步只是在交互上的同步，由两个异步的场景+等待组合成对外部的异步，这样做意义不大把？</p>\n<p>soa中，dubbo只是提供了一种解决rpc的手段，不要忘记，消息在很多场景下比用rpc好得多。</p>\n<h3 id=\"8-定时服务只能单点部署，如何做高可用\"><a href=\"#8-定时服务只能单点部署，如何做高可用\" class=\"headerlink\" title=\"8. 定时服务只能单点部署，如何做高可用\"></a>8. 定时服务只能单点部署，如何做高可用</h3><p>定时任务可以做高可用，开源有解决方案，quartz也有解决方案。两种思路：</p>\n<ol>\n<li>基于quartz官方的数据库方案。</li>\n<li>数据库存任务，用zookeeper之类的来做任务分配，用quartz来做节点上的定时任务。</li>\n</ol>\n<h3 id=\"9-怎样才能评估服务拆分的合理性\"><a href=\"#9-怎样才能评估服务拆分的合理性\" class=\"headerlink\" title=\"9. 怎样才能评估服务拆分的合理性\"></a>9. 怎样才能评估服务拆分的合理性</h3><ul>\n<li>若非可重用，先尽量不要拆分。微服务这样的入大流的名词，做起来需要很多基础设施做支撑。单体应用能支撑得很好，组件化，模块化也很不错。</li>\n<li>服务拆分尽量按照领域来设计，高内聚、低耦合是目标(参考面向对象设计的基本原则)。服务粒度靠业务场景养出来的，准则很多，需要根据业务场景来逐步演进。</li>\n<li>公司的技术架构能改变公司的业务发展现状！！！技术真的能带来生产力！！！可以参考阿里巴巴<code>大中台，小前台</code>的思路。不过要看阶段，合适的阶段做合适的事情，技术能带来价值，也能带来麻烦。一切都是取舍。</li>\n</ul>\n<h3 id=\"10-web项目分布式集群时session共享有什么好的实践。\"><a href=\"#10-web项目分布式集群时session共享有什么好的实践。\" class=\"headerlink\" title=\"10. web项目分布式集群时session共享有什么好的实践。\"></a>10. web项目分布式集群时session共享有什么好的实践。</h3><p>spring session+redis或者spring session+内存网格(Hazelcast\\ Ignite）</p>\n<h3 id=\"11-Dubbo服务不停机升级，如何让正在运行的处理完毕，并且不接收新请求的\"><a href=\"#11-Dubbo服务不停机升级，如何让正在运行的处理完毕，并且不接收新请求的\" class=\"headerlink\" title=\"11. Dubbo服务不停机升级，如何让正在运行的处理完毕，并且不接收新请求的\"></a>11. Dubbo服务不停机升级，如何让正在运行的处理完毕，并且不接收新请求的</h3><p>我们内部的版本修复了这个问题。步骤如下：</p>\n<ul>\n<li>provider通知consumer,不要发新请求过来（zookeeper unregister service）</li>\n<li>provider等待服务执行完毕 (provider计数)</li>\n<li>consumer等待服务执行完毕 (执行完毕后provider计数)</li>\n<li>provider关闭</li>\n<li>cusumer关闭</li>\n</ul>\n<h3 id=\"12-易极付这边的页面自动生成技术是如何实现的？\"><a href=\"#12-易极付这边的页面自动生成技术是如何实现的？\" class=\"headerlink\" title=\"12. 易极付这边的页面自动生成技术是如何实现的？\"></a>12. 易极付这边的页面自动生成技术是如何实现的？</h3><p>通过自动生成的业务主要用于后台管理，包括：新增，修改，删除，分页，导入，导出等功能。做起来比较简单，访问数据库获取元数据，通过freemarker生成代码。</p>\n<h3 id=\"13-支付系统的异步通知的实现，如何优雅的控制通知的频率\"><a href=\"#13-支付系统的异步通知的实现，如何优雅的控制通知的频率\" class=\"headerlink\" title=\"13. 支付系统的异步通知的实现，如何优雅的控制通知的频率\"></a>13. 支付系统的异步通知的实现，如何优雅的控制通知的频率</h3><p>我们内部有一个通知服务，所有要对外通知的系统向通知服务发送消息。通知系统记录任务，通过异步http向外发送消息。每个任务维护通知的状态。现在通知间隔是逐步递增的。</p>\n<h3 id=\"14-包的版本使用SNAPSHOT，怎样确保使用gradle下载的是最新的jar包\"><a href=\"#14-包的版本使用SNAPSHOT，怎样确保使用gradle下载的是最新的jar包\" class=\"headerlink\" title=\"14. 包的版本使用SNAPSHOT，怎样确保使用gradle下载的是最新的jar包\"></a>14. 包的版本使用SNAPSHOT，怎样确保使用gradle下载的是最新的jar包</h3><p>gradle有5年多没有用了，大概参考官方文档<a href=\"https://docs.gradle.org/current/userguide/dependency_management.html#sec:controlling_caching\" target=\"_blank\" rel=\"noopener\">gradle:controlling_caching</a>可以做到。</p>\n<h3 id=\"15-遇到回调先于同步返回的情况，该如何处理？\"><a href=\"#15-遇到回调先于同步返回的情况，该如何处理？\" class=\"headerlink\" title=\"15. 遇到回调先于同步返回的情况，该如何处理？\"></a>15. 遇到回调先于同步返回的情况，该如何处理？</h3><p>对于服务调用方，需要考虑幂等。谁先回来都无所谓。</p>"},{"title":"zookeeper","date":"2013-11-29T13:52:17.000Z","_content":"\n## 原理相关:\n\n1. Three ZooKeeper servers is the minimum recommended size for an ensemble, and we also recommend that they run on separate machines. Because Zookeeper requires a majority, it is best to use an odd number of machines.To create a deployment that can tolerate the failure of F machines, you should count on deploying 2xF+1 machines. \n<!--more-->\n2. The replicated database is an in-memory database containing the entire data tree. Updates are logged to disk for recoverability, and writes are serialized to disk before they are applied to the in-memory database.\n3. Read requests are serviced from the local replica of each server database. Requests that change the state of the service, write requests, are processed by an agreement protocol.As part of the agreement protocol all write requests from clients are forwarded to a single server, called the leader. The rest of the ZooKeeper servers, called followers, receive message proposals from the leader and agree upon message delivery. The messaging layer takes care of replacing leaders on failures and syncing followers with leaders.(读请求直接读本地节点，写请求写到leader节点，其他follower节点从leader同步)\n\n4. zookeeper对于修改操作会优先顺序写入事务日志，保证可用性，所以不能使用很繁忙的设备写事务日志。\n\n5. dataDir store the in-memory database snapshots \n\n6. 使用 daemontools or SMF来保证zookeeper进程down后自动重启\n\n7. If you only have one storage device, put trace files on NFS and increase the snapshotCount; it doesn't eliminate the problem, but it should mitigate it.\n\n8. 可以在zookeeper集群前使用L4 LB,但是要注意LB failure detect机制，保证能快速的发现后端失败的服务器.不然的话，请求有可能被发送到down掉的server上。（[Can I run an ensemble cluster behind a load balancer?](https://cwiki.apache.org/confluence/display/ZOOKEEPER/FAQ )）\n\n9. 在每个ZK机器上，我们需要在数据目录（数据目录就是dataDir参数指定的那个目录）下创建一个myid文件，myid中就是这个Server ID数字。\n\n10. zookeeper监控\n\n\t\thttp://jm.taobao.org/2012/01/12/zookeeper%E7%9B%91%E6%8E%A7/ \n\n11. java client\n\n\t\thttps://github.com/Netflix/curator\n\n\t应该是最优秀的zookeeper client了，避免原生client的一些问题，并提供一些常用的工具\n\n12. zookeeper eclipse插件\n\n \t\thttp://www.massedynamic.org/mediawiki/index.php?title=Eclipse_Plug-in_for_ZooKeeper\n\n13. 跨机房使用Observer\n\n\tObserver不参与选举,永远是follower.跨机房时,读请求直接在Observer上搞定,写操作转到leader\n14. 其他资料：\n\n\n\t\thttp://rdc.taobao.com/team/jm/archives/2318\n\t\thttps://cwiki.apache.org/confluence/display/ZOOKEEPER/Index\n\t\thttps://cwiki.apache.org/confluence/display/CURATOR/Third+Party+Articles\n\t\thttp://wiki.apache.org/hadoop/ZooKeeper/FAQ\n\t\t\n-------------\n\n## 开发相关:\n\n### 1.怎么处理CONNECTION_LOSS?\n\t\nCONNECTION_LOSS意味着客户端和服务器端的连接坏了(坏了并不一定就是完全断开了,可能是连接不稳定).此异常并不意味着发送给zookeeper服务端的请求处理失败.当create请求发送到zk服务器并处理后,在响应时,网络坏了.这种情况下,需要用户判断是否处理成功或者重试.\n\t\nzookeeper官方提供的Locker通过在EPHEMERAL_SEQUENTIAL中加入sessionId来判断当前session是否已经创建node.\n\n### 2.怎么处理SESSION_EXPIRED?\n\t\nSESSION_EXPIRED说明客户端和zk服务端已经出现了网络分区,并且分区间隔时间超过了session timeout,zk服务器认为此client已经挂掉了.\n\t\nzk集群来管理会话过期.zk client和服务端建立连接时,会设置一个timeout值,集群通过此值来确定session过期.当session过期后,集群会删除此会话的所有的ephemeral节点,并通知watcher.**在这个时候,会话过期的节点和集群的连接仍然是断开的,当连接被重新建立后,会被通知session expiration.(客户端收到session expiration是当客户端又和zookeeper服务端重连后,client在网络异常的情况下,不知道何时session expiration)**\n\t\n\t状态流转的例子如下:\n\t\n\t\t1. 'connected' : session is established and client is communicating with cluster (client/server communication is operating properly)\n\t\t2. .... client is partitioned from the cluster\n\t\t3.'disconnected' : client has lost connectivity with the cluster\n\t\t4. .... time elapses, after 'timeout' period the cluster expires the session, nothing is seen by client as it is disconnected from cluster\n\t\t5. .... time elapses, the client regains network level connectivity with the cluster\n\t\t6. 'expired' : eventually the client reconnects to the cluster, it is then notified of the expiration\n\n\t\n\t\n### 3.InterruptedException\n\t\nZooKeeper遵循java的线程中断机制,也通过此方式来取消用户操作.可以参照下面的代码,让InterruptedException中断操作,或者把此异常抛出去,让使用方来处理.\n\t\n\t\t@Override\n\t\tpublic void process(WatchedEvent event) {\n\t\t\tif (event.getType() == EventType.NodeDataChanged) { \n\t\t\t\ttry {\n\t\t\t\t\tdisplayConfig();\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\tSystem.err.println(\"Interrupted. Exiting.\"); \n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t} catch (KeeperException e) { \n\t\t\t\t\tSystem.err.printf(\"KeeperException: %s. Exiting.\\n\", e);\n\t\t\t\t} \n\t\t\t}\n\t\t}\n\n\n### 4.time\n\t\nA low session timeout leads to faster detection of machine failure. \n\nApplications that create more complex ephemeral state should favor longer session timeouts, as the cost of reconstruction is higher. In some cases, it is possible to design the application so it can restart within the session timeout period and avoid session expiry. (This might be desirable to perform maintenance or upgrades). **Every session is given a unique identity and password by the server, and if these are passed to ZooKeeper while a connection is being made, it is possible to recover a session (as long as it hasn’t expired)**. An application can therefore arrange a graceful shutdown, whereby it stores the session identity and password to stable storage before restarting the pro- cess, retrieving the stored session identity and password and recovering the session.\n\n### 5.The single event thread\n\t\n每个zookeeper对象有一个线程来分发事件给watchers.如果你在watcher里面处理很耗时的操作,那么其他watchers会等这个watcher内处理完.\n\n### 6.官方demo分析\n\n基本原理:\n\n在`dir`(简单理解为lock string)下面创建sequential ephemeral node(后面简称Node),如果创建的node序列号最小,则表明当前连接就是锁的持有者.\n\n这里需要注意几个地方:\n\n1. 在创建Node过程中网络分区,导致ConnectionLossException\n   \n   比如在zookeeper服务端节点已经创建成功了,但是在返回结果时,网络出问题了.这个时候我们唯一能做的只是重试.但是重试创建节点操作又会导致新的Node被创建,最后出现没人管的孤儿节点,死锁奇迹般的发生了.\n   \n   出现ConnectionLossException异常后,节点通过重试,SeesionId不会改变.官方的例子通过`\"x-\" + sessionId + \"-\"`作为`prefix`来检查这种情况.\n   \n   在排序Node时,先比较`prefix`,再比较`sequence`.\n\n2. 羊群效应\n   \n   如果在getChildren时加上watcher会导致每次child被删除时,所有child都会收到通知.如果在集群规模很大时,就很悲剧了.这里可以只监听比当前序号小的Node,来减少网络压力.比如Node-27监听Node-26,Node-26监听Node25\n\n3. 其他异常处理\n\n   对于不可恢复的异常,比如`SessionExpiredException`(The session timeout may not be less than 2 ticks or more than 20),这个异常需要抛给用户来处理,可以通过回调的方式让用户加入异常处理逻辑.\n      \n   `InterruptedException`异常要么抛出去,要么调用`Thread.currentThread().interrupt()`,别抓住了自己吃掉.\n   \n   \n官方的lock实现还算不错,只是太低层次了点(重试带着简单粗暴的美感,但是对于非幂等性操作谨慎).我们还需要通过`LockListener`结合`CountDownLatch`(当lockAcquired时countDown),来提供可阻塞的API.当然最好是我们弄个`java.util.concurrent.locks.Lock`的分布式锁实现.\n\n参考:\n\n\thttp://wiki.apache.org/hadoop/ZooKeeper/Troubleshooting\n\thttps://www.inkling.com/read/hadoop-definitive-guide-tom-white-3rd/chapter-14/building-applications-with\n\thttp://wiki.apache.org/hadoop/ZooKeeper/ErrorHandling\n\n\n","source":"_posts/zookeeper-dev-ops.md","raw":"---\ntitle: zookeeper\ndate: 2013-11-29 21:52:17\ncategories: java\ntags:\n  - ZOOKEEPER\n---\n\n## 原理相关:\n\n1. Three ZooKeeper servers is the minimum recommended size for an ensemble, and we also recommend that they run on separate machines. Because Zookeeper requires a majority, it is best to use an odd number of machines.To create a deployment that can tolerate the failure of F machines, you should count on deploying 2xF+1 machines. \n<!--more-->\n2. The replicated database is an in-memory database containing the entire data tree. Updates are logged to disk for recoverability, and writes are serialized to disk before they are applied to the in-memory database.\n3. Read requests are serviced from the local replica of each server database. Requests that change the state of the service, write requests, are processed by an agreement protocol.As part of the agreement protocol all write requests from clients are forwarded to a single server, called the leader. The rest of the ZooKeeper servers, called followers, receive message proposals from the leader and agree upon message delivery. The messaging layer takes care of replacing leaders on failures and syncing followers with leaders.(读请求直接读本地节点，写请求写到leader节点，其他follower节点从leader同步)\n\n4. zookeeper对于修改操作会优先顺序写入事务日志，保证可用性，所以不能使用很繁忙的设备写事务日志。\n\n5. dataDir store the in-memory database snapshots \n\n6. 使用 daemontools or SMF来保证zookeeper进程down后自动重启\n\n7. If you only have one storage device, put trace files on NFS and increase the snapshotCount; it doesn't eliminate the problem, but it should mitigate it.\n\n8. 可以在zookeeper集群前使用L4 LB,但是要注意LB failure detect机制，保证能快速的发现后端失败的服务器.不然的话，请求有可能被发送到down掉的server上。（[Can I run an ensemble cluster behind a load balancer?](https://cwiki.apache.org/confluence/display/ZOOKEEPER/FAQ )）\n\n9. 在每个ZK机器上，我们需要在数据目录（数据目录就是dataDir参数指定的那个目录）下创建一个myid文件，myid中就是这个Server ID数字。\n\n10. zookeeper监控\n\n\t\thttp://jm.taobao.org/2012/01/12/zookeeper%E7%9B%91%E6%8E%A7/ \n\n11. java client\n\n\t\thttps://github.com/Netflix/curator\n\n\t应该是最优秀的zookeeper client了，避免原生client的一些问题，并提供一些常用的工具\n\n12. zookeeper eclipse插件\n\n \t\thttp://www.massedynamic.org/mediawiki/index.php?title=Eclipse_Plug-in_for_ZooKeeper\n\n13. 跨机房使用Observer\n\n\tObserver不参与选举,永远是follower.跨机房时,读请求直接在Observer上搞定,写操作转到leader\n14. 其他资料：\n\n\n\t\thttp://rdc.taobao.com/team/jm/archives/2318\n\t\thttps://cwiki.apache.org/confluence/display/ZOOKEEPER/Index\n\t\thttps://cwiki.apache.org/confluence/display/CURATOR/Third+Party+Articles\n\t\thttp://wiki.apache.org/hadoop/ZooKeeper/FAQ\n\t\t\n-------------\n\n## 开发相关:\n\n### 1.怎么处理CONNECTION_LOSS?\n\t\nCONNECTION_LOSS意味着客户端和服务器端的连接坏了(坏了并不一定就是完全断开了,可能是连接不稳定).此异常并不意味着发送给zookeeper服务端的请求处理失败.当create请求发送到zk服务器并处理后,在响应时,网络坏了.这种情况下,需要用户判断是否处理成功或者重试.\n\t\nzookeeper官方提供的Locker通过在EPHEMERAL_SEQUENTIAL中加入sessionId来判断当前session是否已经创建node.\n\n### 2.怎么处理SESSION_EXPIRED?\n\t\nSESSION_EXPIRED说明客户端和zk服务端已经出现了网络分区,并且分区间隔时间超过了session timeout,zk服务器认为此client已经挂掉了.\n\t\nzk集群来管理会话过期.zk client和服务端建立连接时,会设置一个timeout值,集群通过此值来确定session过期.当session过期后,集群会删除此会话的所有的ephemeral节点,并通知watcher.**在这个时候,会话过期的节点和集群的连接仍然是断开的,当连接被重新建立后,会被通知session expiration.(客户端收到session expiration是当客户端又和zookeeper服务端重连后,client在网络异常的情况下,不知道何时session expiration)**\n\t\n\t状态流转的例子如下:\n\t\n\t\t1. 'connected' : session is established and client is communicating with cluster (client/server communication is operating properly)\n\t\t2. .... client is partitioned from the cluster\n\t\t3.'disconnected' : client has lost connectivity with the cluster\n\t\t4. .... time elapses, after 'timeout' period the cluster expires the session, nothing is seen by client as it is disconnected from cluster\n\t\t5. .... time elapses, the client regains network level connectivity with the cluster\n\t\t6. 'expired' : eventually the client reconnects to the cluster, it is then notified of the expiration\n\n\t\n\t\n### 3.InterruptedException\n\t\nZooKeeper遵循java的线程中断机制,也通过此方式来取消用户操作.可以参照下面的代码,让InterruptedException中断操作,或者把此异常抛出去,让使用方来处理.\n\t\n\t\t@Override\n\t\tpublic void process(WatchedEvent event) {\n\t\t\tif (event.getType() == EventType.NodeDataChanged) { \n\t\t\t\ttry {\n\t\t\t\t\tdisplayConfig();\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\tSystem.err.println(\"Interrupted. Exiting.\"); \n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t} catch (KeeperException e) { \n\t\t\t\t\tSystem.err.printf(\"KeeperException: %s. Exiting.\\n\", e);\n\t\t\t\t} \n\t\t\t}\n\t\t}\n\n\n### 4.time\n\t\nA low session timeout leads to faster detection of machine failure. \n\nApplications that create more complex ephemeral state should favor longer session timeouts, as the cost of reconstruction is higher. In some cases, it is possible to design the application so it can restart within the session timeout period and avoid session expiry. (This might be desirable to perform maintenance or upgrades). **Every session is given a unique identity and password by the server, and if these are passed to ZooKeeper while a connection is being made, it is possible to recover a session (as long as it hasn’t expired)**. An application can therefore arrange a graceful shutdown, whereby it stores the session identity and password to stable storage before restarting the pro- cess, retrieving the stored session identity and password and recovering the session.\n\n### 5.The single event thread\n\t\n每个zookeeper对象有一个线程来分发事件给watchers.如果你在watcher里面处理很耗时的操作,那么其他watchers会等这个watcher内处理完.\n\n### 6.官方demo分析\n\n基本原理:\n\n在`dir`(简单理解为lock string)下面创建sequential ephemeral node(后面简称Node),如果创建的node序列号最小,则表明当前连接就是锁的持有者.\n\n这里需要注意几个地方:\n\n1. 在创建Node过程中网络分区,导致ConnectionLossException\n   \n   比如在zookeeper服务端节点已经创建成功了,但是在返回结果时,网络出问题了.这个时候我们唯一能做的只是重试.但是重试创建节点操作又会导致新的Node被创建,最后出现没人管的孤儿节点,死锁奇迹般的发生了.\n   \n   出现ConnectionLossException异常后,节点通过重试,SeesionId不会改变.官方的例子通过`\"x-\" + sessionId + \"-\"`作为`prefix`来检查这种情况.\n   \n   在排序Node时,先比较`prefix`,再比较`sequence`.\n\n2. 羊群效应\n   \n   如果在getChildren时加上watcher会导致每次child被删除时,所有child都会收到通知.如果在集群规模很大时,就很悲剧了.这里可以只监听比当前序号小的Node,来减少网络压力.比如Node-27监听Node-26,Node-26监听Node25\n\n3. 其他异常处理\n\n   对于不可恢复的异常,比如`SessionExpiredException`(The session timeout may not be less than 2 ticks or more than 20),这个异常需要抛给用户来处理,可以通过回调的方式让用户加入异常处理逻辑.\n      \n   `InterruptedException`异常要么抛出去,要么调用`Thread.currentThread().interrupt()`,别抓住了自己吃掉.\n   \n   \n官方的lock实现还算不错,只是太低层次了点(重试带着简单粗暴的美感,但是对于非幂等性操作谨慎).我们还需要通过`LockListener`结合`CountDownLatch`(当lockAcquired时countDown),来提供可阻塞的API.当然最好是我们弄个`java.util.concurrent.locks.Lock`的分布式锁实现.\n\n参考:\n\n\thttp://wiki.apache.org/hadoop/ZooKeeper/Troubleshooting\n\thttps://www.inkling.com/read/hadoop-definitive-guide-tom-white-3rd/chapter-14/building-applications-with\n\thttp://wiki.apache.org/hadoop/ZooKeeper/ErrorHandling\n\n\n","slug":"zookeeper-dev-ops","published":1,"updated":"2018-04-01T16:53:17.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfh2ksiq004ap0ugc96e9fok","content":"<h2 id=\"原理相关\"><a href=\"#原理相关\" class=\"headerlink\" title=\"原理相关:\"></a>原理相关:</h2><ol>\n<li>Three ZooKeeper servers is the minimum recommended size for an ensemble, and we also recommend that they run on separate machines. Because Zookeeper requires a majority, it is best to use an odd number of machines.To create a deployment that can tolerate the failure of F machines, you should count on deploying 2xF+1 machines. <a id=\"more\"></a></li>\n<li>The replicated database is an in-memory database containing the entire data tree. Updates are logged to disk for recoverability, and writes are serialized to disk before they are applied to the in-memory database.</li>\n<li><p>Read requests are serviced from the local replica of each server database. Requests that change the state of the service, write requests, are processed by an agreement protocol.As part of the agreement protocol all write requests from clients are forwarded to a single server, called the leader. The rest of the ZooKeeper servers, called followers, receive message proposals from the leader and agree upon message delivery. The messaging layer takes care of replacing leaders on failures and syncing followers with leaders.(读请求直接读本地节点，写请求写到leader节点，其他follower节点从leader同步)</p>\n</li>\n<li><p>zookeeper对于修改操作会优先顺序写入事务日志，保证可用性，所以不能使用很繁忙的设备写事务日志。</p>\n</li>\n<li><p>dataDir store the in-memory database snapshots </p>\n</li>\n<li><p>使用 daemontools or SMF来保证zookeeper进程down后自动重启</p>\n</li>\n<li><p>If you only have one storage device, put trace files on NFS and increase the snapshotCount; it doesn’t eliminate the problem, but it should mitigate it.</p>\n</li>\n<li><p>可以在zookeeper集群前使用L4 LB,但是要注意LB failure detect机制，保证能快速的发现后端失败的服务器.不然的话，请求有可能被发送到down掉的server上。（<a href=\"https://cwiki.apache.org/confluence/display/ZOOKEEPER/FAQ\" target=\"_blank\" rel=\"noopener\">Can I run an ensemble cluster behind a load balancer?</a>）</p>\n</li>\n<li><p>在每个ZK机器上，我们需要在数据目录（数据目录就是dataDir参数指定的那个目录）下创建一个myid文件，myid中就是这个Server ID数字。</p>\n</li>\n<li><p>zookeeper监控</p>\n<pre><code>http://jm.taobao.org/2012/01/12/zookeeper%E7%9B%91%E6%8E%A7/ \n</code></pre></li>\n<li><p>java client</p>\n<pre><code>https://github.com/Netflix/curator\n</code></pre><p>应该是最优秀的zookeeper client了，避免原生client的一些问题，并提供一些常用的工具</p>\n</li>\n<li><p>zookeeper eclipse插件</p>\n<pre><code>http://www.massedynamic.org/mediawiki/index.php?title=Eclipse_Plug-in_for_ZooKeeper\n</code></pre></li>\n<li><p>跨机房使用Observer</p>\n<p>Observer不参与选举,永远是follower.跨机房时,读请求直接在Observer上搞定,写操作转到leader</p>\n</li>\n<li>其他资料：</li>\n</ol>\n<pre><code>http://rdc.taobao.com/team/jm/archives/2318\nhttps://cwiki.apache.org/confluence/display/ZOOKEEPER/Index\nhttps://cwiki.apache.org/confluence/display/CURATOR/Third+Party+Articles\nhttp://wiki.apache.org/hadoop/ZooKeeper/FAQ\n</code></pre><hr>\n<h2 id=\"开发相关\"><a href=\"#开发相关\" class=\"headerlink\" title=\"开发相关:\"></a>开发相关:</h2><h3 id=\"1-怎么处理CONNECTION-LOSS\"><a href=\"#1-怎么处理CONNECTION-LOSS\" class=\"headerlink\" title=\"1.怎么处理CONNECTION_LOSS?\"></a>1.怎么处理CONNECTION_LOSS?</h3><p>CONNECTION_LOSS意味着客户端和服务器端的连接坏了(坏了并不一定就是完全断开了,可能是连接不稳定).此异常并不意味着发送给zookeeper服务端的请求处理失败.当create请求发送到zk服务器并处理后,在响应时,网络坏了.这种情况下,需要用户判断是否处理成功或者重试.</p>\n<p>zookeeper官方提供的Locker通过在EPHEMERAL_SEQUENTIAL中加入sessionId来判断当前session是否已经创建node.</p>\n<h3 id=\"2-怎么处理SESSION-EXPIRED\"><a href=\"#2-怎么处理SESSION-EXPIRED\" class=\"headerlink\" title=\"2.怎么处理SESSION_EXPIRED?\"></a>2.怎么处理SESSION_EXPIRED?</h3><p>SESSION_EXPIRED说明客户端和zk服务端已经出现了网络分区,并且分区间隔时间超过了session timeout,zk服务器认为此client已经挂掉了.</p>\n<p>zk集群来管理会话过期.zk client和服务端建立连接时,会设置一个timeout值,集群通过此值来确定session过期.当session过期后,集群会删除此会话的所有的ephemeral节点,并通知watcher.<strong>在这个时候,会话过期的节点和集群的连接仍然是断开的,当连接被重新建立后,会被通知session expiration.(客户端收到session expiration是当客户端又和zookeeper服务端重连后,client在网络异常的情况下,不知道何时session expiration)</strong></p>\n<pre><code>状态流转的例子如下:\n\n    1. &apos;connected&apos; : session is established and client is communicating with cluster (client/server communication is operating properly)\n    2. .... client is partitioned from the cluster\n    3.&apos;disconnected&apos; : client has lost connectivity with the cluster\n    4. .... time elapses, after &apos;timeout&apos; period the cluster expires the session, nothing is seen by client as it is disconnected from cluster\n    5. .... time elapses, the client regains network level connectivity with the cluster\n    6. &apos;expired&apos; : eventually the client reconnects to the cluster, it is then notified of the expiration\n</code></pre><h3 id=\"3-InterruptedException\"><a href=\"#3-InterruptedException\" class=\"headerlink\" title=\"3.InterruptedException\"></a>3.InterruptedException</h3><p>ZooKeeper遵循java的线程中断机制,也通过此方式来取消用户操作.可以参照下面的代码,让InterruptedException中断操作,或者把此异常抛出去,让使用方来处理.</p>\n<pre><code>@Override\npublic void process(WatchedEvent event) {\n    if (event.getType() == EventType.NodeDataChanged) { \n        try {\n            displayConfig();\n        } catch (InterruptedException e) {\n            System.err.println(&quot;Interrupted. Exiting.&quot;); \n            Thread.currentThread().interrupt();\n        } catch (KeeperException e) { \n            System.err.printf(&quot;KeeperException: %s. Exiting.\\n&quot;, e);\n        } \n    }\n}\n</code></pre><h3 id=\"4-time\"><a href=\"#4-time\" class=\"headerlink\" title=\"4.time\"></a>4.time</h3><p>A low session timeout leads to faster detection of machine failure. </p>\n<p>Applications that create more complex ephemeral state should favor longer session timeouts, as the cost of reconstruction is higher. In some cases, it is possible to design the application so it can restart within the session timeout period and avoid session expiry. (This might be desirable to perform maintenance or upgrades). <strong>Every session is given a unique identity and password by the server, and if these are passed to ZooKeeper while a connection is being made, it is possible to recover a session (as long as it hasn’t expired)</strong>. An application can therefore arrange a graceful shutdown, whereby it stores the session identity and password to stable storage before restarting the pro- cess, retrieving the stored session identity and password and recovering the session.</p>\n<h3 id=\"5-The-single-event-thread\"><a href=\"#5-The-single-event-thread\" class=\"headerlink\" title=\"5.The single event thread\"></a>5.The single event thread</h3><p>每个zookeeper对象有一个线程来分发事件给watchers.如果你在watcher里面处理很耗时的操作,那么其他watchers会等这个watcher内处理完.</p>\n<h3 id=\"6-官方demo分析\"><a href=\"#6-官方demo分析\" class=\"headerlink\" title=\"6.官方demo分析\"></a>6.官方demo分析</h3><p>基本原理:</p>\n<p>在<code>dir</code>(简单理解为lock string)下面创建sequential ephemeral node(后面简称Node),如果创建的node序列号最小,则表明当前连接就是锁的持有者.</p>\n<p>这里需要注意几个地方:</p>\n<ol>\n<li><p>在创建Node过程中网络分区,导致ConnectionLossException</p>\n<p>比如在zookeeper服务端节点已经创建成功了,但是在返回结果时,网络出问题了.这个时候我们唯一能做的只是重试.但是重试创建节点操作又会导致新的Node被创建,最后出现没人管的孤儿节点,死锁奇迹般的发生了.</p>\n<p>出现ConnectionLossException异常后,节点通过重试,SeesionId不会改变.官方的例子通过<code>&quot;x-&quot; + sessionId + &quot;-&quot;</code>作为<code>prefix</code>来检查这种情况.</p>\n<p>在排序Node时,先比较<code>prefix</code>,再比较<code>sequence</code>.</p>\n</li>\n<li><p>羊群效应</p>\n<p>如果在getChildren时加上watcher会导致每次child被删除时,所有child都会收到通知.如果在集群规模很大时,就很悲剧了.这里可以只监听比当前序号小的Node,来减少网络压力.比如Node-27监听Node-26,Node-26监听Node25</p>\n</li>\n<li><p>其他异常处理</p>\n<p>对于不可恢复的异常,比如<code>SessionExpiredException</code>(The session timeout may not be less than 2 ticks or more than 20),这个异常需要抛给用户来处理,可以通过回调的方式让用户加入异常处理逻辑.</p>\n<p><code>InterruptedException</code>异常要么抛出去,要么调用<code>Thread.currentThread().interrupt()</code>,别抓住了自己吃掉.</p>\n</li>\n</ol>\n<p>官方的lock实现还算不错,只是太低层次了点(重试带着简单粗暴的美感,但是对于非幂等性操作谨慎).我们还需要通过<code>LockListener</code>结合<code>CountDownLatch</code>(当lockAcquired时countDown),来提供可阻塞的API.当然最好是我们弄个<code>java.util.concurrent.locks.Lock</code>的分布式锁实现.</p>\n<p>参考:</p>\n<pre><code>http://wiki.apache.org/hadoop/ZooKeeper/Troubleshooting\nhttps://www.inkling.com/read/hadoop-definitive-guide-tom-white-3rd/chapter-14/building-applications-with\nhttp://wiki.apache.org/hadoop/ZooKeeper/ErrorHandling\n</code></pre>","site":{"data":{}},"excerpt":"<h2 id=\"原理相关\"><a href=\"#原理相关\" class=\"headerlink\" title=\"原理相关:\"></a>原理相关:</h2><ol>\n<li>Three ZooKeeper servers is the minimum recommended size for an ensemble, and we also recommend that they run on separate machines. Because Zookeeper requires a majority, it is best to use an odd number of machines.To create a deployment that can tolerate the failure of F machines, you should count on deploying 2xF+1 machines.</li></ol>","more":"\n<li>The replicated database is an in-memory database containing the entire data tree. Updates are logged to disk for recoverability, and writes are serialized to disk before they are applied to the in-memory database.</li>\n<li><p>Read requests are serviced from the local replica of each server database. Requests that change the state of the service, write requests, are processed by an agreement protocol.As part of the agreement protocol all write requests from clients are forwarded to a single server, called the leader. The rest of the ZooKeeper servers, called followers, receive message proposals from the leader and agree upon message delivery. The messaging layer takes care of replacing leaders on failures and syncing followers with leaders.(读请求直接读本地节点，写请求写到leader节点，其他follower节点从leader同步)</p>\n</li>\n<li><p>zookeeper对于修改操作会优先顺序写入事务日志，保证可用性，所以不能使用很繁忙的设备写事务日志。</p>\n</li>\n<li><p>dataDir store the in-memory database snapshots </p>\n</li>\n<li><p>使用 daemontools or SMF来保证zookeeper进程down后自动重启</p>\n</li>\n<li><p>If you only have one storage device, put trace files on NFS and increase the snapshotCount; it doesn’t eliminate the problem, but it should mitigate it.</p>\n</li>\n<li><p>可以在zookeeper集群前使用L4 LB,但是要注意LB failure detect机制，保证能快速的发现后端失败的服务器.不然的话，请求有可能被发送到down掉的server上。（<a href=\"https://cwiki.apache.org/confluence/display/ZOOKEEPER/FAQ\" target=\"_blank\" rel=\"noopener\">Can I run an ensemble cluster behind a load balancer?</a>）</p>\n</li>\n<li><p>在每个ZK机器上，我们需要在数据目录（数据目录就是dataDir参数指定的那个目录）下创建一个myid文件，myid中就是这个Server ID数字。</p>\n</li>\n<li><p>zookeeper监控</p>\n<pre><code>http://jm.taobao.org/2012/01/12/zookeeper%E7%9B%91%E6%8E%A7/ \n</code></pre></li>\n<li><p>java client</p>\n<pre><code>https://github.com/Netflix/curator\n</code></pre><p>应该是最优秀的zookeeper client了，避免原生client的一些问题，并提供一些常用的工具</p>\n</li>\n<li><p>zookeeper eclipse插件</p>\n<pre><code>http://www.massedynamic.org/mediawiki/index.php?title=Eclipse_Plug-in_for_ZooKeeper\n</code></pre></li>\n<li><p>跨机房使用Observer</p>\n<p>Observer不参与选举,永远是follower.跨机房时,读请求直接在Observer上搞定,写操作转到leader</p>\n</li>\n<li>其他资料：</li>\n\n<pre><code>http://rdc.taobao.com/team/jm/archives/2318\nhttps://cwiki.apache.org/confluence/display/ZOOKEEPER/Index\nhttps://cwiki.apache.org/confluence/display/CURATOR/Third+Party+Articles\nhttp://wiki.apache.org/hadoop/ZooKeeper/FAQ\n</code></pre><hr>\n<h2 id=\"开发相关\"><a href=\"#开发相关\" class=\"headerlink\" title=\"开发相关:\"></a>开发相关:</h2><h3 id=\"1-怎么处理CONNECTION-LOSS\"><a href=\"#1-怎么处理CONNECTION-LOSS\" class=\"headerlink\" title=\"1.怎么处理CONNECTION_LOSS?\"></a>1.怎么处理CONNECTION_LOSS?</h3><p>CONNECTION_LOSS意味着客户端和服务器端的连接坏了(坏了并不一定就是完全断开了,可能是连接不稳定).此异常并不意味着发送给zookeeper服务端的请求处理失败.当create请求发送到zk服务器并处理后,在响应时,网络坏了.这种情况下,需要用户判断是否处理成功或者重试.</p>\n<p>zookeeper官方提供的Locker通过在EPHEMERAL_SEQUENTIAL中加入sessionId来判断当前session是否已经创建node.</p>\n<h3 id=\"2-怎么处理SESSION-EXPIRED\"><a href=\"#2-怎么处理SESSION-EXPIRED\" class=\"headerlink\" title=\"2.怎么处理SESSION_EXPIRED?\"></a>2.怎么处理SESSION_EXPIRED?</h3><p>SESSION_EXPIRED说明客户端和zk服务端已经出现了网络分区,并且分区间隔时间超过了session timeout,zk服务器认为此client已经挂掉了.</p>\n<p>zk集群来管理会话过期.zk client和服务端建立连接时,会设置一个timeout值,集群通过此值来确定session过期.当session过期后,集群会删除此会话的所有的ephemeral节点,并通知watcher.<strong>在这个时候,会话过期的节点和集群的连接仍然是断开的,当连接被重新建立后,会被通知session expiration.(客户端收到session expiration是当客户端又和zookeeper服务端重连后,client在网络异常的情况下,不知道何时session expiration)</strong></p>\n<pre><code>状态流转的例子如下:\n\n    1. &apos;connected&apos; : session is established and client is communicating with cluster (client/server communication is operating properly)\n    2. .... client is partitioned from the cluster\n    3.&apos;disconnected&apos; : client has lost connectivity with the cluster\n    4. .... time elapses, after &apos;timeout&apos; period the cluster expires the session, nothing is seen by client as it is disconnected from cluster\n    5. .... time elapses, the client regains network level connectivity with the cluster\n    6. &apos;expired&apos; : eventually the client reconnects to the cluster, it is then notified of the expiration\n</code></pre><h3 id=\"3-InterruptedException\"><a href=\"#3-InterruptedException\" class=\"headerlink\" title=\"3.InterruptedException\"></a>3.InterruptedException</h3><p>ZooKeeper遵循java的线程中断机制,也通过此方式来取消用户操作.可以参照下面的代码,让InterruptedException中断操作,或者把此异常抛出去,让使用方来处理.</p>\n<pre><code>@Override\npublic void process(WatchedEvent event) {\n    if (event.getType() == EventType.NodeDataChanged) { \n        try {\n            displayConfig();\n        } catch (InterruptedException e) {\n            System.err.println(&quot;Interrupted. Exiting.&quot;); \n            Thread.currentThread().interrupt();\n        } catch (KeeperException e) { \n            System.err.printf(&quot;KeeperException: %s. Exiting.\\n&quot;, e);\n        } \n    }\n}\n</code></pre><h3 id=\"4-time\"><a href=\"#4-time\" class=\"headerlink\" title=\"4.time\"></a>4.time</h3><p>A low session timeout leads to faster detection of machine failure. </p>\n<p>Applications that create more complex ephemeral state should favor longer session timeouts, as the cost of reconstruction is higher. In some cases, it is possible to design the application so it can restart within the session timeout period and avoid session expiry. (This might be desirable to perform maintenance or upgrades). <strong>Every session is given a unique identity and password by the server, and if these are passed to ZooKeeper while a connection is being made, it is possible to recover a session (as long as it hasn’t expired)</strong>. An application can therefore arrange a graceful shutdown, whereby it stores the session identity and password to stable storage before restarting the pro- cess, retrieving the stored session identity and password and recovering the session.</p>\n<h3 id=\"5-The-single-event-thread\"><a href=\"#5-The-single-event-thread\" class=\"headerlink\" title=\"5.The single event thread\"></a>5.The single event thread</h3><p>每个zookeeper对象有一个线程来分发事件给watchers.如果你在watcher里面处理很耗时的操作,那么其他watchers会等这个watcher内处理完.</p>\n<h3 id=\"6-官方demo分析\"><a href=\"#6-官方demo分析\" class=\"headerlink\" title=\"6.官方demo分析\"></a>6.官方demo分析</h3><p>基本原理:</p>\n<p>在<code>dir</code>(简单理解为lock string)下面创建sequential ephemeral node(后面简称Node),如果创建的node序列号最小,则表明当前连接就是锁的持有者.</p>\n<p>这里需要注意几个地方:</p>\n<ol>\n<li><p>在创建Node过程中网络分区,导致ConnectionLossException</p>\n<p>比如在zookeeper服务端节点已经创建成功了,但是在返回结果时,网络出问题了.这个时候我们唯一能做的只是重试.但是重试创建节点操作又会导致新的Node被创建,最后出现没人管的孤儿节点,死锁奇迹般的发生了.</p>\n<p>出现ConnectionLossException异常后,节点通过重试,SeesionId不会改变.官方的例子通过<code>&quot;x-&quot; + sessionId + &quot;-&quot;</code>作为<code>prefix</code>来检查这种情况.</p>\n<p>在排序Node时,先比较<code>prefix</code>,再比较<code>sequence</code>.</p>\n</li>\n<li><p>羊群效应</p>\n<p>如果在getChildren时加上watcher会导致每次child被删除时,所有child都会收到通知.如果在集群规模很大时,就很悲剧了.这里可以只监听比当前序号小的Node,来减少网络压力.比如Node-27监听Node-26,Node-26监听Node25</p>\n</li>\n<li><p>其他异常处理</p>\n<p>对于不可恢复的异常,比如<code>SessionExpiredException</code>(The session timeout may not be less than 2 ticks or more than 20),这个异常需要抛给用户来处理,可以通过回调的方式让用户加入异常处理逻辑.</p>\n<p><code>InterruptedException</code>异常要么抛出去,要么调用<code>Thread.currentThread().interrupt()</code>,别抓住了自己吃掉.</p>\n</li>\n</ol>\n<p>官方的lock实现还算不错,只是太低层次了点(重试带着简单粗暴的美感,但是对于非幂等性操作谨慎).我们还需要通过<code>LockListener</code>结合<code>CountDownLatch</code>(当lockAcquired时countDown),来提供可阻塞的API.当然最好是我们弄个<code>java.util.concurrent.locks.Lock</code>的分布式锁实现.</p>\n<p>参考:</p>\n<pre><code>http://wiki.apache.org/hadoop/ZooKeeper/Troubleshooting\nhttps://www.inkling.com/read/hadoop-definitive-guide-tom-white-3rd/chapter-14/building-applications-with\nhttp://wiki.apache.org/hadoop/ZooKeeper/ErrorHandling\n</code></pre>"}],"PostAsset":[{"_id":"source/_posts/kryo-oom/3.jpg","slug":"3.jpg","post":"cjfh2kshu0038p0ugnbxzolui","modified":0,"renderable":0},{"_id":"source/_posts/2014-03-reading-notes/volatilevsstaticinjava.png","slug":"volatilevsstaticinjava.png","post":"cjfh2ksfb0008p0ugq47b1c13","modified":0,"renderable":0},{"_id":"source/_posts/2014-11-reading-notes/access_delay_bandwidth.gif","slug":"access_delay_bandwidth.gif","post":"cjfh2ksfx000up0ugxsx2s9a0","modified":0,"renderable":0},{"_id":"source/_posts/2016-02-reading-notes/devops.jpg","slug":"devops.jpg","post":"cjfh2ksgm001mp0ugl7zlumom","modified":0,"renderable":0},{"_id":"source/_posts/why-react/reactjs.png","slug":"reactjs.png","post":"cjfh2ksim0042p0ugoqt8hlze","modified":0,"renderable":0},{"_id":"source/_posts/docker/devops.jpg","slug":"devops.jpg","post":"cjfh2kshg002hp0ugiomsvcij","modified":0,"renderable":0},{"_id":"source/_posts/docker/docker-command.jpg","slug":"docker-command.jpg","post":"cjfh2kshg002hp0ugiomsvcij","modified":0,"renderable":0},{"_id":"source/_posts/ssh-tunneling-and-JMX-for-remote-monitor/network_topology.jpg","slug":"network_topology.jpg","post":"cjfh2ksie003sp0ug860ldue9","modified":0,"renderable":0},{"_id":"source/_posts/ssh-tunneling-and-JMX-for-remote-monitor/xshell_ssh_tunneling1.jpg","slug":"xshell_ssh_tunneling1.jpg","post":"cjfh2ksie003sp0ug860ldue9","modified":0,"renderable":0},{"_id":"source/_posts/ssh-tunneling-and-JMX-for-remote-monitor/xshell_ssh_tunneling2.jpg","slug":"xshell_ssh_tunneling2.jpg","post":"cjfh2ksie003sp0ug860ldue9","modified":0,"renderable":0},{"_id":"source/_posts/ssh-tunneling-and-JMX-for-remote-monitor/xshell_ssh_tunneling3.jpg","slug":"xshell_ssh_tunneling3.jpg","post":"cjfh2ksie003sp0ug860ldue9","modified":0,"renderable":0},{"_id":"source/_posts/kryo-oom/1.jpg","slug":"1.jpg","post":"cjfh2kshu0038p0ugnbxzolui","modified":0,"renderable":0},{"_id":"source/_posts/kryo-oom/2.jpg","slug":"2.jpg","post":"cjfh2kshu0038p0ugnbxzolui","modified":0,"renderable":0},{"_id":"source/_posts/kryo-oom/4.jpg","slug":"4.jpg","post":"cjfh2kshu0038p0ugnbxzolui","modified":0,"renderable":0},{"_id":"source/_posts/kryo-oom/5.jpg","slug":"5.jpg","post":"cjfh2kshu0038p0ugnbxzolui","modified":0,"renderable":0},{"_id":"source/_posts/zero-copy/figure1.gif","slug":"figure1.gif","post":"cjfh2ksin0044p0ugzjvrg9yc","modified":0,"renderable":0},{"_id":"source/_posts/zero-copy/figure2.gif","slug":"figure2.gif","post":"cjfh2ksin0044p0ugzjvrg9yc","modified":0,"renderable":0},{"_id":"source/_posts/zero-copy/figure3.gif","slug":"figure3.gif","post":"cjfh2ksin0044p0ugzjvrg9yc","modified":0,"renderable":0},{"_id":"source/_posts/zero-copy/figure4.gif","slug":"figure4.gif","post":"cjfh2ksin0044p0ugzjvrg9yc","modified":0,"renderable":0},{"_id":"source/_posts/zero-copy/figure5.gif","slug":"figure5.gif","post":"cjfh2ksin0044p0ugzjvrg9yc","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjfh2ksf90007p0ugh0yme2zl","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksfi000dp0ughzmwti0r"},{"post_id":"cjfh2kseq0001p0ugp0avyayp","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksfm000hp0ugrniadn9z"},{"post_id":"cjfh2ksfb0008p0ugq47b1c13","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksfo000jp0ugscjd97z3"},{"post_id":"cjfh2ksff000bp0ugl5rckud5","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksfs000mp0ugby2ttcia"},{"post_id":"cjfh2ksey0003p0ugv37rkk3r","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksfv000op0uge7x6e1t6"},{"post_id":"cjfh2ksfh000cp0ugqu5r90f9","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksfx000sp0ugppqy5l9g"},{"post_id":"cjfh2ksfl000gp0ug2ta13zp1","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksfz000vp0ugl8f9nshz"},{"post_id":"cjfh2ksf60006p0ugay9k0zzd","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksg2000yp0ug6s62cerq"},{"post_id":"cjfh2ksfn000ip0ugqguvco5c","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksgb0012p0ug8u6t8vnd"},{"post_id":"cjfh2ksfq000lp0ugpsik3j5o","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksgd0015p0ugv8ljueqd"},{"post_id":"cjfh2ksft000np0ugiwnuasc5","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksgf0019p0ugr8yr4lei"},{"post_id":"cjfh2ksfw000rp0ugqd3eq417","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksgh001cp0ug2h3m5bjo"},{"post_id":"cjfh2ksfx000up0ugxsx2s9a0","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksgj001gp0ug466ng9wy"},{"post_id":"cjfh2ksg0000xp0ug1kyxzci8","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksgl001jp0ugki7ljwy5"},{"post_id":"cjfh2ksga0011p0ugbfed7yv5","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksgw001np0uguvc4owsf"},{"post_id":"cjfh2ksgg001bp0ug43yjk99c","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksgy001qp0ug3fw7jpwt"},{"post_id":"cjfh2ksgi001fp0ugyoguuqdj","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksh3001up0ugicrxe0db"},{"post_id":"cjfh2ksgk001ip0ug2oodqdfx","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksh5001xp0ugfd0mlx8k"},{"post_id":"cjfh2ksgm001mp0ugl7zlumom","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksh60020p0ugzvuow26o"},{"post_id":"cjfh2ksgx001pp0ugvkero60x","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksh80023p0ugn4p0nxb8"},{"post_id":"cjfh2ksgz001tp0ughrrtd847","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksha0025p0ug4sp11eqm"},{"post_id":"cjfh2ksh3001wp0ug0trswaeh","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2kshb0028p0ugshxsmmzk"},{"post_id":"cjfh2ksh5001zp0uga6t7j1d4","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2kshd002bp0ugqmvf24xy"},{"post_id":"cjfh2ksh70022p0ugnc3fplco","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2kshf002fp0ug6tekqyhb"},{"post_id":"cjfh2ksh80024p0ugsns49ga2","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2kshh002ip0ugttidnf3q"},{"post_id":"cjfh2ksha0027p0ugs494kxdr","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2kshk002mp0ugjnl16ncp"},{"post_id":"cjfh2kshc002ap0ug1xt7zx9s","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2kshl002pp0ugybhuycen"},{"post_id":"cjfh2kshe002ep0ugfojbydkj","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2kshm002tp0ugv7g07xch"},{"post_id":"cjfh2kshg002hp0ugiomsvcij","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksho002wp0ughfa9hc8i"},{"post_id":"cjfh2kshj002lp0ug2o8lzkq3","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2kshq002zp0ugduro6kkp"},{"post_id":"cjfh2kshk002op0ugo0vdjgpb","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2kshr0032p0ughane0tge"},{"post_id":"cjfh2kshm002sp0ugowvh7z8t","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2kshs0034p0ugatdd1txy"},{"post_id":"cjfh2kshn002vp0ugtl71o3rv","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksht0037p0ugcevc1rl0"},{"post_id":"cjfh2kshp002yp0ugv602z9bz","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2kshv0039p0ugbpq0atbc"},{"post_id":"cjfh2kshq0031p0ug38qgapd8","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2kshw003cp0uga90ldfis"},{"post_id":"cjfh2kshr0033p0ugax4j97up","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2kshx003fp0ugyxklnhcx"},{"post_id":"cjfh2kshs0036p0ugd1k6gk21","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksi0003jp0ugj7flgc2c"},{"post_id":"cjfh2kshu0038p0ugnbxzolui","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksi8003mp0ugj56mj0d2"},{"post_id":"cjfh2kshv003bp0ug97gnaisq","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksic003pp0ugsp3iaqmh"},{"post_id":"cjfh2kshw003ep0ugdf1s9ey5","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksif003tp0ugxh07imak"},{"post_id":"cjfh2kshy003ip0ugtmp87x0t","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksii003vp0ug01hgx3vh"},{"post_id":"cjfh2ksi0003lp0ugqhaf5u43","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksij003yp0ugqb6hagdu"},{"post_id":"cjfh2ksia003op0ug718vq347","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksil0040p0ugfp2ytcuz"},{"post_id":"cjfh2ksie003sp0ug860ldue9","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksin0043p0ug2wlllpmq"},{"post_id":"cjfh2ksif003up0ugegmj9yj9","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksio0045p0ugndp6x8kt"},{"post_id":"cjfh2ksii003xp0ugvyvpf1je","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksip0048p0ugpj3nki2i"},{"post_id":"cjfh2ksik003zp0ug5lbhmj6l","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksir004bp0ugn71tbx8s"},{"post_id":"cjfh2ksim0042p0ugoqt8hlze","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksir004dp0uginv5bg9j"},{"post_id":"cjfh2ksin0044p0ugzjvrg9yc","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksis004gp0ughc4pw5qz"},{"post_id":"cjfh2ksio0047p0ugeoy5dye2","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksis004ip0ugd1na1jy3"},{"post_id":"cjfh2ksiq004ap0ugc96e9fok","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2ksis004lp0ugwimaqoki"},{"post_id":"cjfh2ksgc0014p0ugiswfcwzj","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2nhn2007qp0ugenaoh3p4"},{"post_id":"cjfh2ksge0018p0ugkexptpxj","category_id":"cjfh2ksf10004p0ug2uxn1hyp","_id":"cjfh2nrw7007rp0ugvswndxhw"}],"PostTag":[{"post_id":"cjfh2ksfq000lp0ugpsik3j5o","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksfv000pp0ug0lqkt1lh"},{"post_id":"cjfh2ksft000np0ugiwnuasc5","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksfx000tp0ugp6cxho5b"},{"post_id":"cjfh2ksfw000rp0ugqd3eq417","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksg0000wp0ugsxegx2wo"},{"post_id":"cjfh2ksfx000up0ugxsx2s9a0","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksg90010p0ug11ksk2nw"},{"post_id":"cjfh2kseq0001p0ugp0avyayp","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksgb0013p0ug6gqexf78"},{"post_id":"cjfh2kseq0001p0ugp0avyayp","tag_id":"cjfh2ksfd000ap0ug81g05eu4","_id":"cjfh2ksge0017p0ug9g2gkz1f"},{"post_id":"cjfh2kseq0001p0ugp0avyayp","tag_id":"cjfh2ksfk000fp0ugqiapy5bw","_id":"cjfh2ksgg001ap0ugf67j0id9"},{"post_id":"cjfh2kseq0001p0ugp0avyayp","tag_id":"cjfh2ksfp000kp0ug8kv85ggh","_id":"cjfh2ksgh001ep0ugsztwj3jc"},{"post_id":"cjfh2kseq0001p0ugp0avyayp","tag_id":"cjfh2ksfv000qp0ugj7gcozra","_id":"cjfh2ksgk001hp0ugmi1x5ayp"},{"post_id":"cjfh2ksg0000xp0ug1kyxzci8","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksgm001lp0ugljfe52ba"},{"post_id":"cjfh2ksga0011p0ugbfed7yv5","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksgw001op0ugflbaxkgg"},{"post_id":"cjfh2ksgc0014p0ugiswfcwzj","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksgy001rp0ugfh45eycr"},{"post_id":"cjfh2ksgk001ip0ug2oodqdfx","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksh3001vp0ug0rijqkdv"},{"post_id":"cjfh2ksgm001mp0ugl7zlumom","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksh5001yp0ugfgvsncd1"},{"post_id":"cjfh2ksey0003p0ugv37rkk3r","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2kshb0029p0ug254xnow3"},{"post_id":"cjfh2ksey0003p0ugv37rkk3r","tag_id":"cjfh2ksgd0016p0ugirma20k3","_id":"cjfh2kshe002cp0ugk26eyswv"},{"post_id":"cjfh2ksey0003p0ugv37rkk3r","tag_id":"cjfh2ksgh001dp0ug5qsvggva","_id":"cjfh2kshf002gp0ugx2uee7zk"},{"post_id":"cjfh2ksey0003p0ugv37rkk3r","tag_id":"cjfh2ksgl001kp0ug6zg2i47x","_id":"cjfh2kshh002jp0ughots2hej"},{"post_id":"cjfh2ksey0003p0ugv37rkk3r","tag_id":"cjfh2ksgy001sp0ugqxnyo0g3","_id":"cjfh2kshk002np0ugtrms9ykt"},{"post_id":"cjfh2ksey0003p0ugv37rkk3r","tag_id":"cjfh2ksh60021p0ug9g6tlnek","_id":"cjfh2kshl002qp0ugcosjoy0n"},{"post_id":"cjfh2ksf60006p0ugay9k0zzd","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2kshm002up0ug3qa16a46"},{"post_id":"cjfh2ksf60006p0ugay9k0zzd","tag_id":"cjfh2kshe002dp0ugv7t81jue","_id":"cjfh2ksho002xp0ugfxakibty"},{"post_id":"cjfh2ksf90007p0ugh0yme2zl","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2kshw003dp0ugu90ofgoz"},{"post_id":"cjfh2ksf90007p0ugh0yme2zl","tag_id":"cjfh2kshi002kp0ugeq7pzn9n","_id":"cjfh2kshy003gp0ugcz493a5f"},{"post_id":"cjfh2ksf90007p0ugh0yme2zl","tag_id":"cjfh2kshl002rp0ugm68b81br","_id":"cjfh2ksi0003kp0ugfz2xwvtd"},{"post_id":"cjfh2ksf90007p0ugh0yme2zl","tag_id":"cjfh2kshq0030p0ugb2h5ucr8","_id":"cjfh2ksi9003np0ugi3an0bqa"},{"post_id":"cjfh2ksf90007p0ugh0yme2zl","tag_id":"cjfh2kshs0035p0ughk8zo05c","_id":"cjfh2ksid003rp0ughtpydmyr"},{"post_id":"cjfh2ksfb0008p0ugq47b1c13","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksiq0049p0ugqwd5u7w7"},{"post_id":"cjfh2ksfb0008p0ugq47b1c13","tag_id":"cjfh2kshv003ap0ugg3f5cnic","_id":"cjfh2ksir004cp0ug1mgh9m5e"},{"post_id":"cjfh2ksfb0008p0ugq47b1c13","tag_id":"cjfh2kshy003hp0ugz3pg3s1q","_id":"cjfh2ksis004fp0ugxzcu2vrt"},{"post_id":"cjfh2ksfb0008p0ugq47b1c13","tag_id":"cjfh2ksic003qp0uga6eeszse","_id":"cjfh2ksis004hp0ugm263cve9"},{"post_id":"cjfh2ksfb0008p0ugq47b1c13","tag_id":"cjfh2ksii003wp0ugskkrdjd7","_id":"cjfh2ksis004kp0ughsq3ya1y"},{"post_id":"cjfh2ksfb0008p0ugq47b1c13","tag_id":"cjfh2ksil0041p0ug7kfgomdm","_id":"cjfh2ksit004mp0ugaj182s8u"},{"post_id":"cjfh2ksff000bp0ugl5rckud5","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksit004op0ugdg1e7rba"},{"post_id":"cjfh2ksff000bp0ugl5rckud5","tag_id":"cjfh2ksio0046p0ug3ldfmv2n","_id":"cjfh2ksit004pp0ugnp3pg5uq"},{"post_id":"cjfh2ksff000bp0ugl5rckud5","tag_id":"cjfh2ksir004ep0ug8mwqvrqs","_id":"cjfh2ksiu004rp0ugzs1trih3"},{"post_id":"cjfh2ksff000bp0ugl5rckud5","tag_id":"cjfh2ksis004jp0ugv2zxuc5j","_id":"cjfh2ksiu004sp0uglosz7lp0"},{"post_id":"cjfh2ksfh000cp0ugqu5r90f9","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksiv004yp0ugjmtb6z45"},{"post_id":"cjfh2ksfh000cp0ugqu5r90f9","tag_id":"cjfh2ksit004np0ugo4lqehxw","_id":"cjfh2ksiv004zp0ugodliug5t"},{"post_id":"cjfh2ksfh000cp0ugqu5r90f9","tag_id":"cjfh2ksiu004qp0ugh8ekckdd","_id":"cjfh2ksiv0051p0ugx34pe1iz"},{"post_id":"cjfh2ksfh000cp0ugqu5r90f9","tag_id":"cjfh2ksiu004tp0ugc9fqx8m3","_id":"cjfh2ksiv0052p0ugcnl1t1yt"},{"post_id":"cjfh2ksfh000cp0ugqu5r90f9","tag_id":"cjfh2ksiu004up0ugk640wa0f","_id":"cjfh2ksiv0054p0ugp707dkbs"},{"post_id":"cjfh2ksfh000cp0ugqu5r90f9","tag_id":"cjfh2ksiu004vp0ugu7rd86n2","_id":"cjfh2ksiv0055p0ug1fpptq1u"},{"post_id":"cjfh2ksfh000cp0ugqu5r90f9","tag_id":"cjfh2ksiu004wp0ug28dpmbqx","_id":"cjfh2ksiw0057p0ugnaebyibo"},{"post_id":"cjfh2ksfl000gp0ug2ta13zp1","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksiw0058p0ug4n3y1e6i"},{"post_id":"cjfh2ksfl000gp0ug2ta13zp1","tag_id":"cjfh2ksiu004xp0ugtf9mvlyz","_id":"cjfh2ksiw0059p0ug5yekjiu8"},{"post_id":"cjfh2ksfl000gp0ug2ta13zp1","tag_id":"cjfh2ksiv0050p0ug2tt2u6vo","_id":"cjfh2ksiw005bp0ugzd91v9iq"},{"post_id":"cjfh2ksfl000gp0ug2ta13zp1","tag_id":"cjfh2ksiv0053p0ug98o9cuye","_id":"cjfh2ksiw005cp0ugy7i1759e"},{"post_id":"cjfh2ksfn000ip0ugqguvco5c","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksiw005ep0ug0vmojsh6"},{"post_id":"cjfh2ksfn000ip0ugqguvco5c","tag_id":"cjfh2ksiv0056p0ug3lyst9nm","_id":"cjfh2ksiw005fp0ugz73lm22j"},{"post_id":"cjfh2ksfn000ip0ugqguvco5c","tag_id":"cjfh2ksiw005ap0ug2uvn4fiw","_id":"cjfh2ksix005hp0ugv6g3xx7e"},{"post_id":"cjfh2ksge0018p0ugkexptpxj","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksix005jp0ugn3fll210"},{"post_id":"cjfh2ksge0018p0ugkexptpxj","tag_id":"cjfh2ksiw005dp0ugytnfdblp","_id":"cjfh2ksix005kp0ugjq5fkxl7"},{"post_id":"cjfh2ksge0018p0ugkexptpxj","tag_id":"cjfh2ksiw005gp0uge1ntohph","_id":"cjfh2ksix005mp0ugr69ty9cm"},{"post_id":"cjfh2ksgg001bp0ug43yjk99c","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksix005np0ugudfe0fjq"},{"post_id":"cjfh2ksgg001bp0ug43yjk99c","tag_id":"cjfh2ksix005ip0ugym2ugx05","_id":"cjfh2ksix005pp0ugoejhct6p"},{"post_id":"cjfh2ksgi001fp0ugyoguuqdj","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksix005qp0ugu5194a27"},{"post_id":"cjfh2ksgi001fp0ugyoguuqdj","tag_id":"cjfh2ksix005lp0ug4al10x5i","_id":"cjfh2ksiz005sp0ug6css1ipb"},{"post_id":"cjfh2ksgx001pp0ugvkero60x","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksj0005tp0ugg4rbi4ke"},{"post_id":"cjfh2ksgx001pp0ugvkero60x","tag_id":"cjfh2ksix005op0ugjc45omkq","_id":"cjfh2ksj0005vp0ugu2qgkz7c"},{"post_id":"cjfh2ksgz001tp0ughrrtd847","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksj0005wp0ugj529hql3"},{"post_id":"cjfh2ksgz001tp0ughrrtd847","tag_id":"cjfh2ksix005op0ugjc45omkq","_id":"cjfh2ksj0005xp0ugpla0y65r"},{"post_id":"cjfh2ksh3001wp0ug0trswaeh","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksj1005zp0ugjzuyivos"},{"post_id":"cjfh2ksh3001wp0ug0trswaeh","tag_id":"cjfh2ksj0005up0ugwmbzj59n","_id":"cjfh2ksj10060p0ugavhse75s"},{"post_id":"cjfh2ksh5001zp0uga6t7j1d4","tag_id":"cjfh2ksj0005yp0ug8obqzstt","_id":"cjfh2ksj20062p0ugbx1qgg9r"},{"post_id":"cjfh2ksh70022p0ugnc3fplco","tag_id":"cjfh2ksj10061p0ugzpgugx1s","_id":"cjfh2ksj20064p0ugxez4cf5n"},{"post_id":"cjfh2ksh80024p0ugsns49ga2","tag_id":"cjfh2ksj20063p0ugqo70fsj9","_id":"cjfh2ksj30066p0ug5shqw2ti"},{"post_id":"cjfh2ksha0027p0ugs494kxdr","tag_id":"cjfh2ksj10061p0ugzpgugx1s","_id":"cjfh2ksj40068p0ug82xbmh4x"},{"post_id":"cjfh2kshc002ap0ug1xt7zx9s","tag_id":"cjfh2ksj30067p0ugopt37jrt","_id":"cjfh2ksj4006ap0ugfsjddtio"},{"post_id":"cjfh2kshe002ep0ugfojbydkj","tag_id":"cjfh2ksj40069p0ug6z7eibly","_id":"cjfh2ksj4006cp0ughs6e1htl"},{"post_id":"cjfh2kshg002hp0ugiomsvcij","tag_id":"cjfh2ksiv0056p0ug3lyst9nm","_id":"cjfh2ksj5006ep0ugjgtrs81z"},{"post_id":"cjfh2kshj002lp0ug2o8lzkq3","tag_id":"cjfh2ksj5006dp0ugu2zqxte9","_id":"cjfh2ksj5006gp0ugudqpehsm"},{"post_id":"cjfh2kshk002op0ugo0vdjgpb","tag_id":"cjfh2ksj5006fp0ug0gc2s5b0","_id":"cjfh2ksj6006ip0ugbijhsk8n"},{"post_id":"cjfh2kshm002sp0ugowvh7z8t","tag_id":"cjfh2ksj5006hp0ugnten2ix4","_id":"cjfh2ksj6006kp0ugpv1wu8qp"},{"post_id":"cjfh2kshn002vp0ugtl71o3rv","tag_id":"cjfh2ksj6006jp0ugkc9qpyac","_id":"cjfh2ksj6006mp0ugi9cgky36"},{"post_id":"cjfh2kshp002yp0ugv602z9bz","tag_id":"cjfh2ksj6006lp0ugtin9r65c","_id":"cjfh2ksj7006op0ugidyzz0iy"},{"post_id":"cjfh2kshq0031p0ug38qgapd8","tag_id":"cjfh2ksj6006np0ughk33tepp","_id":"cjfh2ksj7006qp0ughn4fed0u"},{"post_id":"cjfh2kshr0033p0ugax4j97up","tag_id":"cjfh2ksj7006pp0ug8zpbufkq","_id":"cjfh2ksj7006sp0ugylez9cm0"},{"post_id":"cjfh2kshs0036p0ugd1k6gk21","tag_id":"cjfh2ksj7006rp0ug0wjhzt8o","_id":"cjfh2ksj8006up0ugruviolb7"},{"post_id":"cjfh2kshu0038p0ugnbxzolui","tag_id":"cjfh2ksj7006tp0ugpu5kmh8k","_id":"cjfh2ksj9006wp0ugr3yoxlln"},{"post_id":"cjfh2kshv003bp0ug97gnaisq","tag_id":"cjfh2ksj8006vp0ug6sbhk2b7","_id":"cjfh2ksj9006yp0ugbietymfx"},{"post_id":"cjfh2kshw003ep0ugdf1s9ey5","tag_id":"cjfh2ksiu004wp0ug28dpmbqx","_id":"cjfh2ksja0070p0ugs46okw1q"},{"post_id":"cjfh2kshy003ip0ugtmp87x0t","tag_id":"cjfh2ksj9006zp0ug2vnszl1h","_id":"cjfh2ksja0072p0ugro98vcx1"},{"post_id":"cjfh2ksi0003lp0ugqhaf5u43","tag_id":"cjfh2ksja0071p0ugky4yig8o","_id":"cjfh2ksjb0074p0ugtntipuqc"},{"post_id":"cjfh2ksia003op0ug718vq347","tag_id":"cjfh2ksjb0073p0ugqotqekm6","_id":"cjfh2ksjb0076p0ugva17n2vh"},{"post_id":"cjfh2ksie003sp0ug860ldue9","tag_id":"cjfh2ksjb0075p0uga39aagdc","_id":"cjfh2ksjc0079p0ugexvi3hkg"},{"post_id":"cjfh2ksie003sp0ug860ldue9","tag_id":"cjfh2ksjb0077p0ug86t6903k","_id":"cjfh2ksjc007ap0ugi4s8oary"},{"post_id":"cjfh2ksif003up0ugegmj9yj9","tag_id":"cjfh2ksjc0078p0ugwv2eqvhx","_id":"cjfh2ksjc007cp0ugnrdtu5av"},{"post_id":"cjfh2ksii003xp0ugvyvpf1je","tag_id":"cjfh2ksiu004qp0ugh8ekckdd","_id":"cjfh2ksjc007ep0ugr1o65vs7"},{"post_id":"cjfh2ksik003zp0ug5lbhmj6l","tag_id":"cjfh2ksjc007dp0ugsnaezy1g","_id":"cjfh2ksjd007gp0ug6g68rrif"},{"post_id":"cjfh2ksim0042p0ugoqt8hlze","tag_id":"cjfh2ksf50005p0ug71skuvs9","_id":"cjfh2ksje007ip0ug1ds3zhzb"},{"post_id":"cjfh2ksim0042p0ugoqt8hlze","tag_id":"cjfh2ksjd007fp0ug0injxhz6","_id":"cjfh2ksje007jp0ugw862u2r3"},{"post_id":"cjfh2ksin0044p0ugzjvrg9yc","tag_id":"cjfh2ksjd007hp0ugfqr20w16","_id":"cjfh2ksje007lp0ugqsorvoal"},{"post_id":"cjfh2ksio0047p0ugeoy5dye2","tag_id":"cjfh2ksje007kp0ug4fljvs05","_id":"cjfh2ksjf007np0ugzkvs927m"},{"post_id":"cjfh2ksiq004ap0ugc96e9fok","tag_id":"cjfh2ksje007mp0ug9a02hu1a","_id":"cjfh2ksjf007op0ugq2l377n1"}],"Tag":[{"name":"READING NOTES","_id":"cjfh2ksf50005p0ug71skuvs9"},{"name":"netty","_id":"cjfh2ksfd000ap0ug81g05eu4"},{"name":"Persistent Connection","_id":"cjfh2ksfk000fp0ugqiapy5bw"},{"name":"memory allocation","_id":"cjfh2ksfp000kp0ug8kv85ggh"},{"name":"Noshorn","_id":"cjfh2ksfv000qp0ugj7gcozra"},{"name":"spring mvc static resource handle","_id":"cjfh2ksgd0016p0ugirma20k3"},{"name":"web frontend tuning","_id":"cjfh2ksgh001dp0ug5qsvggva"},{"name":"NullPointerException","_id":"cjfh2ksgl001kp0ug6zg2i47x"},{"name":"Windows","_id":"cjfh2ksgy001sp0ugqxnyo0g3"},{"name":"PhantomJS","_id":"cjfh2ksh60021p0ug9g6tlnek"},{"name":"linux mysql tunning","_id":"cjfh2kshe002dp0ugv7t81jue"},{"name":"Upgrade header","_id":"cjfh2kshi002kp0ugeq7pzn9n"},{"name":"linux kill","_id":"cjfh2kshl002rp0ugm68b81br"},{"name":"elasticsearch","_id":"cjfh2kshq0030p0ugb2h5ucr8"},{"name":"Cache coherence","_id":"cjfh2kshs0035p0ughk8zo05c"},{"name":"mysql","_id":"cjfh2kshv003ap0ugg3f5cnic"},{"name":"Spring Data Repositories","_id":"cjfh2kshy003hp0ugz3pg3s1q"},{"name":"加盐密码哈希","_id":"cjfh2ksic003qp0uga6eeszse"},{"name":"CopyOnWrite","_id":"cjfh2ksii003wp0ugskkrdjd7"},{"name":"log","_id":"cjfh2ksil0041p0ug7kfgomdm"},{"name":"zsh","_id":"cjfh2ksio0046p0ug3ldfmv2n"},{"name":"javadoc","_id":"cjfh2ksir004ep0ug8mwqvrqs"},{"name":"NoClassDefFoundError","_id":"cjfh2ksis004jp0ugv2zxuc5j"},{"name":"OOM Killer","_id":"cjfh2ksit004np0ugo4lqehxw"},{"name":"vagrant","_id":"cjfh2ksiu004qp0ugh8ekckdd"},{"name":"cxf unexpected element","_id":"cjfh2ksiu004tp0ugc9fqx8m3"},{"name":"构建高可用系统","_id":"cjfh2ksiu004up0ugk640wa0f"},{"name":"tomcat","_id":"cjfh2ksiu004vp0ugu7rd86n2"},{"name":"maven","_id":"cjfh2ksiu004wp0ug28dpmbqx"},{"name":"tengine","_id":"cjfh2ksiu004xp0ugtf9mvlyz"},{"name":"web-starter-kit","_id":"cjfh2ksiv0050p0ug2tt2u6vo"},{"name":"microservice","_id":"cjfh2ksiv0053p0ug98o9cuye"},{"name":"docker","_id":"cjfh2ksiv0056p0ug3lyst9nm"},{"name":"java","_id":"cjfh2ksiw005ap0ug2uvn4fiw"},{"name":"nashorn","_id":"cjfh2ksiw005dp0ugytnfdblp"},{"name":"java reflect","_id":"cjfh2ksiw005gp0uge1ntohph"},{"name":"springloaded","_id":"cjfh2ksix005ip0ugym2ugx05"},{"name":"spring-session","_id":"cjfh2ksix005lp0ug4al10x5i"},{"name":"nginx plus","_id":"cjfh2ksix005op0ugjc45omkq"},{"name":"服务发现","_id":"cjfh2ksj0005up0ugwmbzj59n"},{"name":"be happy","_id":"cjfh2ksj0005yp0ug8obqzstt"},{"name":"cxf","_id":"cjfh2ksj10061p0ugzpgugx1s"},{"name":"webservice","_id":"cjfh2ksj20063p0ugqo70fsj9"},{"name":"数据库版本","_id":"cjfh2ksj30067p0ugopt37jrt"},{"name":"依赖管理","_id":"cjfh2ksj40069p0ug6z7eibly"},{"name":"dubbo","_id":"cjfh2ksj5006dp0ugu2zqxte9"},{"name":"环境感知","_id":"cjfh2ksj5006fp0ug0gc2s5b0"},{"name":"hessian","_id":"cjfh2ksj5006hp0ugnten2ix4"},{"name":"Google Java编程风格指南","_id":"cjfh2ksj6006jp0ugkc9qpyac"},{"name":"hibernate","_id":"cjfh2ksj6006lp0ugtin9r65c"},{"name":"java序列化","_id":"cjfh2ksj6006np0ughk33tepp"},{"name":"jsr303","_id":"cjfh2ksj7006pp0ug8zpbufkq"},{"name":"EXCEPTION","_id":"cjfh2ksj7006rp0ug0wjhzt8o"},{"name":"KRYO","_id":"cjfh2ksj7006tp0ugpu5kmh8k"},{"name":"日志优化","_id":"cjfh2ksj8006vp0ug6sbhk2b7"},{"name":"常用命令","_id":"cjfh2ksj9006zp0ug2vnszl1h"},{"name":"java properties copy","_id":"cjfh2ksja0071p0ugky4yig8o"},{"name":"序列化","_id":"cjfh2ksjb0073p0ugqotqekm6"},{"name":"SSH TUNNELING","_id":"cjfh2ksjb0075p0uga39aagdc"},{"name":"JMX","_id":"cjfh2ksjb0077p0ug86t6903k"},{"name":"Performance","_id":"cjfh2ksjc0078p0ugwv2eqvhx"},{"name":"web cluster","_id":"cjfh2ksjc007dp0ugsnaezy1g"},{"name":"react","_id":"cjfh2ksjd007fp0ug0injxhz6"},{"name":"zero copy","_id":"cjfh2ksjd007hp0ugfqr20w16"},{"name":"share","_id":"cjfh2ksje007kp0ug4fljvs05"},{"name":"ZOOKEEPER","_id":"cjfh2ksje007mp0ug9a02hu1a"}]}}